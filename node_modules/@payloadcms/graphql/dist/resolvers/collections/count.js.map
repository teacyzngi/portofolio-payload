{"version":3,"sources":["../../../src/resolvers/collections/count.ts"],"sourcesContent":["import type { Collection, PayloadRequest, Where } from 'payload'\n\nimport { countOperation, isolateObjectProperty } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport type Resolver = (\n  _: unknown,\n  args: {\n    data: Record<string, unknown>\n    locale?: string\n    trash?: boolean\n    where?: Where\n  },\n  context: {\n    req: PayloadRequest\n  },\n) => Promise<{ totalDocs: number }>\n\nexport function countResolver(collection: Collection): Resolver {\n  return async function resolver(_, args, context: Context) {\n    let { req } = context\n    const locale = req.locale\n    const fallbackLocale = req.fallbackLocale\n    req = isolateObjectProperty(req, 'locale')\n    req = isolateObjectProperty(req, 'fallbackLocale')\n    req.locale = args.locale || locale\n    req.fallbackLocale = fallbackLocale\n    context.req = req\n\n    const options = {\n      collection,\n      req: isolateObjectProperty(req, 'transactionID'),\n      trash: args.trash,\n      where: args.where,\n    }\n\n    const results = await countOperation(options)\n    return results\n  }\n}\n"],"names":["countOperation","isolateObjectProperty","countResolver","collection","resolver","_","args","context","req","locale","fallbackLocale","options","trash","where","results"],"mappings":"AAEA,SAASA,cAAc,EAAEC,qBAAqB,QAAQ,UAAS;AAiB/D,OAAO,SAASC,cAAcC,UAAsB;IAClD,OAAO,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QACtD,IAAI,EAAEC,GAAG,EAAE,GAAGD;QACd,MAAME,SAASD,IAAIC,MAAM;QACzB,MAAMC,iBAAiBF,IAAIE,cAAc;QACzCF,MAAMP,sBAAsBO,KAAK;QACjCA,MAAMP,sBAAsBO,KAAK;QACjCA,IAAIC,MAAM,GAAGH,KAAKG,MAAM,IAAIA;QAC5BD,IAAIE,cAAc,GAAGA;QACrBH,QAAQC,GAAG,GAAGA;QAEd,MAAMG,UAAU;YACdR;YACAK,KAAKP,sBAAsBO,KAAK;YAChCI,OAAON,KAAKM,KAAK;YACjBC,OAAOP,KAAKO,KAAK;QACnB;QAEA,MAAMC,UAAU,MAAMd,eAAeW;QACrC,OAAOG;IACT;AACF"}