{"version":3,"sources":["../../src/schema/fieldToSchemaMap.ts"],"sourcesContent":["import type { GraphQLArgumentConfig, GraphQLFieldConfig, GraphQLOutputType } from 'graphql'\nimport type {\n  ArrayField,\n  BlocksField,\n  CheckboxField,\n  CodeField,\n  CollapsibleField,\n  DateField,\n  EmailField,\n  Field,\n  FlattenedJoinField,\n  GraphQLInfo,\n  GroupField,\n  JoinField,\n  JSONField,\n  NumberField,\n  PointField,\n  RadioField,\n  RelationshipField,\n  RichTextAdapter,\n  RichTextField,\n  RowField,\n  SanitizedConfig,\n  SelectField,\n  TabsField,\n  TextareaField,\n  TextField,\n  UploadField,\n} from 'payload'\n\nimport {\n  GraphQLBoolean,\n  GraphQLEnumType,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLUnionType,\n} from 'graphql'\nimport { DateTimeResolver, EmailAddressResolver } from 'graphql-scalars'\nimport { combineQueries, createDataloaderCacheKey, MissingEditorProp, toWords } from 'payload'\nimport { fieldAffectsData, tabHasName } from 'payload/shared'\n\nimport type { Context } from '../resolvers/types.js'\n\nimport { GraphQLJSON } from '../packages/graphql-type-json/index.js'\nimport { combineParentName } from '../utilities/combineParentName.js'\nimport { formatName } from '../utilities/formatName.js'\nimport { formatOptions } from '../utilities/formatOptions.js'\nimport { resolveSelect} from '../utilities/select.js'\nimport { buildObjectType, type ObjectTypeConfig } from './buildObjectType.js'\nimport { isFieldNullable } from './isFieldNullable.js'\nimport { withNullableType } from './withNullableType.js'\n\nfunction formattedNameResolver({\n  field,\n  ...rest\n}: { field: Field } & GraphQLFieldConfig<any, Context, any>): GraphQLFieldConfig<any, Context, any> {\n  if ('name' in field) {\n    if (formatName(field.name) !== field.name) {\n      return {\n        ...rest,\n        extensions: { ...rest.extensions, field },\n        resolve: (parent) => parent[field.name],\n      }\n    }\n  }\n  return rest\n}\n\ntype SharedArgs = {\n  collectionSlug?: string\n  config: SanitizedConfig\n  forceNullable?: boolean\n  graphqlResult: GraphQLInfo\n  newlyCreatedBlockType: GraphQLObjectType\n  objectTypeConfig: ObjectTypeConfig\n  parentIsLocalized?: boolean\n  parentName: string\n}\n\ntype GenericFieldToSchemaMap = (args: { field: Field } & SharedArgs) => ObjectTypeConfig\n\ntype FieldToSchemaMap = {\n  array: (args: { field: ArrayField } & SharedArgs) => ObjectTypeConfig\n  blocks: (args: { field: BlocksField } & SharedArgs) => ObjectTypeConfig\n  checkbox: (args: { field: CheckboxField } & SharedArgs) => ObjectTypeConfig\n  code: (args: { field: CodeField } & SharedArgs) => ObjectTypeConfig\n  collapsible: (args: { field: CollapsibleField } & SharedArgs) => ObjectTypeConfig\n  date: (args: { field: DateField } & SharedArgs) => ObjectTypeConfig\n  email: (args: { field: EmailField } & SharedArgs) => ObjectTypeConfig\n  group: (args: { field: GroupField } & SharedArgs) => ObjectTypeConfig\n  join: (args: { field: JoinField } & SharedArgs) => ObjectTypeConfig\n  json: (args: { field: JSONField } & SharedArgs) => ObjectTypeConfig\n  number: (args: { field: NumberField } & SharedArgs) => ObjectTypeConfig\n  point: (args: { field: PointField } & SharedArgs) => ObjectTypeConfig\n  radio: (args: { field: RadioField } & SharedArgs) => ObjectTypeConfig\n  relationship: (args: { field: RelationshipField } & SharedArgs) => ObjectTypeConfig\n  richText: (args: { field: RichTextField } & SharedArgs) => ObjectTypeConfig\n  row: (args: { field: RowField } & SharedArgs) => ObjectTypeConfig\n  select: (args: { field: SelectField } & SharedArgs) => ObjectTypeConfig\n  tabs: (args: { field: TabsField } & SharedArgs) => ObjectTypeConfig\n  text: (args: { field: TextField } & SharedArgs) => ObjectTypeConfig\n  textarea: (args: { field: TextareaField } & SharedArgs) => ObjectTypeConfig\n  upload: (args: { field: UploadField } & SharedArgs) => ObjectTypeConfig\n}\n\nexport const fieldToSchemaMap: FieldToSchemaMap = {\n  array: ({\n    config,\n    field,\n    forceNullable,\n    graphqlResult,\n    objectTypeConfig,\n    parentIsLocalized,\n    parentName,\n  }) => {\n    const interfaceName =\n      field?.interfaceName || combineParentName(parentName, toWords(field.name, true))\n\n    if (!graphqlResult.types.arrayTypes[interfaceName]) {\n      const objectType = buildObjectType({\n        name: interfaceName,\n        config,\n        fields: field.fields,\n        forceNullable: isFieldNullable({ field, forceNullable, parentIsLocalized }),\n        graphqlResult,\n        parentIsLocalized: field.localized || parentIsLocalized,\n        parentName: interfaceName,\n      })\n\n      if (Object.keys(objectType.getFields()).length) {\n        graphqlResult.types.arrayTypes[interfaceName] = objectType\n      }\n    }\n\n    if (!graphqlResult.types.arrayTypes[interfaceName]) {\n      return objectTypeConfig\n    }\n\n    const arrayType = new GraphQLList(\n      new GraphQLNonNull(graphqlResult.types.arrayTypes[interfaceName]),\n    )\n\n    return {\n      ...objectTypeConfig,\n      [formatName(field.name)]: formattedNameResolver({\n        type: withNullableType({ type: arrayType, field, parentIsLocalized }) as GraphQLOutputType,\n        field,\n      }),\n    }\n  },\n  blocks: ({\n    config,\n    field,\n    forceNullable,\n    graphqlResult,\n    objectTypeConfig,\n    parentIsLocalized,\n    parentName,\n  }) => {\n    const blockTypes: GraphQLObjectType<any, any>[] = (\n      field.blockReferences ?? field.blocks\n    ).reduce((acc, _block) => {\n      const blockSlug = typeof _block === 'string' ? _block : _block.slug\n      if (!graphqlResult.types.blockTypes[blockSlug]) {\n        // TODO: iterate over blocks mapped to block slug in v4, or pass through payload.blocks\n        const block =\n          typeof _block === 'string' ? config.blocks.find((b) => b.slug === _block) : _block\n\n        const interfaceName =\n          block?.interfaceName || block?.graphQL?.singularName || toWords(block.slug, true)\n\n        const objectType = buildObjectType({\n          name: interfaceName,\n          config,\n          fields: [\n            ...block.fields,\n            {\n              name: 'blockType',\n              type: 'text',\n            },\n          ],\n          forceNullable,\n          graphqlResult,\n          parentIsLocalized,\n          parentName: interfaceName,\n        })\n\n        if (Object.keys(objectType.getFields()).length) {\n          graphqlResult.types.blockTypes[block.slug] = objectType\n        }\n      }\n\n      if (graphqlResult.types.blockTypes[blockSlug]) {\n        acc.push(graphqlResult.types.blockTypes[blockSlug])\n      }\n\n      return acc\n    }, [])\n\n    if (blockTypes.length === 0) {\n      return objectTypeConfig\n    }\n\n    const fullName = combineParentName(parentName, toWords(field.name, true))\n\n    const type = new GraphQLList(\n      new GraphQLNonNull(\n        new GraphQLUnionType({\n          name: fullName,\n          resolveType: (data) => graphqlResult.types.blockTypes[data.blockType].name,\n          types: blockTypes,\n        }),\n      ),\n    ) as GraphQLOutputType\n\n    return {\n      ...objectTypeConfig,\n      [formatName(field.name)]: formattedNameResolver({\n        type: withNullableType({ type, field, parentIsLocalized }) as GraphQLOutputType,\n        field,\n      }),\n    }\n  },\n  checkbox: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: GraphQLBoolean,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  code: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: GraphQLString,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  collapsible: ({\n    collectionSlug,\n    config,\n    field,\n    forceNullable,\n    graphqlResult,\n    newlyCreatedBlockType,\n    objectTypeConfig,\n    parentIsLocalized,\n    parentName,\n  }) =>\n    field.fields.reduce((objectTypeConfigWithCollapsibleFields, subField) => {\n      const addSubField: GenericFieldToSchemaMap = fieldToSchemaMap[subField.type]\n      if (addSubField) {\n        return addSubField({\n          collectionSlug,\n          config,\n          field: subField,\n          forceNullable,\n          graphqlResult,\n          newlyCreatedBlockType,\n          objectTypeConfig: objectTypeConfigWithCollapsibleFields,\n          parentIsLocalized,\n          parentName,\n        })\n      }\n      return objectTypeConfigWithCollapsibleFields\n    }, objectTypeConfig),\n  date: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: DateTimeResolver,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  email: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: EmailAddressResolver,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  group: ({\n    collectionSlug,\n    config,\n    field,\n    forceNullable,\n    graphqlResult,\n    newlyCreatedBlockType,\n    objectTypeConfig,\n    parentIsLocalized,\n    parentName,\n  }) => {\n    if (fieldAffectsData(field)) {\n      const interfaceName =\n        field?.interfaceName || combineParentName(parentName, toWords(field.name, true))\n\n      if (!graphqlResult.types.groupTypes[interfaceName]) {\n        const objectType = buildObjectType({\n          name: interfaceName,\n          config,\n          fields: field.fields,\n          forceNullable: isFieldNullable({ field, forceNullable, parentIsLocalized }),\n          graphqlResult,\n          parentIsLocalized: field.localized || parentIsLocalized,\n          parentName: interfaceName,\n        })\n\n        if (Object.keys(objectType.getFields()).length) {\n          graphqlResult.types.groupTypes[interfaceName] = objectType\n        }\n      }\n\n      if (!graphqlResult.types.groupTypes[interfaceName]) {\n        return objectTypeConfig\n      }\n\n      return {\n        ...objectTypeConfig,\n        [formatName(field.name)]: {\n          type: graphqlResult.types.groupTypes[interfaceName],\n          extensions: { field },\n          resolve: (parent, args, context) => {\n            return {\n              ...parent[field.name],\n              _id: parent._id ?? parent.id,\n            }\n          },\n        } satisfies GraphQLFieldConfig<any, Context, any>,\n      }\n    } else {\n      return field.fields.reduce((objectTypeConfigWithCollapsibleFields, subField) => {\n        const addSubField: GenericFieldToSchemaMap = fieldToSchemaMap[subField.type]\n        if (addSubField) {\n          return addSubField({\n            collectionSlug,\n            config,\n            field: subField,\n            forceNullable,\n            graphqlResult,\n            newlyCreatedBlockType,\n            objectTypeConfig: objectTypeConfigWithCollapsibleFields,\n            parentIsLocalized,\n            parentName,\n          })\n        }\n        return objectTypeConfigWithCollapsibleFields\n      }, objectTypeConfig)\n    }\n  },\n  join: ({ collectionSlug, field, graphqlResult, objectTypeConfig, parentName }) => {\n    const joinName = combineParentName(parentName, toWords(field.name, true))\n\n    const joinType: GraphQLFieldConfig<any, Context, any> = {\n      type: new GraphQLObjectType({\n        name: joinName,\n        fields: {\n          docs: {\n            type: new GraphQLNonNull(\n              Array.isArray(field.collection)\n                ? GraphQLJSON\n                : new GraphQLList(\n                    new GraphQLNonNull(graphqlResult.collections[field.collection].graphQL.type),\n                  ),\n            ),\n          },\n          hasNextPage: { type: new GraphQLNonNull(GraphQLBoolean) },\n          totalDocs: { type: GraphQLInt },\n        },\n      }),\n      args: {\n        count: { type: GraphQLBoolean },\n        limit: {\n          type: GraphQLInt,\n        },\n        page: {\n          type: GraphQLInt,\n        },\n        sort: {\n          type: GraphQLString,\n        },\n        where: {\n          type: Array.isArray(field.collection)\n            ? GraphQLJSON\n            : graphqlResult.collections[field.collection].graphQL.whereInputType,\n        },\n      },\n      extensions: {\n        complexity: typeof field?.graphQL?.complexity === 'number' ? field.graphQL.complexity : 10,\n        field,\n      },\n      async resolve(parent, args, context, info) {\n        const { collection } = field\n        const { count = false, limit, page, sort, where } = args\n        const { req } = context\n\n        const draft = Boolean(args.draft ?? context.req.query?.draft)\n        const select = resolveSelect(info, context.select)\n\n        const targetField = (field as FlattenedJoinField).targetField\n\n        const fullWhere = combineQueries(\n          where,\n          Array.isArray(targetField.relationTo)\n            ? {\n                [field.on]: {\n                  equals: {\n                    relationTo: collectionSlug,\n                    value: parent._id ?? parent.id,\n                  },\n                },\n              }\n            : {\n                [field.on]: { equals: parent._id ?? parent.id },\n              },\n        )\n\n        if (Array.isArray(collection)) {\n          throw new Error('GraphQL with array of join.field.collection is not implemented')\n        }\n\n        const { docs, totalDocs } = await req.payload.find({\n          collection,\n          depth: 0,\n          draft,\n          fallbackLocale: req.fallbackLocale,\n          // Fetch one extra document to determine if there are more documents beyond the requested limit (used for hasNextPage calculation).\n          limit: typeof limit === 'number' && limit > 0 ? limit + 1 : 0,\n          locale: req.locale,\n          overrideAccess: false,\n          page,\n          pagination: count ? true : false,\n          req,\n          select,\n          sort,\n          where: fullWhere,\n        })\n\n        let shouldSlice = false\n\n        if (typeof limit === 'number' && limit !== 0 && limit < docs.length) {\n          shouldSlice = true\n        }\n\n        return {\n          docs: shouldSlice ? docs.slice(0, -1) : docs,\n          hasNextPage: limit === 0 ? false : limit < docs.length,\n          ...(count ? { totalDocs } : {}),\n        }\n      },\n    }\n\n    return {\n      ...objectTypeConfig,\n      [formatName(field.name)]: joinType,\n    }\n  },\n  json: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: GraphQLJSON,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  number: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => {\n    const type = field?.name === 'id' ? GraphQLInt : GraphQLFloat\n    return {\n      ...objectTypeConfig,\n      [formatName(field.name)]: formattedNameResolver({\n        type: withNullableType({\n          type: field?.hasMany === true ? new GraphQLList(new GraphQLNonNull(type)) : type,\n          field,\n          forceNullable,\n          parentIsLocalized,\n        }) as GraphQLOutputType,\n        field,\n      }),\n    }\n  },\n  point: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: new GraphQLList(new GraphQLNonNull(GraphQLFloat)),\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  radio: ({ field, forceNullable, objectTypeConfig, parentIsLocalized, parentName }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: new GraphQLEnumType({\n          name: combineParentName(parentName, field.name),\n          values: formatOptions(field),\n        }),\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  relationship: ({\n    config,\n    field,\n    forceNullable,\n    graphqlResult,\n    newlyCreatedBlockType,\n    objectTypeConfig,\n    parentIsLocalized,\n    parentName,\n  }) => {\n    const { relationTo } = field\n    const isRelatedToManyCollections = Array.isArray(relationTo)\n    const hasManyValues = field.hasMany\n    const relationshipName = combineParentName(parentName, toWords(field.name, true))\n\n    let type: GraphQLOutputType\n    let relationToType = null\n\n    const graphQLCollections = config.collections.filter(\n      (collectionConfig) => collectionConfig.graphQL !== false,\n    )\n\n    if (Array.isArray(relationTo)) {\n      relationToType = new GraphQLEnumType({\n        name: `${relationshipName}_RelationTo`,\n        values: relationTo\n          .filter((relation) =>\n            graphQLCollections.some((collection) => collection.slug === relation),\n          )\n          .reduce(\n            (relations, relation) => ({\n              ...relations,\n              [formatName(relation)]: {\n                value: relation,\n              },\n            }),\n            {},\n          ),\n      })\n\n      // Only pass collections that are GraphQL enabled\n      const types = relationTo\n        .filter((relation) => graphQLCollections.some((collection) => collection.slug === relation))\n        .map((relation) => graphqlResult.collections[relation]?.graphQL.type)\n\n      type = new GraphQLObjectType({\n        name: `${relationshipName}_Relationship`,\n        fields: {\n          relationTo: {\n            type: relationToType,\n          },\n          value: {\n            type: new GraphQLUnionType({\n              name: relationshipName,\n              resolveType(data) {\n                return graphqlResult.collections[data.collection].graphQL.type.name\n              },\n              types,\n            }) as GraphQLOutputType,\n          },\n        },\n      }) as GraphQLOutputType\n    } else {\n      ;({ type } = graphqlResult.collections[relationTo].graphQL)\n    }\n\n    // If the relationshipType is undefined at this point,\n    // it can be assumed that this blockType can have a relationship\n    // to itself. Therefore, we set the relationshipType equal to the blockType\n    // that is currently being created.\n\n    type = type || newlyCreatedBlockType\n\n    const relationshipArgs: {\n      draft: GraphQLArgumentConfig\n      fallbackLocale: GraphQLArgumentConfig\n      limit: GraphQLArgumentConfig\n      locale: GraphQLArgumentConfig\n      page: GraphQLArgumentConfig\n      where: GraphQLArgumentConfig\n    } = {} as any\n\n    const relationsUseDrafts = (Array.isArray(relationTo) ? relationTo : [relationTo])\n      .filter((relation) => graphQLCollections.some((collection) => collection.slug === relation))\n      .some((relation) => graphqlResult.collections[relation].config.versions?.drafts)\n\n    if (relationsUseDrafts) {\n      relationshipArgs.draft = {\n        type: GraphQLBoolean,\n      }\n    }\n\n    if (config.localization) {\n      relationshipArgs.locale = {\n        type: graphqlResult.types.localeInputType,\n      }\n\n      relationshipArgs.fallbackLocale = {\n        type: graphqlResult.types.fallbackLocaleInputType,\n      }\n    }\n\n    const relationship: GraphQLFieldConfig<any, Context, any> = {\n      type: withNullableType({\n        type: hasManyValues ? new GraphQLList(new GraphQLNonNull(type)) : type,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      args: relationshipArgs,\n      extensions: {\n        complexity: typeof field?.graphQL?.complexity === 'number' ? field.graphQL.complexity : 10,\n        field,\n      },\n      async resolve(parent, args, context, info) {\n        const value = parent[field.name]\n        const locale = args.locale || context.req.locale\n        const fallbackLocale = args.fallbackLocale || context.req.fallbackLocale\n        let relatedCollectionSlug = field.relationTo\n        const draft = Boolean(args.draft ?? context.req.query?.draft)\n        const select = resolveSelect(info, context.select)\n\n        if (hasManyValues) {\n          const results = []\n          const resultPromises = []\n\n          const createPopulationPromise = async (relatedDoc, i) => {\n            let id = relatedDoc\n            let collectionSlug = field.relationTo\n            const isValidGraphQLCollection = isRelatedToManyCollections\n              ? graphQLCollections.some((collection) => collectionSlug.includes(collection.slug))\n              : graphQLCollections.some((collection) => collectionSlug === collection.slug)\n\n            if (isValidGraphQLCollection) {\n              if (isRelatedToManyCollections) {\n                collectionSlug = relatedDoc.relationTo\n                id = relatedDoc.value\n              }\n\n              const result = await context.req.payloadDataLoader.load(\n                createDataloaderCacheKey({\n                  collectionSlug: collectionSlug as string,\n                  currentDepth: 0,\n                  depth: 0,\n                  docID: id,\n                  draft,\n                  fallbackLocale,\n                  locale,\n                  overrideAccess: false,\n                  select,\n                  showHiddenFields: false,\n                  transactionID: context.req.transactionID,\n                }),\n              )\n\n              if (result) {\n                if (isRelatedToManyCollections) {\n                  results.push({\n                    relationTo: collectionSlug,\n                    value: {\n                      ...result,\n                      collection: collectionSlug,\n                    },\n                  })\n                } else {\n                  results.push(result)\n                }\n              }\n            }\n          }\n\n          if (value) {\n            value.forEach((relatedDoc, i) => {\n              resultPromises.push(createPopulationPromise(relatedDoc, i))\n            })\n          }\n\n          await Promise.all(resultPromises)\n          return results\n        }\n\n        let id = value\n        if (isRelatedToManyCollections && value) {\n          id = value.value\n          relatedCollectionSlug = value.relationTo\n        }\n\n        if (id) {\n          if (graphQLCollections.some((collection) => collection.slug === relatedCollectionSlug)) {\n            const relatedDocument = await context.req.payloadDataLoader.load(\n              createDataloaderCacheKey({\n                collectionSlug: relatedCollectionSlug as string,\n                currentDepth: 0,\n                depth: 0,\n                docID: id,\n                draft,\n                fallbackLocale,\n                locale,\n                overrideAccess: false,\n                select,\n                showHiddenFields: false,\n                transactionID: context.req.transactionID,\n              }),\n            )\n\n            if (relatedDocument) {\n              if (isRelatedToManyCollections) {\n                return {\n                  relationTo: relatedCollectionSlug,\n                  value: {\n                    ...relatedDocument,\n                    collection: relatedCollectionSlug,\n                  },\n                }\n              }\n\n              return relatedDocument\n            }\n          }\n\n          return null\n        }\n\n        return null\n      },\n    }\n\n    return {\n      ...objectTypeConfig,\n      [formatName(field.name)]: relationship,\n    }\n  },\n  richText: ({ config, field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: {\n      type: withNullableType({\n        type: GraphQLJSON,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      args: {\n        depth: {\n          type: GraphQLInt,\n        },\n      },\n      extensions: {\n        field,\n      },\n      async resolve(parent, args, context: Context) {\n        let depth = config.defaultDepth\n        if (typeof args.depth !== 'undefined') {\n          depth = args.depth\n        }\n        if (!field?.editor) {\n          throw new MissingEditorProp(field) // while we allow disabling editor functionality, you should not have any richText fields defined if you do not have an editor\n        }\n\n        if (typeof field?.editor === 'function') {\n          throw new Error('Attempted to access unsanitized rich text editor.')\n        }\n\n        const editor: RichTextAdapter = field?.editor\n\n        // RichText fields have their own depth argument in GraphQL.\n        // This is why the populationPromise (which populates richtext fields like uploads and relationships)\n        // is run here again, with the provided depth.\n        // In the graphql find.ts resolver, the depth is then hard-coded to 0.\n        // Effectively, this means that the populationPromise for GraphQL is only run here, and not in the find.ts resolver / normal population promise.\n        if (editor?.graphQLPopulationPromises) {\n          const fieldPromises = []\n          const populationPromises = []\n          const populateDepth =\n            field?.maxDepth !== undefined && field?.maxDepth < depth ? field?.maxDepth : depth\n\n          editor?.graphQLPopulationPromises({\n            context,\n            depth: populateDepth,\n            draft: args.draft,\n            field,\n            fieldPromises,\n            findMany: false,\n            flattenLocales: false,\n            overrideAccess: false,\n            parentIsLocalized,\n            populationPromises,\n            req: context.req,\n            showHiddenFields: false,\n            siblingDoc: parent,\n          })\n          await Promise.all(fieldPromises)\n          await Promise.all(populationPromises)\n        }\n\n        return parent[field.name]\n      },\n    },\n  }),\n  row: ({ field, objectTypeConfig, ...rest }) =>\n    field.fields.reduce((objectTypeConfigWithRowFields, subField) => {\n      const addSubField: GenericFieldToSchemaMap = fieldToSchemaMap[subField.type]\n      if (addSubField) {\n        return addSubField({\n          field: subField,\n          objectTypeConfig: objectTypeConfigWithRowFields,\n          ...rest,\n        })\n      }\n      return objectTypeConfigWithRowFields\n    }, objectTypeConfig),\n  select: ({ field, forceNullable, objectTypeConfig, parentIsLocalized, parentName }) => {\n    const fullName = combineParentName(parentName, field.name)\n\n    let type: GraphQLOutputType = new GraphQLEnumType({\n      name: fullName,\n      values: formatOptions(field),\n    })\n\n    type = field.hasMany ? new GraphQLList(new GraphQLNonNull(type)) : type\n    type = withNullableType({ type, field, forceNullable, parentIsLocalized }) as GraphQLOutputType\n\n    return {\n      ...objectTypeConfig,\n      [formatName(field.name)]: formattedNameResolver({ type, field }),\n    }\n  },\n  tabs: ({\n    collectionSlug,\n    config,\n    field,\n    forceNullable,\n    graphqlResult,\n    newlyCreatedBlockType,\n    objectTypeConfig,\n    parentIsLocalized,\n    parentName,\n  }) =>\n    field.tabs.reduce((tabSchema, tab) => {\n      if (tabHasName(tab)) {\n        const interfaceName =\n          tab?.interfaceName || combineParentName(parentName, toWords(tab.name, true))\n\n        if (!graphqlResult.types.groupTypes[interfaceName]) {\n          const objectType = buildObjectType({\n            name: interfaceName,\n            collectionSlug,\n            config,\n            fields: tab.fields,\n            forceNullable,\n            graphqlResult,\n            parentIsLocalized: tab.localized || parentIsLocalized,\n            parentName: interfaceName,\n          })\n\n          if (Object.keys(objectType.getFields()).length) {\n            graphqlResult.types.groupTypes[interfaceName] = objectType\n          }\n        }\n\n        if (!graphqlResult.types.groupTypes[interfaceName]) {\n          return tabSchema\n        }\n\n        return {\n          ...tabSchema,\n          [tab.name]: {\n            type: graphqlResult.types.groupTypes[interfaceName],\n            resolve(parent, args, context: Context) {\n              return {\n                ...parent[tab.name],\n                _id: parent._id ?? parent.id,\n              }\n            },\n          },\n        }\n      }\n\n      return {\n        ...tabSchema,\n        ...tab.fields.reduce((subFieldSchema, subField) => {\n          const addSubField: GenericFieldToSchemaMap = fieldToSchemaMap[subField.type]\n          if (addSubField) {\n            return addSubField({\n              collectionSlug,\n              config,\n              field: subField,\n              forceNullable,\n              graphqlResult,\n              newlyCreatedBlockType,\n              objectTypeConfig: subFieldSchema,\n              parentIsLocalized,\n              parentName,\n            })\n          }\n          return subFieldSchema\n        }, tabSchema),\n      }\n    }, objectTypeConfig),\n  text: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type:\n          field.hasMany === true\n            ? new GraphQLList(new GraphQLNonNull(GraphQLString))\n            : GraphQLString,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  textarea: ({ field, forceNullable, objectTypeConfig, parentIsLocalized }) => ({\n    ...objectTypeConfig,\n    [formatName(field.name)]: formattedNameResolver({\n      type: withNullableType({\n        type: GraphQLString,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      field,\n    }),\n  }),\n  upload: ({\n    config,\n    field,\n    forceNullable,\n    graphqlResult,\n    newlyCreatedBlockType,\n    objectTypeConfig,\n    parentIsLocalized,\n    parentName,\n  }) => {\n    const { relationTo } = field\n    const isRelatedToManyCollections = Array.isArray(relationTo)\n    const hasManyValues = field.hasMany\n    const relationshipName = combineParentName(parentName, toWords(field.name, true))\n\n    let type\n    let relationToType = null\n\n    if (Array.isArray(relationTo)) {\n      relationToType = new GraphQLEnumType({\n        name: `${relationshipName}_RelationTo`,\n        values: relationTo.reduce(\n          (relations, relation) => ({\n            ...relations,\n            [formatName(relation)]: {\n              value: relation,\n            },\n          }),\n          {},\n        ),\n      })\n\n      const types = relationTo.map((relation) => graphqlResult.collections[relation].graphQL.type)\n\n      type = new GraphQLObjectType({\n        name: `${relationshipName}_Relationship`,\n        fields: {\n          relationTo: {\n            type: relationToType,\n          },\n          value: {\n            type: new GraphQLUnionType({\n              name: relationshipName,\n              resolveType(data) {\n                return graphqlResult.collections[data.collection].graphQL.type.name\n              },\n              types,\n            }),\n          },\n        },\n      })\n    } else {\n      ;({ type } = graphqlResult.collections[relationTo].graphQL)\n    }\n\n    // If the relationshipType is undefined at this point,\n    // it can be assumed that this blockType can have a relationship\n    // to itself. Therefore, we set the relationshipType equal to the blockType\n    // that is currently being created.\n\n    type = type || newlyCreatedBlockType\n\n    const relationshipArgs: {\n      draft?: GraphQLArgumentConfig\n      fallbackLocale?: GraphQLArgumentConfig\n      limit?: GraphQLArgumentConfig\n      locale?: GraphQLArgumentConfig\n      page?: GraphQLArgumentConfig\n      where?: GraphQLArgumentConfig\n    } = {} as any\n\n    const relationsUseDrafts = (Array.isArray(relationTo) ? relationTo : [relationTo]).some(\n      (relation) => graphqlResult.collections[relation].config.versions?.drafts,\n    )\n\n    if (relationsUseDrafts) {\n      relationshipArgs.draft = {\n        type: GraphQLBoolean,\n      }\n    }\n\n    if (config.localization) {\n      relationshipArgs.locale = {\n        type: graphqlResult.types.localeInputType,\n      }\n\n      relationshipArgs.fallbackLocale = {\n        type: graphqlResult.types.fallbackLocaleInputType,\n      }\n    }\n\n    const relationship: GraphQLFieldConfig<any, Context, any> = {\n      type: withNullableType({\n        type: hasManyValues ? new GraphQLList(new GraphQLNonNull(type)) : type,\n        field,\n        forceNullable,\n        parentIsLocalized,\n      }) as GraphQLOutputType,\n      args: relationshipArgs,\n      extensions: {\n        complexity: typeof field?.graphQL?.complexity === 'number' ? field.graphQL.complexity : 10,\n        field,\n      },\n      async resolve(parent, args, context, info) {\n        const value = parent[field.name]\n        const locale = args.locale || context.req.locale\n        const fallbackLocale = args.fallbackLocale || context.req.fallbackLocale\n        let relatedCollectionSlug = field.relationTo\n        const draft = Boolean(args.draft ?? context.req.query?.draft)\n        const select = resolveSelect(info, context.select)\n\n        if (hasManyValues) {\n          const results = []\n          const resultPromises = []\n\n          const createPopulationPromise = async (relatedDoc, i) => {\n            let id = relatedDoc\n            let collectionSlug = field.relationTo\n\n            if (isRelatedToManyCollections) {\n              collectionSlug = relatedDoc.relationTo\n              id = relatedDoc.value\n            }\n\n            const result = await context.req.payloadDataLoader.load(\n              createDataloaderCacheKey({\n                collectionSlug,\n                currentDepth: 0,\n                depth: 0,\n                docID: id,\n                draft,\n                fallbackLocale,\n                locale,\n                overrideAccess: false,\n                select,\n                showHiddenFields: false,\n                transactionID: context.req.transactionID,\n              }),\n            )\n\n            if (result) {\n              if (isRelatedToManyCollections) {\n                results.push({\n                  relationTo: collectionSlug,\n                  value: {\n                    ...result,\n                    collection: collectionSlug,\n                  },\n                })\n              } else {\n                results.push(result)\n              }\n            }\n          }\n\n          if (value) {\n            value.forEach((relatedDoc, i) => {\n              resultPromises.push(createPopulationPromise(relatedDoc, i))\n            })\n          }\n\n          await Promise.all(resultPromises)\n          return results\n        }\n\n        let id = value\n        if (isRelatedToManyCollections && value) {\n          id = value.value\n          relatedCollectionSlug = value.relationTo\n        }\n\n        if (id) {\n          const relatedDocument = await context.req.payloadDataLoader.load(\n            createDataloaderCacheKey({\n              collectionSlug: relatedCollectionSlug,\n              currentDepth: 0,\n              depth: 0,\n              docID: id,\n              draft,\n              fallbackLocale,\n              locale,\n              overrideAccess: false,\n              select,\n              showHiddenFields: false,\n              transactionID: context.req.transactionID,\n            }),\n          )\n\n          if (relatedDocument) {\n            if (isRelatedToManyCollections) {\n              return {\n                relationTo: relatedCollectionSlug,\n                value: {\n                  ...relatedDocument,\n                  collection: relatedCollectionSlug,\n                },\n              }\n            }\n\n            return relatedDocument\n          }\n\n          return null\n        }\n\n        return null\n      },\n    }\n\n    return {\n      ...objectTypeConfig,\n      [formatName(field.name)]: relationship,\n    }\n  },\n}\n"],"names":["GraphQLBoolean","GraphQLEnumType","GraphQLFloat","GraphQLInt","GraphQLList","GraphQLNonNull","GraphQLObjectType","GraphQLString","GraphQLUnionType","DateTimeResolver","EmailAddressResolver","combineQueries","createDataloaderCacheKey","MissingEditorProp","toWords","fieldAffectsData","tabHasName","GraphQLJSON","combineParentName","formatName","formatOptions","resolveSelect","buildObjectType","isFieldNullable","withNullableType","formattedNameResolver","field","rest","name","extensions","resolve","parent","fieldToSchemaMap","array","config","forceNullable","graphqlResult","objectTypeConfig","parentIsLocalized","parentName","interfaceName","types","arrayTypes","objectType","fields","localized","Object","keys","getFields","length","arrayType","type","blocks","blockTypes","blockReferences","reduce","acc","_block","blockSlug","slug","block","find","b","graphQL","singularName","push","fullName","resolveType","data","blockType","checkbox","code","collapsible","collectionSlug","newlyCreatedBlockType","objectTypeConfigWithCollapsibleFields","subField","addSubField","date","email","group","groupTypes","args","context","_id","id","join","joinName","joinType","docs","Array","isArray","collection","collections","hasNextPage","totalDocs","count","limit","page","sort","where","whereInputType","complexity","info","req","draft","Boolean","query","select","targetField","fullWhere","relationTo","on","equals","value","Error","payload","depth","fallbackLocale","locale","overrideAccess","pagination","shouldSlice","slice","json","number","hasMany","point","radio","values","relationship","isRelatedToManyCollections","hasManyValues","relationshipName","relationToType","graphQLCollections","filter","collectionConfig","relation","some","relations","map","relationshipArgs","relationsUseDrafts","versions","drafts","localization","localeInputType","fallbackLocaleInputType","relatedCollectionSlug","results","resultPromises","createPopulationPromise","relatedDoc","i","isValidGraphQLCollection","includes","result","payloadDataLoader","load","currentDepth","docID","showHiddenFields","transactionID","forEach","Promise","all","relatedDocument","richText","defaultDepth","editor","graphQLPopulationPromises","fieldPromises","populationPromises","populateDepth","maxDepth","undefined","findMany","flattenLocales","siblingDoc","row","objectTypeConfigWithRowFields","tabs","tabSchema","tab","subFieldSchema","text","textarea","upload"],"mappings":"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"}