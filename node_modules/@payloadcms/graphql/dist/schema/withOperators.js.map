{"version":3,"sources":["../../src/schema/withOperators.ts"],"sourcesContent":["import type { GraphQLType } from 'graphql'\nimport type { FieldAffectingData, NumberField, RadioField, SelectField } from 'payload'\n\nimport {\n  GraphQLBoolean,\n  GraphQLEnumType,\n  GraphQLFloat,\n  GraphQLInputObjectType,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLString,\n} from 'graphql'\nimport { DateTimeResolver, EmailAddressResolver } from 'graphql-scalars'\nimport { optionIsObject } from 'payload/shared'\n\nimport { GraphQLJSON } from '../packages/graphql-type-json/index.js'\nimport { combineParentName } from '../utilities/combineParentName.js'\nimport { formatName } from '../utilities/formatName.js'\nimport { operators } from './operators.js'\n\ntype staticTypes =\n  | 'checkbox'\n  | 'code'\n  | 'date'\n  | 'email'\n  | 'json'\n  | 'number'\n  | 'point'\n  | 'relationship'\n  | 'richText'\n  | 'text'\n  | 'textarea'\n  | 'upload'\n\ntype dynamicTypes = 'radio' | 'select'\n\nconst GeoJSONObject = new GraphQLInputObjectType({\n  name: 'GeoJSONObject',\n  fields: {\n    type: { type: GraphQLString },\n    coordinates: {\n      type: GraphQLJSON,\n    },\n  },\n})\n\ntype DefaultsType = {\n  [key in dynamicTypes]: {\n    operators: {\n      name: string\n      type: (field: FieldAffectingData, parentName: string) => GraphQLType\n    }[]\n  }\n} & {\n  [key in staticTypes]: {\n    operators: {\n      name: string\n      type: ((field: FieldAffectingData, parentName: string) => GraphQLType) | GraphQLType\n    }[]\n  }\n}\n\nconst defaults: DefaultsType = {\n  checkbox: {\n    operators: [\n      ...operators.equality.map((operator) => ({\n        name: operator,\n        type: GraphQLBoolean,\n      })),\n    ],\n  },\n  code: {\n    operators: [\n      ...[...operators.equality, ...operators.partial].map((operator) => ({\n        name: operator,\n        type: GraphQLString,\n      })),\n    ],\n  },\n  date: {\n    operators: [\n      ...[...operators.equality, ...operators.comparison, 'like'].map((operator) => ({\n        name: operator,\n        type: DateTimeResolver,\n      })),\n    ],\n  },\n  email: {\n    operators: [\n      ...[...operators.equality, ...operators.partial, ...operators.contains].map((operator) => ({\n        name: operator,\n        type: EmailAddressResolver,\n      })),\n    ],\n  },\n  json: {\n    operators: [\n      ...[...operators.equality, ...operators.partial, ...operators.geojson].map((operator) => ({\n        name: operator,\n        type: GraphQLJSON,\n      })),\n    ],\n  },\n  number: {\n    operators: [\n      ...[...operators.equality, ...operators.comparison].map((operator) => ({\n        name: operator,\n        type: (field: NumberField): GraphQLType => {\n          return field?.name === 'id' ? GraphQLInt : GraphQLFloat\n        },\n      })),\n    ],\n  },\n  point: {\n    operators: [\n      ...[...operators.equality, ...operators.comparison, ...operators.geo].map((operator) => ({\n        name: operator,\n        type: new GraphQLList(GraphQLFloat),\n      })),\n      ...operators.geojson.map((operator) => ({\n        name: operator,\n        /**\n         * @example:\n         * within: {\n         *  type: \"Polygon\",\n         *  coordinates: [[\n         *   [0.0, 0.0],\n         *   [1.0, 1.0],\n         *   [1.0, 0.0],\n         *   [0.0, 0.0],\n         *  ]],\n         * }\n         * @example\n         * intersects: {\n         *  type: \"Point\",\n         *  coordinates: [ 0.5, 0.5 ]\n         * }\n         */\n        type: GeoJSONObject,\n      })),\n    ],\n  },\n  radio: {\n    operators: [\n      ...[...operators.equality, ...operators.partial].map((operator) => ({\n        name: operator,\n        type: (field: RadioField, parentName): GraphQLType =>\n          new GraphQLEnumType({\n            name: `${combineParentName(parentName, field.name)}_Input`,\n            values: field.options.reduce((values, option) => {\n              if (optionIsObject(option)) {\n                return {\n                  ...values,\n                  [formatName(option.value)]: {\n                    value: option.value,\n                  },\n                }\n              }\n\n              return {\n                ...values,\n                [formatName(option)]: {\n                  value: option,\n                },\n              }\n            }, {}),\n          }),\n      })),\n    ],\n  },\n  relationship: {\n    operators: [\n      ...[...operators.equality, ...operators.contains].map((operator) => ({\n        name: operator,\n        type: GraphQLJSON,\n      })),\n    ],\n  },\n  richText: {\n    operators: [\n      ...[...operators.equality, ...operators.partial].map((operator) => ({\n        name: operator,\n        type: GraphQLJSON,\n      })),\n    ],\n  },\n  select: {\n    operators: [\n      ...[...operators.equality, ...operators.contains].map((operator) => ({\n        name: operator,\n        type: (field: SelectField, parentName): GraphQLType =>\n          new GraphQLEnumType({\n            name: `${combineParentName(parentName, field.name)}_Input`,\n            values: field.options.reduce((values, option) => {\n              if (optionIsObject(option)) {\n                return {\n                  ...values,\n                  [formatName(option.value)]: {\n                    value: option.value,\n                  },\n                }\n              }\n\n              return {\n                ...values,\n                [formatName(option)]: {\n                  value: option,\n                },\n              }\n            }, {}),\n          }),\n      })),\n    ],\n  },\n  text: {\n    operators: [\n      ...[...operators.equality, ...operators.partial, ...operators.contains].map((operator) => ({\n        name: operator,\n        type: GraphQLString,\n      })),\n    ],\n  },\n  textarea: {\n    operators: [\n      ...[...operators.equality, ...operators.partial].map((operator) => ({\n        name: operator,\n        type: GraphQLString,\n      })),\n    ],\n  },\n  upload: {\n    operators: [\n      ...[...operators.equality, ...operators.contains].map((operator) => ({\n        name: operator,\n        type: GraphQLJSON,\n      })),\n    ],\n  },\n  // array: n/a\n  // group: n/a\n  // row: n/a\n  // collapsible: n/a\n  // tabs: n/a\n}\n\nconst listOperators = ['in', 'not_in', 'all']\n\nconst gqlTypeCache: Record<string, GraphQLType> = {}\n\n/**\n * In GraphQL, you can use \"where\" as an argument to filter a collection. Example:\n * { Posts(where: { title: { equals: \"Hello\" } }) { text } }\n * This function defines the operators for a field's condition in the \"where\" argument of the collection (it thus gets called for every field).\n * For example, in the example above, it would control that\n * - \"equals\" is a valid operator for the \"title\" field\n * - the accepted type of the \"equals\" argument has to be a string.\n *\n * @param field the field for which their valid operators inside a \"where\" argument is being defined\n * @param parentName the name of the parent field (if any)\n * @returns all the operators (including their types) which can be used as a condition for a given field inside a where\n */\nexport const withOperators = (\n  field: FieldAffectingData,\n  parentName: string,\n): GraphQLInputObjectType => {\n  if (!defaults?.[field.type]) {\n    throw new Error(`Error: ${field.type} has no defaults configured.`)\n  }\n\n  const name = `${combineParentName(parentName, field.name)}_operator`\n\n  // Get the default operators for the field type which are hard-coded above\n  const fieldOperators = [...defaults[field.type].operators]\n\n  if (!('required' in field) || !field.required) {\n    fieldOperators.push({\n      name: 'exists',\n      type: fieldOperators[0].type,\n    })\n  }\n\n  return new GraphQLInputObjectType({\n    name,\n    fields: fieldOperators.reduce((objectTypeFields, operator) => {\n      // Get the type of the operator. It can be either static, or dynamic (=> a function)\n      let gqlType: GraphQLType =\n        typeof operator.type === 'function' ? operator.type(field, parentName) : operator.type\n\n      // GraphQL does not allow types with duplicate names, so we use this cache to avoid that.\n      // Without this, select and radio fields would have the same name, and GraphQL would throw an error\n      // This usually only happens if a custom type is returned from the operator.type function\n      if (typeof operator.type === 'function' && 'name' in gqlType) {\n        if (gqlTypeCache[gqlType.name]) {\n          gqlType = gqlTypeCache[gqlType.name]\n        } else {\n          gqlTypeCache[gqlType.name] = gqlType\n        }\n      }\n\n      if (listOperators.includes(operator.name)) {\n        gqlType = new GraphQLList(gqlType)\n      } else if (operator.name === 'exists') {\n        gqlType = GraphQLBoolean\n      }\n\n      return {\n        ...objectTypeFields,\n        [operator.name]: {\n          type: gqlType,\n        },\n      }\n    }, {}),\n  })\n}\n"],"names":["GraphQLBoolean","GraphQLEnumType","GraphQLFloat","GraphQLInputObjectType","GraphQLInt","GraphQLList","GraphQLString","DateTimeResolver","EmailAddressResolver","optionIsObject","GraphQLJSON","combineParentName","formatName","operators","GeoJSONObject","name","fields","type","coordinates","defaults","checkbox","equality","map","operator","code","partial","date","comparison","email","contains","json","geojson","number","field","point","geo","radio","parentName","values","options","reduce","option","value","relationship","richText","select","text","textarea","upload","listOperators","gqlTypeCache","withOperators","Error","fieldOperators","required","push","objectTypeFields","gqlType","includes"],"mappings":"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"}