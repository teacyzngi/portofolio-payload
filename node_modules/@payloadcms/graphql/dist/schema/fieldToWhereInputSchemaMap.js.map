{"version":3,"sources":["../../src/schema/fieldToWhereInputSchemaMap.ts"],"sourcesContent":["import type {\n  ArrayField,\n  CheckboxField,\n  CodeField,\n  CollapsibleField,\n  DateField,\n  EmailField,\n  GroupField,\n  JSONField,\n  NumberField,\n  PointField,\n  RadioField,\n  RelationshipField,\n  RichTextField,\n  RowField,\n  SelectField,\n  TabsField,\n  TextareaField,\n  TextField,\n  UploadField,\n} from 'payload'\n\nimport { GraphQLEnumType, GraphQLInputObjectType } from 'graphql'\n\nimport { GraphQLJSON } from '../packages/graphql-type-json/index.js'\nimport { combineParentName } from '../utilities/combineParentName.js'\nimport { formatName } from '../utilities/formatName.js'\nimport { recursivelyBuildNestedPaths } from './recursivelyBuildNestedPaths.js'\nimport { withOperators } from './withOperators.js'\n\ntype Args = {\n  collectionSlug?: string\n  nestedFieldName?: string\n  parentName: string\n}\n\nexport const fieldToSchemaMap = ({ nestedFieldName, parentName }: Args): any => ({\n  array: (field: ArrayField) =>\n    recursivelyBuildNestedPaths({\n      field,\n      nestedFieldName2: nestedFieldName,\n      parentName,\n    }),\n  checkbox: (field: CheckboxField) => ({\n    type: withOperators(field, parentName),\n  }),\n  code: (field: CodeField) => ({\n    type: withOperators(field, parentName),\n  }),\n  collapsible: (field: CollapsibleField) =>\n    recursivelyBuildNestedPaths({\n      field,\n      nestedFieldName2: nestedFieldName,\n      parentName,\n    }),\n  date: (field: DateField) => ({\n    type: withOperators(field, parentName),\n  }),\n  email: (field: EmailField) => ({\n    type: withOperators(field, parentName),\n  }),\n  group: (field: GroupField) =>\n    recursivelyBuildNestedPaths({\n      field,\n      nestedFieldName2: nestedFieldName,\n      parentName,\n    }),\n  json: (field: JSONField) => ({\n    type: withOperators(field, parentName),\n  }),\n  number: (field: NumberField) => ({\n    type: withOperators(field, parentName),\n  }),\n  point: (field: PointField) => ({\n    type: withOperators(field, parentName),\n  }),\n  radio: (field: RadioField) => ({\n    type: withOperators(field, parentName),\n  }),\n  relationship: (field: RelationshipField) => {\n    if (Array.isArray(field.relationTo)) {\n      return {\n        type: new GraphQLInputObjectType({\n          name: `${combineParentName(parentName, field.name)}_Relation`,\n          fields: {\n            relationTo: {\n              type: new GraphQLEnumType({\n                name: `${combineParentName(parentName, field.name)}_Relation_RelationTo`,\n                values: field.relationTo.reduce(\n                  (values, relation) => ({\n                    ...values,\n                    [formatName(relation)]: {\n                      value: relation,\n                    },\n                  }),\n                  {},\n                ),\n              }),\n            },\n            value: { type: GraphQLJSON },\n          },\n        }),\n      }\n    }\n\n    return {\n      type: withOperators(field, parentName),\n    }\n  },\n  richText: (field: RichTextField) => ({\n    type: withOperators(field, parentName),\n  }),\n  row: (field: RowField) =>\n    recursivelyBuildNestedPaths({\n      field,\n      nestedFieldName2: nestedFieldName,\n      parentName,\n    }),\n  select: (field: SelectField) => ({\n    type: withOperators(field, parentName),\n  }),\n  tabs: (field: TabsField) =>\n    recursivelyBuildNestedPaths({\n      field,\n      nestedFieldName2: nestedFieldName,\n      parentName,\n    }),\n  text: (field: TextField) => ({\n    type: withOperators(field, parentName),\n  }),\n  textarea: (field: TextareaField) => ({\n    type: withOperators(field, parentName),\n  }),\n  upload: (field: UploadField) => {\n    if (Array.isArray(field.relationTo)) {\n      return {\n        type: new GraphQLInputObjectType({\n          name: `${combineParentName(parentName, field.name)}_Relation`,\n          fields: {\n            relationTo: {\n              type: new GraphQLEnumType({\n                name: `${combineParentName(parentName, field.name)}_Relation_RelationTo`,\n                values: field.relationTo.reduce(\n                  (values, relation) => ({\n                    ...values,\n                    [formatName(relation)]: {\n                      value: relation,\n                    },\n                  }),\n                  {},\n                ),\n              }),\n            },\n            value: { type: GraphQLJSON },\n          },\n        }),\n      }\n    }\n\n    return {\n      type: withOperators(field, parentName),\n    }\n  },\n})\n"],"names":["GraphQLEnumType","GraphQLInputObjectType","GraphQLJSON","combineParentName","formatName","recursivelyBuildNestedPaths","withOperators","fieldToSchemaMap","nestedFieldName","parentName","array","field","nestedFieldName2","checkbox","type","code","collapsible","date","email","group","json","number","point","radio","relationship","Array","isArray","relationTo","name","fields","values","reduce","relation","value","richText","row","select","tabs","text","textarea","upload"],"mappings":"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"}