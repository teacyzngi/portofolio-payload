{"version":3,"sources":["../../src/schema/buildPoliciesType.ts"],"sourcesContent":["import type {\n  CollectionConfig,\n  Field,\n  GlobalConfig,\n  SanitizedCollectionConfig,\n  SanitizedConfig,\n  SanitizedGlobalConfig,\n} from 'payload'\n\nimport { GraphQLBoolean, GraphQLNonNull, GraphQLObjectType } from 'graphql'\nimport { toWords } from 'payload'\n\nimport { GraphQLJSONObject } from '../packages/graphql-type-json/index.js'\nimport { formatName } from '../utilities/formatName.js'\n\ntype OperationType = 'create' | 'delete' | 'read' | 'readVersions' | 'unlock' | 'update'\n\ntype AccessScopes = 'docAccess' | undefined\n\ntype ObjectTypeFields = {\n  [key in 'fields' | OperationType]?: { type: GraphQLObjectType }\n}\n\nconst buildFields = (label, fieldsToBuild) =>\n  fieldsToBuild.reduce((builtFields, field) => {\n    const includeField = !field.hidden && field.type !== 'ui'\n    if (includeField) {\n      if (field.name) {\n        const fieldName = formatName(field.name)\n\n        const objectTypeFields: ObjectTypeFields = ['create', 'read', 'update', 'delete'].reduce(\n          (operations, operation) => {\n            const capitalizedOperation = operation.charAt(0).toUpperCase() + operation.slice(1)\n\n            return {\n              ...operations,\n              [operation]: {\n                type: new GraphQLObjectType({\n                  name: `${label}_${fieldName}_${capitalizedOperation}`,\n                  fields: {\n                    permission: {\n                      type: new GraphQLNonNull(GraphQLBoolean),\n                    },\n                  },\n                }),\n              },\n            }\n          },\n          {},\n        )\n\n        if (field.fields) {\n          objectTypeFields.fields = {\n            type: new GraphQLObjectType({\n              name: `${label}_${fieldName}_Fields`,\n              fields: buildFields(`${label}_${fieldName}`, field.fields),\n            }),\n          }\n        }\n\n        return {\n          ...builtFields,\n          [formatName(field.name)]: {\n            type: new GraphQLObjectType({\n              name: `${label}_${fieldName}`,\n              fields: objectTypeFields,\n            }),\n          },\n        }\n      }\n\n      if (!field.name && field.fields && field.fields.length) {\n        const subFields = buildFields(label, field.fields)\n\n        return {\n          ...builtFields,\n          ...subFields,\n        }\n      }\n\n      if (field.type === 'tabs') {\n        return field.tabs.reduce(\n          (fieldsWithTabFields, tab) => {\n            if ('name' in tab) {\n              if (tab.fields.length) {\n                const tabName = formatName(tab.name)\n                fieldsWithTabFields[tabName] = {\n                  type: new GraphQLObjectType({\n                    name: `${label}_${tabName}`,\n                    fields: buildFields(`${label}_${tabName}`, tab.fields),\n                  }),\n                }\n              }\n              return fieldsWithTabFields\n            }\n            return {\n              ...fieldsWithTabFields,\n              ...buildFields(label, tab.fields),\n            }\n          },\n          { ...builtFields },\n        )\n      }\n    }\n    return builtFields\n  }, {})\n\ntype BuildEntityPolicy = {\n  entityFields: Field[]\n  name: string\n  operations: OperationType[]\n  scope: AccessScopes\n}\nexport const buildEntityPolicy = (args: BuildEntityPolicy) => {\n  const { name, entityFields, operations, scope } = args\n\n  const fieldsTypeName = toWords(`${name}-${scope || ''}-Fields`, true)\n  const fields = {\n    fields: {\n      type: new GraphQLObjectType({\n        name: fieldsTypeName,\n        fields: buildFields(fieldsTypeName, entityFields),\n      }),\n    },\n  }\n\n  operations.forEach((operation) => {\n    const operationTypeName = toWords(`${name}-${operation}-${scope || 'Access'}`, true)\n\n    fields[operation] = {\n      type: new GraphQLObjectType({\n        name: operationTypeName,\n        fields: {\n          permission: { type: new GraphQLNonNull(GraphQLBoolean) },\n          where: { type: GraphQLJSONObject },\n        },\n      }),\n    }\n  })\n\n  return fields\n}\n\ntype BuildPolicyType = {\n  scope?: AccessScopes\n  typeSuffix?: string\n} & (\n  | {\n      entity: CollectionConfig\n      type: 'collection'\n    }\n  | {\n      entity: GlobalConfig\n      type: 'global'\n    }\n)\nexport function buildPolicyType(args: BuildPolicyType): GraphQLObjectType {\n  const { type, entity, scope, typeSuffix } = args\n  const { slug, fields, graphQL, versions } = entity\n\n  let operations = []\n\n  if (graphQL === false) {\n    return null\n  }\n\n  if (type === 'collection') {\n    operations = ['create', 'read', 'update', 'delete']\n\n    if (\n      entity.auth &&\n      typeof entity.auth === 'object' &&\n      typeof entity.auth.maxLoginAttempts !== 'undefined' &&\n      entity.auth.maxLoginAttempts !== 0\n    ) {\n      operations.push('unlock')\n    }\n\n    if (versions) {\n      operations.push('readVersions')\n    }\n\n    const collectionTypeName = formatName(`${slug}${typeSuffix || ''}`)\n\n    return new GraphQLObjectType({\n      name: collectionTypeName,\n      fields: buildEntityPolicy({\n        name: slug,\n        entityFields: fields,\n        operations,\n        scope,\n      }),\n    })\n  }\n\n  // else create global type\n  operations = ['read', 'update']\n\n  if (entity.versions) {\n    operations.push('readVersions')\n  }\n\n  const globalTypeName = formatName(`${global?.graphQL?.name || slug}${typeSuffix || ''}`)\n\n  return new GraphQLObjectType({\n    name: globalTypeName,\n    fields: buildEntityPolicy({\n      name: entity.graphQL ? entity?.graphQL?.name || slug : slug,\n      entityFields: entity.fields,\n      operations,\n      scope,\n    }),\n  })\n}\n\nexport function buildPoliciesType(config: SanitizedConfig): GraphQLObjectType {\n  const fields = {\n    canAccessAdmin: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n    },\n  }\n\n  Object.values(config.collections).forEach((collection: SanitizedCollectionConfig) => {\n    if (collection.graphQL === false) {\n      return\n    }\n    const collectionPolicyType = buildPolicyType({\n      type: 'collection',\n      entity: collection,\n      typeSuffix: 'Access',\n    })\n\n    fields[formatName(collection.slug)] = {\n      type: collectionPolicyType,\n    }\n  })\n\n  Object.values(config.globals).forEach((global: SanitizedGlobalConfig) => {\n    if (global.graphQL === false) {\n      return\n    }\n    const globalPolicyType = buildPolicyType({\n      type: 'global',\n      entity: global,\n      typeSuffix: 'Access',\n    })\n\n    fields[formatName(global.slug)] = {\n      type: globalPolicyType,\n    }\n  })\n\n  return new GraphQLObjectType({\n    name: 'Access',\n    fields,\n  })\n}\n"],"names":["GraphQLBoolean","GraphQLNonNull","GraphQLObjectType","toWords","GraphQLJSONObject","formatName","buildFields","label","fieldsToBuild","reduce","builtFields","field","includeField","hidden","type","name","fieldName","objectTypeFields","operations","operation","capitalizedOperation","charAt","toUpperCase","slice","fields","permission","length","subFields","tabs","fieldsWithTabFields","tab","tabName","buildEntityPolicy","args","entityFields","scope","fieldsTypeName","forEach","operationTypeName","where","buildPolicyType","entity","typeSuffix","slug","graphQL","versions","auth","maxLoginAttempts","push","collectionTypeName","globalTypeName","global","buildPoliciesType","config","canAccessAdmin","Object","values","collections","collection","collectionPolicyType","globals","globalPolicyType"],"mappings":"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"}