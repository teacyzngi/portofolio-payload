{"version":3,"sources":["../../src/schema/recursivelyBuildNestedPaths.ts"],"sourcesContent":["import type { FieldWithSubFields, Tab, TabsField } from 'payload'\n\nimport { fieldAffectsData, fieldIsPresentationalOnly } from 'payload/shared'\n\nimport { fieldToSchemaMap } from './fieldToWhereInputSchemaMap.js'\n\ntype Args = {\n  field: FieldWithSubFields | TabsField\n  nestedFieldName2: string\n  parentName: string\n}\n\nexport const recursivelyBuildNestedPaths = ({ field, nestedFieldName2, parentName }: Args) => {\n  const fieldName = fieldAffectsData(field) ? field.name : undefined\n  const nestedFieldName = fieldName || nestedFieldName2\n\n  if (field.type === 'tabs') {\n    // if the tab has a name, treat it as a group\n    // otherwise, treat it as a row\n    return field.tabs.reduce((tabSchema, tab: any) => {\n      tabSchema.push(\n        ...recursivelyBuildNestedPaths({\n          field: {\n            ...tab,\n            ...('name' in tab\n              ? {\n                  name: `${nestedFieldName ? `${nestedFieldName}__` : ''}${tab.name}`,\n                  type: 'group',\n                }\n              : {\n                  type: 'row',\n                }),\n          },\n          nestedFieldName2: nestedFieldName,\n          parentName,\n        }),\n      )\n      return tabSchema\n    }, [])\n  }\n\n  const nestedPaths = field.fields.reduce((nestedFields, nestedField) => {\n    if (!fieldIsPresentationalOnly(nestedField)) {\n      if (!fieldAffectsData(nestedField)) {\n        return [\n          ...nestedFields,\n          ...recursivelyBuildNestedPaths({\n            field: nestedField,\n            nestedFieldName2: nestedFieldName,\n            parentName,\n          }),\n        ]\n      }\n\n      const nestedPathName = fieldAffectsData(nestedField)\n        ? `${nestedFieldName ? `${nestedFieldName}__` : ''}${nestedField.name}`\n        : undefined\n      const getFieldSchema = fieldToSchemaMap({\n        nestedFieldName,\n        parentName,\n      })[nestedField.type]\n\n      if (getFieldSchema) {\n        const fieldSchema = getFieldSchema({\n          ...nestedField,\n          name: nestedPathName,\n        })\n\n        if (Array.isArray(fieldSchema)) {\n          return [...nestedFields, ...fieldSchema]\n        }\n\n        return [\n          ...nestedFields,\n          {\n            type: fieldSchema,\n            key: nestedPathName,\n          },\n        ]\n      }\n    }\n\n    return nestedFields\n  }, [])\n\n  return nestedPaths\n}\n"],"names":["fieldAffectsData","fieldIsPresentationalOnly","fieldToSchemaMap","recursivelyBuildNestedPaths","field","nestedFieldName2","parentName","fieldName","name","undefined","nestedFieldName","type","tabs","reduce","tabSchema","tab","push","nestedPaths","fields","nestedFields","nestedField","nestedPathName","getFieldSchema","fieldSchema","Array","isArray","key"],"mappings":"AAEA,SAASA,gBAAgB,EAAEC,yBAAyB,QAAQ,iBAAgB;AAE5E,SAASC,gBAAgB,QAAQ,kCAAiC;AAQlE,OAAO,MAAMC,8BAA8B,CAAC,EAAEC,KAAK,EAAEC,gBAAgB,EAAEC,UAAU,EAAQ;IACvF,MAAMC,YAAYP,iBAAiBI,SAASA,MAAMI,IAAI,GAAGC;IACzD,MAAMC,kBAAkBH,aAAaF;IAErC,IAAID,MAAMO,IAAI,KAAK,QAAQ;QACzB,6CAA6C;QAC7C,+BAA+B;QAC/B,OAAOP,MAAMQ,IAAI,CAACC,MAAM,CAAC,CAACC,WAAWC;YACnCD,UAAUE,IAAI,IACTb,4BAA4B;gBAC7BC,OAAO;oBACL,GAAGW,GAAG;oBACN,GAAI,UAAUA,MACV;wBACEP,MAAM,GAAGE,kBAAkB,GAAGA,gBAAgB,EAAE,CAAC,GAAG,KAAKK,IAAIP,IAAI,EAAE;wBACnEG,MAAM;oBACR,IACA;wBACEA,MAAM;oBACR,CAAC;gBACP;gBACAN,kBAAkBK;gBAClBJ;YACF;YAEF,OAAOQ;QACT,GAAG,EAAE;IACP;IAEA,MAAMG,cAAcb,MAAMc,MAAM,CAACL,MAAM,CAAC,CAACM,cAAcC;QACrD,IAAI,CAACnB,0BAA0BmB,cAAc;YAC3C,IAAI,CAACpB,iBAAiBoB,cAAc;gBAClC,OAAO;uBACFD;uBACAhB,4BAA4B;wBAC7BC,OAAOgB;wBACPf,kBAAkBK;wBAClBJ;oBACF;iBACD;YACH;YAEA,MAAMe,iBAAiBrB,iBAAiBoB,eACpC,GAAGV,kBAAkB,GAAGA,gBAAgB,EAAE,CAAC,GAAG,KAAKU,YAAYZ,IAAI,EAAE,GACrEC;YACJ,MAAMa,iBAAiBpB,iBAAiB;gBACtCQ;gBACAJ;YACF,EAAE,CAACc,YAAYT,IAAI,CAAC;YAEpB,IAAIW,gBAAgB;gBAClB,MAAMC,cAAcD,eAAe;oBACjC,GAAGF,WAAW;oBACdZ,MAAMa;gBACR;gBAEA,IAAIG,MAAMC,OAAO,CAACF,cAAc;oBAC9B,OAAO;2BAAIJ;2BAAiBI;qBAAY;gBAC1C;gBAEA,OAAO;uBACFJ;oBACH;wBACER,MAAMY;wBACNG,KAAKL;oBACP;iBACD;YACH;QACF;QAEA,OAAOF;IACT,GAAG,EAAE;IAEL,OAAOF;AACT,EAAC"}