{"version":3,"sources":["../../src/sqlite/columnToCodeConverter.ts"],"sourcesContent":["import type { ColumnToCodeConverter } from '../types.js'\n\nexport const columnToCodeConverter: ColumnToCodeConverter = ({\n  adapter,\n  addImport,\n  column,\n  locales,\n  tableKey,\n}) => {\n  let columnBuilderFn: string = column.type\n\n  const columnBuilderArgsArray: string[] = []\n\n  let defaultStatement: null | string = null\n\n  switch (column.type) {\n    case 'boolean': {\n      columnBuilderFn = 'integer'\n      columnBuilderArgsArray.push(\"mode: 'boolean'\")\n      break\n    }\n\n    case 'enum': {\n      let options: string[]\n      if ('locale' in column) {\n        if (!locales?.length) {\n          throw new Error('Locales must be defined for locale columns')\n        }\n        options = locales\n      } else {\n        options = column.options\n      }\n\n      columnBuilderFn = 'text'\n      columnBuilderArgsArray.push(`enum: [${options.map((locale) => `'${locale}'`).join(', ')}]`)\n\n      break\n    }\n\n    case 'geometry':\n    case 'jsonb': {\n      columnBuilderFn = 'text'\n      columnBuilderArgsArray.push(\"mode: 'json'\")\n      break\n    }\n\n    case 'numeric': {\n      columnBuilderArgsArray.push(\"mode: 'number'\")\n      break\n    }\n\n    case 'serial': {\n      columnBuilderFn = 'integer'\n      break\n    }\n\n    case 'timestamp': {\n      columnBuilderFn = 'text'\n      defaultStatement = `default(sql\\`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))\\`)`\n      break\n    }\n\n    case 'uuid': {\n      columnBuilderFn = 'text'\n\n      if (column.defaultRandom) {\n        addImport('crypto', 'randomUUID')\n        defaultStatement = `$defaultFn(() => randomUUID())`\n      }\n\n      break\n    }\n\n    case 'varchar': {\n      columnBuilderFn = 'text'\n      break\n    }\n\n    default: {\n      columnBuilderFn = column.type\n    }\n  }\n\n  addImport(`${adapter.packageName}/drizzle/sqlite-core`, columnBuilderFn)\n\n  let columnBuilderArgs = ''\n\n  if (columnBuilderArgsArray.length) {\n    columnBuilderArgs = `, {${columnBuilderArgsArray.join(',')}}`\n  }\n\n  let code = `${columnBuilderFn}('${column.name}'${columnBuilderArgs})`\n\n  if (column.notNull) {\n    code = `${code}.notNull()`\n  }\n\n  if (column.primaryKey) {\n    let arg = ''\n\n    if (column.type === 'integer' && column.autoIncrement) {\n      arg = `{ autoIncrement: true }`\n    }\n\n    code = `${code}.primaryKey(${arg})`\n  }\n\n  if (defaultStatement) {\n    code = `${code}.${defaultStatement}`\n  } else if (typeof column.default !== 'undefined') {\n    let sanitizedDefault = column.default\n\n    if (column.type === 'jsonb' || column.type === 'geometry') {\n      sanitizedDefault = `'${JSON.stringify(column.default)}'`\n    } else if (typeof column.default === 'string') {\n      sanitizedDefault = JSON.stringify(column.default)\n    } else if (column.type === 'numeric') {\n      sanitizedDefault = `'${column.default}'`\n    }\n\n    code = `${code}.default(${sanitizedDefault})`\n  }\n\n  if (column.reference) {\n    let callback = `()`\n\n    if (column.reference.table === tableKey) {\n      addImport(`${adapter.packageName}/drizzle/sqlite-core`, 'type AnySQLiteColumn')\n      callback = `${callback}: AnySQLiteColumn`\n    }\n\n    callback = `${callback} => ${column.reference.table}.${column.reference.name}`\n\n    code = `${code}.references(${callback}, {\n      ${column.reference.onDelete ? `onDelete: '${column.reference.onDelete}'` : ''}\n  })`\n  }\n\n  return code\n}\n"],"names":["columnToCodeConverter","adapter","addImport","column","locales","tableKey","columnBuilderFn","type","columnBuilderArgsArray","defaultStatement","push","options","length","Error","map","locale","join","defaultRandom","packageName","columnBuilderArgs","code","name","notNull","primaryKey","arg","autoIncrement","default","sanitizedDefault","JSON","stringify","reference","callback","table","onDelete"],"mappings":"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"}