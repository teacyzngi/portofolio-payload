{"version":3,"sources":["../../../src/sqlite/schema/buildDrizzleTable.ts"],"sourcesContent":["import type { ForeignKeyBuilder, IndexBuilder } from 'drizzle-orm/sqlite-core'\n\nimport { sql } from 'drizzle-orm'\nimport {\n  foreignKey,\n  index,\n  integer,\n  numeric,\n  sqliteTable,\n  text,\n  uniqueIndex,\n} from 'drizzle-orm/sqlite-core'\nimport { v4 as uuidv4 } from 'uuid'\n\nimport type { BuildDrizzleTable, RawColumn } from '../../types.js'\n\nconst rawColumnBuilderMap: Partial<Record<RawColumn['type'], any>> = {\n  integer,\n  numeric,\n  text,\n}\n\nexport const buildDrizzleTable: BuildDrizzleTable = ({ adapter, locales, rawTable }) => {\n  const columns: Record<string, any> = {}\n\n  for (const [key, column] of Object.entries(rawTable.columns)) {\n    switch (column.type) {\n      case 'boolean': {\n        columns[key] = integer(column.name, { mode: 'boolean' })\n        break\n      }\n\n      case 'enum':\n        if ('locale' in column) {\n          columns[key] = text(column.name, { enum: locales as [string, ...string[]] })\n        } else {\n          columns[key] = text(column.name, { enum: column.options as [string, ...string[]] })\n        }\n        break\n\n      case 'geometry':\n      case 'jsonb': {\n        columns[key] = text(column.name, { mode: 'json' })\n        break\n      }\n\n      case 'numeric': {\n        columns[key] = numeric(column.name, { mode: 'number' })\n        break\n      }\n\n      case 'serial': {\n        columns[key] = integer(column.name)\n        break\n      }\n\n      case 'timestamp': {\n        let builder = text(column.name)\n\n        if (column.defaultNow) {\n          builder = builder.default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`)\n        }\n\n        columns[key] = builder\n        break\n      }\n\n      case 'uuid': {\n        let builder = text(column.name, { length: 36 })\n\n        if (column.defaultRandom) {\n          builder = builder.$defaultFn(() => uuidv4())\n        }\n\n        columns[key] = builder\n        break\n      }\n\n      case 'varchar': {\n        columns[key] = text(column.name)\n        break\n      }\n\n      default:\n        columns[key] = rawColumnBuilderMap[column.type](column.name)\n        break\n    }\n\n    if (column.reference) {\n      const ref = column.reference\n      columns[key].references(() => adapter.tables[ref.table][ref.name], {\n        onDelete: ref.onDelete,\n      })\n    }\n\n    if (column.primaryKey) {\n      let args: Record<string, unknown> | undefined = undefined\n\n      if (column.type === 'integer' && column.autoIncrement) {\n        args = { autoIncrement: true }\n      }\n\n      columns[key].primaryKey(args)\n    }\n\n    if (column.notNull) {\n      columns[key].notNull()\n    }\n\n    if (typeof column.default !== 'undefined') {\n      let sanitizedDefault = column.default\n\n      if (column.type === 'geometry' && Array.isArray(column.default)) {\n        sanitizedDefault = JSON.stringify({\n          type: 'Point',\n          coordinates: [column.default[0], column.default[1]],\n        })\n      }\n\n      columns[key].default(sanitizedDefault)\n    }\n  }\n\n  const extraConfig = (cols: any) => {\n    const config: Record<string, ForeignKeyBuilder | IndexBuilder> = {}\n\n    if (rawTable.indexes) {\n      for (const [key, rawIndex] of Object.entries(rawTable.indexes)) {\n        let fn: any = index\n        if (rawIndex.unique) {\n          fn = uniqueIndex\n        }\n\n        if (Array.isArray(rawIndex.on)) {\n          if (rawIndex.on.length) {\n            config[key] = fn(rawIndex.name).on(...rawIndex.on.map((colName) => cols[colName]))\n          }\n        } else {\n          config[key] = fn(rawIndex.name).on(cols[rawIndex.on])\n        }\n      }\n    }\n\n    if (rawTable.foreignKeys) {\n      for (const [key, rawForeignKey] of Object.entries(rawTable.foreignKeys)) {\n        let builder = foreignKey({\n          name: rawForeignKey.name,\n          columns: rawForeignKey.columns.map((colName) => cols[colName]) as any,\n          foreignColumns: rawForeignKey.foreignColumns.map(\n            (column) => adapter.tables[column.table][column.name],\n          ),\n        })\n\n        if (rawForeignKey.onDelete) {\n          builder = builder.onDelete(rawForeignKey.onDelete)\n        }\n\n        if (rawForeignKey.onUpdate) {\n          builder = builder.onDelete(rawForeignKey.onUpdate)\n        }\n\n        config[key] = builder\n      }\n    }\n\n    return config\n  }\n\n  adapter.tables[rawTable.name] = sqliteTable(rawTable.name, columns as any, extraConfig as any)\n}\n"],"names":["sql","foreignKey","index","integer","numeric","sqliteTable","text","uniqueIndex","v4","uuidv4","rawColumnBuilderMap","buildDrizzleTable","adapter","locales","rawTable","columns","key","column","Object","entries","type","name","mode","enum","options","builder","defaultNow","default","length","defaultRandom","$defaultFn","reference","ref","references","tables","table","onDelete","primaryKey","args","undefined","autoIncrement","notNull","sanitizedDefault","Array","isArray","JSON","stringify","coordinates","extraConfig","cols","config","indexes","rawIndex","fn","unique","on","map","colName","foreignKeys","rawForeignKey","foreignColumns","onUpdate"],"mappings":"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"}