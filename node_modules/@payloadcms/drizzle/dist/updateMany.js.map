{"version":3,"sources":["../src/updateMany.ts"],"sourcesContent":["import type { LibSQLDatabase } from 'drizzle-orm/libsql'\nimport type { UpdateMany } from 'payload'\n\nimport toSnakeCase from 'to-snake-case'\n\nimport type { DrizzleAdapter } from './types.js'\n\nimport { buildQuery } from './queries/buildQuery.js'\nimport { selectDistinct } from './queries/selectDistinct.js'\nimport { upsertRow } from './upsertRow/index.js'\nimport { getTransaction } from './utilities/getTransaction.js'\n\nexport const updateMany: UpdateMany = async function updateMany(\n  this: DrizzleAdapter,\n  {\n    collection: collectionSlug,\n    data,\n    joins: joinQuery,\n    limit,\n    locale,\n    req,\n    returning,\n    select,\n    sort: sortArg,\n    where: whereToUse,\n  },\n) {\n  const db = await getTransaction(this, req)\n  const collection = this.payload.collections[collectionSlug].config\n  const tableName = this.tableNameMap.get(toSnakeCase(collection.slug))\n\n  const sort = sortArg !== undefined && sortArg !== null ? sortArg : collection.defaultSort\n\n  const { joins, orderBy, selectFields, where } = buildQuery({\n    adapter: this,\n    fields: collection.flattenedFields,\n    locale,\n    sort,\n    tableName,\n    where: whereToUse,\n  })\n\n  let idsToUpdate: (number | string)[] = []\n\n  const selectDistinctResult = await selectDistinct({\n    adapter: this,\n    db,\n    joins,\n    query: ({ query }) =>\n      orderBy ? query.orderBy(() => orderBy.map(({ column, order }) => order(column))) : query,\n    selectFields,\n    tableName,\n    where,\n  })\n\n  if (selectDistinctResult?.[0]?.id) {\n    idsToUpdate = selectDistinctResult?.map((doc) => doc.id)\n  } else if (whereToUse && !joins.length) {\n    // If id wasn't passed but `where` without any joins, retrieve it with findFirst\n\n    const _db = db as LibSQLDatabase\n\n    const table = this.tables[tableName]\n\n    let query = _db.select({ id: table.id }).from(table).where(where).$dynamic()\n\n    if (typeof limit === 'number' && limit > 0) {\n      query = query.limit(limit)\n    }\n\n    if (orderBy) {\n      query = query.orderBy(() => orderBy.map(({ column, order }) => order(column)))\n    }\n\n    const docsToUpdate = await query\n\n    idsToUpdate = docsToUpdate?.map((doc) => doc.id)\n  }\n\n  if (!idsToUpdate.length) {\n    return []\n  }\n\n  const results = []\n\n  // TODO: We need to batch this to reduce the amount of db calls. This can get very slow if we are updating a lot of rows.\n  for (const idToUpdate of idsToUpdate) {\n    const result = await upsertRow({\n      id: idToUpdate,\n      adapter: this,\n      data,\n      db,\n      fields: collection.flattenedFields,\n      ignoreResult: returning === false,\n      joinQuery,\n      operation: 'update',\n      req,\n      select,\n      tableName,\n    })\n    results.push(result)\n  }\n\n  if (returning === false) {\n    return null\n  }\n\n  return results\n}\n"],"names":["toSnakeCase","buildQuery","selectDistinct","upsertRow","getTransaction","updateMany","collection","collectionSlug","data","joins","joinQuery","limit","locale","req","returning","select","sort","sortArg","where","whereToUse","db","payload","collections","config","tableName","tableNameMap","get","slug","undefined","defaultSort","orderBy","selectFields","adapter","fields","flattenedFields","idsToUpdate","selectDistinctResult","query","map","column","order","id","doc","length","_db","table","tables","from","$dynamic","docsToUpdate","results","idToUpdate","result","ignoreResult","operation","push"],"mappings":"AAGA,OAAOA,iBAAiB,gBAAe;AAIvC,SAASC,UAAU,QAAQ,0BAAyB;AACpD,SAASC,cAAc,QAAQ,8BAA6B;AAC5D,SAASC,SAAS,QAAQ,uBAAsB;AAChD,SAASC,cAAc,QAAQ,gCAA+B;AAE9D,OAAO,MAAMC,aAAyB,eAAeA,WAEnD,EACEC,YAAYC,cAAc,EAC1BC,IAAI,EACJC,OAAOC,SAAS,EAChBC,KAAK,EACLC,MAAM,EACNC,GAAG,EACHC,SAAS,EACTC,MAAM,EACNC,MAAMC,OAAO,EACbC,OAAOC,UAAU,EAClB;IAED,MAAMC,KAAK,MAAMhB,eAAe,IAAI,EAAES;IACtC,MAAMP,aAAa,IAAI,CAACe,OAAO,CAACC,WAAW,CAACf,eAAe,CAACgB,MAAM;IAClE,MAAMC,YAAY,IAAI,CAACC,YAAY,CAACC,GAAG,CAAC1B,YAAYM,WAAWqB,IAAI;IAEnE,MAAMX,OAAOC,YAAYW,aAAaX,YAAY,OAAOA,UAAUX,WAAWuB,WAAW;IAEzF,MAAM,EAAEpB,KAAK,EAAEqB,OAAO,EAAEC,YAAY,EAAEb,KAAK,EAAE,GAAGjB,WAAW;QACzD+B,SAAS,IAAI;QACbC,QAAQ3B,WAAW4B,eAAe;QAClCtB;QACAI;QACAQ;QACAN,OAAOC;IACT;IAEA,IAAIgB,cAAmC,EAAE;IAEzC,MAAMC,uBAAuB,MAAMlC,eAAe;QAChD8B,SAAS,IAAI;QACbZ;QACAX;QACA4B,OAAO,CAAC,EAAEA,KAAK,EAAE,GACfP,UAAUO,MAAMP,OAAO,CAAC,IAAMA,QAAQQ,GAAG,CAAC,CAAC,EAAEC,MAAM,EAAEC,KAAK,EAAE,GAAKA,MAAMD,YAAYF;QACrFN;QACAP;QACAN;IACF;IAEA,IAAIkB,sBAAsB,CAAC,EAAE,EAAEK,IAAI;QACjCN,cAAcC,sBAAsBE,IAAI,CAACI,MAAQA,IAAID,EAAE;IACzD,OAAO,IAAItB,cAAc,CAACV,MAAMkC,MAAM,EAAE;QACtC,gFAAgF;QAEhF,MAAMC,MAAMxB;QAEZ,MAAMyB,QAAQ,IAAI,CAACC,MAAM,CAACtB,UAAU;QAEpC,IAAIa,QAAQO,IAAI7B,MAAM,CAAC;YAAE0B,IAAII,MAAMJ,EAAE;QAAC,GAAGM,IAAI,CAACF,OAAO3B,KAAK,CAACA,OAAO8B,QAAQ;QAE1E,IAAI,OAAOrC,UAAU,YAAYA,QAAQ,GAAG;YAC1C0B,QAAQA,MAAM1B,KAAK,CAACA;QACtB;QAEA,IAAImB,SAAS;YACXO,QAAQA,MAAMP,OAAO,CAAC,IAAMA,QAAQQ,GAAG,CAAC,CAAC,EAAEC,MAAM,EAAEC,KAAK,EAAE,GAAKA,MAAMD;QACvE;QAEA,MAAMU,eAAe,MAAMZ;QAE3BF,cAAcc,cAAcX,IAAI,CAACI,MAAQA,IAAID,EAAE;IACjD;IAEA,IAAI,CAACN,YAAYQ,MAAM,EAAE;QACvB,OAAO,EAAE;IACX;IAEA,MAAMO,UAAU,EAAE;IAElB,yHAAyH;IACzH,KAAK,MAAMC,cAAchB,YAAa;QACpC,MAAMiB,SAAS,MAAMjD,UAAU;YAC7BsC,IAAIU;YACJnB,SAAS,IAAI;YACbxB;YACAY;YACAa,QAAQ3B,WAAW4B,eAAe;YAClCmB,cAAcvC,cAAc;YAC5BJ;YACA4C,WAAW;YACXzC;YACAE;YACAS;QACF;QACA0B,QAAQK,IAAI,CAACH;IACf;IAEA,IAAItC,cAAc,OAAO;QACvB,OAAO;IACT;IAEA,OAAOoC;AACT,EAAC"}