{"version":3,"sources":["../src/createTableName.ts"],"sourcesContent":["import type { DBIdentifierName } from 'payload'\n\nimport { APIError } from 'payload'\nimport toSnakeCase from 'to-snake-case'\n\nimport type { DrizzleAdapter } from './types.js'\n\ntype Args = {\n  adapter: Pick<DrizzleAdapter, 'tableNameMap' | 'versionsSuffix'>\n  /** The collection, global or field config **/\n  config: {\n    dbName?: DBIdentifierName\n    enumName?: DBIdentifierName\n    name?: string\n    slug?: string\n  }\n  /** For nested tables passed for the user custom dbName functions to handle their own iterations */\n  parentTableName?: string\n  /** For sub tables (array for example) this needs to include the parentTableName */\n  prefix?: string\n  /** For tables based on fields that could have both enumName and dbName (ie: select with hasMany), default: 'dbName' */\n  target?: 'dbName' | 'enumName'\n  /** Throws error if true for postgres when table and enum names exceed 63 characters */\n  throwValidationError?: boolean\n  /** Adds the versions suffix to the default table name - should only be used on the base collection to avoid duplicate suffixing */\n  versions?: boolean\n  /** Adds the versions suffix to custom dbName only - this is used while creating blocks / selects / arrays / etc */\n  versionsCustomName?: boolean\n}\n\n/**\n * Used to name database enums and tables\n * Returns the table or enum name for a given entity\n */\nexport const createTableName = ({\n  adapter,\n  config: { name, slug },\n  config,\n  parentTableName,\n  prefix = '',\n  target = 'dbName',\n  throwValidationError = false,\n  versions = false,\n  versionsCustomName = false,\n}: Args): string => {\n  let customNameDefinition = config[target]\n\n  let defaultTableName = `${prefix}${toSnakeCase(name ?? slug)}`\n\n  if (versions) {\n    defaultTableName = `_${defaultTableName}${adapter.versionsSuffix}`\n  }\n\n  let customTableNameResult: string\n\n  if (!customNameDefinition && target === 'enumName') {\n    customNameDefinition = config['dbName']\n  }\n\n  if (customNameDefinition) {\n    customTableNameResult =\n      typeof customNameDefinition === 'function'\n        ? customNameDefinition({ tableName: parentTableName })\n        : customNameDefinition\n\n    if (versionsCustomName) {\n      customTableNameResult = `_${customTableNameResult}${adapter.versionsSuffix}`\n    }\n  }\n\n  const result = customTableNameResult || defaultTableName\n\n  adapter.tableNameMap.set(defaultTableName, result)\n\n  if (!throwValidationError) {\n    return result\n  }\n\n  if (result.length > 63) {\n    throw new APIError(\n      `Exceeded max identifier length for table or enum name of 63 characters. Invalid name: ${result}.\nTip: You can use the dbName property to reduce the table name length.\n      `,\n    )\n  }\n\n  return result\n}\n"],"names":["APIError","toSnakeCase","createTableName","adapter","config","name","slug","parentTableName","prefix","target","throwValidationError","versions","versionsCustomName","customNameDefinition","defaultTableName","versionsSuffix","customTableNameResult","tableName","result","tableNameMap","set","length"],"mappings":"AAEA,SAASA,QAAQ,QAAQ,UAAS;AAClC,OAAOC,iBAAiB,gBAAe;AA2BvC;;;CAGC,GACD,OAAO,MAAMC,kBAAkB,CAAC,EAC9BC,OAAO,EACPC,QAAQ,EAAEC,IAAI,EAAEC,IAAI,EAAE,EACtBF,MAAM,EACNG,eAAe,EACfC,SAAS,EAAE,EACXC,SAAS,QAAQ,EACjBC,uBAAuB,KAAK,EAC5BC,WAAW,KAAK,EAChBC,qBAAqB,KAAK,EACrB;IACL,IAAIC,uBAAuBT,MAAM,CAACK,OAAO;IAEzC,IAAIK,mBAAmB,GAAGN,SAASP,YAAYI,QAAQC,OAAO;IAE9D,IAAIK,UAAU;QACZG,mBAAmB,CAAC,CAAC,EAAEA,mBAAmBX,QAAQY,cAAc,EAAE;IACpE;IAEA,IAAIC;IAEJ,IAAI,CAACH,wBAAwBJ,WAAW,YAAY;QAClDI,uBAAuBT,MAAM,CAAC,SAAS;IACzC;IAEA,IAAIS,sBAAsB;QACxBG,wBACE,OAAOH,yBAAyB,aAC5BA,qBAAqB;YAAEI,WAAWV;QAAgB,KAClDM;QAEN,IAAID,oBAAoB;YACtBI,wBAAwB,CAAC,CAAC,EAAEA,wBAAwBb,QAAQY,cAAc,EAAE;QAC9E;IACF;IAEA,MAAMG,SAASF,yBAAyBF;IAExCX,QAAQgB,YAAY,CAACC,GAAG,CAACN,kBAAkBI;IAE3C,IAAI,CAACR,sBAAsB;QACzB,OAAOQ;IACT;IAEA,IAAIA,OAAOG,MAAM,GAAG,IAAI;QACtB,MAAM,IAAIrB,SACR,CAAC,sFAAsF,EAAEkB,OAAO;;MAEhG,CAAC;IAEL;IAEA,OAAOA;AACT,EAAC"}