{"version":3,"sources":["../src/updateJobs.ts"],"sourcesContent":["import type { UpdateJobs, Where } from 'payload'\n\nimport toSnakeCase from 'to-snake-case'\n\nimport type { DrizzleAdapter } from './types.js'\n\nimport { findMany } from './find/findMany.js'\nimport { upsertRow } from './upsertRow/index.js'\nimport { shouldUseOptimizedUpsertRow } from './upsertRow/shouldUseOptimizedUpsertRow.js'\nimport { getTransaction } from './utilities/getTransaction.js'\n\nexport const updateJobs: UpdateJobs = async function updateMany(\n  this: DrizzleAdapter,\n  { id, data, limit: limitArg, req, returning, sort: sortArg, where: whereArg },\n) {\n  if (\n    !(data?.log as object[])?.length &&\n    !(data.log && typeof data.log === 'object' && '$push' in data.log)\n  ) {\n    delete data.log\n  }\n\n  const whereToUse: Where = id ? { id: { equals: id } } : whereArg\n  const limit = id ? 1 : limitArg\n\n  const db = await getTransaction(this, req)\n  const collection = this.payload.collections['payload-jobs'].config\n  const tableName = this.tableNameMap.get(toSnakeCase(collection.slug))\n  const sort = sortArg !== undefined && sortArg !== null ? sortArg : collection.defaultSort\n\n  const useOptimizedUpsertRow = shouldUseOptimizedUpsertRow({\n    data,\n    fields: collection.flattenedFields,\n  })\n\n  if (useOptimizedUpsertRow && id) {\n    const result = await upsertRow({\n      id,\n      adapter: this,\n      data,\n      db,\n      fields: collection.flattenedFields,\n      ignoreResult: returning === false,\n      operation: 'update',\n      req,\n      tableName,\n    })\n\n    return returning === false ? null : [result]\n  }\n\n  const jobs = await findMany({\n    adapter: this,\n    collectionSlug: 'payload-jobs',\n    fields: collection.flattenedFields,\n    limit: id ? 1 : limit,\n    pagination: false,\n    req,\n    sort,\n    tableName,\n    where: whereToUse,\n  })\n  if (!jobs.docs.length) {\n    return []\n  }\n\n  const results = []\n\n  // TODO: We need to batch this to reduce the amount of db calls. This can get very slow if we are updating a lot of rows.\n  for (const job of jobs.docs) {\n    const updateData = useOptimizedUpsertRow\n      ? data\n      : {\n          ...job,\n          ...data,\n        }\n\n    const result = await upsertRow({\n      id: job.id,\n      adapter: this,\n      data: updateData,\n      db,\n      fields: collection.flattenedFields,\n      ignoreResult: returning === false,\n      operation: 'update',\n      req,\n      tableName,\n    })\n\n    results.push(result)\n  }\n\n  if (returning === false) {\n    return null\n  }\n\n  return results\n}\n"],"names":["toSnakeCase","findMany","upsertRow","shouldUseOptimizedUpsertRow","getTransaction","updateJobs","updateMany","id","data","limit","limitArg","req","returning","sort","sortArg","where","whereArg","log","length","whereToUse","equals","db","collection","payload","collections","config","tableName","tableNameMap","get","slug","undefined","defaultSort","useOptimizedUpsertRow","fields","flattenedFields","result","adapter","ignoreResult","operation","jobs","collectionSlug","pagination","docs","results","job","updateData","push"],"mappings":"AAEA,OAAOA,iBAAiB,gBAAe;AAIvC,SAASC,QAAQ,QAAQ,qBAAoB;AAC7C,SAASC,SAAS,QAAQ,uBAAsB;AAChD,SAASC,2BAA2B,QAAQ,6CAA4C;AACxF,SAASC,cAAc,QAAQ,gCAA+B;AAE9D,OAAO,MAAMC,aAAyB,eAAeC,WAEnD,EAAEC,EAAE,EAAEC,IAAI,EAAEC,OAAOC,QAAQ,EAAEC,GAAG,EAAEC,SAAS,EAAEC,MAAMC,OAAO,EAAEC,OAAOC,QAAQ,EAAE;IAE7E,IACE,CAAER,MAAMS,KAAkBC,UAC1B,CAAEV,CAAAA,KAAKS,GAAG,IAAI,OAAOT,KAAKS,GAAG,KAAK,YAAY,WAAWT,KAAKS,GAAG,AAAD,GAChE;QACA,OAAOT,KAAKS,GAAG;IACjB;IAEA,MAAME,aAAoBZ,KAAK;QAAEA,IAAI;YAAEa,QAAQb;QAAG;IAAE,IAAIS;IACxD,MAAMP,QAAQF,KAAK,IAAIG;IAEvB,MAAMW,KAAK,MAAMjB,eAAe,IAAI,EAAEO;IACtC,MAAMW,aAAa,IAAI,CAACC,OAAO,CAACC,WAAW,CAAC,eAAe,CAACC,MAAM;IAClE,MAAMC,YAAY,IAAI,CAACC,YAAY,CAACC,GAAG,CAAC5B,YAAYsB,WAAWO,IAAI;IACnE,MAAMhB,OAAOC,YAAYgB,aAAahB,YAAY,OAAOA,UAAUQ,WAAWS,WAAW;IAEzF,MAAMC,wBAAwB7B,4BAA4B;QACxDK;QACAyB,QAAQX,WAAWY,eAAe;IACpC;IAEA,IAAIF,yBAAyBzB,IAAI;QAC/B,MAAM4B,SAAS,MAAMjC,UAAU;YAC7BK;YACA6B,SAAS,IAAI;YACb5B;YACAa;YACAY,QAAQX,WAAWY,eAAe;YAClCG,cAAczB,cAAc;YAC5B0B,WAAW;YACX3B;YACAe;QACF;QAEA,OAAOd,cAAc,QAAQ,OAAO;YAACuB;SAAO;IAC9C;IAEA,MAAMI,OAAO,MAAMtC,SAAS;QAC1BmC,SAAS,IAAI;QACbI,gBAAgB;QAChBP,QAAQX,WAAWY,eAAe;QAClCzB,OAAOF,KAAK,IAAIE;QAChBgC,YAAY;QACZ9B;QACAE;QACAa;QACAX,OAAOI;IACT;IACA,IAAI,CAACoB,KAAKG,IAAI,CAACxB,MAAM,EAAE;QACrB,OAAO,EAAE;IACX;IAEA,MAAMyB,UAAU,EAAE;IAElB,yHAAyH;IACzH,KAAK,MAAMC,OAAOL,KAAKG,IAAI,CAAE;QAC3B,MAAMG,aAAab,wBACfxB,OACA;YACE,GAAGoC,GAAG;YACN,GAAGpC,IAAI;QACT;QAEJ,MAAM2B,SAAS,MAAMjC,UAAU;YAC7BK,IAAIqC,IAAIrC,EAAE;YACV6B,SAAS,IAAI;YACb5B,MAAMqC;YACNxB;YACAY,QAAQX,WAAWY,eAAe;YAClCG,cAAczB,cAAc;YAC5B0B,WAAW;YACX3B;YACAe;QACF;QAEAiB,QAAQG,IAAI,CAACX;IACf;IAEA,IAAIvB,cAAc,OAAO;QACvB,OAAO;IACT;IAEA,OAAO+B;AACT,EAAC"}