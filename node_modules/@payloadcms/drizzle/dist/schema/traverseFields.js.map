{"version":3,"sources":["../../src/schema/traverseFields.ts"],"sourcesContent":["import type { FlattenedField } from 'payload'\n\nimport { InvalidConfiguration } from 'payload'\nimport {\n  fieldAffectsData,\n  fieldIsVirtual,\n  fieldShouldBeLocalized,\n  optionIsObject,\n} from 'payload/shared'\nimport toSnakeCase from 'to-snake-case'\n\nimport type {\n  DrizzleAdapter,\n  IDType,\n  RawColumn,\n  RawForeignKey,\n  RawIndex,\n  RawRelation,\n  RelationMap,\n  SetColumnID,\n} from '../types.js'\n\nimport { createTableName } from '../createTableName.js'\nimport { buildIndexName } from '../utilities/buildIndexName.js'\nimport { getArrayRelationName } from '../utilities/getArrayRelationName.js'\nimport { hasLocalesTable } from '../utilities/hasLocalesTable.js'\nimport {\n  InternalBlockTableNameIndex,\n  setInternalBlockIndex,\n  validateExistingBlockIsIdentical,\n} from '../utilities/validateExistingBlockIsIdentical.js'\nimport { buildTable } from './build.js'\nimport { idToUUID } from './idToUUID.js'\nimport { withDefault } from './withDefault.js'\n\ntype Args = {\n  adapter: DrizzleAdapter\n  blocksTableNameMap: Record<string, number>\n  columnPrefix?: string\n  columns: Record<string, RawColumn>\n  disableNotNull: boolean\n  disableRelsTableUnique?: boolean\n  disableUnique?: boolean\n  fieldPrefix?: string\n  fields: FlattenedField[]\n  forceLocalized?: boolean\n  indexes: Record<string, RawIndex>\n  localesColumns: Record<string, RawColumn>\n  localesIndexes: Record<string, RawIndex>\n  newTableName: string\n  parentIsLocalized: boolean\n  parentTableName: string\n  relationships: Set<string>\n  relationsToBuild: RelationMap\n  rootRelationsToBuild?: RelationMap\n  rootTableIDColType: IDType\n  rootTableName: string\n  setColumnID: SetColumnID\n  uniqueRelationships: Set<string>\n  versions: boolean\n  /**\n   * Tracks whether or not this table is built\n   * from the result of a localized array or block field at some point\n   */\n  withinLocalizedArrayOrBlock?: boolean\n}\n\ntype Result = {\n  hasLocalizedField: boolean\n  hasLocalizedManyNumberField: boolean\n  hasLocalizedManyTextField: boolean\n  hasLocalizedRelationshipField: boolean\n  hasManyNumberField: 'index' | boolean\n  hasManyTextField: 'index' | boolean\n}\n\nexport const traverseFields = ({\n  adapter,\n  blocksTableNameMap,\n  columnPrefix,\n  columns,\n  disableNotNull,\n  disableRelsTableUnique,\n  disableUnique = false,\n  fieldPrefix,\n  fields,\n  forceLocalized,\n  indexes,\n  localesColumns,\n  localesIndexes,\n  newTableName,\n  parentIsLocalized,\n  parentTableName,\n  relationships,\n  relationsToBuild,\n  rootRelationsToBuild,\n  rootTableIDColType,\n  rootTableName,\n  setColumnID,\n  uniqueRelationships,\n  versions,\n  withinLocalizedArrayOrBlock,\n}: Args): Result => {\n  const throwValidationError = true\n  let hasLocalizedField = false\n  let hasLocalizedRelationshipField = false\n  let hasManyTextField: 'index' | boolean = false\n  let hasLocalizedManyTextField = false\n  let hasManyNumberField: 'index' | boolean = false\n  let hasLocalizedManyNumberField = false\n\n  let parentIDColType: IDType = 'integer'\n\n  const idColumn = columns.id\n\n  if (idColumn && ['numeric', 'text', 'uuid', 'varchar'].includes(idColumn.type)) {\n    parentIDColType = idColumn.type as IDType\n  }\n\n  fields.forEach((field) => {\n    if ('name' in field && field.name === 'id') {\n      return\n    }\n    if (fieldIsVirtual(field)) {\n      return\n    }\n\n    let targetTable = columns\n    let targetIndexes = indexes\n\n    const columnName = `${columnPrefix || ''}${field.name[0] === '_' ? '_' : ''}${toSnakeCase(\n      field.name,\n    )}`\n    const fieldName = `${fieldPrefix?.replace('.', '_') || ''}${field.name}`\n\n    const isFieldLocalized = fieldShouldBeLocalized({ field, parentIsLocalized })\n\n    // If field is localized,\n    // add the column to the locale table instead of main table\n    if (\n      adapter.payload.config.localization &&\n      (isFieldLocalized || forceLocalized) &&\n      field.type !== 'array' &&\n      (field.type !== 'blocks' || adapter.blocksAsJSON) &&\n      (('hasMany' in field && field.hasMany !== true) || !('hasMany' in field))\n    ) {\n      hasLocalizedField = true\n      targetTable = localesColumns\n      targetIndexes = localesIndexes\n    }\n\n    if (\n      (field.unique || field.index || ['relationship', 'upload'].includes(field.type)) &&\n      !['array', 'blocks', 'group'].includes(field.type) &&\n      !('hasMany' in field && field.hasMany === true) &&\n      !('relationTo' in field && Array.isArray(field.relationTo))\n    ) {\n      const unique = disableUnique !== true && field.unique\n      if (unique) {\n        const constraintValue = `${fieldPrefix || ''}${field.name}`\n        if (!adapter.fieldConstraints?.[rootTableName]) {\n          adapter.fieldConstraints[rootTableName] = {}\n        }\n        adapter.fieldConstraints[rootTableName][`${columnName}_idx`] = constraintValue\n      }\n\n      const indexName = buildIndexName({ name: `${newTableName}_${columnName}`, adapter })\n\n      targetIndexes[indexName] = {\n        name: indexName,\n        on: isFieldLocalized ? [fieldName, '_locale'] : fieldName,\n        unique,\n      }\n    }\n\n    switch (field.type) {\n      case 'array': {\n        const disableNotNullFromHere = Boolean(field.admin?.condition) || disableNotNull\n\n        const arrayTableName = createTableName({\n          adapter,\n          config: field,\n          parentTableName: newTableName,\n          prefix: `${newTableName}_`,\n          throwValidationError,\n          versionsCustomName: versions,\n        })\n\n        const baseColumns: Record<string, RawColumn> = {\n          _order: {\n            name: '_order',\n            type: 'integer',\n            notNull: true,\n          },\n          _parentID: {\n            name: '_parent_id',\n            type: parentIDColType,\n            notNull: true,\n          },\n        }\n\n        const baseIndexes: Record<string, RawIndex> = {\n          _orderIdx: {\n            name: `${arrayTableName}_order_idx`,\n            on: ['_order'],\n          },\n          _parentIDIdx: {\n            name: `${arrayTableName}_parent_id_idx`,\n            on: '_parentID',\n          },\n        }\n\n        const baseForeignKeys: Record<string, RawForeignKey> = {\n          _parentIDFk: {\n            name: `${arrayTableName}_parent_id_fk`,\n            columns: ['_parentID'],\n            foreignColumns: [\n              {\n                name: 'id',\n                table: parentTableName,\n              },\n            ],\n            onDelete: 'cascade',\n          },\n        }\n\n        const isLocalized =\n          Boolean(isFieldLocalized && adapter.payload.config.localization) ||\n          withinLocalizedArrayOrBlock ||\n          forceLocalized\n\n        if (isLocalized) {\n          baseColumns._locale = {\n            name: '_locale',\n            type: 'enum',\n            locale: true,\n            notNull: true,\n          }\n\n          baseIndexes._localeIdx = {\n            name: `${arrayTableName}_locale_idx`,\n            on: '_locale',\n          }\n        }\n\n        const {\n          hasLocalizedManyNumberField: subHasLocalizedManyNumberField,\n          hasLocalizedManyTextField: subHasLocalizedManyTextField,\n          hasLocalizedRelationshipField: subHasLocalizedRelationshipField,\n          hasManyNumberField: subHasManyNumberField,\n          hasManyTextField: subHasManyTextField,\n          relationsToBuild: subRelationsToBuild,\n        } = buildTable({\n          adapter,\n          baseColumns,\n          baseForeignKeys,\n          baseIndexes,\n          blocksTableNameMap,\n          disableNotNull: disableNotNullFromHere,\n          disableRelsTableUnique: true,\n          disableUnique,\n          fields: disableUnique ? idToUUID(field.flattenedFields) : field.flattenedFields,\n          parentIsLocalized: parentIsLocalized || field.localized,\n          rootRelationships: relationships,\n          rootRelationsToBuild,\n          rootTableIDColType,\n          rootTableName,\n          rootUniqueRelationships: uniqueRelationships,\n          setColumnID,\n          tableName: arrayTableName,\n          versions,\n          withinLocalizedArrayOrBlock: isLocalized,\n        })\n\n        if (subHasLocalizedManyNumberField) {\n          hasLocalizedManyNumberField = subHasLocalizedManyNumberField\n        }\n\n        if (subHasLocalizedRelationshipField) {\n          hasLocalizedRelationshipField = subHasLocalizedRelationshipField\n        }\n\n        if (subHasLocalizedManyTextField) {\n          hasLocalizedManyTextField = subHasLocalizedManyTextField\n        }\n\n        if (subHasManyTextField) {\n          if (!hasManyTextField || subHasManyTextField === 'index') {\n            hasManyTextField = subHasManyTextField\n          }\n        }\n        if (subHasManyNumberField) {\n          if (!hasManyNumberField || subHasManyNumberField === 'index') {\n            hasManyNumberField = subHasManyNumberField\n          }\n        }\n\n        const relationName = getArrayRelationName({\n          field,\n          path: fieldName,\n          tableName: arrayTableName,\n        })\n\n        relationsToBuild.set(relationName, {\n          type: 'many',\n          // arrays have their own localized table, independent of the base table.\n          localized: false,\n          target: arrayTableName,\n        })\n\n        const arrayRelations: Record<string, RawRelation> = {\n          _parentID: {\n            type: 'one',\n            fields: [\n              {\n                name: '_parentID',\n                table: arrayTableName,\n              },\n            ],\n            references: ['id'],\n            relationName,\n            to: parentTableName,\n          },\n        }\n\n        if (\n          hasLocalesTable({\n            fields: field.fields,\n            parentIsLocalized: parentIsLocalized || field.localized,\n          })\n        ) {\n          arrayRelations._locales = {\n            type: 'many',\n            relationName: '_locales',\n            to: `${arrayTableName}${adapter.localesSuffix}`,\n          }\n        }\n\n        subRelationsToBuild.forEach(({ type, localized, target }, key) => {\n          if (type === 'one') {\n            const arrayWithLocalized = localized\n              ? `${arrayTableName}${adapter.localesSuffix}`\n              : arrayTableName\n\n            arrayRelations[key] = {\n              type: 'one',\n              fields: [\n                {\n                  name: key,\n                  table: arrayWithLocalized,\n                },\n              ],\n              references: ['id'],\n              relationName: key,\n              to: target,\n            }\n          }\n\n          if (type === 'many') {\n            arrayRelations[key] = {\n              type: 'many',\n              relationName: key,\n              to: target,\n            }\n          }\n        })\n\n        adapter.rawRelations[arrayTableName] = arrayRelations\n\n        break\n      }\n      case 'blocks': {\n        if (adapter.blocksAsJSON) {\n          targetTable[fieldName] = withDefault(\n            {\n              name: columnName,\n              type: 'jsonb',\n            },\n            field,\n          )\n          break\n        }\n\n        const disableNotNullFromHere = Boolean(field.admin?.condition) || disableNotNull\n\n        ;(field.blockReferences ?? field.blocks).forEach((_block) => {\n          const block = typeof _block === 'string' ? adapter.payload.blocks[_block] : _block\n\n          let blockTableName = createTableName({\n            adapter,\n            config: block,\n            parentTableName: rootTableName,\n            prefix: `${rootTableName}_blocks_`,\n            throwValidationError,\n            versionsCustomName: versions,\n          })\n\n          if (typeof blocksTableNameMap[blockTableName] === 'undefined') {\n            blocksTableNameMap[blockTableName] = 1\n          } else if (\n            !adapter.rawTables[blockTableName] ||\n            !validateExistingBlockIsIdentical({\n              block,\n              localized: field.localized,\n              rootTableName,\n              table: adapter.rawTables[blockTableName],\n              tableLocales: adapter.rawTables[`${blockTableName}${adapter.localesSuffix}`],\n            })\n          ) {\n            blocksTableNameMap[blockTableName]++\n            setInternalBlockIndex(block, blocksTableNameMap[blockTableName])\n            blockTableName = `${blockTableName}_${blocksTableNameMap[blockTableName]}`\n          }\n          let relationName = `_blocks_${block.slug}`\n          if (typeof block[InternalBlockTableNameIndex] !== 'undefined') {\n            relationName = `_blocks_${block.slug}_${block[InternalBlockTableNameIndex]}`\n          }\n\n          if (!adapter.rawTables[blockTableName]) {\n            const baseColumns: Record<string, RawColumn> = {\n              _order: {\n                name: '_order',\n                type: 'integer',\n                notNull: true,\n              },\n              _parentID: {\n                name: '_parent_id',\n                type: rootTableIDColType,\n                notNull: true,\n              },\n              _path: {\n                name: '_path',\n                type: 'text',\n                notNull: true,\n              },\n            }\n\n            const baseIndexes: Record<string, RawIndex> = {\n              _orderIdx: {\n                name: `${blockTableName}_order_idx`,\n                on: '_order',\n              },\n              _parentIDIdx: {\n                name: `${blockTableName}_parent_id_idx`,\n                on: ['_parentID'],\n              },\n              _pathIdx: {\n                name: `${blockTableName}_path_idx`,\n                on: '_path',\n              },\n            }\n\n            const baseForeignKeys: Record<string, RawForeignKey> = {\n              _parentIdFk: {\n                name: `${blockTableName}_parent_id_fk`,\n                columns: ['_parentID'],\n                foreignColumns: [\n                  {\n                    name: 'id',\n                    table: rootTableName,\n                  },\n                ],\n                onDelete: 'cascade',\n              },\n            }\n\n            const isLocalized =\n              Boolean(isFieldLocalized && adapter.payload.config.localization) ||\n              withinLocalizedArrayOrBlock ||\n              forceLocalized\n\n            if (isLocalized) {\n              baseColumns._locale = {\n                name: '_locale',\n                type: 'enum',\n                locale: true,\n                notNull: true,\n              }\n\n              baseIndexes._localeIdx = {\n                name: `${blockTableName}_locale_idx`,\n                on: '_locale',\n              }\n            }\n\n            const {\n              hasLocalizedManyNumberField: subHasLocalizedManyNumberField,\n              hasLocalizedManyTextField: subHasLocalizedManyTextField,\n              hasLocalizedRelationshipField: subHasLocalizedRelationshipField,\n              hasManyNumberField: subHasManyNumberField,\n              hasManyTextField: subHasManyTextField,\n              relationsToBuild: subRelationsToBuild,\n            } = buildTable({\n              adapter,\n              baseColumns,\n              baseForeignKeys,\n              baseIndexes,\n              blocksTableNameMap,\n              disableNotNull: disableNotNullFromHere,\n              disableRelsTableUnique: true,\n              disableUnique,\n              fields: disableUnique ? idToUUID(block.flattenedFields) : block.flattenedFields,\n              parentIsLocalized: parentIsLocalized || field.localized,\n              rootRelationships: relationships,\n              rootRelationsToBuild,\n              rootTableIDColType,\n              rootTableName,\n              rootUniqueRelationships: uniqueRelationships,\n              setColumnID,\n              tableName: blockTableName,\n              versions,\n              withinLocalizedArrayOrBlock: isLocalized,\n            })\n\n            if (subHasLocalizedManyNumberField) {\n              hasLocalizedManyNumberField = subHasLocalizedManyNumberField\n            }\n\n            if (subHasLocalizedRelationshipField) {\n              hasLocalizedRelationshipField = subHasLocalizedRelationshipField\n            }\n\n            if (subHasLocalizedManyTextField) {\n              hasLocalizedManyTextField = subHasLocalizedManyTextField\n            }\n\n            if (subHasManyTextField) {\n              if (!hasManyTextField || subHasManyTextField === 'index') {\n                hasManyTextField = subHasManyTextField\n              }\n            }\n\n            if (subHasManyNumberField) {\n              if (!hasManyNumberField || subHasManyNumberField === 'index') {\n                hasManyNumberField = subHasManyNumberField\n              }\n            }\n\n            const blockRelations: Record<string, RawRelation> = {\n              _parentID: {\n                type: 'one',\n                fields: [\n                  {\n                    name: '_parentID',\n                    table: blockTableName,\n                  },\n                ],\n                references: ['id'],\n                relationName,\n                to: rootTableName,\n              },\n            }\n\n            if (\n              hasLocalesTable({\n                fields: block.fields,\n                parentIsLocalized: parentIsLocalized || field.localized,\n              })\n            ) {\n              blockRelations._locales = {\n                type: 'many',\n                relationName: '_locales',\n                to: `${blockTableName}${adapter.localesSuffix}`,\n              }\n            }\n\n            subRelationsToBuild.forEach(({ type, localized, target }, key) => {\n              if (type === 'one') {\n                const blockWithLocalized = localized\n                  ? `${blockTableName}${adapter.localesSuffix}`\n                  : blockTableName\n\n                blockRelations[key] = {\n                  type: 'one',\n                  fields: [\n                    {\n                      name: key,\n                      table: blockWithLocalized,\n                    },\n                  ],\n                  references: ['id'],\n                  relationName: key,\n                  to: target,\n                }\n              }\n\n              if (type === 'many') {\n                blockRelations[key] = {\n                  type: 'many',\n                  relationName: key,\n                  to: target,\n                }\n              }\n            })\n\n            adapter.rawRelations[blockTableName] = blockRelations\n          }\n\n          // blocks relationships are defined from the collection or globals table down to the block, bypassing any subBlocks\n          rootRelationsToBuild.set(relationName, {\n            type: 'many',\n            // blocks are not localized on the parent table\n            localized: false,\n            target: blockTableName,\n          })\n        })\n\n        break\n      }\n      case 'checkbox': {\n        targetTable[fieldName] = withDefault(\n          {\n            name: columnName,\n            type: 'boolean',\n          },\n          field,\n        )\n\n        break\n      }\n\n      case 'code':\n      case 'email':\n      case 'textarea': {\n        targetTable[fieldName] = withDefault(\n          {\n            name: columnName,\n            type: 'varchar',\n          },\n          field,\n        )\n\n        break\n      }\n\n      case 'date': {\n        targetTable[fieldName] = withDefault(\n          {\n            name: columnName,\n            type: 'timestamp',\n            mode: 'string',\n            precision: 3,\n            withTimezone: true,\n          },\n          field,\n        )\n\n        break\n      }\n\n      case 'group':\n      case 'tab': {\n        const disableNotNullFromHere = Boolean(field.admin?.condition) || disableNotNull\n\n        const {\n          hasLocalizedField: groupHasLocalizedField,\n          hasLocalizedManyNumberField: groupHasLocalizedManyNumberField,\n          hasLocalizedManyTextField: groupHasLocalizedManyTextField,\n          hasLocalizedRelationshipField: groupHasLocalizedRelationshipField,\n          hasManyNumberField: groupHasManyNumberField,\n          hasManyTextField: groupHasManyTextField,\n        } = traverseFields({\n          adapter,\n          blocksTableNameMap,\n          columnPrefix: `${columnName}_`,\n          columns,\n          disableNotNull: disableNotNullFromHere,\n          disableUnique,\n          fieldPrefix: `${fieldName}.`,\n          fields: field.flattenedFields,\n          forceLocalized: isFieldLocalized,\n          indexes,\n          localesColumns,\n          localesIndexes,\n          newTableName: `${parentTableName}_${columnName}`,\n          parentIsLocalized: parentIsLocalized || field.localized,\n          parentTableName,\n          relationships,\n          relationsToBuild,\n          rootRelationsToBuild,\n          rootTableIDColType,\n          rootTableName,\n          setColumnID,\n          uniqueRelationships,\n          versions,\n          withinLocalizedArrayOrBlock: withinLocalizedArrayOrBlock || isFieldLocalized,\n        })\n\n        if (groupHasLocalizedField) {\n          hasLocalizedField = true\n        }\n        if (groupHasLocalizedRelationshipField) {\n          hasLocalizedRelationshipField = true\n        }\n        if (groupHasManyTextField) {\n          hasManyTextField = true\n        }\n        if (groupHasLocalizedManyTextField) {\n          hasLocalizedManyTextField = true\n        }\n        if (groupHasManyNumberField) {\n          hasManyNumberField = true\n        }\n        if (groupHasLocalizedManyNumberField) {\n          hasLocalizedManyNumberField = true\n        }\n        break\n      }\n\n      case 'json':\n      case 'richText': {\n        targetTable[fieldName] = withDefault(\n          {\n            name: columnName,\n            type: 'jsonb',\n          },\n          field,\n        )\n\n        break\n      }\n\n      case 'number': {\n        if (field.hasMany) {\n          const isLocalized =\n            Boolean(isFieldLocalized && adapter.payload.config.localization) ||\n            withinLocalizedArrayOrBlock ||\n            forceLocalized\n\n          if (isLocalized) {\n            hasLocalizedManyNumberField = true\n          }\n\n          if (field.index) {\n            hasManyNumberField = 'index'\n          } else if (!hasManyNumberField) {\n            hasManyNumberField = true\n          }\n\n          if (field.unique) {\n            throw new InvalidConfiguration(\n              'Unique is not supported in Postgres for hasMany number fields.',\n            )\n          }\n        } else {\n          targetTable[fieldName] = withDefault(\n            {\n              name: columnName,\n              type: 'numeric',\n            },\n            field,\n          )\n        }\n\n        break\n      }\n\n      case 'point': {\n        targetTable[fieldName] = withDefault(\n          {\n            name: columnName,\n            type: 'geometry',\n          },\n          field,\n        )\n\n        break\n      }\n\n      case 'radio':\n      case 'select': {\n        const enumName = createTableName({\n          adapter,\n          config: field,\n          parentTableName: newTableName,\n          prefix: `enum_${newTableName}_`,\n          target: 'enumName',\n          throwValidationError,\n        })\n\n        const options = field.options.map((option) => {\n          if (optionIsObject(option)) {\n            return option.value\n          }\n\n          return option\n        })\n\n        if (field.type === 'select' && field.hasMany) {\n          const selectTableName = createTableName({\n            adapter,\n            config: field,\n            parentTableName: newTableName,\n            prefix: `${newTableName}_`,\n            throwValidationError,\n            versionsCustomName: versions,\n          })\n\n          const baseColumns: Record<string, RawColumn> = {\n            order: {\n              name: 'order',\n              type: 'integer',\n              notNull: true,\n            },\n            parent: {\n              name: 'parent_id',\n              type: parentIDColType,\n              notNull: true,\n            },\n            value: {\n              name: 'value',\n              type: 'enum',\n              enumName: createTableName({\n                adapter,\n                config: field,\n                parentTableName: newTableName,\n                prefix: `enum_${newTableName}_`,\n                target: 'enumName',\n                throwValidationError,\n              }),\n              options,\n            },\n          }\n\n          const baseIndexes: Record<string, RawIndex> = {\n            orderIdx: {\n              name: `${selectTableName}_order_idx`,\n              on: 'order',\n            },\n            parentIdx: {\n              name: `${selectTableName}_parent_idx`,\n              on: 'parent',\n            },\n          }\n\n          const baseForeignKeys: Record<string, RawForeignKey> = {\n            parentFk: {\n              name: `${selectTableName}_parent_fk`,\n              columns: ['parent'],\n              foreignColumns: [\n                {\n                  name: 'id',\n                  table: parentTableName,\n                },\n              ],\n              onDelete: 'cascade',\n            },\n          }\n\n          const isLocalized =\n            Boolean(isFieldLocalized && adapter.payload.config.localization) ||\n            withinLocalizedArrayOrBlock ||\n            forceLocalized\n\n          if (isLocalized) {\n            baseColumns.locale = {\n              name: 'locale',\n              type: 'enum',\n              locale: true,\n              notNull: true,\n            }\n\n            baseIndexes.localeIdx = {\n              name: `${selectTableName}_locale_idx`,\n              on: 'locale',\n            }\n          }\n\n          if (field.index) {\n            baseIndexes.value = {\n              name: `${selectTableName}_value_idx`,\n              on: 'value',\n            }\n          }\n\n          buildTable({\n            adapter,\n            baseColumns,\n            baseForeignKeys,\n            baseIndexes,\n            blocksTableNameMap,\n            disableNotNull,\n            disableUnique,\n            fields: [],\n            parentIsLocalized: parentIsLocalized || field.localized,\n            rootTableName,\n            setColumnID,\n            tableName: selectTableName,\n            versions,\n          })\n\n          relationsToBuild.set(fieldName, {\n            type: 'many',\n            // selects have their own localized table, independent of the base table.\n            localized: false,\n            target: selectTableName,\n          })\n\n          adapter.rawRelations[selectTableName] = {\n            parent: {\n              type: 'one',\n              fields: [\n                {\n                  name: 'parent',\n                  table: selectTableName,\n                },\n              ],\n              references: ['id'],\n              relationName: fieldName,\n              to: parentTableName,\n            },\n          }\n        } else {\n          targetTable[fieldName] = withDefault(\n            {\n              name: columnName,\n              type: 'enum',\n              enumName,\n              options,\n            },\n            field,\n          )\n        }\n        break\n      }\n\n      case 'relationship':\n      case 'upload':\n        if (Array.isArray(field.relationTo)) {\n          field.relationTo.forEach((relation) => {\n            relationships.add(relation)\n            if (field.unique && !disableUnique && !disableRelsTableUnique) {\n              uniqueRelationships.add(relation)\n            }\n          })\n        } else if (field.hasMany) {\n          relationships.add(field.relationTo)\n          if (field.unique && !disableUnique && !disableRelsTableUnique) {\n            uniqueRelationships.add(field.relationTo)\n          }\n        } else {\n          // simple relationships get a column on the targetTable with a foreign key to the relationTo table\n          const relationshipConfig = adapter.payload.collections[field.relationTo].config\n\n          const tableName = adapter.tableNameMap.get(toSnakeCase(field.relationTo))\n\n          // get the id type of the related collection\n          let colType: IDType = adapter.idType === 'uuid' ? 'uuid' : 'integer'\n          const relatedCollectionCustomID = relationshipConfig.fields.find(\n            (field) => fieldAffectsData(field) && field.name === 'id',\n          )\n          if (relatedCollectionCustomID?.type === 'number') {\n            colType = 'numeric'\n          }\n          if (relatedCollectionCustomID?.type === 'text') {\n            colType = 'varchar'\n          }\n\n          // make the foreign key column for relationship using the correct id column type\n          targetTable[fieldName] = {\n            name: `${columnName}_id`,\n            type: colType,\n            reference: {\n              name: 'id',\n              onDelete: 'set null',\n              table: tableName,\n            },\n          }\n\n          // add relationship to table\n          relationsToBuild.set(fieldName, {\n            type: 'one',\n            localized: adapter.payload.config.localization && (isFieldLocalized || forceLocalized),\n            target: tableName,\n          })\n\n          // add notNull when not required\n          if (!disableNotNull && field.required && !field.admin?.condition) {\n            targetTable[fieldName].notNull = true\n          }\n          break\n        }\n\n        if (\n          Boolean(isFieldLocalized && adapter.payload.config.localization) ||\n          withinLocalizedArrayOrBlock\n        ) {\n          hasLocalizedRelationshipField = true\n        }\n\n        break\n\n      case 'text': {\n        if (field.hasMany) {\n          const isLocalized =\n            Boolean(isFieldLocalized && adapter.payload.config.localization) ||\n            withinLocalizedArrayOrBlock ||\n            forceLocalized\n\n          if (isLocalized) {\n            hasLocalizedManyTextField = true\n          }\n\n          if (field.index) {\n            hasManyTextField = 'index'\n          } else if (!hasManyTextField) {\n            hasManyTextField = true\n          }\n\n          if (field.unique) {\n            throw new InvalidConfiguration(\n              'Unique is not supported in Postgres for hasMany text fields.',\n            )\n          }\n        } else {\n          targetTable[fieldName] = withDefault(\n            {\n              name: columnName,\n              type: 'varchar',\n            },\n            field,\n          )\n        }\n        break\n      }\n\n      default:\n        break\n    }\n\n    const condition = field.admin && field.admin.condition\n\n    if (\n      !disableNotNull &&\n      targetTable[fieldName] &&\n      'required' in field &&\n      field.required &&\n      !condition\n    ) {\n      targetTable[fieldName].notNull = true\n    }\n  })\n\n  return {\n    hasLocalizedField,\n    hasLocalizedManyNumberField,\n    hasLocalizedManyTextField,\n    hasLocalizedRelationshipField,\n    hasManyNumberField,\n    hasManyTextField,\n  }\n}\n"],"names":["InvalidConfiguration","fieldAffectsData","fieldIsVirtual","fieldShouldBeLocalized","optionIsObject","toSnakeCase","createTableName","buildIndexName","getArrayRelationName","hasLocalesTable","InternalBlockTableNameIndex","setInternalBlockIndex","validateExistingBlockIsIdentical","buildTable","idToUUID","withDefault","traverseFields","adapter","blocksTableNameMap","columnPrefix","columns","disableNotNull","disableRelsTableUnique","disableUnique","fieldPrefix","fields","forceLocalized","indexes","localesColumns","localesIndexes","newTableName","parentIsLocalized","parentTableName","relationships","relationsToBuild","rootRelationsToBuild","rootTableIDColType","rootTableName","setColumnID","uniqueRelationships","versions","withinLocalizedArrayOrBlock","throwValidationError","hasLocalizedField","hasLocalizedRelationshipField","hasManyTextField","hasLocalizedManyTextField","hasManyNumberField","hasLocalizedManyNumberField","parentIDColType","idColumn","id","includes","type","forEach","field","name","targetTable","targetIndexes","columnName","fieldName","replace","isFieldLocalized","payload","config","localization","blocksAsJSON","hasMany","unique","index","Array","isArray","relationTo","constraintValue","fieldConstraints","indexName","on","disableNotNullFromHere","Boolean","admin","condition","arrayTableName","prefix","versionsCustomName","baseColumns","_order","notNull","_parentID","baseIndexes","_orderIdx","_parentIDIdx","baseForeignKeys","_parentIDFk","foreignColumns","table","onDelete","isLocalized","_locale","locale","_localeIdx","subHasLocalizedManyNumberField","subHasLocalizedManyTextField","subHasLocalizedRelationshipField","subHasManyNumberField","subHasManyTextField","subRelationsToBuild","flattenedFields","localized","rootRelationships","rootUniqueRelationships","tableName","relationName","path","set","target","arrayRelations","references","to","_locales","localesSuffix","key","arrayWithLocalized","rawRelations","blockReferences","blocks","_block","block","blockTableName","rawTables","tableLocales","slug","_path","_pathIdx","_parentIdFk","blockRelations","blockWithLocalized","mode","precision","withTimezone","groupHasLocalizedField","groupHasLocalizedManyNumberField","groupHasLocalizedManyTextField","groupHasLocalizedRelationshipField","groupHasManyNumberField","groupHasManyTextField","enumName","options","map","option","value","selectTableName","order","parent","orderIdx","parentIdx","parentFk","localeIdx","relation","add","relationshipConfig","collections","tableNameMap","get","colType","idType","relatedCollectionCustomID","find","reference","required"],"mappings":"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"}