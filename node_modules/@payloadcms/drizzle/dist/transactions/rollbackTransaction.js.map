{"version":3,"sources":["../../src/transactions/rollbackTransaction.ts"],"sourcesContent":["import type { RollbackTransaction } from 'payload'\n\nexport const rollbackTransaction: RollbackTransaction = async function rollbackTransaction(\n  incomingID = '',\n) {\n  const transactionID = incomingID instanceof Promise ? await incomingID : incomingID\n\n  // if multiple operations are using the same transaction, the first will flow through and delete the session.\n  // subsequent calls should be ignored.\n  if (!this.sessions[transactionID]) {\n    return\n  }\n\n  // end the session promise in failure by calling reject\n  await this.sessions[transactionID].reject()\n\n  // delete the session causing any other operations with the same transaction to fail\n  delete this.sessions[transactionID]\n}\n"],"names":["rollbackTransaction","incomingID","transactionID","Promise","sessions","reject"],"mappings":"AAEA,OAAO,MAAMA,sBAA2C,eAAeA,oBACrEC,aAAa,EAAE;IAEf,MAAMC,gBAAgBD,sBAAsBE,UAAU,MAAMF,aAAaA;IAEzE,6GAA6G;IAC7G,sCAAsC;IACtC,IAAI,CAAC,IAAI,CAACG,QAAQ,CAACF,cAAc,EAAE;QACjC;IACF;IAEA,uDAAuD;IACvD,MAAM,IAAI,CAACE,QAAQ,CAACF,cAAc,CAACG,MAAM;IAEzC,oFAAoF;IACpF,OAAO,IAAI,CAACD,QAAQ,CAACF,cAAc;AACrC,EAAC"}