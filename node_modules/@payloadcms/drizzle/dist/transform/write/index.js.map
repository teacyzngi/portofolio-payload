{"version":3,"sources":["../../../src/transform/write/index.ts"],"sourcesContent":["import type { FlattenedField } from 'payload'\n\nimport type { DrizzleAdapter } from '../../types.js'\nimport type { RowToInsert } from './types.js'\n\nimport { traverseFields } from './traverseFields.js'\n\ntype Args = {\n  adapter: DrizzleAdapter\n  data: Record<string, unknown>\n  enableAtomicWrites?: boolean\n  fields: FlattenedField[]\n  parentIsLocalized?: boolean\n  path?: string\n  tableName: string\n}\n\nexport const transformForWrite = ({\n  adapter,\n  data,\n  enableAtomicWrites,\n  fields,\n  parentIsLocalized,\n  path = '',\n  tableName,\n}: Args): RowToInsert => {\n  // Split out the incoming data into rows to insert / delete\n  const rowToInsert: RowToInsert = {\n    arrays: {},\n    arraysToPush: {},\n    blocks: {},\n    blocksToDelete: new Set(),\n    locales: {},\n    numbers: [],\n    numbersToDelete: [],\n    relationships: [],\n    relationshipsToAppend: [],\n    relationshipsToDelete: [],\n    row: {},\n    selects: {},\n    texts: [],\n    textsToDelete: [],\n  }\n\n  // This function is responsible for building up the\n  // above rowToInsert\n  traverseFields({\n    adapter,\n    arrays: rowToInsert.arrays,\n    arraysToPush: rowToInsert.arraysToPush,\n    baseTableName: tableName,\n    blocks: rowToInsert.blocks,\n    blocksToDelete: rowToInsert.blocksToDelete,\n    columnPrefix: '',\n    data,\n    enableAtomicWrites,\n    fieldPrefix: '',\n    fields,\n    locales: rowToInsert.locales,\n    numbers: rowToInsert.numbers,\n    numbersToDelete: rowToInsert.numbersToDelete,\n    parentIsLocalized,\n    parentTableName: tableName,\n    path,\n    relationships: rowToInsert.relationships,\n    relationshipsToAppend: rowToInsert.relationshipsToAppend,\n    relationshipsToDelete: rowToInsert.relationshipsToDelete,\n    row: rowToInsert.row,\n    selects: rowToInsert.selects,\n    texts: rowToInsert.texts,\n    textsToDelete: rowToInsert.textsToDelete,\n  })\n\n  return rowToInsert\n}\n"],"names":["traverseFields","transformForWrite","adapter","data","enableAtomicWrites","fields","parentIsLocalized","path","tableName","rowToInsert","arrays","arraysToPush","blocks","blocksToDelete","Set","locales","numbers","numbersToDelete","relationships","relationshipsToAppend","relationshipsToDelete","row","selects","texts","textsToDelete","baseTableName","columnPrefix","fieldPrefix","parentTableName"],"mappings":"AAKA,SAASA,cAAc,QAAQ,sBAAqB;AAYpD,OAAO,MAAMC,oBAAoB,CAAC,EAChCC,OAAO,EACPC,IAAI,EACJC,kBAAkB,EAClBC,MAAM,EACNC,iBAAiB,EACjBC,OAAO,EAAE,EACTC,SAAS,EACJ;IACL,2DAA2D;IAC3D,MAAMC,cAA2B;QAC/BC,QAAQ,CAAC;QACTC,cAAc,CAAC;QACfC,QAAQ,CAAC;QACTC,gBAAgB,IAAIC;QACpBC,SAAS,CAAC;QACVC,SAAS,EAAE;QACXC,iBAAiB,EAAE;QACnBC,eAAe,EAAE;QACjBC,uBAAuB,EAAE;QACzBC,uBAAuB,EAAE;QACzBC,KAAK,CAAC;QACNC,SAAS,CAAC;QACVC,OAAO,EAAE;QACTC,eAAe,EAAE;IACnB;IAEA,mDAAmD;IACnD,oBAAoB;IACpBxB,eAAe;QACbE;QACAQ,QAAQD,YAAYC,MAAM;QAC1BC,cAAcF,YAAYE,YAAY;QACtCc,eAAejB;QACfI,QAAQH,YAAYG,MAAM;QAC1BC,gBAAgBJ,YAAYI,cAAc;QAC1Ca,cAAc;QACdvB;QACAC;QACAuB,aAAa;QACbtB;QACAU,SAASN,YAAYM,OAAO;QAC5BC,SAASP,YAAYO,OAAO;QAC5BC,iBAAiBR,YAAYQ,eAAe;QAC5CX;QACAsB,iBAAiBpB;QACjBD;QACAW,eAAeT,YAAYS,aAAa;QACxCC,uBAAuBV,YAAYU,qBAAqB;QACxDC,uBAAuBX,YAAYW,qBAAqB;QACxDC,KAAKZ,YAAYY,GAAG;QACpBC,SAASb,YAAYa,OAAO;QAC5BC,OAAOd,YAAYc,KAAK;QACxBC,eAAef,YAAYe,aAAa;IAC1C;IAEA,OAAOf;AACT,EAAC"}