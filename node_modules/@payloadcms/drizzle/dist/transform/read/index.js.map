{"version":3,"sources":["../../../src/transform/read/index.ts"],"sourcesContent":["import type { FlattenedField, JoinQuery, SanitizedConfig, TypeWithID } from 'payload'\n\nimport type { DrizzleAdapter } from '../../types.js'\n\nimport { createBlocksMap } from '../../utilities/createBlocksMap.js'\nimport { createPathMap } from '../../utilities/createRelationshipMap.js'\nimport { traverseFields } from './traverseFields.js'\n\ntype TransformArgs = {\n  adapter: DrizzleAdapter\n  config: SanitizedConfig\n  data: Record<string, unknown>\n  fallbackLocale?: false | string\n  fields: FlattenedField[]\n  joinQuery?: JoinQuery\n  locale?: string\n  parentIsLocalized?: boolean\n  tableName: string\n}\n\n// This is the entry point to transform Drizzle output data\n// into the shape Payload expects based on field schema\nexport const transform = <T extends Record<string, unknown> | TypeWithID>({\n  adapter,\n  config,\n  data,\n  fields,\n  joinQuery,\n  parentIsLocalized,\n  tableName,\n}: TransformArgs): T => {\n  let relationships: Record<string, Record<string, unknown>[]> = {}\n  let texts: Record<string, Record<string, unknown>[]> = {}\n  let numbers: Record<string, Record<string, unknown>[]> = {}\n\n  if ('_rels' in data) {\n    relationships = createPathMap(data._rels)\n    delete data._rels\n  }\n\n  if ('_texts' in data) {\n    texts = createPathMap(data._texts)\n    delete data._texts\n  }\n\n  if ('_numbers' in data) {\n    numbers = createPathMap(data._numbers)\n    delete data._numbers\n  }\n\n  const blocks = createBlocksMap(data)\n\n  const deletions = []\n\n  const result = traverseFields<T>({\n    adapter,\n    blocks,\n    config,\n    currentTableName: tableName,\n    dataRef: {\n      id: data.id,\n    },\n    deletions,\n    fieldPrefix: '',\n    fields,\n    joinQuery,\n    numbers,\n    parentIsLocalized,\n    path: '',\n    relationships,\n    table: data,\n    tablePath: '',\n    texts,\n    topLevelTableName: tableName,\n  })\n\n  deletions.forEach((deletion) => deletion())\n\n  return result\n}\n"],"names":["createBlocksMap","createPathMap","traverseFields","transform","adapter","config","data","fields","joinQuery","parentIsLocalized","tableName","relationships","texts","numbers","_rels","_texts","_numbers","blocks","deletions","result","currentTableName","dataRef","id","fieldPrefix","path","table","tablePath","topLevelTableName","forEach","deletion"],"mappings":"AAIA,SAASA,eAAe,QAAQ,qCAAoC;AACpE,SAASC,aAAa,QAAQ,2CAA0C;AACxE,SAASC,cAAc,QAAQ,sBAAqB;AAcpD,2DAA2D;AAC3D,uDAAuD;AACvD,OAAO,MAAMC,YAAY,CAAiD,EACxEC,OAAO,EACPC,MAAM,EACNC,IAAI,EACJC,MAAM,EACNC,SAAS,EACTC,iBAAiB,EACjBC,SAAS,EACK;IACd,IAAIC,gBAA2D,CAAC;IAChE,IAAIC,QAAmD,CAAC;IACxD,IAAIC,UAAqD,CAAC;IAE1D,IAAI,WAAWP,MAAM;QACnBK,gBAAgBV,cAAcK,KAAKQ,KAAK;QACxC,OAAOR,KAAKQ,KAAK;IACnB;IAEA,IAAI,YAAYR,MAAM;QACpBM,QAAQX,cAAcK,KAAKS,MAAM;QACjC,OAAOT,KAAKS,MAAM;IACpB;IAEA,IAAI,cAAcT,MAAM;QACtBO,UAAUZ,cAAcK,KAAKU,QAAQ;QACrC,OAAOV,KAAKU,QAAQ;IACtB;IAEA,MAAMC,SAASjB,gBAAgBM;IAE/B,MAAMY,YAAY,EAAE;IAEpB,MAAMC,SAASjB,eAAkB;QAC/BE;QACAa;QACAZ;QACAe,kBAAkBV;QAClBW,SAAS;YACPC,IAAIhB,KAAKgB,EAAE;QACb;QACAJ;QACAK,aAAa;QACbhB;QACAC;QACAK;QACAJ;QACAe,MAAM;QACNb;QACAc,OAAOnB;QACPoB,WAAW;QACXd;QACAe,mBAAmBjB;IACrB;IAEAQ,UAAUU,OAAO,CAAC,CAACC,WAAaA;IAEhC,OAAOV;AACT,EAAC"}