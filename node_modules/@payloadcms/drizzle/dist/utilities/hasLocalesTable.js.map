{"version":3,"sources":["../../src/utilities/hasLocalesTable.ts"],"sourcesContent":["import type { Field } from 'payload'\n\nimport { fieldAffectsData, fieldHasSubFields, fieldShouldBeLocalized } from 'payload/shared'\n\nexport const hasLocalesTable = ({\n  fields,\n  parentIsLocalized,\n}: {\n  fields: Field[]\n  /**\n   * @todo make required in v4.0. Usually you'd wanna pass this in\n   */\n  parentIsLocalized?: boolean\n}): boolean => {\n  return fields.some((field) => {\n    // arrays always get a separate table\n    if (field.type === 'array') {\n      return false\n    }\n    if (fieldAffectsData(field) && fieldShouldBeLocalized({ field, parentIsLocalized })) {\n      return true\n    }\n    if (fieldHasSubFields(field)) {\n      return hasLocalesTable({\n        fields: field.fields,\n        parentIsLocalized: parentIsLocalized || ('localized' in field && field.localized),\n      })\n    }\n    if (field.type === 'tabs') {\n      return field.tabs.some((tab) =>\n        hasLocalesTable({\n          fields: tab.fields,\n          parentIsLocalized: parentIsLocalized || tab.localized,\n        }),\n      )\n    }\n    return false\n  })\n}\n"],"names":["fieldAffectsData","fieldHasSubFields","fieldShouldBeLocalized","hasLocalesTable","fields","parentIsLocalized","some","field","type","localized","tabs","tab"],"mappings":"AAEA,SAASA,gBAAgB,EAAEC,iBAAiB,EAAEC,sBAAsB,QAAQ,iBAAgB;AAE5F,OAAO,MAAMC,kBAAkB,CAAC,EAC9BC,MAAM,EACNC,iBAAiB,EAOlB;IACC,OAAOD,OAAOE,IAAI,CAAC,CAACC;QAClB,qCAAqC;QACrC,IAAIA,MAAMC,IAAI,KAAK,SAAS;YAC1B,OAAO;QACT;QACA,IAAIR,iBAAiBO,UAAUL,uBAAuB;YAAEK;YAAOF;QAAkB,IAAI;YACnF,OAAO;QACT;QACA,IAAIJ,kBAAkBM,QAAQ;YAC5B,OAAOJ,gBAAgB;gBACrBC,QAAQG,MAAMH,MAAM;gBACpBC,mBAAmBA,qBAAsB,eAAeE,SAASA,MAAME,SAAS;YAClF;QACF;QACA,IAAIF,MAAMC,IAAI,KAAK,QAAQ;YACzB,OAAOD,MAAMG,IAAI,CAACJ,IAAI,CAAC,CAACK,MACtBR,gBAAgB;oBACdC,QAAQO,IAAIP,MAAM;oBAClBC,mBAAmBA,qBAAqBM,IAAIF,SAAS;gBACvD;QAEJ;QACA,OAAO;IACT;AACF,EAAC"}