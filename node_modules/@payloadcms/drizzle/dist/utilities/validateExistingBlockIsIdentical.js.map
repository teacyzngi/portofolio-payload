{"version":3,"sources":["../../src/utilities/validateExistingBlockIsIdentical.ts"],"sourcesContent":["import type { Block, Field, FlattenedBlock } from 'payload'\n\nimport {\n  fieldAffectsData,\n  fieldHasSubFields,\n  fieldShouldBeLocalized,\n  tabHasName,\n} from 'payload/shared'\n\nimport type { RawTable } from '../types.js'\n\ntype Args = {\n  block: Block\n  localized: boolean\n  /**\n   * @todo make required in v4.0. Usually you'd wanna pass this in\n   */\n  parentIsLocalized?: boolean\n  rootTableName: string\n  table: RawTable\n  tableLocales?: RawTable\n}\n\nconst getFlattenedFieldNames = (args: {\n  fields: Field[]\n  parentIsLocalized: boolean\n  prefix?: string\n}): { localized?: boolean; name: string }[] => {\n  const { fields, parentIsLocalized, prefix = '' } = args\n  return fields.reduce((fieldsToUse, field) => {\n    let fieldPrefix = prefix\n\n    if (\n      ['array', 'blocks', 'relationship', 'upload'].includes(field.type) ||\n      ('hasMany' in field && field.hasMany === true)\n    ) {\n      return fieldsToUse\n    }\n\n    if (fieldHasSubFields(field)) {\n      fieldPrefix = 'name' in field ? `${prefix}${field.name}_` : prefix\n      return [\n        ...fieldsToUse,\n        ...getFlattenedFieldNames({\n          fields: field.fields,\n          parentIsLocalized: parentIsLocalized || ('localized' in field && field.localized),\n          prefix: fieldPrefix,\n        }),\n      ]\n    }\n\n    if (field.type === 'tabs') {\n      return [\n        ...fieldsToUse,\n        ...field.tabs.reduce((tabFields, tab) => {\n          fieldPrefix = 'name' in tab ? `${prefix}_${tab.name}` : prefix\n          return [\n            ...tabFields,\n            ...(tabHasName(tab)\n              ? [{ ...tab, type: 'tab' }]\n              : getFlattenedFieldNames({\n                  fields: tab.fields,\n                  parentIsLocalized: parentIsLocalized || tab.localized,\n                  prefix: fieldPrefix,\n                })),\n          ]\n        }, []),\n      ]\n    }\n\n    if (fieldAffectsData(field)) {\n      return [\n        ...fieldsToUse,\n        {\n          name: `${fieldPrefix}${field.name}`,\n          localized: fieldShouldBeLocalized({ field, parentIsLocalized }),\n        },\n      ]\n    }\n\n    return fieldsToUse\n  }, [])\n}\n\n/**\n * returns true if all the fields in a block are identical to the existing table\n */\nexport const validateExistingBlockIsIdentical = ({\n  block,\n  localized,\n  parentIsLocalized,\n  table,\n  tableLocales,\n}: Args): boolean => {\n  const fieldNames = getFlattenedFieldNames({\n    fields: block.fields,\n    parentIsLocalized: parentIsLocalized || localized,\n  })\n\n  const missingField =\n    // ensure every field from the config is in the matching table\n    fieldNames.find(({ name, localized }) => {\n      const fieldTable = localized && tableLocales ? tableLocales : table\n      return Object.keys(fieldTable.columns).indexOf(name) === -1\n    }) ||\n    // ensure every table column is matched for every field from the config\n    Object.keys(table).find((fieldName) => {\n      if (!['_locale', '_order', '_parentID', '_path', '_uuid'].includes(fieldName)) {\n        return fieldNames.findIndex((field) => field.name) === -1\n      }\n    })\n\n  if (missingField) {\n    return false\n  }\n\n  return Boolean(localized) === Boolean(table.columns._locale)\n}\n\nexport const InternalBlockTableNameIndex = Symbol('InternalBlockTableNameIndex')\nexport const setInternalBlockIndex = (block: FlattenedBlock, index: number) => {\n  block[InternalBlockTableNameIndex] = index\n}\n\nexport const resolveBlockTableName = (block: FlattenedBlock, originalTableName: string) => {\n  if (!block[InternalBlockTableNameIndex]) {\n    return originalTableName\n  }\n\n  return `${originalTableName}_${block[InternalBlockTableNameIndex]}`\n}\n"],"names":["fieldAffectsData","fieldHasSubFields","fieldShouldBeLocalized","tabHasName","getFlattenedFieldNames","args","fields","parentIsLocalized","prefix","reduce","fieldsToUse","field","fieldPrefix","includes","type","hasMany","name","localized","tabs","tabFields","tab","validateExistingBlockIsIdentical","block","table","tableLocales","fieldNames","missingField","find","fieldTable","Object","keys","columns","indexOf","fieldName","findIndex","Boolean","_locale","InternalBlockTableNameIndex","Symbol","setInternalBlockIndex","index","resolveBlockTableName","originalTableName"],"mappings":"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"}