{"version":3,"sources":["../../src/utilities/buildCreateMigration.ts"],"sourcesContent":["import type { DrizzleSnapshotJSON } from 'drizzle-kit/api'\nimport type { CreateMigration } from 'payload'\n\nimport fs from 'fs'\nimport path from 'path'\nimport { getPredefinedMigration, writeMigrationIndex } from 'payload'\nimport prompts from 'prompts'\n\nimport type { DrizzleAdapter } from '../types.js'\n\nimport { getMigrationTemplate } from './getMigrationTemplate.js'\n\nexport const buildCreateMigration = ({\n  executeMethod,\n  filename,\n  sanitizeStatements,\n}: {\n  executeMethod: string\n  filename: string\n  sanitizeStatements: (args: { sqlExecute: string; statements: string[] }) => string\n}): CreateMigration => {\n  const dirname = path.dirname(filename)\n  return async function createMigration(\n    this: DrizzleAdapter,\n    { file, forceAcceptWarning, migrationName, payload, skipEmpty },\n  ) {\n    const dir = payload.db.migrationDir\n    if (!fs.existsSync(dir)) {\n      fs.mkdirSync(dir)\n    }\n\n    const { generateDrizzleJson, generateMigration, upSnapshot } = this.requireDrizzleKit()\n\n    const drizzleJsonAfter = await generateDrizzleJson(this.schema)\n\n    const [yyymmdd, hhmmss] = new Date().toISOString().split('T')\n    const formattedDate = yyymmdd.replace(/\\D/g, '')\n    const formattedTime = hhmmss.split('.')[0].replace(/\\D/g, '')\n    let imports: string = ''\n    let downSQL: string\n    let upSQL: string\n    ;({ downSQL, imports, upSQL } = await getPredefinedMigration({\n      dirname,\n      file,\n      migrationName,\n      payload,\n    }))\n\n    const timestamp = `${formattedDate}_${formattedTime}`\n\n    const name = migrationName || file?.split('/').slice(2).join('/')\n    const fileName = `${timestamp}${name ? `_${name.replace(/\\W/g, '_')}` : ''}`\n\n    const filePath = `${dir}/${fileName}`\n\n    let drizzleJsonBefore = this.defaultDrizzleSnapshot as DrizzleSnapshotJSON\n\n    if (this.schemaName) {\n      drizzleJsonBefore.schemas = {\n        [this.schemaName]: this.schemaName,\n      }\n    }\n\n    if (!upSQL) {\n      // Get latest migration snapshot\n      const latestSnapshot = fs\n        .readdirSync(dir)\n        .filter((file) => file.endsWith('.json'))\n        .sort()\n        .reverse()?.[0]\n\n      if (latestSnapshot) {\n        drizzleJsonBefore = JSON.parse(fs.readFileSync(`${dir}/${latestSnapshot}`, 'utf8'))\n\n        if (upSnapshot && drizzleJsonBefore.version < drizzleJsonAfter.version) {\n          drizzleJsonBefore = upSnapshot(drizzleJsonBefore)\n        }\n      }\n\n      const sqlStatementsUp = await generateMigration(drizzleJsonBefore, drizzleJsonAfter)\n      const sqlStatementsDown = await generateMigration(drizzleJsonAfter, drizzleJsonBefore)\n      const sqlExecute = `await db.${executeMethod}(` + 'sql`'\n\n      if (sqlStatementsUp?.length) {\n        upSQL = sanitizeStatements({ sqlExecute, statements: sqlStatementsUp })\n      }\n      if (sqlStatementsDown?.length) {\n        downSQL = sanitizeStatements({ sqlExecute, statements: sqlStatementsDown })\n      }\n\n      if (!upSQL?.length && !downSQL?.length && !forceAcceptWarning) {\n        if (skipEmpty) {\n          process.exit(0)\n        }\n\n        const { confirm: shouldCreateBlankMigration } = await prompts(\n          {\n            name: 'confirm',\n            type: 'confirm',\n            initial: false,\n            message: 'No schema changes detected. Would you like to create a blank migration file?',\n          },\n          {\n            onCancel: () => {\n              process.exit(0)\n            },\n          },\n        )\n\n        if (!shouldCreateBlankMigration) {\n          process.exit(0)\n        }\n      }\n\n      // write schema\n      fs.writeFileSync(`${filePath}.json`, JSON.stringify(drizzleJsonAfter, null, 2))\n    }\n\n    const data = getMigrationTemplate({\n      downSQL: downSQL || `  // Migration code`,\n      imports,\n      packageName: payload.db.packageName,\n      upSQL: upSQL || `  // Migration code`,\n    })\n\n    const fullPath = `${filePath}.ts`\n\n    // write migration\n    fs.writeFileSync(fullPath, data)\n\n    writeMigrationIndex({ migrationsDir: payload.db.migrationDir })\n\n    payload.logger.info({ msg: `Migration created at ${fullPath}` })\n  }\n}\n"],"names":["fs","path","getPredefinedMigration","writeMigrationIndex","prompts","getMigrationTemplate","buildCreateMigration","executeMethod","filename","sanitizeStatements","dirname","createMigration","file","forceAcceptWarning","migrationName","payload","skipEmpty","dir","db","migrationDir","existsSync","mkdirSync","generateDrizzleJson","generateMigration","upSnapshot","requireDrizzleKit","drizzleJsonAfter","schema","yyymmdd","hhmmss","Date","toISOString","split","formattedDate","replace","formattedTime","imports","downSQL","upSQL","timestamp","name","slice","join","fileName","filePath","drizzleJsonBefore","defaultDrizzleSnapshot","schemaName","schemas","latestSnapshot","readdirSync","filter","endsWith","sort","reverse","JSON","parse","readFileSync","version","sqlStatementsUp","sqlStatementsDown","sqlExecute","length","statements","process","exit","confirm","shouldCreateBlankMigration","type","initial","message","onCancel","writeFileSync","stringify","data","packageName","fullPath","migrationsDir","logger","info","msg"],"mappings":"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"}