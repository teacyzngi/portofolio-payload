{"version":3,"sources":["../../src/utilities/createSchemaGenerator.ts"],"sourcesContent":["import type { GenerateSchema } from 'payload'\n\nimport { existsSync } from 'fs'\nimport { writeFile } from 'fs/promises'\nimport path from 'path'\n\nimport type { ColumnToCodeConverter, DrizzleAdapter } from '../types.js'\n\n/**\n * @example\n * console.log(sanitizeObjectKey(\"oneTwo\"));   // oneTwo\n * console.log(sanitizeObjectKey(\"one-two\"));  // 'one-two'\n * console.log(sanitizeObjectKey(\"_one$Two3\")); // _one$Two3\n * console.log(sanitizeObjectKey(\"3invalid\")); // '3invalid'\n */\nconst sanitizeObjectKey = (key: string) => {\n  // Regular expression for a valid identifier\n  const identifierRegex = /^[a-z_$][\\w$]*$/i\n  if (identifierRegex.test(key)) {\n    return key\n  }\n\n  return `'${key}'`\n}\n\n/**\n * @example\n * (columns default-valuesID) -> columns['default-valuesID']\n * (columns defaultValues) -> columns.defaultValues\n */\nconst accessProperty = (objName: string, key: string) => {\n  const sanitized = sanitizeObjectKey(key)\n\n  if (sanitized.startsWith(\"'\")) {\n    return `${objName}[${sanitized}]`\n  }\n\n  return `${objName}.${key}`\n}\n\nexport const createSchemaGenerator = ({\n  columnToCodeConverter,\n  corePackageSuffix,\n  defaultOutputFile,\n  enumImport,\n  schemaImport,\n  tableImport,\n}: {\n  columnToCodeConverter: ColumnToCodeConverter\n  corePackageSuffix: string\n  defaultOutputFile?: string\n  enumImport?: string\n  schemaImport?: string\n  tableImport: string\n}): GenerateSchema => {\n  return async function generateSchema(\n    this: DrizzleAdapter,\n    { log = true, outputFile = defaultOutputFile, prettify = true } = {},\n  ) {\n    const importDeclarations: Record<string, Set<string>> = {}\n\n    const tableDeclarations: string[] = []\n    const enumDeclarations: string[] = []\n    const relationsDeclarations: string[] = []\n\n    const addImport = (from: string, name: string) => {\n      if (!importDeclarations[from]) {\n        importDeclarations[from] = new Set()\n      }\n\n      importDeclarations[from].add(name)\n    }\n\n    const corePackage = `${this.packageName}/drizzle/${corePackageSuffix}`\n\n    let schemaDeclaration: null | string = null\n\n    if (this.schemaName) {\n      addImport(corePackage, schemaImport)\n      schemaDeclaration = `export const db_schema = ${schemaImport}('${this.schemaName}')`\n    }\n\n    const enumFn = this.schemaName ? `db_schema.enum` : enumImport\n\n    const enumsList: string[] = []\n    const addEnum = (name: string, options: string[]) => {\n      if (enumsList.some((each) => each === name)) {\n        return\n      }\n      enumsList.push(name)\n      enumDeclarations.push(\n        `export const ${name} = ${enumFn}('${name}', [${options.map((option) => `'${option}'`).join(', ')}])`,\n      )\n    }\n\n    if (this.payload.config.localization && enumImport) {\n      addEnum('enum__locales', this.payload.config.localization.localeCodes)\n    }\n\n    const tableFn = this.schemaName ? `db_schema.table` : tableImport\n\n    if (!this.schemaName) {\n      addImport(corePackage, tableImport)\n    }\n\n    addImport(corePackage, 'index')\n    addImport(corePackage, 'uniqueIndex')\n    addImport(corePackage, 'foreignKey')\n\n    addImport(`${this.packageName}/drizzle`, 'sql')\n    addImport(`${this.packageName}/drizzle`, 'relations')\n\n    for (const tableName in this.rawTables) {\n      const table = this.rawTables[tableName]\n\n      const extrasDeclarations: string[] = []\n\n      if (table.indexes) {\n        for (const key in table.indexes) {\n          const index = table.indexes[key]\n          let indexDeclaration = `${index.unique ? 'uniqueIndex' : 'index'}('${index.name}')`\n          indexDeclaration += `.on(${typeof index.on === 'string' ? `${accessProperty('columns', index.on)}` : `${index.on.map((on) => `${accessProperty('columns', on)}`).join(', ')}`}),`\n          extrasDeclarations.push(indexDeclaration)\n        }\n      }\n\n      if (table.foreignKeys) {\n        for (const key in table.foreignKeys) {\n          const foreignKey = table.foreignKeys[key]\n\n          let foreignKeyDeclaration = `foreignKey({\n      columns: [${foreignKey.columns.map((col) => `columns['${col}']`).join(', ')}],\n      foreignColumns: [${foreignKey.foreignColumns.map((col) => `${accessProperty(col.table, col.name)}`).join(', ')}],\n      name: '${foreignKey.name}'\n    })`\n\n          if (foreignKey.onDelete) {\n            foreignKeyDeclaration += `.onDelete('${foreignKey.onDelete}')`\n          }\n          if (foreignKey.onUpdate) {\n            foreignKeyDeclaration += `.onUpdate('${foreignKey.onDelete}')`\n          }\n\n          foreignKeyDeclaration += ','\n\n          extrasDeclarations.push(foreignKeyDeclaration)\n        }\n      }\n\n      const tableCode = `\nexport const ${tableName} = ${tableFn}('${tableName}', {\n${Object.entries(table.columns)\n  .map(\n    ([key, column]) =>\n      `  ${sanitizeObjectKey(key)}: ${columnToCodeConverter({\n        adapter: this,\n        addEnum,\n        addImport,\n        column,\n        locales: this.payload.config.localization\n          ? this.payload.config.localization.localeCodes\n          : undefined,\n        tableKey: tableName,\n      })},`,\n  )\n  .join('\\n')}\n}${\n        extrasDeclarations.length\n          ? `, (columns) => [\n    ${extrasDeclarations.join(' ')}\n]`\n          : ''\n      }\n)\n`\n\n      tableDeclarations.push(tableCode)\n    }\n\n    for (const tableName in this.rawRelations) {\n      const relations = this.rawRelations[tableName]\n      const properties: string[] = []\n\n      for (const key in relations) {\n        const relation = relations[key]\n        let declaration: string\n\n        if (relation.type === 'one') {\n          declaration = `${sanitizeObjectKey(key)}: one(${relation.to}, {\n    ${relation.fields.some((field) => field.table !== tableName) ? '// @ts-expect-error Drizzle TypeScript bug for ONE relationships with a field in different table' : ''}\n    fields: [${relation.fields.map((field) => `${accessProperty(field.table, field.name)}`).join(', ')}],\n    references: [${relation.references.map((col) => `${accessProperty(relation.to, col)}`).join(', ')}],\n    ${relation.relationName ? `relationName: '${relation.relationName}',` : ''}\n    }),`\n        } else {\n          declaration = `${sanitizeObjectKey(key)}: many(${relation.to}, {\n            ${relation.relationName ? `relationName: '${relation.relationName}',` : ''}\n    }),`\n        }\n\n        properties.push(declaration)\n      }\n\n      // beautify / lintify relations callback output, when no many for example, don't add it\n      const args = []\n\n      if (Object.values(relations).some((rel) => rel.type === 'one')) {\n        args.push('one')\n      }\n\n      if (Object.values(relations).some((rel) => rel.type === 'many')) {\n        args.push('many')\n      }\n\n      const arg = args.length ? `{ ${args.join(', ')} }` : ''\n\n      const declaration = `export const relations_${tableName} = relations(${tableName}, (${arg}) => ({\n  ${properties.join('\\n    ')}\n      }))`\n\n      relationsDeclarations.push(declaration)\n    }\n\n    if (enumDeclarations.length && !this.schemaName) {\n      addImport(corePackage, enumImport)\n    }\n\n    const importDeclarationsSanitized: string[] = []\n\n    for (const moduleName in importDeclarations) {\n      const moduleImports = importDeclarations[moduleName]\n\n      importDeclarationsSanitized.push(\n        `import { ${Array.from(moduleImports).join(', ')} } from '${moduleName}'`,\n      )\n    }\n\n    const schemaType = `\ntype DatabaseSchema = {\n  ${[\n    this.schemaName ? 'db_schema' : null,\n    ...enumsList,\n    ...Object.keys(this.rawTables),\n    ...Object.keys(this.rawRelations).map((table) => `relations_${table}`),\n  ]\n    .filter(Boolean)\n    .map((name) => `${name}: typeof ${name}`)\n    .join('\\n  ')}\n}\n    `\n\n    const finalDeclaration = `\ndeclare module '${this.packageName}' {\n  export interface GeneratedDatabaseSchema {\n    schema: DatabaseSchema\n  }\n}\n    `\n\n    const warning = `\n/* tslint:disable */\n/* eslint-disable */\n/**\n * This file was automatically generated by Payload.\n * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,\n * and re-run \\`payload generate:db-schema\\` to regenerate this file.\n */\n`\n\n    const importTypes = `import type {} from '${this.packageName}'`\n\n    let code = [\n      warning,\n      importTypes,\n      ...importDeclarationsSanitized,\n      schemaDeclaration,\n      ...enumDeclarations,\n      ...tableDeclarations,\n      ...relationsDeclarations,\n      schemaType,\n      finalDeclaration,\n    ]\n      .filter(Boolean)\n      .join('\\n')\n\n    if (!outputFile) {\n      const cwd = process.cwd()\n      const srcDir = path.resolve(cwd, 'src')\n\n      if (existsSync(srcDir)) {\n        outputFile = path.resolve(srcDir, 'payload-generated-schema.ts')\n      } else {\n        outputFile = path.resolve(cwd, 'payload-generated-schema.ts')\n      }\n    }\n\n    if (prettify) {\n      try {\n        const prettier = await eval('import(\"prettier\")')\n        const configPath = await prettier.resolveConfigFile()\n        const config = configPath ? await prettier.resolveConfig(configPath) : {}\n        code = await prettier.format(code, { ...config, parser: 'typescript' })\n      } catch {\n        /* empty */\n      }\n    }\n\n    await writeFile(outputFile, code, 'utf-8')\n\n    if (log) {\n      this.payload.logger.info(`Written ${outputFile}`)\n    }\n  }\n}\n"],"names":["existsSync","writeFile","path","sanitizeObjectKey","key","identifierRegex","test","accessProperty","objName","sanitized","startsWith","createSchemaGenerator","columnToCodeConverter","corePackageSuffix","defaultOutputFile","enumImport","schemaImport","tableImport","generateSchema","log","outputFile","prettify","importDeclarations","tableDeclarations","enumDeclarations","relationsDeclarations","addImport","from","name","Set","add","corePackage","packageName","schemaDeclaration","schemaName","enumFn","enumsList","addEnum","options","some","each","push","map","option","join","payload","config","localization","localeCodes","tableFn","tableName","rawTables","table","extrasDeclarations","indexes","index","indexDeclaration","unique","on","foreignKeys","foreignKey","foreignKeyDeclaration","columns","col","foreignColumns","onDelete","onUpdate","tableCode","Object","entries","column","adapter","locales","undefined","tableKey","length","rawRelations","relations","properties","relation","declaration","type","to","fields","field","references","relationName","args","values","rel","arg","importDeclarationsSanitized","moduleName","moduleImports","Array","schemaType","keys","filter","Boolean","finalDeclaration","warning","importTypes","code","cwd","process","srcDir","resolve","prettier","eval","configPath","resolveConfigFile","resolveConfig","format","parser","logger","info"],"mappings":"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"}