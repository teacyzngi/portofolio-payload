{"version":3,"sources":["../../src/utilities/extendDrizzleTable.ts"],"sourcesContent":["/**\n * Implemented from:\n * https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/pg-core/table.ts#L73\n * Drizzle uses @internal JSDoc to remove their internal methods from types, for example\n * Table.Symbol, columnBuilder.build - but they actually exist.\n */\nimport type { ColumnBuilderBase } from 'drizzle-orm'\n\nimport { Table } from 'drizzle-orm'\nimport { APIError } from 'payload'\n\nconst { Symbol: DrizzleSymbol } = Table as unknown as {\n  Symbol: {\n    Columns: symbol\n    ExtraConfigBuilder: symbol\n    ExtraConfigColumns: symbol\n  }\n}\n\ntype Args = {\n  columns?: Record<string, ColumnBuilderBase<any>>\n  extraConfig?: (self: Record<string, any>) => object\n  table: Table\n}\n\n/**\n * Extends the passed table with additional columns / extra config\n */\nexport const extendDrizzleTable = ({ columns, extraConfig, table }: Args): void => {\n  const InlineForeignKeys = Object.getOwnPropertySymbols(table).find((symbol) => {\n    return symbol.description?.includes('InlineForeignKeys')\n  })\n\n  if (!InlineForeignKeys) {\n    throw new APIError(`Error when finding InlineForeignKeys Symbol`, 500)\n  }\n\n  if (columns) {\n    for (const [name, columnBuilder] of Object.entries(columns) as [string, any][]) {\n      const column = columnBuilder.build(table)\n\n      table[name] = column\n      table[InlineForeignKeys].push(...columnBuilder.buildForeignKeys(column, table))\n      table[DrizzleSymbol.Columns][name] = column\n\n      table[DrizzleSymbol.ExtraConfigColumns][name] =\n        'buildExtraConfigColumn' in columnBuilder\n          ? columnBuilder.buildExtraConfigColumn(table)\n          : column\n    }\n  }\n\n  if (extraConfig) {\n    const originalExtraConfigBuilder = table[DrizzleSymbol.ExtraConfigBuilder]\n\n    table[DrizzleSymbol.ExtraConfigBuilder] = (t) => {\n      return {\n        ...originalExtraConfigBuilder(t),\n        ...extraConfig(t),\n      }\n    }\n  }\n}\n"],"names":["Table","APIError","Symbol","DrizzleSymbol","extendDrizzleTable","columns","extraConfig","table","InlineForeignKeys","Object","getOwnPropertySymbols","find","symbol","description","includes","name","columnBuilder","entries","column","build","push","buildForeignKeys","Columns","ExtraConfigColumns","buildExtraConfigColumn","originalExtraConfigBuilder","ExtraConfigBuilder","t"],"mappings":"AAAA;;;;;CAKC,GAGD,SAASA,KAAK,QAAQ,cAAa;AACnC,SAASC,QAAQ,QAAQ,UAAS;AAElC,MAAM,EAAEC,QAAQC,aAAa,EAAE,GAAGH;AAclC;;CAEC,GACD,OAAO,MAAMI,qBAAqB,CAAC,EAAEC,OAAO,EAAEC,WAAW,EAAEC,KAAK,EAAQ;IACtE,MAAMC,oBAAoBC,OAAOC,qBAAqB,CAACH,OAAOI,IAAI,CAAC,CAACC;QAClE,OAAOA,OAAOC,WAAW,EAAEC,SAAS;IACtC;IAEA,IAAI,CAACN,mBAAmB;QACtB,MAAM,IAAIP,SAAS,CAAC,2CAA2C,CAAC,EAAE;IACpE;IAEA,IAAII,SAAS;QACX,KAAK,MAAM,CAACU,MAAMC,cAAc,IAAIP,OAAOQ,OAAO,CAACZ,SAA6B;YAC9E,MAAMa,SAASF,cAAcG,KAAK,CAACZ;YAEnCA,KAAK,CAACQ,KAAK,GAAGG;YACdX,KAAK,CAACC,kBAAkB,CAACY,IAAI,IAAIJ,cAAcK,gBAAgB,CAACH,QAAQX;YACxEA,KAAK,CAACJ,cAAcmB,OAAO,CAAC,CAACP,KAAK,GAAGG;YAErCX,KAAK,CAACJ,cAAcoB,kBAAkB,CAAC,CAACR,KAAK,GAC3C,4BAA4BC,gBACxBA,cAAcQ,sBAAsB,CAACjB,SACrCW;QACR;IACF;IAEA,IAAIZ,aAAa;QACf,MAAMmB,6BAA6BlB,KAAK,CAACJ,cAAcuB,kBAAkB,CAAC;QAE1EnB,KAAK,CAACJ,cAAcuB,kBAAkB,CAAC,GAAG,CAACC;YACzC,OAAO;gBACL,GAAGF,2BAA2BE,EAAE;gBAChC,GAAGrB,YAAYqB,EAAE;YACnB;QACF;IACF;AACF,EAAC"}