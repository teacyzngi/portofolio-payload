{"version":3,"sources":["../../src/queries/selectDistinct.ts"],"sourcesContent":["import type { QueryPromise, SQL } from 'drizzle-orm'\nimport type { SQLiteColumn, SQLiteSelect } from 'drizzle-orm/sqlite-core'\n\nimport type {\n  DrizzleAdapter,\n  DrizzleTransaction,\n  GenericColumn,\n  GenericPgColumn,\n  TransactionPg,\n  TransactionSQLite,\n} from '../types.js'\nimport type { BuildQueryJoinAliases } from './buildQuery.js'\n\ntype Args = {\n  adapter: DrizzleAdapter\n  db: DrizzleAdapter['drizzle'] | DrizzleTransaction\n  forceRun?: boolean\n  joins: BuildQueryJoinAliases\n  query?: (args: { query: SQLiteSelect }) => SQLiteSelect\n  selectFields: Record<string, GenericColumn>\n  tableName: string\n  where: SQL\n}\n\n/**\n * Selects distinct records from a table only if there are joins that need to be used, otherwise return null\n */\nexport const selectDistinct = ({\n  adapter,\n  db,\n  forceRun,\n  joins,\n  query: queryModifier = ({ query }) => query,\n  selectFields,\n  tableName,\n  where,\n}: Args): QueryPromise<{ id: number | string }[] & Record<string, GenericColumn>> => {\n  if (forceRun || Object.keys(joins).length > 0) {\n    let query: SQLiteSelect\n    const table = adapter.tables[tableName]\n\n    if (adapter.name === 'postgres') {\n      query = (db as TransactionPg)\n        .selectDistinct(selectFields as Record<string, GenericPgColumn>)\n        .from(table)\n        .$dynamic() as unknown as SQLiteSelect\n    }\n    if (adapter.name === 'sqlite') {\n      query = (db as TransactionSQLite)\n        .selectDistinct(selectFields as Record<string, SQLiteColumn>)\n        .from(table)\n        .$dynamic()\n    }\n\n    if (where) {\n      query = query.where(where)\n    }\n\n    joins.forEach(({ type, condition, table }) => {\n      query = query[type ?? 'leftJoin'](table, condition)\n    })\n\n    return queryModifier({\n      query,\n    }) as unknown as QueryPromise<{ id: number | string }[] & Record<string, GenericColumn>>\n  }\n}\n"],"names":["selectDistinct","adapter","db","forceRun","joins","query","queryModifier","selectFields","tableName","where","Object","keys","length","table","tables","name","from","$dynamic","forEach","type","condition"],"mappings":"AAwBA;;CAEC,GACD,OAAO,MAAMA,iBAAiB,CAAC,EAC7BC,OAAO,EACPC,EAAE,EACFC,QAAQ,EACRC,KAAK,EACLC,OAAOC,gBAAgB,CAAC,EAAED,KAAK,EAAE,GAAKA,KAAK,EAC3CE,YAAY,EACZC,SAAS,EACTC,KAAK,EACA;IACL,IAAIN,YAAYO,OAAOC,IAAI,CAACP,OAAOQ,MAAM,GAAG,GAAG;QAC7C,IAAIP;QACJ,MAAMQ,QAAQZ,QAAQa,MAAM,CAACN,UAAU;QAEvC,IAAIP,QAAQc,IAAI,KAAK,YAAY;YAC/BV,QAAQ,AAACH,GACNF,cAAc,CAACO,cACfS,IAAI,CAACH,OACLI,QAAQ;QACb;QACA,IAAIhB,QAAQc,IAAI,KAAK,UAAU;YAC7BV,QAAQ,AAACH,GACNF,cAAc,CAACO,cACfS,IAAI,CAACH,OACLI,QAAQ;QACb;QAEA,IAAIR,OAAO;YACTJ,QAAQA,MAAMI,KAAK,CAACA;QACtB;QAEAL,MAAMc,OAAO,CAAC,CAAC,EAAEC,IAAI,EAAEC,SAAS,EAAEP,KAAK,EAAE;YACvCR,QAAQA,KAAK,CAACc,QAAQ,WAAW,CAACN,OAAOO;QAC3C;QAEA,OAAOd,cAAc;YACnBD;QACF;IACF;AACF,EAAC"}