{"version":3,"sources":["../../src/queries/buildQuery.ts"],"sourcesContent":["import type { asc, desc, SQL, Table } from 'drizzle-orm'\nimport type { PgTableWithColumns } from 'drizzle-orm/pg-core'\nimport type { FlattenedField, Sort, Where } from 'payload'\n\nimport type { DrizzleAdapter, GenericColumn, GenericTable } from '../types.js'\nimport type { QueryContext } from './parseParams.js'\n\nimport { buildOrderBy } from './buildOrderBy.js'\nimport { parseParams } from './parseParams.js'\n\nexport type BuildQueryJoinAliases = {\n  condition: SQL\n  queryPath?: string\n  table: GenericTable | PgTableWithColumns<any>\n  type?: 'innerJoin' | 'leftJoin' | 'rightJoin'\n}[]\n\ntype BuildQueryArgs = {\n  adapter: DrizzleAdapter\n  aliasTable?: Table\n  fields: FlattenedField[]\n  joins?: BuildQueryJoinAliases\n  locale?: string\n  parentIsLocalized?: boolean\n  selectLocale?: boolean\n  sort?: Sort\n  tableName: string\n  where: Where\n}\n\nexport type BuildQueryResult = {\n  joins: BuildQueryJoinAliases\n  orderBy: {\n    column: GenericColumn\n    order: typeof asc | typeof desc\n  }[]\n  selectFields: Record<string, GenericColumn>\n  where: SQL\n}\n\nexport const buildQuery = function buildQuery({\n  adapter,\n  aliasTable,\n  fields,\n  joins = [],\n  locale,\n  parentIsLocalized,\n  selectLocale,\n  sort,\n  tableName,\n  where: incomingWhere,\n}: BuildQueryArgs): BuildQueryResult {\n  const selectFields: Record<string, GenericColumn> = {\n    id: adapter.tables[tableName].id,\n  }\n\n  let where: SQL\n\n  const context: QueryContext = { sort }\n  if (incomingWhere && Object.keys(incomingWhere).length > 0) {\n    where = parseParams({\n      adapter,\n      aliasTable,\n      context,\n      fields,\n      joins,\n      locale,\n      parentIsLocalized,\n      selectFields,\n      selectLocale,\n      tableName,\n      where: incomingWhere,\n    })\n  }\n\n  const orderBy = buildOrderBy({\n    adapter,\n    aliasTable,\n    fields,\n    joins,\n    locale,\n    parentIsLocalized,\n    rawSort: context.rawSort,\n    selectFields,\n    sort: context.sort,\n    tableName,\n  })\n\n  return {\n    joins,\n    orderBy,\n    selectFields,\n    where,\n  }\n}\n"],"names":["buildOrderBy","parseParams","buildQuery","adapter","aliasTable","fields","joins","locale","parentIsLocalized","selectLocale","sort","tableName","where","incomingWhere","selectFields","id","tables","context","Object","keys","length","orderBy","rawSort"],"mappings":"AAOA,SAASA,YAAY,QAAQ,oBAAmB;AAChD,SAASC,WAAW,QAAQ,mBAAkB;AAgC9C,OAAO,MAAMC,aAAa,SAASA,WAAW,EAC5CC,OAAO,EACPC,UAAU,EACVC,MAAM,EACNC,QAAQ,EAAE,EACVC,MAAM,EACNC,iBAAiB,EACjBC,YAAY,EACZC,IAAI,EACJC,SAAS,EACTC,OAAOC,aAAa,EACL;IACf,MAAMC,eAA8C;QAClDC,IAAIZ,QAAQa,MAAM,CAACL,UAAU,CAACI,EAAE;IAClC;IAEA,IAAIH;IAEJ,MAAMK,UAAwB;QAAEP;IAAK;IACrC,IAAIG,iBAAiBK,OAAOC,IAAI,CAACN,eAAeO,MAAM,GAAG,GAAG;QAC1DR,QAAQX,YAAY;YAClBE;YACAC;YACAa;YACAZ;YACAC;YACAC;YACAC;YACAM;YACAL;YACAE;YACAC,OAAOC;QACT;IACF;IAEA,MAAMQ,UAAUrB,aAAa;QAC3BG;QACAC;QACAC;QACAC;QACAC;QACAC;QACAc,SAASL,QAAQK,OAAO;QACxBR;QACAJ,MAAMO,QAAQP,IAAI;QAClBC;IACF;IAEA,OAAO;QACLL;QACAe;QACAP;QACAF;IACF;AACF,EAAC"}