{"version":3,"sources":["../../src/upsertRow/deleteExistingRowsByPath.ts"],"sourcesContent":["import { and, eq, inArray } from 'drizzle-orm'\n\nimport type { DrizzleAdapter, DrizzleTransaction } from '../types.js'\n\ntype Args = {\n  adapter: DrizzleAdapter\n  db: DrizzleAdapter['drizzle'] | DrizzleTransaction\n  localeColumnName?: string\n  parentColumnName?: string\n  parentID: unknown\n  pathColumnName?: string\n  rows: Record<string, unknown>[]\n  tableName: string\n}\n\nexport const deleteExistingRowsByPath = async ({\n  adapter,\n  db,\n  localeColumnName = '_locale',\n  parentColumnName = '_parentID',\n  parentID,\n  pathColumnName = '_path',\n  rows,\n  tableName,\n}: Args): Promise<void> => {\n  const localizedPathsToDelete = new Set<string>()\n  const pathsToDelete = new Set<string>()\n  const table = adapter.tables[tableName]\n\n  rows.forEach((row) => {\n    const path = row[pathColumnName]\n    const localeData = row[localeColumnName]\n    if (typeof path === 'string') {\n      if (typeof localeData === 'string') {\n        localizedPathsToDelete.add(path)\n      } else {\n        pathsToDelete.add(path)\n      }\n    }\n  })\n\n  if (localizedPathsToDelete.size > 0) {\n    const whereConstraints = [eq(table[parentColumnName], parentID)]\n\n    if (pathColumnName) {\n      whereConstraints.push(inArray(table[pathColumnName], Array.from(localizedPathsToDelete)))\n    }\n\n    await adapter.deleteWhere({\n      db,\n      tableName,\n      where: and(...whereConstraints),\n    })\n  }\n\n  if (pathsToDelete.size > 0) {\n    const whereConstraints = [eq(table[parentColumnName], parentID)]\n\n    if (pathColumnName) {\n      whereConstraints.push(inArray(table[pathColumnName], Array.from(pathsToDelete)))\n    }\n\n    await adapter.deleteWhere({\n      db,\n      tableName,\n      where: and(...whereConstraints),\n    })\n  }\n}\n"],"names":["and","eq","inArray","deleteExistingRowsByPath","adapter","db","localeColumnName","parentColumnName","parentID","pathColumnName","rows","tableName","localizedPathsToDelete","Set","pathsToDelete","table","tables","forEach","row","path","localeData","add","size","whereConstraints","push","Array","from","deleteWhere","where"],"mappings":"AAAA,SAASA,GAAG,EAAEC,EAAE,EAAEC,OAAO,QAAQ,cAAa;AAe9C,OAAO,MAAMC,2BAA2B,OAAO,EAC7CC,OAAO,EACPC,EAAE,EACFC,mBAAmB,SAAS,EAC5BC,mBAAmB,WAAW,EAC9BC,QAAQ,EACRC,iBAAiB,OAAO,EACxBC,IAAI,EACJC,SAAS,EACJ;IACL,MAAMC,yBAAyB,IAAIC;IACnC,MAAMC,gBAAgB,IAAID;IAC1B,MAAME,QAAQX,QAAQY,MAAM,CAACL,UAAU;IAEvCD,KAAKO,OAAO,CAAC,CAACC;QACZ,MAAMC,OAAOD,GAAG,CAACT,eAAe;QAChC,MAAMW,aAAaF,GAAG,CAACZ,iBAAiB;QACxC,IAAI,OAAOa,SAAS,UAAU;YAC5B,IAAI,OAAOC,eAAe,UAAU;gBAClCR,uBAAuBS,GAAG,CAACF;YAC7B,OAAO;gBACLL,cAAcO,GAAG,CAACF;YACpB;QACF;IACF;IAEA,IAAIP,uBAAuBU,IAAI,GAAG,GAAG;QACnC,MAAMC,mBAAmB;YAACtB,GAAGc,KAAK,CAACR,iBAAiB,EAAEC;SAAU;QAEhE,IAAIC,gBAAgB;YAClBc,iBAAiBC,IAAI,CAACtB,QAAQa,KAAK,CAACN,eAAe,EAAEgB,MAAMC,IAAI,CAACd;QAClE;QAEA,MAAMR,QAAQuB,WAAW,CAAC;YACxBtB;YACAM;YACAiB,OAAO5B,OAAOuB;QAChB;IACF;IAEA,IAAIT,cAAcQ,IAAI,GAAG,GAAG;QAC1B,MAAMC,mBAAmB;YAACtB,GAAGc,KAAK,CAACR,iBAAiB,EAAEC;SAAU;QAEhE,IAAIC,gBAAgB;YAClBc,iBAAiBC,IAAI,CAACtB,QAAQa,KAAK,CAACN,eAAe,EAAEgB,MAAMC,IAAI,CAACZ;QAClE;QAEA,MAAMV,QAAQuB,WAAW,CAAC;YACxBtB;YACAM;YACAiB,OAAO5B,OAAOuB;QAChB;IACF;AACF,EAAC"}