{"version":3,"sources":["../../src/postgres/createDatabase.ts"],"sourcesContent":["import type { ClientConfig } from 'pg'\n\nimport type { BasePostgresAdapter } from './types.js'\n\nconst setConnectionStringDatabase = ({\n  connectionString,\n  database,\n}: {\n  connectionString: string\n  database: string\n}): string => {\n  const connectionURL = new URL(connectionString)\n  const newConnectionURL = new URL(connectionURL)\n  newConnectionURL.pathname = `/${database}`\n\n  return newConnectionURL.toString()\n}\n\ntype Args = {\n  /**\n   * Name of a database, defaults to the current one\n   */\n  name?: string\n  /**\n   * Schema to create in addition to 'public'. Defaults to adapter.schemaName if exists.\n   */\n  schemaName?: string\n}\nexport const createDatabase = async function (this: BasePostgresAdapter, args: Args = {}) {\n  // POSTGRES_URL - default Vercel env\n  const connectionString =\n    this.poolOptions?.connectionString ?? process.env.POSTGRES_URL ?? process.env.DATABASE_URL\n  let managementClientConfig: ClientConfig = {}\n  let dbName = args.name\n  const schemaName = this.schemaName || 'public'\n\n  if (connectionString) {\n    if (!dbName) {\n      dbName = new URL(connectionString).pathname.slice(1)\n    }\n\n    managementClientConfig.connectionString = setConnectionStringDatabase({\n      connectionString,\n      database: 'postgres',\n    })\n  } else {\n    if (!dbName) {\n      dbName = this.poolOptions.database\n    }\n\n    managementClientConfig = {\n      ...this.poolOptions,\n      database: 'postgres',\n    }\n  }\n\n  // import pg only when createDatabase is used\n  const pg = await import('pg').then((mod) => mod.default)\n\n  const managementClient = new pg.Client(managementClientConfig)\n\n  try {\n    await managementClient.connect()\n    await managementClient.query(`CREATE DATABASE \"${dbName}\"`)\n\n    this.payload.logger.info(`Created database \"${dbName}\"`)\n\n    if (schemaName !== 'public') {\n      let createdDatabaseConfig: ClientConfig = {}\n\n      if (connectionString) {\n        createdDatabaseConfig.connectionString = setConnectionStringDatabase({\n          connectionString,\n          database: dbName,\n        })\n      } else {\n        createdDatabaseConfig = {\n          ...this.poolOptions,\n          database: dbName,\n        }\n      }\n\n      const createdDatabaseClient = new pg.Client(createdDatabaseConfig)\n\n      try {\n        await createdDatabaseClient.connect()\n\n        await createdDatabaseClient.query(`CREATE SCHEMA ${schemaName}`)\n        this.payload.logger.info(`Created schema \"${dbName}.${schemaName}\"`)\n      } catch (err) {\n        this.payload.logger.error({\n          err,\n          msg: `Error: failed to create schema \"${dbName}.${schemaName}\". Details: ${err.message}`,\n        })\n      } finally {\n        await createdDatabaseClient.end()\n      }\n    }\n\n    return true\n  } catch (err) {\n    this.payload.logger.error({\n      err,\n      msg: `Error: failed to create database ${dbName}. Details: ${err.message}`,\n    })\n\n    return false\n  } finally {\n    await managementClient.end()\n  }\n}\n"],"names":["setConnectionStringDatabase","connectionString","database","connectionURL","URL","newConnectionURL","pathname","toString","createDatabase","args","poolOptions","process","env","POSTGRES_URL","DATABASE_URL","managementClientConfig","dbName","name","schemaName","slice","pg","then","mod","default","managementClient","Client","connect","query","payload","logger","info","createdDatabaseConfig","createdDatabaseClient","err","error","msg","message","end"],"mappings":"AAIA,MAAMA,8BAA8B,CAAC,EACnCC,gBAAgB,EAChBC,QAAQ,EAIT;IACC,MAAMC,gBAAgB,IAAIC,IAAIH;IAC9B,MAAMI,mBAAmB,IAAID,IAAID;IACjCE,iBAAiBC,QAAQ,GAAG,CAAC,CAAC,EAAEJ,UAAU;IAE1C,OAAOG,iBAAiBE,QAAQ;AAClC;AAYA,OAAO,MAAMC,iBAAiB,eAA2CC,OAAa,CAAC,CAAC;IACtF,oCAAoC;IACpC,MAAMR,mBACJ,IAAI,CAACS,WAAW,EAAET,oBAAoBU,QAAQC,GAAG,CAACC,YAAY,IAAIF,QAAQC,GAAG,CAACE,YAAY;IAC5F,IAAIC,yBAAuC,CAAC;IAC5C,IAAIC,SAASP,KAAKQ,IAAI;IACtB,MAAMC,aAAa,IAAI,CAACA,UAAU,IAAI;IAEtC,IAAIjB,kBAAkB;QACpB,IAAI,CAACe,QAAQ;YACXA,SAAS,IAAIZ,IAAIH,kBAAkBK,QAAQ,CAACa,KAAK,CAAC;QACpD;QAEAJ,uBAAuBd,gBAAgB,GAAGD,4BAA4B;YACpEC;YACAC,UAAU;QACZ;IACF,OAAO;QACL,IAAI,CAACc,QAAQ;YACXA,SAAS,IAAI,CAACN,WAAW,CAACR,QAAQ;QACpC;QAEAa,yBAAyB;YACvB,GAAG,IAAI,CAACL,WAAW;YACnBR,UAAU;QACZ;IACF;IAEA,6CAA6C;IAC7C,MAAMkB,KAAK,MAAM,MAAM,CAAC,MAAMC,IAAI,CAAC,CAACC,MAAQA,IAAIC,OAAO;IAEvD,MAAMC,mBAAmB,IAAIJ,GAAGK,MAAM,CAACV;IAEvC,IAAI;QACF,MAAMS,iBAAiBE,OAAO;QAC9B,MAAMF,iBAAiBG,KAAK,CAAC,CAAC,iBAAiB,EAAEX,OAAO,CAAC,CAAC;QAE1D,IAAI,CAACY,OAAO,CAACC,MAAM,CAACC,IAAI,CAAC,CAAC,kBAAkB,EAAEd,OAAO,CAAC,CAAC;QAEvD,IAAIE,eAAe,UAAU;YAC3B,IAAIa,wBAAsC,CAAC;YAE3C,IAAI9B,kBAAkB;gBACpB8B,sBAAsB9B,gBAAgB,GAAGD,4BAA4B;oBACnEC;oBACAC,UAAUc;gBACZ;YACF,OAAO;gBACLe,wBAAwB;oBACtB,GAAG,IAAI,CAACrB,WAAW;oBACnBR,UAAUc;gBACZ;YACF;YAEA,MAAMgB,wBAAwB,IAAIZ,GAAGK,MAAM,CAACM;YAE5C,IAAI;gBACF,MAAMC,sBAAsBN,OAAO;gBAEnC,MAAMM,sBAAsBL,KAAK,CAAC,CAAC,cAAc,EAAET,YAAY;gBAC/D,IAAI,CAACU,OAAO,CAACC,MAAM,CAACC,IAAI,CAAC,CAAC,gBAAgB,EAAEd,OAAO,CAAC,EAAEE,WAAW,CAAC,CAAC;YACrE,EAAE,OAAOe,KAAK;gBACZ,IAAI,CAACL,OAAO,CAACC,MAAM,CAACK,KAAK,CAAC;oBACxBD;oBACAE,KAAK,CAAC,gCAAgC,EAAEnB,OAAO,CAAC,EAAEE,WAAW,YAAY,EAAEe,IAAIG,OAAO,EAAE;gBAC1F;YACF,SAAU;gBACR,MAAMJ,sBAAsBK,GAAG;YACjC;QACF;QAEA,OAAO;IACT,EAAE,OAAOJ,KAAK;QACZ,IAAI,CAACL,OAAO,CAACC,MAAM,CAACK,KAAK,CAAC;YACxBD;YACAE,KAAK,CAAC,iCAAiC,EAAEnB,OAAO,WAAW,EAAEiB,IAAIG,OAAO,EAAE;QAC5E;QAEA,OAAO;IACT,SAAU;QACR,MAAMZ,iBAAiBa,GAAG;IAC5B;AACF,EAAC"}