{"version":3,"sources":["../../../../src/postgres/predefinedMigrations/v2-v3/traverseFields.ts"],"sourcesContent":["import type { FlattenedField, Payload } from 'payload'\n\nimport toSnakeCase from 'to-snake-case'\n\nimport type { BasePostgresAdapter, PostgresDB } from '../../types.js'\nimport type { PathsToQuery } from './types.js'\n\ntype Args = {\n  adapter: BasePostgresAdapter\n  collectionSlug?: string\n  columnPrefix: string\n  db: PostgresDB\n  disableNotNull: boolean\n  fields: FlattenedField[]\n  globalSlug?: string\n  isVersions: boolean\n  newTableName: string\n  parentTableName: string\n  path: string\n  pathsToQuery: PathsToQuery\n  payload: Payload\n  rootTableName: string\n}\n\nexport const traverseFields = (args: Args) => {\n  args.fields.forEach((field) => {\n    switch (field.type) {\n      case 'array': {\n        const newTableName = args.adapter.tableNameMap.get(\n          `${args.newTableName}_${toSnakeCase(field.name)}`,\n        )\n\n        return traverseFields({\n          ...args,\n          columnPrefix: '',\n          fields: field.flattenedFields,\n          newTableName,\n          parentTableName: newTableName,\n          path: `${args.path ? `${args.path}.` : ''}${field.name}.%`,\n        })\n      }\n\n      case 'blocks': {\n        return field.blocks.forEach((block) => {\n          // Can ignore string blocks, as those were added in v3 and don't need to be migrated\n          if (typeof block === 'string') {\n            return\n          }\n\n          const newTableName = args.adapter.tableNameMap.get(\n            `${args.rootTableName}_blocks_${toSnakeCase(block.slug)}`,\n          )\n\n          traverseFields({\n            ...args,\n            columnPrefix: '',\n            fields: block.flattenedFields,\n            newTableName,\n            parentTableName: newTableName,\n            path: `${args.path ? `${args.path}.` : ''}${field.name}.%`,\n          })\n        })\n      }\n\n      case 'group':\n      case 'tab': {\n        let newTableName = `${args.newTableName}_${toSnakeCase(field.name)}`\n\n        if (field.localized && args.payload.config.localization) {\n          newTableName += args.adapter.localesSuffix\n        }\n\n        return traverseFields({\n          ...args,\n          columnPrefix: `${args.columnPrefix}${toSnakeCase(field.name)}_`,\n          fields: field.flattenedFields,\n          newTableName,\n          path: `${args.path ? `${args.path}.` : ''}${field.name}`,\n        })\n      }\n\n      case 'relationship':\n      case 'upload': {\n        if (typeof field.relationTo === 'string') {\n          if (field.type === 'upload' || !field.hasMany) {\n            args.pathsToQuery.add(`${args.path ? `${args.path}.` : ''}${field.name}`)\n          }\n        }\n\n        return null\n      }\n    }\n  })\n}\n"],"names":["toSnakeCase","traverseFields","args","fields","forEach","field","type","newTableName","adapter","tableNameMap","get","name","columnPrefix","flattenedFields","parentTableName","path","blocks","block","rootTableName","slug","localized","payload","config","localization","localesSuffix","relationTo","hasMany","pathsToQuery","add"],"mappings":"AAEA,OAAOA,iBAAiB,gBAAe;AAsBvC,OAAO,MAAMC,iBAAiB,CAACC;IAC7BA,KAAKC,MAAM,CAACC,OAAO,CAAC,CAACC;QACnB,OAAQA,MAAMC,IAAI;YAChB,KAAK;gBAAS;oBACZ,MAAMC,eAAeL,KAAKM,OAAO,CAACC,YAAY,CAACC,GAAG,CAChD,GAAGR,KAAKK,YAAY,CAAC,CAAC,EAAEP,YAAYK,MAAMM,IAAI,GAAG;oBAGnD,OAAOV,eAAe;wBACpB,GAAGC,IAAI;wBACPU,cAAc;wBACdT,QAAQE,MAAMQ,eAAe;wBAC7BN;wBACAO,iBAAiBP;wBACjBQ,MAAM,GAAGb,KAAKa,IAAI,GAAG,GAAGb,KAAKa,IAAI,CAAC,CAAC,CAAC,GAAG,KAAKV,MAAMM,IAAI,CAAC,EAAE,CAAC;oBAC5D;gBACF;YAEA,KAAK;gBAAU;oBACb,OAAON,MAAMW,MAAM,CAACZ,OAAO,CAAC,CAACa;wBAC3B,oFAAoF;wBACpF,IAAI,OAAOA,UAAU,UAAU;4BAC7B;wBACF;wBAEA,MAAMV,eAAeL,KAAKM,OAAO,CAACC,YAAY,CAACC,GAAG,CAChD,GAAGR,KAAKgB,aAAa,CAAC,QAAQ,EAAElB,YAAYiB,MAAME,IAAI,GAAG;wBAG3DlB,eAAe;4BACb,GAAGC,IAAI;4BACPU,cAAc;4BACdT,QAAQc,MAAMJ,eAAe;4BAC7BN;4BACAO,iBAAiBP;4BACjBQ,MAAM,GAAGb,KAAKa,IAAI,GAAG,GAAGb,KAAKa,IAAI,CAAC,CAAC,CAAC,GAAG,KAAKV,MAAMM,IAAI,CAAC,EAAE,CAAC;wBAC5D;oBACF;gBACF;YAEA,KAAK;YACL,KAAK;gBAAO;oBACV,IAAIJ,eAAe,GAAGL,KAAKK,YAAY,CAAC,CAAC,EAAEP,YAAYK,MAAMM,IAAI,GAAG;oBAEpE,IAAIN,MAAMe,SAAS,IAAIlB,KAAKmB,OAAO,CAACC,MAAM,CAACC,YAAY,EAAE;wBACvDhB,gBAAgBL,KAAKM,OAAO,CAACgB,aAAa;oBAC5C;oBAEA,OAAOvB,eAAe;wBACpB,GAAGC,IAAI;wBACPU,cAAc,GAAGV,KAAKU,YAAY,GAAGZ,YAAYK,MAAMM,IAAI,EAAE,CAAC,CAAC;wBAC/DR,QAAQE,MAAMQ,eAAe;wBAC7BN;wBACAQ,MAAM,GAAGb,KAAKa,IAAI,GAAG,GAAGb,KAAKa,IAAI,CAAC,CAAC,CAAC,GAAG,KAAKV,MAAMM,IAAI,EAAE;oBAC1D;gBACF;YAEA,KAAK;YACL,KAAK;gBAAU;oBACb,IAAI,OAAON,MAAMoB,UAAU,KAAK,UAAU;wBACxC,IAAIpB,MAAMC,IAAI,KAAK,YAAY,CAACD,MAAMqB,OAAO,EAAE;4BAC7CxB,KAAKyB,YAAY,CAACC,GAAG,CAAC,GAAG1B,KAAKa,IAAI,GAAG,GAAGb,KAAKa,IAAI,CAAC,CAAC,CAAC,GAAG,KAAKV,MAAMM,IAAI,EAAE;wBAC1E;oBACF;oBAEA,OAAO;gBACT;QACF;IACF;AACF,EAAC"}