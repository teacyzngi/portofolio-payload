{"version":3,"sources":["../../../../src/postgres/predefinedMigrations/v2-v3/index.ts"],"sourcesContent":["import type { DrizzleSnapshotJSON } from 'drizzle-kit/api'\nimport type { Payload, PayloadRequest } from 'payload'\n\nimport { sql } from 'drizzle-orm'\nimport fs from 'fs'\nimport { buildVersionCollectionFields, buildVersionGlobalFields } from 'payload'\nimport toSnakeCase from 'to-snake-case'\n\nimport type { BasePostgresAdapter } from '../../types.js'\nimport type { PathsToQuery } from './types.js'\n\nimport { getTransaction } from '../../../utilities/getTransaction.js'\nimport { groupUpSQLStatements } from './groupUpSQLStatements.js'\nimport { migrateRelationships } from './migrateRelationships.js'\nimport { traverseFields } from './traverseFields.js'\n\ntype Args = {\n  debug?: boolean\n  payload: Payload\n  req?: Partial<PayloadRequest>\n}\n\nconst runStatementGroup = async ({ adapter, db, debug, statements }) => {\n  const addColumnsStatement = statements.join('\\n')\n\n  if (debug) {\n    adapter.payload.logger.info(debug)\n    adapter.payload.logger.info(addColumnsStatement)\n  }\n\n  await db.execute(sql.raw(addColumnsStatement))\n}\n\n/**\n * Moves upload and relationship columns from the join table and into the tables while moving data\n * This is done in the following order:\n *    ADD COLUMNs\n *    -- manipulate data to move relationships to new columns\n *    ADD CONSTRAINTs\n *    NOT NULLs\n *    DROP TABLEs\n *    DROP CONSTRAINTs\n *    DROP COLUMNs\n * @param debug\n * @param payload\n * @param req\n */\nexport const migratePostgresV2toV3 = async ({ debug, payload, req }: Args) => {\n  const adapter = payload.db as unknown as BasePostgresAdapter\n  const dir = payload.db.migrationDir\n\n  // get the drizzle migrateUpSQL from drizzle using the last schema\n  const { generateDrizzleJson, generateMigration, upSnapshot } = adapter.requireDrizzleKit()\n  const drizzleJsonAfter = generateDrizzleJson(adapter.schema) as DrizzleSnapshotJSON\n\n  // Get the previous migration snapshot\n  const previousSnapshot = fs\n    .readdirSync(dir)\n    .filter((file) => file.endsWith('.json') && !file.endsWith('relationships_v2_v3.json'))\n    .sort()\n    .reverse()?.[0]\n\n  if (!previousSnapshot) {\n    throw new Error(\n      `No previous migration schema file found! A prior migration from v2 is required to migrate to v3.`,\n    )\n  }\n\n  let drizzleJsonBefore = JSON.parse(\n    fs.readFileSync(`${dir}/${previousSnapshot}`, 'utf8'),\n  ) as DrizzleSnapshotJSON\n\n  if (upSnapshot && drizzleJsonBefore.version < drizzleJsonAfter.version) {\n    drizzleJsonBefore = upSnapshot(drizzleJsonBefore)\n  }\n\n  const generatedSQL = await generateMigration(drizzleJsonBefore, drizzleJsonAfter)\n\n  if (!generatedSQL.length) {\n    payload.logger.info(`No schema changes needed.`)\n    process.exit(0)\n  }\n\n  const sqlUpStatements = groupUpSQLStatements(generatedSQL)\n\n  const db = await getTransaction(adapter, req)\n\n  await runStatementGroup({\n    adapter,\n    db,\n    debug: debug ? 'CREATING TYPES' : null,\n    statements: sqlUpStatements.createType,\n  })\n\n  await runStatementGroup({\n    adapter,\n    db,\n    debug: debug ? 'ALTERING TYPES' : null,\n    statements: sqlUpStatements.alterType,\n  })\n\n  await runStatementGroup({\n    adapter,\n    db,\n    debug: debug ? 'CREATING TABLES' : null,\n    statements: sqlUpStatements.createTable,\n  })\n\n  await runStatementGroup({\n    adapter,\n    db,\n    debug: debug ? 'RENAMING COLUMNS' : null,\n    statements: sqlUpStatements.renameColumn,\n  })\n\n  await runStatementGroup({\n    adapter,\n    db,\n    debug: debug ? 'CREATING NEW RELATIONSHIP COLUMNS' : null,\n    statements: sqlUpStatements.addColumn,\n  })\n\n  // SET DEFAULTS\n  await runStatementGroup({\n    adapter,\n    db,\n    debug: debug ? 'SETTING DEFAULTS' : null,\n    statements: sqlUpStatements.setDefault,\n  })\n\n  await runStatementGroup({\n    adapter,\n    db,\n    debug: debug ? 'CREATING INDEXES' : null,\n    statements: sqlUpStatements.createIndex,\n  })\n\n  for (const collection of payload.config.collections) {\n    if (collection.slug === 'payload-locked-documents') {\n      continue\n    }\n    const tableName = adapter.tableNameMap.get(toSnakeCase(collection.slug))\n    const pathsToQuery: PathsToQuery = new Set()\n\n    traverseFields({\n      adapter,\n      collectionSlug: collection.slug,\n      columnPrefix: '',\n      db,\n      disableNotNull: false,\n      fields: collection.flattenedFields,\n      isVersions: false,\n      newTableName: tableName,\n      parentTableName: tableName,\n      path: '',\n      pathsToQuery,\n      payload,\n      rootTableName: tableName,\n    })\n\n    await migrateRelationships({\n      adapter,\n      collectionSlug: collection.slug,\n      db,\n      debug,\n      fields: collection.flattenedFields,\n      isVersions: false,\n      pathsToQuery,\n      payload,\n      req,\n      tableName,\n    })\n\n    if (collection.versions) {\n      const versionsTableName = adapter.tableNameMap.get(\n        `_${toSnakeCase(collection.slug)}${adapter.versionsSuffix}`,\n      )\n      const versionFields = buildVersionCollectionFields(payload.config, collection, true)\n      const versionPathsToQuery: PathsToQuery = new Set()\n\n      traverseFields({\n        adapter,\n        collectionSlug: collection.slug,\n        columnPrefix: '',\n        db,\n        disableNotNull: true,\n        fields: versionFields,\n        isVersions: true,\n        newTableName: versionsTableName,\n        parentTableName: versionsTableName,\n        path: '',\n        pathsToQuery: versionPathsToQuery,\n        payload,\n        rootTableName: versionsTableName,\n      })\n\n      await migrateRelationships({\n        adapter,\n        collectionSlug: collection.slug,\n        db,\n        debug,\n        fields: versionFields,\n        isVersions: true,\n        pathsToQuery: versionPathsToQuery,\n        payload,\n        req,\n        tableName: versionsTableName,\n      })\n    }\n  }\n\n  for (const global of payload.config.globals) {\n    const tableName = adapter.tableNameMap.get(toSnakeCase(global.slug))\n\n    const pathsToQuery: PathsToQuery = new Set()\n\n    traverseFields({\n      adapter,\n      columnPrefix: '',\n      db,\n      disableNotNull: false,\n      fields: global.flattenedFields,\n      globalSlug: global.slug,\n      isVersions: false,\n      newTableName: tableName,\n      parentTableName: tableName,\n      path: '',\n      pathsToQuery,\n      payload,\n      rootTableName: tableName,\n    })\n\n    await migrateRelationships({\n      adapter,\n      db,\n      debug,\n      fields: global.flattenedFields,\n      globalSlug: global.slug,\n      isVersions: false,\n      pathsToQuery,\n      payload,\n      req,\n      tableName,\n    })\n\n    if (global.versions) {\n      const versionsTableName = adapter.tableNameMap.get(\n        `_${toSnakeCase(global.slug)}${adapter.versionsSuffix}`,\n      )\n\n      const versionFields = buildVersionGlobalFields(payload.config, global, true)\n\n      const versionPathsToQuery: PathsToQuery = new Set()\n\n      traverseFields({\n        adapter,\n        columnPrefix: '',\n        db,\n        disableNotNull: true,\n        fields: versionFields,\n        globalSlug: global.slug,\n        isVersions: true,\n        newTableName: versionsTableName,\n        parentTableName: versionsTableName,\n        path: '',\n        pathsToQuery: versionPathsToQuery,\n        payload,\n        rootTableName: versionsTableName,\n      })\n\n      await migrateRelationships({\n        adapter,\n        db,\n        debug,\n        fields: versionFields,\n        globalSlug: global.slug,\n        isVersions: true,\n        pathsToQuery: versionPathsToQuery,\n        payload,\n        req,\n        tableName: versionsTableName,\n      })\n    }\n  }\n\n  // ADD CONSTRAINT\n  await runStatementGroup({\n    adapter,\n    db,\n    debug: debug ? 'ADDING CONSTRAINTS' : null,\n    statements: sqlUpStatements.addConstraint,\n  })\n\n  // NOT NULL\n  await runStatementGroup({\n    adapter,\n    db,\n    debug: debug ? 'NOT NULL CONSTRAINTS' : null,\n    statements: sqlUpStatements.notNull,\n  })\n\n  // DROP TABLE\n  await runStatementGroup({\n    adapter,\n    db,\n    debug: debug ? 'DROPPING TABLES' : null,\n    statements: sqlUpStatements.dropTable,\n  })\n\n  // DROP INDEX\n  await runStatementGroup({\n    adapter,\n    db,\n    debug: debug ? 'DROPPING INDEXES' : null,\n    statements: sqlUpStatements.dropIndex,\n  })\n\n  // DROP CONSTRAINT\n  await runStatementGroup({\n    adapter,\n    db,\n    debug: debug ? 'DROPPING CONSTRAINTS' : null,\n    statements: sqlUpStatements.dropConstraint,\n  })\n\n  // DROP COLUMN\n  await runStatementGroup({\n    adapter,\n    db,\n    debug: debug ? 'DROPPING COLUMNS' : null,\n    statements: sqlUpStatements.dropColumn,\n  })\n\n  // DROP TYPES\n  await runStatementGroup({\n    adapter,\n    db,\n    debug: debug ? 'DROPPING TYPES' : null,\n    statements: sqlUpStatements.dropType,\n  })\n}\n"],"names":["sql","fs","buildVersionCollectionFields","buildVersionGlobalFields","toSnakeCase","getTransaction","groupUpSQLStatements","migrateRelationships","traverseFields","runStatementGroup","adapter","db","debug","statements","addColumnsStatement","join","payload","logger","info","execute","raw","migratePostgresV2toV3","req","dir","migrationDir","generateDrizzleJson","generateMigration","upSnapshot","requireDrizzleKit","drizzleJsonAfter","schema","previousSnapshot","readdirSync","filter","file","endsWith","sort","reverse","Error","drizzleJsonBefore","JSON","parse","readFileSync","version","generatedSQL","length","process","exit","sqlUpStatements","createType","alterType","createTable","renameColumn","addColumn","setDefault","createIndex","collection","config","collections","slug","tableName","tableNameMap","get","pathsToQuery","Set","collectionSlug","columnPrefix","disableNotNull","fields","flattenedFields","isVersions","newTableName","parentTableName","path","rootTableName","versions","versionsTableName","versionsSuffix","versionFields","versionPathsToQuery","global","globals","globalSlug","addConstraint","notNull","dropTable","dropIndex","dropConstraint","dropColumn","dropType"],"mappings":"AAGA,SAASA,GAAG,QAAQ,cAAa;AACjC,OAAOC,QAAQ,KAAI;AACnB,SAASC,4BAA4B,EAAEC,wBAAwB,QAAQ,UAAS;AAChF,OAAOC,iBAAiB,gBAAe;AAKvC,SAASC,cAAc,QAAQ,uCAAsC;AACrE,SAASC,oBAAoB,QAAQ,4BAA2B;AAChE,SAASC,oBAAoB,QAAQ,4BAA2B;AAChE,SAASC,cAAc,QAAQ,sBAAqB;AAQpD,MAAMC,oBAAoB,OAAO,EAAEC,OAAO,EAAEC,EAAE,EAAEC,KAAK,EAAEC,UAAU,EAAE;IACjE,MAAMC,sBAAsBD,WAAWE,IAAI,CAAC;IAE5C,IAAIH,OAAO;QACTF,QAAQM,OAAO,CAACC,MAAM,CAACC,IAAI,CAACN;QAC5BF,QAAQM,OAAO,CAACC,MAAM,CAACC,IAAI,CAACJ;IAC9B;IAEA,MAAMH,GAAGQ,OAAO,CAACnB,IAAIoB,GAAG,CAACN;AAC3B;AAEA;;;;;;;;;;;;;CAaC,GACD,OAAO,MAAMO,wBAAwB,OAAO,EAAET,KAAK,EAAEI,OAAO,EAAEM,GAAG,EAAQ;IACvE,MAAMZ,UAAUM,QAAQL,EAAE;IAC1B,MAAMY,MAAMP,QAAQL,EAAE,CAACa,YAAY;IAEnC,kEAAkE;IAClE,MAAM,EAAEC,mBAAmB,EAAEC,iBAAiB,EAAEC,UAAU,EAAE,GAAGjB,QAAQkB,iBAAiB;IACxF,MAAMC,mBAAmBJ,oBAAoBf,QAAQoB,MAAM;IAE3D,sCAAsC;IACtC,MAAMC,mBAAmB9B,GACtB+B,WAAW,CAACT,KACZU,MAAM,CAAC,CAACC,OAASA,KAAKC,QAAQ,CAAC,YAAY,CAACD,KAAKC,QAAQ,CAAC,6BAC1DC,IAAI,GACJC,OAAO,IAAI,CAAC,EAAE;IAEjB,IAAI,CAACN,kBAAkB;QACrB,MAAM,IAAIO,MACR,CAAC,gGAAgG,CAAC;IAEtG;IAEA,IAAIC,oBAAoBC,KAAKC,KAAK,CAChCxC,GAAGyC,YAAY,CAAC,GAAGnB,IAAI,CAAC,EAAEQ,kBAAkB,EAAE;IAGhD,IAAIJ,cAAcY,kBAAkBI,OAAO,GAAGd,iBAAiBc,OAAO,EAAE;QACtEJ,oBAAoBZ,WAAWY;IACjC;IAEA,MAAMK,eAAe,MAAMlB,kBAAkBa,mBAAmBV;IAEhE,IAAI,CAACe,aAAaC,MAAM,EAAE;QACxB7B,QAAQC,MAAM,CAACC,IAAI,CAAC,CAAC,yBAAyB,CAAC;QAC/C4B,QAAQC,IAAI,CAAC;IACf;IAEA,MAAMC,kBAAkB1C,qBAAqBsC;IAE7C,MAAMjC,KAAK,MAAMN,eAAeK,SAASY;IAEzC,MAAMb,kBAAkB;QACtBC;QACAC;QACAC,OAAOA,QAAQ,mBAAmB;QAClCC,YAAYmC,gBAAgBC,UAAU;IACxC;IAEA,MAAMxC,kBAAkB;QACtBC;QACAC;QACAC,OAAOA,QAAQ,mBAAmB;QAClCC,YAAYmC,gBAAgBE,SAAS;IACvC;IAEA,MAAMzC,kBAAkB;QACtBC;QACAC;QACAC,OAAOA,QAAQ,oBAAoB;QACnCC,YAAYmC,gBAAgBG,WAAW;IACzC;IAEA,MAAM1C,kBAAkB;QACtBC;QACAC;QACAC,OAAOA,QAAQ,qBAAqB;QACpCC,YAAYmC,gBAAgBI,YAAY;IAC1C;IAEA,MAAM3C,kBAAkB;QACtBC;QACAC;QACAC,OAAOA,QAAQ,sCAAsC;QACrDC,YAAYmC,gBAAgBK,SAAS;IACvC;IAEA,eAAe;IACf,MAAM5C,kBAAkB;QACtBC;QACAC;QACAC,OAAOA,QAAQ,qBAAqB;QACpCC,YAAYmC,gBAAgBM,UAAU;IACxC;IAEA,MAAM7C,kBAAkB;QACtBC;QACAC;QACAC,OAAOA,QAAQ,qBAAqB;QACpCC,YAAYmC,gBAAgBO,WAAW;IACzC;IAEA,KAAK,MAAMC,cAAcxC,QAAQyC,MAAM,CAACC,WAAW,CAAE;QACnD,IAAIF,WAAWG,IAAI,KAAK,4BAA4B;YAClD;QACF;QACA,MAAMC,YAAYlD,QAAQmD,YAAY,CAACC,GAAG,CAAC1D,YAAYoD,WAAWG,IAAI;QACtE,MAAMI,eAA6B,IAAIC;QAEvCxD,eAAe;YACbE;YACAuD,gBAAgBT,WAAWG,IAAI;YAC/BO,cAAc;YACdvD;YACAwD,gBAAgB;YAChBC,QAAQZ,WAAWa,eAAe;YAClCC,YAAY;YACZC,cAAcX;YACdY,iBAAiBZ;YACjBa,MAAM;YACNV;YACA/C;YACA0D,eAAed;QACjB;QAEA,MAAMrD,qBAAqB;YACzBG;YACAuD,gBAAgBT,WAAWG,IAAI;YAC/BhD;YACAC;YACAwD,QAAQZ,WAAWa,eAAe;YAClCC,YAAY;YACZP;YACA/C;YACAM;YACAsC;QACF;QAEA,IAAIJ,WAAWmB,QAAQ,EAAE;YACvB,MAAMC,oBAAoBlE,QAAQmD,YAAY,CAACC,GAAG,CAChD,CAAC,CAAC,EAAE1D,YAAYoD,WAAWG,IAAI,IAAIjD,QAAQmE,cAAc,EAAE;YAE7D,MAAMC,gBAAgB5E,6BAA6Bc,QAAQyC,MAAM,EAAED,YAAY;YAC/E,MAAMuB,sBAAoC,IAAIf;YAE9CxD,eAAe;gBACbE;gBACAuD,gBAAgBT,WAAWG,IAAI;gBAC/BO,cAAc;gBACdvD;gBACAwD,gBAAgB;gBAChBC,QAAQU;gBACRR,YAAY;gBACZC,cAAcK;gBACdJ,iBAAiBI;gBACjBH,MAAM;gBACNV,cAAcgB;gBACd/D;gBACA0D,eAAeE;YACjB;YAEA,MAAMrE,qBAAqB;gBACzBG;gBACAuD,gBAAgBT,WAAWG,IAAI;gBAC/BhD;gBACAC;gBACAwD,QAAQU;gBACRR,YAAY;gBACZP,cAAcgB;gBACd/D;gBACAM;gBACAsC,WAAWgB;YACb;QACF;IACF;IAEA,KAAK,MAAMI,UAAUhE,QAAQyC,MAAM,CAACwB,OAAO,CAAE;QAC3C,MAAMrB,YAAYlD,QAAQmD,YAAY,CAACC,GAAG,CAAC1D,YAAY4E,OAAOrB,IAAI;QAElE,MAAMI,eAA6B,IAAIC;QAEvCxD,eAAe;YACbE;YACAwD,cAAc;YACdvD;YACAwD,gBAAgB;YAChBC,QAAQY,OAAOX,eAAe;YAC9Ba,YAAYF,OAAOrB,IAAI;YACvBW,YAAY;YACZC,cAAcX;YACdY,iBAAiBZ;YACjBa,MAAM;YACNV;YACA/C;YACA0D,eAAed;QACjB;QAEA,MAAMrD,qBAAqB;YACzBG;YACAC;YACAC;YACAwD,QAAQY,OAAOX,eAAe;YAC9Ba,YAAYF,OAAOrB,IAAI;YACvBW,YAAY;YACZP;YACA/C;YACAM;YACAsC;QACF;QAEA,IAAIoB,OAAOL,QAAQ,EAAE;YACnB,MAAMC,oBAAoBlE,QAAQmD,YAAY,CAACC,GAAG,CAChD,CAAC,CAAC,EAAE1D,YAAY4E,OAAOrB,IAAI,IAAIjD,QAAQmE,cAAc,EAAE;YAGzD,MAAMC,gBAAgB3E,yBAAyBa,QAAQyC,MAAM,EAAEuB,QAAQ;YAEvE,MAAMD,sBAAoC,IAAIf;YAE9CxD,eAAe;gBACbE;gBACAwD,cAAc;gBACdvD;gBACAwD,gBAAgB;gBAChBC,QAAQU;gBACRI,YAAYF,OAAOrB,IAAI;gBACvBW,YAAY;gBACZC,cAAcK;gBACdJ,iBAAiBI;gBACjBH,MAAM;gBACNV,cAAcgB;gBACd/D;gBACA0D,eAAeE;YACjB;YAEA,MAAMrE,qBAAqB;gBACzBG;gBACAC;gBACAC;gBACAwD,QAAQU;gBACRI,YAAYF,OAAOrB,IAAI;gBACvBW,YAAY;gBACZP,cAAcgB;gBACd/D;gBACAM;gBACAsC,WAAWgB;YACb;QACF;IACF;IAEA,iBAAiB;IACjB,MAAMnE,kBAAkB;QACtBC;QACAC;QACAC,OAAOA,QAAQ,uBAAuB;QACtCC,YAAYmC,gBAAgBmC,aAAa;IAC3C;IAEA,WAAW;IACX,MAAM1E,kBAAkB;QACtBC;QACAC;QACAC,OAAOA,QAAQ,yBAAyB;QACxCC,YAAYmC,gBAAgBoC,OAAO;IACrC;IAEA,aAAa;IACb,MAAM3E,kBAAkB;QACtBC;QACAC;QACAC,OAAOA,QAAQ,oBAAoB;QACnCC,YAAYmC,gBAAgBqC,SAAS;IACvC;IAEA,aAAa;IACb,MAAM5E,kBAAkB;QACtBC;QACAC;QACAC,OAAOA,QAAQ,qBAAqB;QACpCC,YAAYmC,gBAAgBsC,SAAS;IACvC;IAEA,kBAAkB;IAClB,MAAM7E,kBAAkB;QACtBC;QACAC;QACAC,OAAOA,QAAQ,yBAAyB;QACxCC,YAAYmC,gBAAgBuC,cAAc;IAC5C;IAEA,cAAc;IACd,MAAM9E,kBAAkB;QACtBC;QACAC;QACAC,OAAOA,QAAQ,qBAAqB;QACpCC,YAAYmC,gBAAgBwC,UAAU;IACxC;IAEA,aAAa;IACb,MAAM/E,kBAAkB;QACtBC;QACAC;QACAC,OAAOA,QAAQ,mBAAmB;QAClCC,YAAYmC,gBAAgByC,QAAQ;IACtC;AACF,EAAC"}