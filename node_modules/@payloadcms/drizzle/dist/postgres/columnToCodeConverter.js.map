{"version":3,"sources":["../../src/postgres/columnToCodeConverter.ts"],"sourcesContent":["import type { ColumnToCodeConverter } from '../types.js'\nexport const columnToCodeConverter: ColumnToCodeConverter = ({\n  adapter,\n  addEnum,\n  addImport,\n  column,\n  tableKey,\n}) => {\n  let columnBuilderFn: string = column.type\n\n  if (column.type === 'geometry') {\n    columnBuilderFn = 'geometryColumn'\n    addImport(adapter.packageName, columnBuilderFn)\n  } else if (column.type === 'enum') {\n    if ('locale' in column) {\n      columnBuilderFn = `enum__locales`\n    } else {\n      addEnum(column.enumName, column.options)\n      columnBuilderFn = column.enumName\n    }\n  } else {\n    addImport(`${adapter.packageName}/drizzle/pg-core`, columnBuilderFn)\n  }\n\n  const columnBuilderArgsArray: string[] = []\n\n  switch (column.type) {\n    case 'bit':\n    case 'halfvec':\n    case 'sparsevec':\n    case 'vector': {\n      if (column.dimensions) {\n        columnBuilderArgsArray.push(`dimensions: ${column.dimensions}`)\n      }\n      break\n    }\n    case 'numeric': {\n      columnBuilderArgsArray.push(\"mode: 'number'\")\n      break\n    }\n    case 'timestamp': {\n      columnBuilderArgsArray.push(`mode: '${column.mode}'`)\n      if (column.withTimezone) {\n        columnBuilderArgsArray.push('withTimezone: true')\n      }\n\n      if (typeof column.precision === 'number') {\n        columnBuilderArgsArray.push(`precision: ${column.precision}`)\n      }\n      break\n    }\n  }\n\n  let columnBuilderArgs = ''\n\n  if (columnBuilderArgsArray.length) {\n    columnBuilderArgs = `, {${columnBuilderArgsArray.join(',')}}`\n  }\n\n  let code = `${columnBuilderFn}('${column.name}'${columnBuilderArgs})`\n\n  if (column.type === 'timestamp' && column.defaultNow) {\n    code = `${code}.defaultNow()`\n  }\n\n  if (column.type === 'uuid' && column.defaultRandom) {\n    code = `${code}.defaultRandom()`\n  }\n\n  if (column.notNull) {\n    code = `${code}.notNull()`\n  }\n\n  if (column.primaryKey) {\n    code = `${code}.primaryKey()`\n  }\n\n  if (typeof column.default !== 'undefined') {\n    let sanitizedDefault = column.default\n\n    if (column.type === 'geometry') {\n      sanitizedDefault = `sql\\`${column.default}\\``\n    } else if (column.type === 'jsonb') {\n      sanitizedDefault = `sql\\`'${JSON.stringify(column.default)}'::jsonb\\``\n    } else if (column.type === 'numeric') {\n      sanitizedDefault = `'${column.default}'`\n    } else if (typeof column.default === 'string') {\n      sanitizedDefault = `${JSON.stringify(column.default)}`\n    }\n\n    code = `${code}.default(${sanitizedDefault})`\n  }\n\n  if (column.reference) {\n    let callback = `()`\n\n    if (column.reference.table === tableKey) {\n      addImport(`${adapter.packageName}/drizzle/pg-core`, 'type AnyPgColumn')\n      callback = `${callback}: AnyPgColumn`\n    }\n\n    callback = `${callback} => ${column.reference.table}.${column.reference.name}`\n\n    code = `${code}.references(${callback}, {\n      ${column.reference.onDelete ? `onDelete: '${column.reference.onDelete}'` : ''}\n  })`\n  }\n\n  return code\n}\n"],"names":["columnToCodeConverter","adapter","addEnum","addImport","column","tableKey","columnBuilderFn","type","packageName","enumName","options","columnBuilderArgsArray","dimensions","push","mode","withTimezone","precision","columnBuilderArgs","length","join","code","name","defaultNow","defaultRandom","notNull","primaryKey","default","sanitizedDefault","JSON","stringify","reference","callback","table","onDelete"],"mappings":"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"}