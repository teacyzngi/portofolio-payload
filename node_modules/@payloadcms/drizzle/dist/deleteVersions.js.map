{"version":3,"sources":["../src/deleteVersions.ts"],"sourcesContent":["import type { DeleteVersions, FlattenedField, SanitizedCollectionConfig } from 'payload'\n\nimport { inArray } from 'drizzle-orm'\nimport { APIError, buildVersionCollectionFields, buildVersionGlobalFields } from 'payload'\nimport toSnakeCase from 'to-snake-case'\n\nimport type { DrizzleAdapter } from './types.js'\n\nimport { findMany } from './find/findMany.js'\nimport { getTransaction } from './utilities/getTransaction.js'\n\nexport const deleteVersions: DeleteVersions = async function deleteVersion(\n  this: DrizzleAdapter,\n  { collection: collectionSlug, globalSlug, locale, req, where: where },\n) {\n  const db = await getTransaction(this, req)\n\n  let tableName: string\n  let fields: FlattenedField[]\n\n  if (globalSlug) {\n    const globalConfig = this.payload.globals.config.find(({ slug }) => slug === globalSlug)\n    tableName = this.tableNameMap.get(`_${toSnakeCase(globalSlug)}${this.versionsSuffix}`)\n    fields = buildVersionGlobalFields(this.payload.config, globalConfig, true)\n  } else if (collectionSlug) {\n    const collectionConfig: SanitizedCollectionConfig =\n      this.payload.collections[collectionSlug].config\n    tableName = this.tableNameMap.get(\n      `_${toSnakeCase(collectionConfig.slug)}${this.versionsSuffix}`,\n    )\n    fields = buildVersionCollectionFields(this.payload.config, collectionConfig, true)\n  } else {\n    throw new APIError('Either collection or globalSlug must be passed.')\n  }\n\n  const { docs } = await findMany({\n    adapter: this,\n    fields,\n    joins: false,\n    limit: 0,\n    locale,\n    page: 1,\n    pagination: false,\n    req,\n    tableName,\n    where,\n  })\n\n  const ids = []\n\n  docs.forEach((doc) => {\n    ids.push(doc.id)\n  })\n\n  if (ids.length > 0) {\n    await this.deleteWhere({\n      db,\n      tableName,\n      where: inArray(this.tables[tableName].id, ids),\n    })\n  }\n\n  return docs\n}\n"],"names":["inArray","APIError","buildVersionCollectionFields","buildVersionGlobalFields","toSnakeCase","findMany","getTransaction","deleteVersions","deleteVersion","collection","collectionSlug","globalSlug","locale","req","where","db","tableName","fields","globalConfig","payload","globals","config","find","slug","tableNameMap","get","versionsSuffix","collectionConfig","collections","docs","adapter","joins","limit","page","pagination","ids","forEach","doc","push","id","length","deleteWhere","tables"],"mappings":"AAEA,SAASA,OAAO,QAAQ,cAAa;AACrC,SAASC,QAAQ,EAAEC,4BAA4B,EAAEC,wBAAwB,QAAQ,UAAS;AAC1F,OAAOC,iBAAiB,gBAAe;AAIvC,SAASC,QAAQ,QAAQ,qBAAoB;AAC7C,SAASC,cAAc,QAAQ,gCAA+B;AAE9D,OAAO,MAAMC,iBAAiC,eAAeC,cAE3D,EAAEC,YAAYC,cAAc,EAAEC,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,OAAOA,KAAK,EAAE;IAErE,MAAMC,KAAK,MAAMT,eAAe,IAAI,EAAEO;IAEtC,IAAIG;IACJ,IAAIC;IAEJ,IAAIN,YAAY;QACd,MAAMO,eAAe,IAAI,CAACC,OAAO,CAACC,OAAO,CAACC,MAAM,CAACC,IAAI,CAAC,CAAC,EAAEC,IAAI,EAAE,GAAKA,SAASZ;QAC7EK,YAAY,IAAI,CAACQ,YAAY,CAACC,GAAG,CAAC,CAAC,CAAC,EAAErB,YAAYO,cAAc,IAAI,CAACe,cAAc,EAAE;QACrFT,SAASd,yBAAyB,IAAI,CAACgB,OAAO,CAACE,MAAM,EAAEH,cAAc;IACvE,OAAO,IAAIR,gBAAgB;QACzB,MAAMiB,mBACJ,IAAI,CAACR,OAAO,CAACS,WAAW,CAAClB,eAAe,CAACW,MAAM;QACjDL,YAAY,IAAI,CAACQ,YAAY,CAACC,GAAG,CAC/B,CAAC,CAAC,EAAErB,YAAYuB,iBAAiBJ,IAAI,IAAI,IAAI,CAACG,cAAc,EAAE;QAEhET,SAASf,6BAA6B,IAAI,CAACiB,OAAO,CAACE,MAAM,EAAEM,kBAAkB;IAC/E,OAAO;QACL,MAAM,IAAI1B,SAAS;IACrB;IAEA,MAAM,EAAE4B,IAAI,EAAE,GAAG,MAAMxB,SAAS;QAC9ByB,SAAS,IAAI;QACbb;QACAc,OAAO;QACPC,OAAO;QACPpB;QACAqB,MAAM;QACNC,YAAY;QACZrB;QACAG;QACAF;IACF;IAEA,MAAMqB,MAAM,EAAE;IAEdN,KAAKO,OAAO,CAAC,CAACC;QACZF,IAAIG,IAAI,CAACD,IAAIE,EAAE;IACjB;IAEA,IAAIJ,IAAIK,MAAM,GAAG,GAAG;QAClB,MAAM,IAAI,CAACC,WAAW,CAAC;YACrB1B;YACAC;YACAF,OAAOd,QAAQ,IAAI,CAAC0C,MAAM,CAAC1B,UAAU,CAACuB,EAAE,EAAEJ;QAC5C;IACF;IAEA,OAAON;AACT,EAAC"}