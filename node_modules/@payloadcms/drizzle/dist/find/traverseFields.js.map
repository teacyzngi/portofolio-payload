{"version":3,"sources":["../../src/find/traverseFields.ts"],"sourcesContent":["import type { LibSQLDatabase } from 'drizzle-orm/libsql'\nimport type { SQLiteSelect, SQLiteSelectBase } from 'drizzle-orm/sqlite-core'\n\nimport { and, asc, count, desc, eq, getTableName, or, sql } from 'drizzle-orm'\nimport {\n  appendVersionToQueryKey,\n  buildVersionCollectionFields,\n  combineQueries,\n  type FlattenedField,\n  getFieldByPath,\n  getQueryDraftsSort,\n  type JoinQuery,\n  type SelectMode,\n  type SelectType,\n  type Where,\n} from 'payload'\nimport { fieldIsVirtual, fieldShouldBeLocalized } from 'payload/shared'\nimport toSnakeCase from 'to-snake-case'\n\nimport type { BuildQueryJoinAliases, DrizzleAdapter } from '../types.js'\nimport type { Result } from './buildFindManyArgs.js'\n\nimport { buildQuery } from '../queries/buildQuery.js'\nimport { getTableAlias } from '../queries/getTableAlias.js'\nimport { operatorMap } from '../queries/operatorMap.js'\nimport { getArrayRelationName } from '../utilities/getArrayRelationName.js'\nimport { getNameFromDrizzleTable } from '../utilities/getNameFromDrizzleTable.js'\nimport { jsonAggBuildObject } from '../utilities/json.js'\nimport { rawConstraint } from '../utilities/rawConstraint.js'\nimport {\n  InternalBlockTableNameIndex,\n  resolveBlockTableName,\n} from '../utilities/validateExistingBlockIsIdentical.js'\n\nconst flattenAllWherePaths = (where: Where, paths: { path: string; ref: any }[]) => {\n  for (const k in where) {\n    if (['AND', 'OR'].includes(k.toUpperCase())) {\n      if (Array.isArray(where[k])) {\n        for (const whereField of where[k]) {\n          flattenAllWherePaths(whereField, paths)\n        }\n      }\n    } else {\n      // TODO: explore how to support arrays/relationship querying.\n      paths.push({ path: k.split('.').join('_'), ref: where })\n    }\n  }\n}\n\nconst buildSQLWhere = (where: Where, alias: string) => {\n  for (const k in where) {\n    if (['AND', 'OR'].includes(k.toUpperCase())) {\n      if (Array.isArray(where[k])) {\n        const op = 'AND' === k.toUpperCase() ? and : or\n        const accumulated = []\n        for (const whereField of where[k]) {\n          accumulated.push(buildSQLWhere(whereField, alias))\n        }\n        return op(...accumulated)\n      }\n    } else {\n      const payloadOperator = Object.keys(where[k])[0]\n\n      const value = where[k][payloadOperator]\n      if (payloadOperator === '$raw') {\n        return sql.raw(value)\n      }\n\n      return operatorMap[payloadOperator](sql.raw(`\"${alias}\".\"${k.split('.').join('_')}\"`), value)\n    }\n  }\n}\n\ntype SQLSelect = SQLiteSelectBase<any, any, any, any>\n\ntype TraverseFieldArgs = {\n  _locales: Result\n  adapter: DrizzleAdapter\n  collectionSlug?: string\n  currentArgs: Result\n  currentTableName: string\n  depth?: number\n  draftsEnabled?: boolean\n  fields: FlattenedField[]\n  joinQuery: JoinQuery\n  joins?: BuildQueryJoinAliases\n  locale?: string\n  parentIsLocalized?: boolean\n  path: string\n  select?: SelectType\n  selectAllOnCurrentLevel?: boolean\n  selectMode?: SelectMode\n  tablePath: string\n  topLevelArgs: Record<string, unknown>\n  topLevelTableName: string\n  versions?: boolean\n  withTabledFields: {\n    numbers?: boolean\n    rels?: boolean\n    texts?: boolean\n  }\n}\n\nexport const traverseFields = ({\n  _locales,\n  adapter,\n  collectionSlug,\n  currentArgs,\n  currentTableName,\n  depth,\n  draftsEnabled,\n  fields,\n  joinQuery = {},\n  joins,\n  locale,\n  parentIsLocalized = false,\n  path,\n  select,\n  selectAllOnCurrentLevel = false,\n  selectMode,\n  tablePath,\n  topLevelArgs,\n  topLevelTableName,\n  versions,\n  withTabledFields,\n}: TraverseFieldArgs) => {\n  fields.forEach((field) => {\n    if (fieldIsVirtual(field)) {\n      return\n    }\n\n    const isFieldLocalized = fieldShouldBeLocalized({\n      field,\n      parentIsLocalized,\n    })\n\n    // handle simple relationship\n    if (\n      depth > 0 &&\n      (field.type === 'upload' || field.type === 'relationship') &&\n      !field.hasMany &&\n      typeof field.relationTo === 'string'\n    ) {\n      if (isFieldLocalized) {\n        _locales.with[`${path}${field.name}`] = true\n      } else {\n        currentArgs.with[`${path}${field.name}`] = true\n      }\n    }\n\n    switch (field.type) {\n      case 'array': {\n        const arraySelect = selectAllOnCurrentLevel ? true : select?.[field.name]\n\n        if (select) {\n          if (\n            (selectMode === 'include' && typeof arraySelect === 'undefined') ||\n            (selectMode === 'exclude' && arraySelect === false)\n          ) {\n            break\n          }\n        }\n\n        const withArray: Result = {\n          columns:\n            typeof arraySelect === 'object'\n              ? {\n                  id: true,\n                  _order: true,\n                }\n              : {\n                  _parentID: false,\n                },\n          orderBy: ({ _order }, { asc }) => [asc(_order)],\n          with: {},\n        }\n\n        const arrayTableName = adapter.tableNameMap.get(\n          `${currentTableName}_${tablePath}${toSnakeCase(field.name)}`,\n        )\n\n        if (typeof arraySelect === 'object') {\n          if (adapter.tables[arrayTableName]._locale) {\n            withArray.columns._locale = true\n          }\n\n          if (adapter.tables[arrayTableName]._uuid) {\n            withArray.columns._uuid = true\n          }\n        }\n\n        const arrayTableNameWithLocales = `${arrayTableName}${adapter.localesSuffix}`\n\n        if (adapter.tables[arrayTableNameWithLocales]) {\n          withArray.with._locales = {\n            columns:\n              typeof arraySelect === 'object'\n                ? {\n                    _locale: true,\n                  }\n                : {\n                    id: false,\n                    _parentID: false,\n                  },\n            with: {},\n          }\n        }\n\n        const relationName = getArrayRelationName({\n          field,\n          path: `${path}${field.name}`,\n          tableName: arrayTableName,\n        })\n\n        currentArgs.with[relationName] = withArray\n\n        traverseFields({\n          _locales: withArray.with._locales,\n          adapter,\n          currentArgs: withArray,\n          currentTableName: arrayTableName,\n          depth,\n          draftsEnabled,\n          fields: field.flattenedFields,\n          joinQuery,\n          locale,\n          parentIsLocalized: parentIsLocalized || field.localized,\n          path: '',\n          select: typeof arraySelect === 'object' ? arraySelect : undefined,\n          selectMode,\n          tablePath: '',\n          topLevelArgs,\n          topLevelTableName,\n          withTabledFields,\n        })\n\n        if (\n          typeof arraySelect === 'object' &&\n          withArray.with._locales &&\n          Object.keys(withArray.with._locales).length === 1\n        ) {\n          delete withArray.with._locales\n        }\n\n        break\n      }\n\n      case 'blocks': {\n        const blocksSelect = selectAllOnCurrentLevel ? true : select?.[field.name]\n\n        if (select) {\n          if (\n            (selectMode === 'include' && !blocksSelect) ||\n            (selectMode === 'exclude' && blocksSelect === false)\n          ) {\n            break\n          }\n        }\n\n        if (adapter.blocksAsJSON) {\n          if (select || selectAllOnCurrentLevel) {\n            const fieldPath = `${path}${field.name}`\n\n            if ((isFieldLocalized || parentIsLocalized) && _locales) {\n              _locales.columns[fieldPath] = true\n            } else if (adapter.tables[currentTableName]?.[fieldPath]) {\n              currentArgs.columns[fieldPath] = true\n            }\n          }\n\n          break\n        }\n\n        ;(field.blockReferences ?? field.blocks).forEach((_block) => {\n          const block = typeof _block === 'string' ? adapter.payload.blocks[_block] : _block\n          const blockKey = `_blocks_${block.slug}${!block[InternalBlockTableNameIndex] ? '' : `_${block[InternalBlockTableNameIndex]}`}`\n\n          let blockSelect: boolean | SelectType | undefined\n\n          let blockSelectMode = selectMode\n\n          if (selectMode === 'include' && blocksSelect === true) {\n            blockSelect = true\n          }\n\n          if (typeof blocksSelect === 'object') {\n            if (typeof blocksSelect[block.slug] === 'object') {\n              blockSelect = blocksSelect[block.slug]\n            } else if (\n              (selectMode === 'include' && typeof blocksSelect[block.slug] === 'undefined') ||\n              (selectMode === 'exclude' && blocksSelect[block.slug] === false)\n            ) {\n              blockSelect = {}\n              blockSelectMode = 'include'\n            } else if (selectMode === 'include' && Boolean(blocksSelect[block.slug])) {\n              blockSelect = true\n            }\n          }\n\n          if (!topLevelArgs[blockKey]) {\n            const withBlock: Result = {\n              columns:\n                typeof blockSelect === 'object'\n                  ? {\n                      id: true,\n                      _order: true,\n                      _path: true,\n                    }\n                  : {\n                      _parentID: false,\n                    },\n              orderBy: ({ _order }, { asc }) => [asc(_order)],\n              with: {},\n            }\n\n            const tableName = resolveBlockTableName(\n              block,\n              adapter.tableNameMap.get(`${topLevelTableName}_blocks_${toSnakeCase(block.slug)}`),\n            )\n\n            if (typeof blockSelect === 'object') {\n              if (adapter.tables[tableName]._locale) {\n                withBlock.columns._locale = true\n              }\n\n              if (adapter.tables[tableName]._uuid) {\n                withBlock.columns._uuid = true\n              }\n            }\n\n            if (adapter.tables[`${tableName}${adapter.localesSuffix}`]) {\n              withBlock.with._locales = {\n                with: {},\n              }\n\n              if (typeof blockSelect === 'object') {\n                withBlock.with._locales.columns = {\n                  _locale: true,\n                }\n              }\n            }\n            topLevelArgs.with[blockKey] = withBlock\n\n            traverseFields({\n              _locales: withBlock.with._locales,\n              adapter,\n              currentArgs: withBlock,\n              currentTableName: tableName,\n              depth,\n              draftsEnabled,\n              fields: block.flattenedFields,\n              joinQuery,\n              locale,\n              parentIsLocalized: parentIsLocalized || field.localized,\n              path: '',\n              select: typeof blockSelect === 'object' ? blockSelect : undefined,\n              selectMode: blockSelectMode,\n              tablePath: '',\n              topLevelArgs,\n              topLevelTableName,\n              withTabledFields,\n            })\n\n            if (\n              typeof blockSelect === 'object' &&\n              withBlock.with._locales &&\n              Object.keys(withBlock.with._locales.columns).length === 1\n            ) {\n              delete withBlock.with._locales\n            }\n          }\n        })\n\n        break\n      }\n\n      case 'group':\n      case 'tab': {\n        const fieldSelect = select?.[field.name]\n\n        if (fieldSelect === false) {\n          break\n        }\n\n        traverseFields({\n          _locales,\n          adapter,\n          collectionSlug,\n          currentArgs,\n          currentTableName,\n          depth,\n          draftsEnabled,\n          fields: field.flattenedFields,\n          joinQuery,\n          joins,\n          locale,\n          parentIsLocalized: parentIsLocalized || field.localized,\n          path: `${path}${field.name}_`,\n          select: typeof fieldSelect === 'object' ? fieldSelect : undefined,\n          selectAllOnCurrentLevel:\n            selectAllOnCurrentLevel ||\n            fieldSelect === true ||\n            (selectMode === 'exclude' && typeof fieldSelect === 'undefined'),\n          selectMode,\n          tablePath: `${tablePath}${toSnakeCase(field.name)}_`,\n          topLevelArgs,\n          topLevelTableName,\n          versions,\n          withTabledFields,\n        })\n\n        break\n      }\n      case 'join': {\n        // when `joinsQuery` is false, do not join\n        if (joinQuery === false) {\n          break\n        }\n\n        if (\n          (select && selectMode === 'include' && !select[field.name]) ||\n          (selectMode === 'exclude' && select[field.name] === false)\n        ) {\n          break\n        }\n\n        const joinSchemaPath = `${path.replaceAll('_', '.')}${field.name}`\n\n        if (joinQuery[joinSchemaPath] === false) {\n          break\n        }\n\n        const {\n          count: shouldCount = false,\n          limit: limitArg = field.defaultLimit ?? 10,\n          page,\n          sort = field.defaultSort,\n          where,\n        } = joinQuery[joinSchemaPath] || {}\n        let limit = limitArg\n\n        if (limit !== 0) {\n          // get an additional document and slice it later to determine if there is a next page\n          limit += 1\n        }\n\n        const columnName = `${path.replaceAll('.', '_')}${field.name}`\n\n        const db = adapter.drizzle as LibSQLDatabase\n\n        if (Array.isArray(field.collection)) {\n          let currentQuery: null | SQLSelect = null\n          const onPath = field.on.split('.').join('_')\n\n          if (Array.isArray(sort)) {\n            throw new Error('Not implemented')\n          }\n\n          let sanitizedSort = sort\n\n          if (!sanitizedSort) {\n            if (\n              field.collection.some((collection) =>\n                adapter.payload.collections[collection].config.fields.some(\n                  (f) => f.type === 'date' && f.name === 'createdAt',\n                ),\n              )\n            ) {\n              sanitizedSort = '-createdAt'\n            } else {\n              sanitizedSort = 'id'\n            }\n          }\n\n          const sortOrder = sanitizedSort.startsWith('-') ? desc : asc\n          sanitizedSort = sanitizedSort.replace('-', '')\n\n          const sortPath = sanitizedSort.split('.').join('_')\n\n          const wherePaths: { path: string; ref: any }[] = []\n\n          if (where) {\n            flattenAllWherePaths(where, wherePaths)\n          }\n\n          for (const collection of field.collection) {\n            const joinCollectionTableName = adapter.tableNameMap.get(toSnakeCase(collection))\n\n            const table = adapter.tables[joinCollectionTableName]\n\n            const sortColumn = table[sortPath]\n\n            const selectFields = {\n              id: adapter.tables[joinCollectionTableName].id,\n              parent: sql`${adapter.tables[joinCollectionTableName][onPath]}`.as(onPath),\n              relationTo: sql`${collection}`.as('relationTo'),\n              sortPath: sql`${sortColumn ? sortColumn : null}`.as('sortPath'),\n            }\n\n            const collectionQueryWhere: any[] = []\n            // Select for WHERE and Fallback NULL\n            for (const { path, ref } of wherePaths) {\n              const collectioConfig = adapter.payload.collections[collection].config\n              const field = getFieldByPath({ fields: collectioConfig.flattenedFields, path })\n\n              if (field && field.field.type === 'select' && field.field.hasMany) {\n                let tableName = adapter.tableNameMap.get(\n                  `${toSnakeCase(collection)}_${toSnakeCase(path)}`,\n                )\n                let parentTable = getTableName(table)\n\n                if (adapter.schemaName) {\n                  tableName = `\"${adapter.schemaName}\".\"${tableName}\"`\n                  parentTable = `\"${adapter.schemaName}\".\"${parentTable}\"`\n                }\n\n                if (adapter.name === 'postgres') {\n                  selectFields[path] = sql\n                    .raw(\n                      `(select jsonb_agg(${tableName}.value) from ${tableName} where ${tableName}.parent_id = ${parentTable}.id)`,\n                    )\n                    .as(path)\n                } else {\n                  selectFields[path] = sql\n                    .raw(\n                      `(select json_group_array(${tableName}.value) from ${tableName} where ${tableName}.parent_id = ${parentTable}.id)`,\n                    )\n                    .as(path)\n                }\n\n                const constraint = ref[path]\n                const operator = Object.keys(constraint)[0]\n                const value: any = Object.values(constraint)[0]\n\n                const query = adapter.createJSONQuery({\n                  column: `\"${path}\"`,\n                  operator,\n                  pathSegments: [field.field.name],\n                  table: parentTable,\n                  value,\n                })\n                ref[path] = { $raw: query }\n              } else if (adapter.tables[joinCollectionTableName][path]) {\n                selectFields[path] = sql`${adapter.tables[joinCollectionTableName][path]}`.as(path)\n                // Allow to filter by collectionSlug\n              } else if (path !== 'relationTo') {\n                selectFields[path] = sql`null`.as(path)\n              }\n            }\n\n            let query: any = db.select(selectFields).from(adapter.tables[joinCollectionTableName])\n            if (collectionQueryWhere.length) {\n              query = query.where(and(...collectionQueryWhere))\n            }\n            if (currentQuery === null) {\n              currentQuery = query as unknown as SQLSelect\n            } else {\n              currentQuery = currentQuery.unionAll(query) as SQLSelect\n            }\n          }\n\n          const subQueryAlias = `${columnName}_subquery`\n\n          let sqlWhere = eq(\n            sql.raw(`\"${currentTableName}\".\"id\"`),\n            sql.raw(`\"${subQueryAlias}\".\"${onPath}\"`),\n          )\n\n          if (where && Object.keys(where).length > 0) {\n            sqlWhere = and(sqlWhere, buildSQLWhere(where, subQueryAlias))\n          }\n\n          if (shouldCount) {\n            currentArgs.extras[`${columnName}_count`] = sql`${db\n              .select({ count: count() })\n              .from(sql`${currentQuery.as(subQueryAlias)}`)\n              .where(sqlWhere)}`.as(`${columnName}_count`)\n          }\n\n          currentQuery = currentQuery.orderBy(sortOrder(sql`\"sortPath\"`)) as SQLSelect\n\n          if (page && limit !== 0) {\n            const offset = (page - 1) * limit\n            if (offset > 0) {\n              currentQuery = currentQuery.offset(offset) as SQLSelect\n            }\n          }\n\n          if (limit) {\n            currentQuery = currentQuery.limit(limit) as SQLSelect\n          }\n\n          currentArgs.extras[columnName] = sql`${db\n            .select({\n              id: jsonAggBuildObject(adapter, {\n                id: sql.raw(`\"${subQueryAlias}\".\"id\"`),\n                relationTo: sql.raw(`\"${subQueryAlias}\".\"relationTo\"`),\n              }),\n            })\n            .from(sql`${currentQuery.as(subQueryAlias)}`)\n            .where(sqlWhere)}`.as(columnName)\n        } else {\n          const useDrafts =\n            (versions || draftsEnabled) &&\n            Boolean(adapter.payload.collections[field.collection].config.versions.drafts)\n\n          const fields = useDrafts\n            ? buildVersionCollectionFields(\n                adapter.payload.config,\n                adapter.payload.collections[field.collection].config,\n                true,\n              )\n            : adapter.payload.collections[field.collection].config.flattenedFields\n\n          const joinCollectionTableName = adapter.tableNameMap.get(\n            useDrafts\n              ? `_${toSnakeCase(field.collection)}${adapter.versionsSuffix}`\n              : toSnakeCase(field.collection),\n          )\n\n          const joins: BuildQueryJoinAliases = []\n\n          const currentIDColumn = versions\n            ? adapter.tables[currentTableName].parent\n            : adapter.tables[currentTableName].id\n\n          let joinQueryWhere: Where\n\n          const currentIDRaw = sql.raw(\n            `\"${getNameFromDrizzleTable(currentIDColumn.table)}\".\"${currentIDColumn.name}\"`,\n          )\n\n          if (Array.isArray(field.targetField.relationTo)) {\n            joinQueryWhere = {\n              [field.on]: {\n                equals: {\n                  relationTo: collectionSlug,\n                  value: rawConstraint(currentIDRaw),\n                },\n              },\n            }\n          } else {\n            joinQueryWhere = {\n              [field.on]: {\n                equals: rawConstraint(currentIDRaw),\n              },\n            }\n          }\n\n          if (where && Object.keys(where).length) {\n            joinQueryWhere = {\n              and: [joinQueryWhere, where],\n            }\n          }\n\n          if (useDrafts) {\n            joinQueryWhere = combineQueries(appendVersionToQueryKey(joinQueryWhere), {\n              latest: { equals: true },\n            })\n          }\n\n          const columnName = `${path.replaceAll('.', '_')}${field.name}`\n\n          const subQueryAlias = `${columnName}_alias`\n\n          const { newAliasTable } = getTableAlias({\n            adapter,\n            tableName: joinCollectionTableName,\n          })\n\n          const {\n            orderBy,\n            selectFields,\n            where: subQueryWhere,\n          } = buildQuery({\n            adapter,\n            aliasTable: newAliasTable,\n            fields,\n            joins,\n            locale,\n            parentIsLocalized,\n            selectLocale: true,\n            sort: useDrafts\n              ? getQueryDraftsSort({\n                  collectionConfig: adapter.payload.collections[field.collection].config,\n                  sort,\n                })\n              : sort,\n            tableName: joinCollectionTableName,\n            where: joinQueryWhere,\n          })\n\n          for (let key in selectFields) {\n            const val = selectFields[key]\n\n            if (val.table && getNameFromDrizzleTable(val.table) === joinCollectionTableName) {\n              delete selectFields[key]\n              key = key.split('.').pop()\n              selectFields[key] = newAliasTable[key]\n            }\n          }\n\n          if (useDrafts) {\n            selectFields.parent = newAliasTable.parent\n          }\n\n          let query: SQLiteSelect = db\n            .select(selectFields as any)\n            .from(newAliasTable)\n            .where(subQueryWhere)\n            .orderBy(() => orderBy.map(({ column, order }) => order(column)))\n            .$dynamic()\n\n          joins.forEach(({ type, condition, table }) => {\n            query = query[type ?? 'leftJoin'](table, condition)\n          })\n\n          if (page && limit !== 0) {\n            const offset = (page - 1) * limit - 1\n            if (offset > 0) {\n              query = query.offset(offset)\n            }\n          }\n\n          if (limit !== 0) {\n            query = query.limit(limit)\n          }\n\n          const subQuery = query.as(subQueryAlias)\n\n          if (shouldCount) {\n            let countSubquery: SQLiteSelect = db\n              .select(selectFields as any)\n\n              .from(newAliasTable)\n              .where(subQueryWhere)\n              .$dynamic()\n\n            joins.forEach(({ type, condition, table }) => {\n              countSubquery = countSubquery[type ?? 'leftJoin'](table, condition)\n            })\n\n            currentArgs.extras[`${columnName}_count`] = sql`${db\n              .select({\n                count: count(),\n              })\n              .from(sql`${countSubquery.as(`${subQueryAlias}_count_subquery`)}`)}`.as(\n              `${subQueryAlias}_count`,\n            )\n          }\n\n          currentArgs.extras[columnName] = sql`${db\n            .select({\n              result: jsonAggBuildObject(adapter, {\n                id: sql.raw(`\"${subQueryAlias}\".${useDrafts ? 'parent_id' : 'id'}`),\n                ...(selectFields._locale && {\n                  locale: sql.raw(`\"${subQueryAlias}\".${selectFields._locale.name}`),\n                }),\n              }),\n            })\n            .from(sql`${subQuery}`)}`.as(subQueryAlias)\n        }\n\n        break\n      }\n\n      case 'point': {\n        if (adapter.name === 'sqlite') {\n          break\n        }\n\n        const args = isFieldLocalized ? _locales : currentArgs\n        if (!args.columns) {\n          args.columns = {}\n        }\n\n        if (!args.extras) {\n          args.extras = {}\n        }\n\n        const name = `${path}${field.name}`\n\n        // Drizzle handles that poorly. See https://github.com/drizzle-team/drizzle-orm/issues/2526\n        // Additionally, this way we format the column value straight in the database using ST_AsGeoJSON\n        args.columns[name] = false\n\n        let shouldSelect = false\n\n        if (select || selectAllOnCurrentLevel) {\n          if (\n            selectAllOnCurrentLevel ||\n            (selectMode === 'include' && Boolean(select[field.name])) ||\n            (selectMode === 'exclude' && typeof select[field.name] === 'undefined')\n          ) {\n            shouldSelect = true\n          }\n        } else {\n          shouldSelect = true\n        }\n        const tableName = fieldShouldBeLocalized({ field, parentIsLocalized })\n          ? `${currentTableName}${adapter.localesSuffix}`\n          : currentTableName\n\n        if (shouldSelect) {\n          args.extras[name] = sql\n            .raw(`ST_AsGeoJSON(\"${adapter.tables[tableName][name].name}\")::jsonb`)\n            .as(name)\n        }\n        break\n      }\n\n      case 'select': {\n        if (select && !selectAllOnCurrentLevel) {\n          if (\n            (selectMode === 'include' && !select[field.name]) ||\n            (selectMode === 'exclude' && select[field.name] === false)\n          ) {\n            break\n          }\n        }\n\n        if (field.hasMany) {\n          const withSelect: Result = {\n            columns: {\n              id: false,\n              order: false,\n              parent: false,\n            },\n            orderBy: ({ order }, { asc }) => [asc(order)],\n          }\n\n          currentArgs.with[`${path}${field.name}`] = withSelect\n          break\n        }\n\n        if (select || selectAllOnCurrentLevel) {\n          const fieldPath = `${path}${field.name}`\n\n          if ((isFieldLocalized || parentIsLocalized) && _locales) {\n            _locales.columns[fieldPath] = true\n          } else if (adapter.tables[currentTableName]?.[fieldPath]) {\n            currentArgs.columns[fieldPath] = true\n          }\n        }\n\n        break\n      }\n\n      default: {\n        if (!select && !selectAllOnCurrentLevel) {\n          break\n        }\n\n        if (\n          selectAllOnCurrentLevel ||\n          (selectMode === 'include' && Boolean(select[field.name])) ||\n          (selectMode === 'exclude' && typeof select[field.name] === 'undefined')\n        ) {\n          const fieldPath = `${path}${field.name}`\n\n          if ((isFieldLocalized || parentIsLocalized) && _locales) {\n            _locales.columns[fieldPath] = true\n          } else if (adapter.tables[currentTableName]?.[fieldPath]) {\n            currentArgs.columns[fieldPath] = true\n          }\n\n          if (\n            !withTabledFields.rels &&\n            (field.type === 'relationship' || field.type === 'upload') &&\n            (field.hasMany || Array.isArray(field.relationTo))\n          ) {\n            withTabledFields.rels = true\n          }\n\n          if (!withTabledFields.numbers && field.type === 'number' && field.hasMany) {\n            withTabledFields.numbers = true\n          }\n\n          if (!withTabledFields.texts && field.type === 'text' && field.hasMany) {\n            withTabledFields.texts = true\n          }\n        }\n\n        break\n      }\n    }\n  })\n\n  return topLevelArgs\n}\n"],"names":["and","asc","count","desc","eq","getTableName","or","sql","appendVersionToQueryKey","buildVersionCollectionFields","combineQueries","getFieldByPath","getQueryDraftsSort","fieldIsVirtual","fieldShouldBeLocalized","toSnakeCase","buildQuery","getTableAlias","operatorMap","getArrayRelationName","getNameFromDrizzleTable","jsonAggBuildObject","rawConstraint","InternalBlockTableNameIndex","resolveBlockTableName","flattenAllWherePaths","where","paths","k","includes","toUpperCase","Array","isArray","whereField","push","path","split","join","ref","buildSQLWhere","alias","op","accumulated","payloadOperator","Object","keys","value","raw","traverseFields","_locales","adapter","collectionSlug","currentArgs","currentTableName","depth","draftsEnabled","fields","joinQuery","joins","locale","parentIsLocalized","select","selectAllOnCurrentLevel","selectMode","tablePath","topLevelArgs","topLevelTableName","versions","withTabledFields","forEach","field","isFieldLocalized","type","hasMany","relationTo","with","name","arraySelect","withArray","columns","id","_order","_parentID","orderBy","arrayTableName","tableNameMap","get","tables","_locale","_uuid","arrayTableNameWithLocales","localesSuffix","relationName","tableName","flattenedFields","localized","undefined","length","blocksSelect","blocksAsJSON","fieldPath","blockReferences","blocks","_block","block","payload","blockKey","slug","blockSelect","blockSelectMode","Boolean","withBlock","_path","fieldSelect","joinSchemaPath","replaceAll","shouldCount","limit","limitArg","defaultLimit","page","sort","defaultSort","columnName","db","drizzle","collection","currentQuery","onPath","on","Error","sanitizedSort","some","collections","config","f","sortOrder","startsWith","replace","sortPath","wherePaths","joinCollectionTableName","table","sortColumn","selectFields","parent","as","collectionQueryWhere","collectioConfig","parentTable","schemaName","constraint","operator","values","query","createJSONQuery","column","pathSegments","$raw","from","unionAll","subQueryAlias","sqlWhere","extras","offset","useDrafts","drafts","versionsSuffix","currentIDColumn","joinQueryWhere","currentIDRaw","targetField","equals","latest","newAliasTable","subQueryWhere","aliasTable","selectLocale","collectionConfig","key","val","pop","map","order","$dynamic","condition","subQuery","countSubquery","result","args","shouldSelect","withSelect","rels","numbers","texts"],"mappings":"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"}