{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type {\n  Adapter,\n  ClientUploadsConfig,\n  PluginOptions as CloudStoragePluginOptions,\n  CollectionOptions,\n  GeneratedAdapter,\n} from '@payloadcms/plugin-cloud-storage/types'\nimport type { NodeHttpHandlerOptions } from '@smithy/node-http-handler'\nimport type { Config, Plugin, UploadCollectionSlug } from 'payload'\n\nimport * as AWS from '@aws-sdk/client-s3'\nimport { cloudStoragePlugin } from '@payloadcms/plugin-cloud-storage'\nimport { initClientUploads } from '@payloadcms/plugin-cloud-storage/utilities'\n\nimport type { SignedDownloadsConfig } from './staticHandler.js'\n\nimport { getGenerateSignedURLHandler } from './generateSignedURL.js'\nimport { getGenerateURL } from './generateURL.js'\nimport { getHandleDelete } from './handleDelete.js'\nimport { getHandleUpload } from './handleUpload.js'\nimport { getHandler } from './staticHandler.js'\n\nexport type S3StorageOptions = {\n  /**\n   * Access control list for uploaded files.\n   */\n\n  acl?: 'private' | 'public-read'\n\n  /**\n   * Bucket name to upload files to.\n   *\n   * Must follow [AWS S3 bucket naming conventions](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html).\n   */\n\n  bucket: string\n\n  /**\n   * Do uploads directly on the client to bypass limits on Vercel. You must allow CORS PUT method for the bucket to your website.\n   */\n  clientUploads?: ClientUploadsConfig\n  /**\n   * Collection options to apply the S3 adapter to.\n   */\n  collections: Partial<\n    Record<\n      UploadCollectionSlug,\n      | ({\n          signedDownloads?: SignedDownloadsConfig\n        } & Omit<CollectionOptions, 'adapter'>)\n      | true\n    >\n  >\n  /**\n   * AWS S3 client configuration. Highly dependent on your AWS setup.\n   *\n   * [AWS.S3ClientConfig Docs](https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/clients/client-s3/interfaces/s3clientconfig.html)\n   */\n  config: AWS.S3ClientConfig\n\n  /**\n   * Whether or not to disable local storage\n   *\n   * @default true\n   */\n  disableLocalStorage?: boolean\n\n  /**\n   * Whether or not to enable the plugin\n   *\n   * Default: true\n   */\n  enabled?: boolean\n  /**\n   * Use pre-signed URLs for files downloading. Can be overriden per-collection.\n   */\n  signedDownloads?: SignedDownloadsConfig\n}\n\ntype S3StoragePlugin = (storageS3Args: S3StorageOptions) => Plugin\n\nlet storageClient: AWS.S3 | null = null\n\nconst defaultRequestHandlerOpts: NodeHttpHandlerOptions = {\n  httpAgent: {\n    keepAlive: true,\n    maxSockets: 100,\n  },\n  httpsAgent: {\n    keepAlive: true,\n    maxSockets: 100,\n  },\n}\n\nexport const s3Storage: S3StoragePlugin =\n  (s3StorageOptions: S3StorageOptions) =>\n  (incomingConfig: Config): Config => {\n    const getStorageClient: () => AWS.S3 = () => {\n      if (storageClient) {\n        return storageClient\n      }\n\n      storageClient = new AWS.S3({\n        requestHandler: defaultRequestHandlerOpts,\n        ...(s3StorageOptions.config ?? {}),\n      })\n      return storageClient\n    }\n\n    const isPluginDisabled = s3StorageOptions.enabled === false\n\n    initClientUploads({\n      clientHandler: '@payloadcms/storage-s3/client#S3ClientUploadHandler',\n      collections: s3StorageOptions.collections,\n      config: incomingConfig,\n      enabled: !isPluginDisabled && Boolean(s3StorageOptions.clientUploads),\n      serverHandler: getGenerateSignedURLHandler({\n        access:\n          typeof s3StorageOptions.clientUploads === 'object'\n            ? s3StorageOptions.clientUploads.access\n            : undefined,\n        acl: s3StorageOptions.acl,\n        bucket: s3StorageOptions.bucket,\n        collections: s3StorageOptions.collections,\n        getStorageClient,\n      }),\n      serverHandlerPath: '/storage-s3-generate-signed-url',\n    })\n\n    if (isPluginDisabled) {\n      return incomingConfig\n    }\n\n    const adapter = s3StorageInternal(getStorageClient, s3StorageOptions)\n\n    // Add adapter to each collection option object\n    const collectionsWithAdapter: CloudStoragePluginOptions['collections'] = Object.entries(\n      s3StorageOptions.collections,\n    ).reduce(\n      (acc, [slug, collOptions]) => ({\n        ...acc,\n        [slug]: {\n          ...(collOptions === true ? {} : collOptions),\n          adapter,\n        },\n      }),\n      {} as Record<string, CollectionOptions>,\n    )\n\n    // Set disableLocalStorage: true for collections specified in the plugin options\n    const config = {\n      ...incomingConfig,\n      collections: (incomingConfig.collections || []).map((collection) => {\n        if (!collectionsWithAdapter[collection.slug]) {\n          return collection\n        }\n\n        return {\n          ...collection,\n          upload: {\n            ...(typeof collection.upload === 'object' ? collection.upload : {}),\n            disableLocalStorage: true,\n          },\n        }\n      }),\n    }\n\n    return cloudStoragePlugin({\n      collections: collectionsWithAdapter,\n    })(config)\n  }\n\nfunction s3StorageInternal(\n  getStorageClient: () => AWS.S3,\n  {\n    acl,\n    bucket,\n    clientUploads,\n    collections,\n    config = {},\n    signedDownloads: topLevelSignedDownloads,\n  }: S3StorageOptions,\n): Adapter {\n  return ({ collection, prefix }): GeneratedAdapter => {\n    const collectionStorageConfig = collections[collection.slug]\n\n    let signedDownloads: null | SignedDownloadsConfig =\n      typeof collectionStorageConfig === 'object'\n        ? (collectionStorageConfig.signedDownloads ?? false)\n        : null\n\n    if (signedDownloads === null) {\n      signedDownloads = topLevelSignedDownloads ?? null\n    }\n\n    return {\n      name: 's3',\n      clientUploads,\n      generateURL: getGenerateURL({ bucket, config }),\n      handleDelete: getHandleDelete({ bucket, getStorageClient }),\n      handleUpload: getHandleUpload({\n        acl,\n        bucket,\n        collection,\n        getStorageClient,\n        prefix,\n      }),\n      staticHandler: getHandler({\n        bucket,\n        collection,\n        getStorageClient,\n        signedDownloads: signedDownloads ?? false,\n      }),\n    }\n  }\n}\n"],"names":["AWS","cloudStoragePlugin","initClientUploads","getGenerateSignedURLHandler","getGenerateURL","getHandleDelete","getHandleUpload","getHandler","storageClient","defaultRequestHandlerOpts","httpAgent","keepAlive","maxSockets","httpsAgent","s3Storage","s3StorageOptions","incomingConfig","getStorageClient","S3","requestHandler","config","isPluginDisabled","enabled","clientHandler","collections","Boolean","clientUploads","serverHandler","access","undefined","acl","bucket","serverHandlerPath","adapter","s3StorageInternal","collectionsWithAdapter","Object","entries","reduce","acc","slug","collOptions","map","collection","upload","disableLocalStorage","signedDownloads","topLevelSignedDownloads","prefix","collectionStorageConfig","name","generateURL","handleDelete","handleUpload","staticHandler"],"mappings":"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"}