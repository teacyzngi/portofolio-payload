{"version":3,"sources":["../src/generateSignedURL.ts"],"sourcesContent":["import type { ClientUploadsAccess } from '@payloadcms/plugin-cloud-storage/types'\nimport type { PayloadHandler } from 'payload'\n\nimport * as AWS from '@aws-sdk/client-s3'\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner'\nimport path from 'path'\nimport { APIError, Forbidden } from 'payload'\n\nimport type { S3StorageOptions } from './index.js'\n\ninterface Args {\n  access?: ClientUploadsAccess\n  acl?: 'private' | 'public-read'\n  bucket: string\n  collections: S3StorageOptions['collections']\n  getStorageClient: () => AWS.S3\n}\n\nconst defaultAccess: Args['access'] = ({ req }) => !!req.user\n\nexport const getGenerateSignedURLHandler = ({\n  access = defaultAccess,\n  acl,\n  bucket,\n  collections,\n  getStorageClient,\n}: Args): PayloadHandler => {\n  return async (req) => {\n    if (!req.json) {\n      throw new APIError('Content-Type expected to be application/json', 400)\n    }\n\n    const { collectionSlug, filename, mimeType } = (await req.json()) as {\n      collectionSlug: string\n      filename: string\n      mimeType: string\n    }\n\n    const collectionS3Config = collections[collectionSlug]\n    if (!collectionS3Config) {\n      throw new APIError(`Collection ${collectionSlug} was not found in S3 options`)\n    }\n\n    const prefix = (typeof collectionS3Config === 'object' && collectionS3Config.prefix) || ''\n\n    if (!(await access({ collectionSlug, req }))) {\n      throw new Forbidden()\n    }\n\n    const fileKey = path.posix.join(prefix, filename)\n\n    const url = await getSignedUrl(\n      // @ts-expect-error mismatch versions or something\n      getStorageClient(),\n      new AWS.PutObjectCommand({ ACL: acl, Bucket: bucket, ContentType: mimeType, Key: fileKey }),\n      {\n        expiresIn: 600,\n      },\n    )\n\n    return Response.json({ url })\n  }\n}\n"],"names":["AWS","getSignedUrl","path","APIError","Forbidden","defaultAccess","req","user","getGenerateSignedURLHandler","access","acl","bucket","collections","getStorageClient","json","collectionSlug","filename","mimeType","collectionS3Config","prefix","fileKey","posix","join","url","PutObjectCommand","ACL","Bucket","ContentType","Key","expiresIn","Response"],"mappings":"AAGA,YAAYA,SAAS,qBAAoB;AACzC,SAASC,YAAY,QAAQ,gCAA+B;AAC5D,OAAOC,UAAU,OAAM;AACvB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,UAAS;AAY7C,MAAMC,gBAAgC,CAAC,EAAEC,GAAG,EAAE,GAAK,CAAC,CAACA,IAAIC,IAAI;AAE7D,OAAO,MAAMC,8BAA8B,CAAC,EAC1CC,SAASJ,aAAa,EACtBK,GAAG,EACHC,MAAM,EACNC,WAAW,EACXC,gBAAgB,EACX;IACL,OAAO,OAAOP;QACZ,IAAI,CAACA,IAAIQ,IAAI,EAAE;YACb,MAAM,IAAIX,SAAS,gDAAgD;QACrE;QAEA,MAAM,EAAEY,cAAc,EAAEC,QAAQ,EAAEC,QAAQ,EAAE,GAAI,MAAMX,IAAIQ,IAAI;QAM9D,MAAMI,qBAAqBN,WAAW,CAACG,eAAe;QACtD,IAAI,CAACG,oBAAoB;YACvB,MAAM,IAAIf,SAAS,CAAC,WAAW,EAAEY,eAAe,4BAA4B,CAAC;QAC/E;QAEA,MAAMI,SAAS,AAAC,OAAOD,uBAAuB,YAAYA,mBAAmBC,MAAM,IAAK;QAExF,IAAI,CAAE,MAAMV,OAAO;YAAEM;YAAgBT;QAAI,IAAK;YAC5C,MAAM,IAAIF;QACZ;QAEA,MAAMgB,UAAUlB,KAAKmB,KAAK,CAACC,IAAI,CAACH,QAAQH;QAExC,MAAMO,MAAM,MAAMtB,aAChB,kDAAkD;QAClDY,oBACA,IAAIb,IAAIwB,gBAAgB,CAAC;YAAEC,KAAKf;YAAKgB,QAAQf;YAAQgB,aAAaV;YAAUW,KAAKR;QAAQ,IACzF;YACES,WAAW;QACb;QAGF,OAAOC,SAAShB,IAAI,CAAC;YAAES;QAAI;IAC7B;AACF,EAAC"}