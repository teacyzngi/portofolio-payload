{"version":3,"file":"index.js","names":["c","_c","copyToClipboard","useLexicalComposerContext","objectKlassEquals","ObjectID","COMMAND_PRIORITY_LOW","COPY_COMMAND","useEffect","ClipboardPlugin","$","editor","t0","t1","registerCommand","event","ClipboardEvent","then","clipboardData","Error","lexicalStringified","getData","lexical","JSON","parse","changeIds","node","fields","id","default","toHexString","children","child","node_0","nodes","stringified","stringify","setData","catch","error"],"sources":["../../../../src/lexical/plugins/ClipboardPlugin/index.tsx"],"sourcesContent":["'use client'\n\nimport { copyToClipboard } from '@lexical/clipboard'\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext.js'\nimport { objectKlassEquals } from '@lexical/utils'\nimport ObjectID from 'bson-objectid'\nimport { COMMAND_PRIORITY_LOW, COPY_COMMAND } from 'lexical'\nimport { useEffect } from 'react'\n\ntype SerializedUnknownLexicalNode = {\n  children?: SerializedUnknownLexicalNode[]\n  type: string\n}\n\nexport function ClipboardPlugin() {\n  const [editor] = useLexicalComposerContext()\n\n  useEffect(() => {\n    // Remove duplicated ids from clipboard. We do it here because:\n    // 1. Browsers do not allow setting the clipboardData in paste event for security reasons.\n    // 2. If you cut instead of paste, the id will be kept, which is a good thing.\n    return editor.registerCommand(\n      COPY_COMMAND,\n      (event) => {\n        copyToClipboard(editor, objectKlassEquals(event, ClipboardEvent) ? event : null)\n          .then(() => {\n            if (!(event instanceof ClipboardEvent) || !event.clipboardData) {\n              throw new Error('No clipboard event')\n            }\n            const lexicalStringified = event.clipboardData.getData('application/x-lexical-editor')\n            if (!lexicalStringified) {\n              return true\n            }\n\n            const lexical = JSON.parse(lexicalStringified) as {\n              nodes: SerializedUnknownLexicalNode[]\n            }\n            const changeIds = (node: SerializedUnknownLexicalNode) => {\n              if (\n                'fields' in node &&\n                typeof node.fields === 'object' &&\n                node.fields !== null &&\n                'id' in node.fields\n              ) {\n                node.fields.id = new ObjectID.default().toHexString()\n              } else if ('id' in node) {\n                node.id = new ObjectID.default().toHexString()\n              }\n\n              if (node.children) {\n                for (const child of node.children) {\n                  changeIds(child)\n                }\n              }\n            }\n            for (const node of lexical.nodes) {\n              changeIds(node)\n            }\n            const stringified = JSON.stringify(lexical)\n            event.clipboardData.setData('application/x-lexical-editor', stringified)\n          })\n          .catch((error) => {\n            if (event instanceof ClipboardEvent) {\n              event.clipboardData?.setData('application/x-lexical-editor', '')\n            }\n            throw error\n          })\n        return true\n      },\n      COMMAND_PRIORITY_LOW,\n    )\n  }, [editor])\n\n  return null\n}\n"],"mappings":"AAAA;;AAAA,SAAAA,CAAA,IAAAC,EAAA;AAEA,SAASC,eAAe,QAAQ;AAChC,SAASC,yBAAyB,QAAQ;AAC1C,SAASC,iBAAiB,QAAQ;AAClC,OAAOC,QAAA,MAAc;AACrB,SAASC,oBAAoB,EAAEC,YAAY,QAAQ;AACnD,SAASC,SAAS,QAAQ;AAO1B,OAAO,SAAAC,gBAAA;EAAA,MAAAC,CAAA,GAAAT,EAAA;EACL,OAAAU,MAAA,IAAiBR,yBAAA;EAAA,IAAAS,EAAA;EAAA,IAAAC,EAAA;EAAA,IAAAH,CAAA,QAAAC,MAAA;IAEPC,EAAA,GAAAA,CAAA,KAIDD,MAAA,CAAAG,eAAA,CAAAP,YAAA,EAAAQ,KAAA;MAGHb,eAAA,CAAgBS,MAAA,EAAQP,iBAAA,CAAkBW,KAAA,EAAAC,cAAO,IAAkBD,KAAA,OAAQ,EAAAE,IAAA;QAAA,IAEnE,EAAEF,KAAA,YAAAC,cAA8B,MAAOD,KAAA,CAAAG,aAAmB;UAAA,UAAAC,KAAA,CAC5C;QAAA;QAElB,MAAAC,kBAAA,GAA2BL,KAAA,CAAAG,aAAA,CAAAG,OAAA,CAA4B;QAAA,KAClDD,kBAAA;UAAA;QAAA;QAIL,MAAAE,OAAA,GAAgBC,IAAA,CAAAC,KAAA,CAAWJ,kBAAA;QAG3B,MAAAK,SAAA,GAAAC,IAAA;UAAA,IAEI,YAAYA,IAAA,IACZ,OAAOA,IAAA,CAAAC,MAAA,KAAgB,YACvBD,IAAA,CAAAC,MAAA,SAAgB,IAChB,QAAQD,IAAA,CAAAC,MAAW;YAEnBD,IAAA,CAAAC,MAAA,CAAAC,EAAA,GAAiB,IAAAvB,QAAA,CAAAwB,OAAA,GAAAC,WAAA,CAAkC;UAAA;YAAA,IAC1C,QAAQJ,IAAA;cACjBA,IAAA,CAAAE,EAAA,GAAU,IAAAvB,QAAA,CAAAwB,OAAA,GAAAC,WAAA,CAAkC;YAAA;UAAA;UAAA,IAG1CJ,IAAA,CAAAK,QAAA;YAAA,KACG,MAAAC,KAAM,IAASN,IAAA,CAAAK,QAAA;cAClBN,SAAA,CAAUO,KAAA;YAAA;UAAA;QAAA;QAGhB,KACK,MAAAC,MAAM,IAAQX,OAAA,CAAAY,KAAA;UACjBT,SAAA,CAAUC,MAAA;QAAA;QAEZ,MAAAS,WAAA,GAAoBZ,IAAA,CAAAa,SAAA,CAAed,OAAA;QACnCP,KAAA,CAAAG,aAAA,CAAAmB,OAAA,CAA4B,gCAAgCF,WAAA;MAAA,CAC9D,EAAAG,KAAA,CAAAC,KAAA;QAAA,IAEMxB,KAAA,YAAAC,cAAiB;UACnBD,KAAA,CAAAG,aAAA,EAAAmB,OAAA,CAA6B,gCAAgC;QAAA;QAAA,MAEzDE,KAAA;MAAA,CACR;MAAA;IAAA,GAAAjC,oBAGJ;IAEDO,EAAA,IAACF,MAAA;IAAOD,CAAA,MAAAC,MAAA;IAAAD,CAAA,MAAAE,EAAA;IAAAF,CAAA,MAAAG,EAAA;EAAA;IAAAD,EAAA,GAAAF,CAAA;IAAAG,EAAA,GAAAH,CAAA;EAAA;EAtDXF,SAAA,CAAUI,EAsDV,EAAGC,EAAQ;EAAA;AAAA","ignoreList":[]}