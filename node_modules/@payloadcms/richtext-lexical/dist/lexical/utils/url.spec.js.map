{"version":3,"file":"url.spec.js","names":["absoluteRegExp","relativeOrAnchorRegExp","describe","it","shouldMatch","forEach","testCase","expect","test","toBe","shouldNotMatch","not"],"sources":["../../../src/lexical/utils/url.spec.ts"],"sourcesContent":["import { jest } from '@jest/globals'\nimport { absoluteRegExp, relativeOrAnchorRegExp } from './url.js'\n\ndescribe('Lexical URL Regex Matchers', () => {\n  describe('relative URLs', () => {\n    it('validation for links it should match', async () => {\n      const shouldMatch = [\n        '/path/to/resource',\n        '/file-name.html',\n        '/',\n        '/dir/',\n        '/path.with.dots/',\n        '#anchor',\n        '#section-title',\n        '/path#fragment',\n      ]\n\n      shouldMatch.forEach((testCase) => {\n        expect(relativeOrAnchorRegExp.test(testCase)).toBe(true)\n      })\n    })\n\n    it('validation for links it should not match', async () => {\n      const shouldNotMatch = [\n        'match',\n        'http://example.com',\n        'relative/path',\n        'file.html',\n        'some#fragment',\n        '#',\n        '/#',\n        '/path/with spaces',\n        '',\n        'ftp://example.com',\n      ]\n\n      shouldNotMatch.forEach((testCase) => {\n        expect(relativeOrAnchorRegExp.test(testCase)).not.toBe(true)\n      })\n    })\n  })\n\n  describe('absolute URLs', () => {\n    it('validation for links it should match', async () => {\n      const shouldMatch = [\n        'http://example.com',\n        'https://example.com',\n        'ftp://files.example.com',\n        'http://example.com/resource',\n        'https://example.com/resource?key=value',\n        'http://example.com/resource#anchor',\n        'http://www.example.com',\n        'https://sub.example.com/path/file',\n        'mailto:email@example.com',\n        'tel:+1234567890',\n        'http://user:pass@example.com',\n        'www.example.com',\n        'www.example.com/resource',\n        'www.example.com/resource?query=1',\n        'www.example.com#fragment',\n      ]\n\n      shouldMatch.forEach((testCase) => {\n        expect(absoluteRegExp.test(testCase)).toBe(true)\n      })\n    })\n\n    it('validation for links it should not match', async () => {\n      const shouldNotMatch = [\n        '/relative/path',\n        '#anchor',\n        'example.com',\n        '://missing.scheme',\n        'http://',\n        'http:/example.com',\n        'ftp://example .com',\n        'http://example',\n        'not-a-url',\n        'http//example.com',\n        'https://example.com/ spaces',\n      ]\n\n      shouldNotMatch.forEach((testCase) => {\n        expect(absoluteRegExp.test(testCase)).not.toBe(true)\n      })\n    })\n  })\n})\n"],"mappings":"AACA,SAASA,cAAc,EAAEC,sBAAsB,QAAQ;AAEvDC,QAAA,CAAS,8BAA8B;EACrCA,QAAA,CAAS,iBAAiB;IACxBC,EAAA,CAAG,wCAAwC;MACzC,MAAMC,WAAA,GAAc,CAClB,qBACA,mBACA,KACA,SACA,oBACA,WACA,kBACA,iBACD;MAEDA,WAAA,CAAYC,OAAO,CAAEC,QAAA;QACnBC,MAAA,CAAON,sBAAA,CAAuBO,IAAI,CAACF,QAAA,GAAWG,IAAI,CAAC;MACrD;IACF;IAEAN,EAAA,CAAG,4CAA4C;MAC7C,MAAMO,cAAA,GAAiB,CACrB,SACA,sBACA,iBACA,aACA,iBACA,KACA,MACA,qBACA,IACA,oBACD;MAEDA,cAAA,CAAeL,OAAO,CAAEC,QAAA;QACtBC,MAAA,CAAON,sBAAA,CAAuBO,IAAI,CAACF,QAAA,GAAWK,GAAG,CAACF,IAAI,CAAC;MACzD;IACF;EACF;EAEAP,QAAA,CAAS,iBAAiB;IACxBC,EAAA,CAAG,wCAAwC;MACzC,MAAMC,WAAA,GAAc,CAClB,sBACA,uBACA,2BACA,+BACA,0CACA,sCACA,0BACA,qCACA,4BACA,mBACA,gCACA,mBACA,4BACA,oCACA,2BACD;MAEDA,WAAA,CAAYC,OAAO,CAAEC,QAAA;QACnBC,MAAA,CAAOP,cAAA,CAAeQ,IAAI,CAACF,QAAA,GAAWG,IAAI,CAAC;MAC7C;IACF;IAEAN,EAAA,CAAG,4CAA4C;MAC7C,MAAMO,cAAA,GAAiB,CACrB,kBACA,WACA,eACA,qBACA,WACA,qBACA,sBACA,kBACA,aACA,qBACA,8BACD;MAEDA,cAAA,CAAeL,OAAO,CAAEC,QAAA;QACtBC,MAAA,CAAOP,cAAA,CAAeQ,IAAI,CAACF,QAAA,GAAWK,GAAG,CAACF,IAAI,CAAC;MACjD;IACF;EACF;AACF","ignoreList":[]}