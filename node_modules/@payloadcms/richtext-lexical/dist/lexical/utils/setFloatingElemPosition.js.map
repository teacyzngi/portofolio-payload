{"version":3,"file":"setFloatingElemPosition.js","names":["VERTICAL_GAP","HORIZONTAL_OFFSET","setFloatingElemPosition","args","alwaysDisplayOnTop","anchorElem","anchorFlippedOffset","floatingElem","horizontalOffset","horizontalPosition","specialHandlingForCaret","targetRect","verticalGap","scrollerElem","parentElement","style","opacity","transform","floatingElemRect","getBoundingClientRect","anchorElementRect","editorScrollerRect","top","height","left","width","addedToTop","right","bottom"],"sources":["../../../src/lexical/utils/setFloatingElemPosition.ts"],"sourcesContent":["'use client'\nconst VERTICAL_GAP = 10\nconst HORIZONTAL_OFFSET = 32\n\n// TODO: needs refactoring\n// This is supposed to position the floatingElem based on the parent (anchorElem) and the target (targetRect) which is usually the selected text.\n// So basically, it positions the floatingElem either below or above the target (targetRect) and aligns it to the left or center of the target (targetRect).\n// This is used for positioning the floating toolbar (anchor: richtext editor) and its caret (anchor: floating toolbar)\nexport function setFloatingElemPosition(args: {\n  alwaysDisplayOnTop?: boolean\n  anchorElem: HTMLElement\n  anchorFlippedOffset?: number // Offset which was added to the anchor (for caret, floating toolbar) if it was flipped\n  floatingElem: HTMLElement\n  horizontalOffset?: number\n  horizontalPosition?: 'center' | 'left'\n  specialHandlingForCaret?: boolean\n  targetRect: ClientRect | null\n  verticalGap?: number\n}): number | undefined {\n  const {\n    alwaysDisplayOnTop = false,\n    anchorElem,\n    anchorFlippedOffset = 0, // Offset which was added to the anchor (for caret, floating toolbar) if it was flipped\n    floatingElem,\n    horizontalOffset = HORIZONTAL_OFFSET,\n    horizontalPosition = 'left',\n    specialHandlingForCaret = false,\n    targetRect,\n    verticalGap = VERTICAL_GAP,\n  } = args\n  // Returns the top offset if the target was flipped\n  const scrollerElem = anchorElem.parentElement\n\n  if (targetRect === null || scrollerElem == null) {\n    floatingElem.style.opacity = '0'\n    floatingElem.style.transform = 'translate(-10000px, -10000px)'\n    return\n  }\n\n  const floatingElemRect = floatingElem.getBoundingClientRect()\n  const anchorElementRect = anchorElem.getBoundingClientRect()\n  const editorScrollerRect = scrollerElem.getBoundingClientRect()\n\n  let top = targetRect.top - floatingElemRect.height - verticalGap\n  let left = targetRect.left - horizontalOffset\n\n  if (horizontalPosition === 'center') {\n    // Calculate left to position floatingElem to the horizontal middle of targetRect\n    left = targetRect.left + targetRect.width / 2 - floatingElemRect.width / 2\n  }\n\n  let addedToTop = 0\n  if (!alwaysDisplayOnTop && top < editorScrollerRect.top && !specialHandlingForCaret) {\n    addedToTop = floatingElemRect.height + targetRect.height + verticalGap * 2\n\n    top += addedToTop\n  }\n\n  if (horizontalPosition === 'center') {\n    if (left + floatingElemRect.width > editorScrollerRect.right) {\n      left = editorScrollerRect.right - floatingElemRect.width - horizontalOffset\n    } else if (left < editorScrollerRect.left) {\n      left = editorScrollerRect.left + horizontalOffset\n    }\n  } else {\n    if (left + floatingElemRect.width > editorScrollerRect.right) {\n      left = editorScrollerRect.right - floatingElemRect.width - horizontalOffset\n    }\n  }\n\n  left -= anchorElementRect.left\n\n  floatingElem.style.opacity = '1'\n\n  if (specialHandlingForCaret && anchorFlippedOffset !== 0) {\n    // Floating select toolbar was flipped (positioned below text rather than above). Thus, the caret now needs to be positioned\n    // on the other side and rotated.\n    top -= anchorElementRect.bottom - anchorFlippedOffset + floatingElemRect.height - 3\n    // top += anchorFlippedOffset - anchorElementRect.height - floatingElemRect.height + 2\n    floatingElem.style.transform = `translate(${left}px, ${top}px) rotate(180deg)`\n  } else {\n    top -= anchorElementRect.top\n\n    floatingElem.style.transform = `translate(${left}px, ${top}px)`\n  }\n\n  return addedToTop\n}\n"],"mappings":"AAAA;;AACA,MAAMA,YAAA,GAAe;AACrB,MAAMC,iBAAA,GAAoB;AAE1B;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwBC,IAUvC;EACC,MAAM;IACJC,kBAAA,GAAqB,KAAK;IAC1BC,UAAU;IACVC,mBAAA,GAAsB,CAAC;IACvBC,YAAY;IACZC,gBAAA,GAAmBP,iBAAiB;IACpCQ,kBAAA,GAAqB,MAAM;IAC3BC,uBAAA,GAA0B,KAAK;IAC/BC,UAAU;IACVC,WAAA,GAAcZ;EAAY,CAC3B,GAAGG,IAAA;EACJ;EACA,MAAMU,YAAA,GAAeR,UAAA,CAAWS,aAAa;EAE7C,IAAIH,UAAA,KAAe,QAAQE,YAAA,IAAgB,MAAM;IAC/CN,YAAA,CAAaQ,KAAK,CAACC,OAAO,GAAG;IAC7BT,YAAA,CAAaQ,KAAK,CAACE,SAAS,GAAG;IAC/B;EACF;EAEA,MAAMC,gBAAA,GAAmBX,YAAA,CAAaY,qBAAqB;EAC3D,MAAMC,iBAAA,GAAoBf,UAAA,CAAWc,qBAAqB;EAC1D,MAAME,kBAAA,GAAqBR,YAAA,CAAaM,qBAAqB;EAE7D,IAAIG,GAAA,GAAMX,UAAA,CAAWW,GAAG,GAAGJ,gBAAA,CAAiBK,MAAM,GAAGX,WAAA;EACrD,IAAIY,IAAA,GAAOb,UAAA,CAAWa,IAAI,GAAGhB,gBAAA;EAE7B,IAAIC,kBAAA,KAAuB,UAAU;IACnC;IACAe,IAAA,GAAOb,UAAA,CAAWa,IAAI,GAAGb,UAAA,CAAWc,KAAK,GAAG,IAAIP,gBAAA,CAAiBO,KAAK,GAAG;EAC3E;EAEA,IAAIC,UAAA,GAAa;EACjB,IAAI,CAACtB,kBAAA,IAAsBkB,GAAA,GAAMD,kBAAA,CAAmBC,GAAG,IAAI,CAACZ,uBAAA,EAAyB;IACnFgB,UAAA,GAAaR,gBAAA,CAAiBK,MAAM,GAAGZ,UAAA,CAAWY,MAAM,GAAGX,WAAA,GAAc;IAEzEU,GAAA,IAAOI,UAAA;EACT;EAEA,IAAIjB,kBAAA,KAAuB,UAAU;IACnC,IAAIe,IAAA,GAAON,gBAAA,CAAiBO,KAAK,GAAGJ,kBAAA,CAAmBM,KAAK,EAAE;MAC5DH,IAAA,GAAOH,kBAAA,CAAmBM,KAAK,GAAGT,gBAAA,CAAiBO,KAAK,GAAGjB,gBAAA;IAC7D,OAAO,IAAIgB,IAAA,GAAOH,kBAAA,CAAmBG,IAAI,EAAE;MACzCA,IAAA,GAAOH,kBAAA,CAAmBG,IAAI,GAAGhB,gBAAA;IACnC;EACF,OAAO;IACL,IAAIgB,IAAA,GAAON,gBAAA,CAAiBO,KAAK,GAAGJ,kBAAA,CAAmBM,KAAK,EAAE;MAC5DH,IAAA,GAAOH,kBAAA,CAAmBM,KAAK,GAAGT,gBAAA,CAAiBO,KAAK,GAAGjB,gBAAA;IAC7D;EACF;EAEAgB,IAAA,IAAQJ,iBAAA,CAAkBI,IAAI;EAE9BjB,YAAA,CAAaQ,KAAK,CAACC,OAAO,GAAG;EAE7B,IAAIN,uBAAA,IAA2BJ,mBAAA,KAAwB,GAAG;IACxD;IACA;IACAgB,GAAA,IAAOF,iBAAA,CAAkBQ,MAAM,GAAGtB,mBAAA,GAAsBY,gBAAA,CAAiBK,MAAM,GAAG;IAClF;IACAhB,YAAA,CAAaQ,KAAK,CAACE,SAAS,GAAG,aAAaO,IAAA,OAAWF,GAAA,oBAAuB;EAChF,OAAO;IACLA,GAAA,IAAOF,iBAAA,CAAkBE,GAAG;IAE5Bf,YAAA,CAAaQ,KAAK,CAACE,SAAS,GAAG,aAAaO,IAAA,OAAWF,GAAA,KAAQ;EACjE;EAEA,OAAOI,UAAA;AACT","ignoreList":[]}