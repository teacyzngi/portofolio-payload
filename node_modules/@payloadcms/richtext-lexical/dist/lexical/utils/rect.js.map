{"version":3,"file":"rect.js","names":["isPoint","Rect","_bottom","_left","_right","_top","constructor","left","top","right","bottom","physicTop","physicBottom","physicLeft","physicRight","fromDOM","dom","height","width","getBoundingClientRect","fromLWTH","fromDOMRect","domRect","fromLTRB","fromPoints","startPoint","endPoint","x","y","contains","target","isOnTopSide","isOnBottomSide","isOnLeftSide","isOnRightSide","result","reason","distanceFromPoint","point","containsResult","distance","dx","dy","Math","sqrt","equals","generateNewRect","intersectsWith","rect","h1","x1","y1","w1","h2","x2","y2","w2","maxX","maxY","minX","minY","abs"],"sources":["../../../src/lexical/utils/rect.ts"],"sourcesContent":["'use client'\nimport { isPoint, type Point } from './point.js'\n\ninterface ContainsPointReturn {\n  reason: {\n    isOnBottomSide: boolean\n    isOnLeftSide: boolean\n    isOnRightSide: boolean\n    isOnTopSide: boolean\n  }\n  result: boolean\n}\n\nexport class Rect {\n  private readonly _bottom: number\n\n  private readonly _left: number\n\n  private readonly _right: number\n\n  private readonly _top: number\n\n  constructor(left: number, top: number, right: number, bottom: number) {\n    const [physicTop, physicBottom] = top <= bottom ? [top, bottom] : [bottom, top]\n\n    const [physicLeft, physicRight] = left <= right ? [left, right] : [right, left]\n\n    this._top = physicTop\n    this._right = physicRight\n    this._left = physicLeft\n    this._bottom = physicBottom\n  }\n\n  static fromDOM(dom: HTMLElement): Rect {\n    const { height, left, top, width } = dom.getBoundingClientRect()\n    return Rect.fromLWTH(left, width, top, height)\n  }\n\n  static fromDOMRect(domRect: DOMRect): Rect {\n    const { height, left, top, width } = domRect\n    return Rect.fromLWTH(left, width, top, height)\n  }\n\n  static fromLTRB(left: number, top: number, right: number, bottom: number): Rect {\n    return new Rect(left, top, right, bottom)\n  }\n\n  static fromLWTH(left: number, width: number, top: number, height: number): Rect {\n    return new Rect(left, top, left + width, top + height)\n  }\n\n  static fromPoints(startPoint: Point, endPoint: Point): Rect {\n    const { x: left, y: top } = startPoint\n    const { x: right, y: bottom } = endPoint\n    return Rect.fromLTRB(left, top, right, bottom)\n  }\n\n  public contains({ x, y }: Point): ContainsPointReturn\n\n  public contains({ bottom, left, right, top }: Rect): boolean\n\n  public contains(target: Point | Rect): boolean | ContainsPointReturn {\n    if (isPoint(target)) {\n      const { x, y } = target\n\n      const isOnTopSide = y < this._top\n      const isOnBottomSide = y > this._bottom\n      const isOnLeftSide = x < this._left\n      const isOnRightSide = x > this._right\n\n      const result = !isOnTopSide && !isOnBottomSide && !isOnLeftSide && !isOnRightSide\n\n      return {\n        reason: {\n          isOnBottomSide,\n          isOnLeftSide,\n          isOnRightSide,\n          isOnTopSide,\n        },\n        result,\n      }\n    }\n    const { bottom, left, right, top } = target\n\n    return (\n      top >= this._top &&\n      top <= this._bottom &&\n      bottom >= this._top &&\n      bottom <= this._bottom &&\n      left >= this._left &&\n      left <= this._right &&\n      right >= this._left &&\n      right <= this._right\n    )\n  }\n\n  public distanceFromPoint(point: Point): {\n    distance: number\n    isOnBottomSide: boolean\n    isOnLeftSide: boolean\n    isOnRightSide: boolean\n    isOnTopSide: boolean\n  } {\n    const containsResult = this.contains(point)\n    if (containsResult.result) {\n      return {\n        distance: 0,\n        isOnBottomSide: containsResult.reason.isOnBottomSide,\n        isOnLeftSide: containsResult.reason.isOnLeftSide,\n        isOnRightSide: containsResult.reason.isOnRightSide,\n        isOnTopSide: containsResult.reason.isOnTopSide,\n      }\n    }\n\n    let dx = 0 // Horizontal distance to the closest edge\n    let dy = 0 // Vertical distance to the closest edge\n\n    // If the point is to the left of the rectangle\n    if (point.x < this._left) {\n      dx = this._left - point.x\n    }\n    // If the point is to the right of the rectangle\n    else if (point.x > this._right) {\n      dx = point.x - this._right\n    }\n\n    // If the point is above the rectangle\n    if (point.y < this._top) {\n      dy = this._top - point.y\n    }\n    // If the point is below the rectangle\n    else if (point.y > this._bottom) {\n      dy = point.y - this._bottom\n    }\n\n    // Use the Pythagorean theorem to calculate the distance\n    return {\n      distance: Math.sqrt(dx * dx + dy * dy),\n      isOnBottomSide: point.y > this._bottom,\n      isOnLeftSide: point.x < this._left,\n      isOnRightSide: point.x > this._right,\n      isOnTopSide: point.y < this._top,\n    }\n  }\n\n  public equals({ bottom, left, right, top }: Rect): boolean {\n    return (\n      top === this._top && bottom === this._bottom && left === this._left && right === this._right\n    )\n  }\n\n  public generateNewRect({\n    bottom = this.bottom,\n    left = this.left,\n    right = this.right,\n    top = this.top,\n  }): Rect {\n    return new Rect(left, top, right, bottom)\n  }\n\n  public intersectsWith(rect: Rect): boolean {\n    const { height: h1, left: x1, top: y1, width: w1 } = rect\n    const { height: h2, left: x2, top: y2, width: w2 } = this\n    const maxX = x1 + w1 >= x2 + w2 ? x1 + w1 : x2 + w2\n    const maxY = y1 + h1 >= y2 + h2 ? y1 + h1 : y2 + h2\n    const minX = x1 <= x2 ? x1 : x2\n    const minY = y1 <= y2 ? y1 : y2\n    return maxX - minX <= w1 + w2 && maxY - minY <= h1 + h2\n  }\n\n  get bottom(): number {\n    return this._bottom\n  }\n\n  get height(): number {\n    return Math.abs(this._bottom - this._top)\n  }\n\n  get left(): number {\n    return this._left\n  }\n\n  get right(): number {\n    return this._right\n  }\n\n  get top(): number {\n    return this._top\n  }\n\n  get width(): number {\n    return Math.abs(this._left - this._right)\n  }\n}\n"],"mappings":"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","ignoreList":[]}