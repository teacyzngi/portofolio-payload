{"version":3,"file":"getSelectedNode.js","names":["$isAtNodeEnd","getSelectedNode","selection","anchor","focus","anchorNode","getNode","focusNode","isBackward"],"sources":["../../../src/lexical/utils/getSelectedNode.ts"],"sourcesContent":["'use client'\nimport type { ElementNode, RangeSelection, TextNode } from 'lexical'\n\nimport { $isAtNodeEnd } from '@lexical/selection'\n\nexport function getSelectedNode(selection: RangeSelection): ElementNode | TextNode {\n  const { anchor } = selection\n  const { focus } = selection\n  const anchorNode = selection.anchor.getNode()\n  const focusNode = selection.focus.getNode()\n  if (anchorNode === focusNode) {\n    return anchorNode\n  }\n  const isBackward = selection.isBackward()\n  if (isBackward) {\n    return $isAtNodeEnd(focus) ? anchorNode : focusNode\n  }\n  return $isAtNodeEnd(anchor) ? anchorNode : focusNode\n}\n"],"mappings":"AAAA;;AAGA,SAASA,YAAY,QAAQ;AAE7B,OAAO,SAASC,gBAAgBC,SAAyB;EACvD,MAAM;IAAEC;EAAM,CAAE,GAAGD,SAAA;EACnB,MAAM;IAAEE;EAAK,CAAE,GAAGF,SAAA;EAClB,MAAMG,UAAA,GAAaH,SAAA,CAAUC,MAAM,CAACG,OAAO;EAC3C,MAAMC,SAAA,GAAYL,SAAA,CAAUE,KAAK,CAACE,OAAO;EACzC,IAAID,UAAA,KAAeE,SAAA,EAAW;IAC5B,OAAOF,UAAA;EACT;EACA,MAAMG,UAAA,GAAaN,SAAA,CAAUM,UAAU;EACvC,IAAIA,UAAA,EAAY;IACd,OAAOR,YAAA,CAAaI,KAAA,IAASC,UAAA,GAAaE,SAAA;EAC5C;EACA,OAAOP,YAAA,CAAaG,MAAA,IAAUE,UAAA,GAAaE,SAAA;AAC7C","ignoreList":[]}