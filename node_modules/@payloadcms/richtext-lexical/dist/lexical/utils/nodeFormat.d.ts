import type { ElementFormatType, TextFormatType, TextModeType } from 'lexical';
export type TextDetailType = 'directionless' | 'unmergable';
export declare const NodeFormat: {
    readonly DOM_ELEMENT_TYPE: 1;
    readonly DOM_TEXT_TYPE: 3;
    readonly NO_DIRTY_NODES: 0;
    readonly HAS_DIRTY_NODES: 1;
    readonly FULL_RECONCILE: 2;
    readonly IS_NORMAL: 0;
    readonly IS_TOKEN: 1;
    readonly IS_SEGMENTED: 2;
    readonly IS_INERT: 3;
    readonly IS_BOLD: 1;
    readonly IS_ITALIC: number;
    readonly IS_STRIKETHROUGH: number;
    readonly IS_UNDERLINE: number;
    readonly IS_CODE: number;
    readonly IS_SUBSCRIPT: number;
    readonly IS_SUPERSCRIPT: number;
    readonly IS_HIGHLIGHT: number;
    readonly IS_DIRECTIONLESS: 1;
    readonly IS_UNMERGEABLE: number;
    readonly IS_ALIGN_LEFT: 1;
    readonly IS_ALIGN_CENTER: 2;
    readonly IS_ALIGN_RIGHT: 3;
    readonly IS_ALIGN_JUSTIFY: 4;
    readonly IS_ALIGN_START: 5;
    readonly IS_ALIGN_END: 6;
};
export declare const IS_ALL_FORMATTING: number;
export declare const NON_BREAKING_SPACE = "\u00A0";
export declare const DOUBLE_LINE_BREAK = "\n\n";
export declare const RTL_REGEX: RegExp;
export declare const LTR_REGEX: RegExp;
export declare const TEXT_TYPE_TO_FORMAT: Record<string | TextFormatType, number>;
export declare const DETAIL_TYPE_TO_DETAIL: Record<string | TextDetailType, number>;
export declare const ELEMENT_TYPE_TO_FORMAT: Record<Exclude<ElementFormatType, ''>, number>;
export declare const ELEMENT_FORMAT_TO_TYPE: Record<number, ElementFormatType>;
export declare const TEXT_MODE_TO_TYPE: Record<TextModeType, 0 | 1 | 2>;
export declare const TEXT_TYPE_TO_MODE: Record<number, TextModeType>;
//# sourceMappingURL=nodeFormat.d.ts.map