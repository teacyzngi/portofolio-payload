{"version":3,"file":"useLexicalListDrawer.js","names":["c","_c","useLexicalComposerContext","useListDrawer","useModal","$getNodeByKey","$getPreviousSelection","$getRoot","$getSelection","$isRangeSelection","$setSelection","useCallback","useEffect","useState","useLexicalListDrawer","args","$","editor","selectionState","setSelectionState","wasOpen","setWasOpen","BaseListDrawer","BaseListDrawerToggler","t0","closeDrawer","baseCloseDrawer","drawerSlug","listDrawerSlug","isDrawerOpen","openDrawer","baseOpenDrawer","modalState","t1","Symbol","for","selection","$storeSelection","t2","update","anchor","focus","key","clone","selectEnd","discrete","skipTransforms","restoreSelection","t3","closeListDrawer","t4","t5","thisModalState","isOpen","setTimeout","t6","props","_jsx","onClick","t7","t8","isListDrawerOpen","ListDrawer","ListDrawerToggler"],"sources":["../../../src/utilities/fieldsDrawer/useLexicalListDrawer.tsx"],"sourcesContent":["'use client'\nimport type { UseListDrawer } from '@payloadcms/ui'\nimport type { BaseSelection } from 'lexical'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { useListDrawer, useModal } from '@payloadcms/ui'\nimport {\n  $getNodeByKey,\n  $getPreviousSelection,\n  $getRoot,\n  $getSelection,\n  $isRangeSelection,\n  $setSelection,\n} from 'lexical'\nimport { useCallback, useEffect, useState } from 'react'\n\n/**\n *\n * Wrapper around useListDrawer that restores and saves selection state (cursor position) when opening and closing the drawer.\n * By default, the lexical cursor position may be lost when opening a drawer and clicking somewhere on that drawer.\n */\nexport const useLexicalListDrawer = (\n  args: Parameters<UseListDrawer>[0],\n): {\n  closeListDrawer: () => void\n  isListDrawerOpen: boolean\n  ListDrawer: ReturnType<UseListDrawer>[0]\n  listDrawerSlug: string\n  ListDrawerToggler: ReturnType<UseListDrawer>[1]\n  openListDrawer: (selection?: BaseSelection) => void\n} => {\n  const [editor] = useLexicalComposerContext()\n  const [selectionState, setSelectionState] = useState<BaseSelection | null>(null)\n  const [wasOpen, setWasOpen] = useState<boolean>(false)\n\n  const [\n    BaseListDrawer,\n    BaseListDrawerToggler,\n    {\n      closeDrawer: baseCloseDrawer,\n      drawerSlug: listDrawerSlug,\n      isDrawerOpen,\n      openDrawer: baseOpenDrawer,\n    },\n  ] = useListDrawer(args)\n  const { modalState } = useModal()\n\n  const $storeSelection = useCallback(() => {\n    // editor.read() causes an error here when creating a new upload node from the slash menu. It seems like we can omit it here though, as all\n    // invocations of that functions are wrapped in editor.read() or editor.update() somewhere in the call stack.\n    const selection = $getSelection() ?? $getPreviousSelection()\n    setSelectionState(selection)\n  }, [])\n\n  const restoreSelection = useCallback(() => {\n    if (selectionState) {\n      editor.update(\n        () => {\n          if ($isRangeSelection(selectionState)) {\n            const { anchor, focus } = selectionState\n            if ($getNodeByKey(anchor.key) && $getNodeByKey(focus.key)) {\n              $setSelection(selectionState.clone())\n            }\n          } else {\n            // not ideal, but better than losing the selection. Try to set the selection\n            // in a valid place if you remove selected nodes!\n            $getRoot().selectEnd()\n          }\n        },\n        { discrete: true, skipTransforms: true },\n      )\n    }\n  }, [editor, selectionState])\n\n  const closeListDrawer = () => {\n    //restoreSelection() // Should already be stored by the useEffect below\n    baseCloseDrawer()\n  }\n\n  // We need to handle drawer closing via a useEffect, as toggleDrawer / closeDrawer will not be triggered if the drawer\n  // is closed by clicking outside of the drawer. This useEffect will handle everything.\n  useEffect(() => {\n    if (!wasOpen) {\n      return\n    }\n\n    const thisModalState = modalState[listDrawerSlug]\n    // Exists in modalState (thus has opened at least once before) and is closed\n    if (thisModalState && !thisModalState?.isOpen) {\n      setWasOpen(false)\n      setTimeout(() => {\n        restoreSelection()\n      }, 1)\n    }\n  }, [modalState, listDrawerSlug, restoreSelection, wasOpen])\n\n  return {\n    closeListDrawer,\n    isListDrawerOpen: isDrawerOpen,\n    ListDrawer: BaseListDrawer,\n    listDrawerSlug,\n    ListDrawerToggler: (props) => (\n      <BaseListDrawerToggler\n        {...props}\n        onClick={() => {\n          $storeSelection()\n        }}\n      />\n    ),\n    openListDrawer: () => {\n      $storeSelection()\n      baseOpenDrawer()\n      setWasOpen(true)\n    },\n  }\n}\n"],"mappings":"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","ignoreList":[]}