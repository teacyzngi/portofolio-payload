{"version":3,"file":"useLexicalDocumentDrawer.js","names":["c","_c","useLexicalComposerContext","useDocumentDrawer","useModal","$getPreviousSelection","$getSelection","$setSelection","useCallback","useEffect","useState","useLexicalDocumentDrawer","args","$","editor","selectionState","setSelectionState","wasOpen","setWasOpen","DocumentDrawer","DocumentDrawerToggler","t0","closeDrawer","drawerSlug","documentDrawerSlug","modalState","t1","read","selection","storeSelection","t2","update","clone","discrete","skipTransforms","restoreSelection","t3","closeDocumentDrawer","t4","t5","thisModalState","isOpen","setTimeout","t6","props","_jsx","onClick","t7"],"sources":["../../../src/utilities/fieldsDrawer/useLexicalDocumentDrawer.tsx"],"sourcesContent":["'use client'\nimport type { UseDocumentDrawer } from '@payloadcms/ui'\nimport type { BaseSelection } from 'lexical'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { useDocumentDrawer, useModal } from '@payloadcms/ui'\nimport { $getPreviousSelection, $getSelection, $setSelection } from 'lexical'\nimport { useCallback, useEffect, useState } from 'react'\n\n/**\n *\n * Wrapper around useDocumentDrawer that restores and saves selection state (cursor position) when opening and closing the drawer.\n * By default, the lexical cursor position may be lost when opening a drawer and clicking somewhere on that drawer.\n */\nexport const useLexicalDocumentDrawer = (\n  args: Parameters<UseDocumentDrawer>[0],\n): {\n  closeDocumentDrawer: () => void\n  DocumentDrawer: ReturnType<UseDocumentDrawer>[0]\n  documentDrawerSlug: string\n  DocumentDrawerToggler: ReturnType<UseDocumentDrawer>[1]\n} => {\n  const [editor] = useLexicalComposerContext()\n  const [selectionState, setSelectionState] = useState<BaseSelection | null>(null)\n  const [wasOpen, setWasOpen] = useState<boolean>(false)\n\n  const [\n    DocumentDrawer,\n    DocumentDrawerToggler,\n    { closeDrawer: closeDrawer, drawerSlug: documentDrawerSlug },\n  ] = useDocumentDrawer(args)\n  const { modalState } = useModal()\n\n  const storeSelection = useCallback(() => {\n    editor.read(() => {\n      const selection = $getSelection() ?? $getPreviousSelection()\n      setSelectionState(selection)\n    })\n    setWasOpen(true)\n  }, [editor])\n\n  const restoreSelection = useCallback(() => {\n    if (selectionState) {\n      editor.update(\n        () => {\n          $setSelection(selectionState.clone())\n        },\n        { discrete: true, skipTransforms: true },\n      )\n    }\n  }, [editor, selectionState])\n\n  const closeDocumentDrawer = () => {\n    //restoreSelection() // Should already be stored by the useEffect below\n    closeDrawer()\n  }\n\n  // We need to handle drawer closing via a useEffect, as toggleDrawer / closeDrawer will not be triggered if the drawer\n  // is closed by clicking outside of the drawer. This useEffect will handle everything.\n  useEffect(() => {\n    if (!wasOpen) {\n      return\n    }\n\n    const thisModalState = modalState[documentDrawerSlug]\n    // Exists in modalState (thus has opened at least once before) and is closed\n    if (thisModalState && !thisModalState?.isOpen) {\n      setWasOpen(false)\n      setTimeout(() => {\n        restoreSelection()\n      }, 1)\n    }\n  }, [modalState, documentDrawerSlug, restoreSelection, wasOpen])\n\n  return {\n    closeDocumentDrawer,\n    DocumentDrawer,\n    documentDrawerSlug,\n    DocumentDrawerToggler: (props) => <DocumentDrawerToggler {...props} onClick={storeSelection} />,\n  }\n}\n"],"mappings":"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","ignoreList":[]}