{"version":3,"file":"generateImportMap.js","names":["genImportMapIterateFields","getGenerateImportMap","args","addToImportMap","baseDir","config","importMap","imports","resolvedFeature","resolvedFeatureMap","values","componentImports","Array","isArray","length","forEach","component","Object","ClientComponent","ClientFeature","nodes","node","getSubFields","subFields","fields"],"sources":["../../src/utilities/generateImportMap.tsx"],"sourcesContent":["import type { PayloadComponent, RichTextAdapter } from 'payload'\n\nimport { genImportMapIterateFields } from 'payload'\n\nimport type { ResolvedServerFeatureMap } from '../features/typesServer.js'\n\nexport const getGenerateImportMap =\n  (args: { resolvedFeatureMap: ResolvedServerFeatureMap }): RichTextAdapter['generateImportMap'] =>\n  ({ addToImportMap, baseDir, config, importMap, imports }) => {\n    addToImportMap('@payloadcms/richtext-lexical/rsc#RscEntryLexicalCell')\n    addToImportMap('@payloadcms/richtext-lexical/rsc#RscEntryLexicalField')\n    addToImportMap('@payloadcms/richtext-lexical/rsc#LexicalDiffComponent')\n\n    // iterate just through args.resolvedFeatureMap.values()\n    for (const resolvedFeature of args.resolvedFeatureMap.values()) {\n      if ('componentImports' in resolvedFeature) {\n        if (typeof resolvedFeature.componentImports === 'function') {\n          resolvedFeature.componentImports({\n            addToImportMap,\n            baseDir,\n            config,\n            importMap,\n            imports,\n          })\n        } else if (\n          Array.isArray(resolvedFeature.componentImports) &&\n          resolvedFeature.componentImports?.length\n        ) {\n          resolvedFeature.componentImports.forEach((component) => {\n            addToImportMap(component)\n          })\n        } else if (typeof resolvedFeature.componentImports === 'object') {\n          for (const component of Object.values(resolvedFeature.componentImports)) {\n            addToImportMap(component as PayloadComponent)\n          }\n        }\n      }\n\n      const ClientComponent = resolvedFeature.ClientFeature\n      if (ClientComponent) {\n        addToImportMap(ClientComponent)\n      }\n\n      /*\n        Now run for all possible sub-fields\n       */\n      if (resolvedFeature.nodes?.length) {\n        for (const node of resolvedFeature.nodes) {\n          if (typeof node?.getSubFields !== 'function') {\n            continue\n          }\n          const subFields = node.getSubFields({})\n          if (subFields?.length) {\n            genImportMapIterateFields({\n              addToImportMap,\n              baseDir,\n              config,\n              fields: subFields,\n              importMap,\n              imports,\n            })\n          }\n        }\n      }\n    }\n  }\n"],"mappings":"AAEA,SAASA,yBAAyB,QAAQ;AAI1C,OAAO,MAAMC,oBAAA,GACVC,IAAA,IACD,CAAC;EAAEC,cAAc;EAAEC,OAAO;EAAEC,MAAM;EAAEC,SAAS;EAAEC;AAAO,CAAE;EACtDJ,cAAA,CAAe;EACfA,cAAA,CAAe;EACfA,cAAA,CAAe;EAEf;EACA,KAAK,MAAMK,eAAA,IAAmBN,IAAA,CAAKO,kBAAkB,CAACC,MAAM,IAAI;IAC9D,IAAI,sBAAsBF,eAAA,EAAiB;MACzC,IAAI,OAAOA,eAAA,CAAgBG,gBAAgB,KAAK,YAAY;QAC1DH,eAAA,CAAgBG,gBAAgB,CAAC;UAC/BR,cAAA;UACAC,OAAA;UACAC,MAAA;UACAC,SAAA;UACAC;QACF;MACF,OAAO,IACLK,KAAA,CAAMC,OAAO,CAACL,eAAA,CAAgBG,gBAAgB,KAC9CH,eAAA,CAAgBG,gBAAgB,EAAEG,MAAA,EAClC;QACAN,eAAA,CAAgBG,gBAAgB,CAACI,OAAO,CAAEC,SAAA;UACxCb,cAAA,CAAea,SAAA;QACjB;MACF,OAAO,IAAI,OAAOR,eAAA,CAAgBG,gBAAgB,KAAK,UAAU;QAC/D,KAAK,MAAMK,SAAA,IAAaC,MAAA,CAAOP,MAAM,CAACF,eAAA,CAAgBG,gBAAgB,GAAG;UACvER,cAAA,CAAea,SAAA;QACjB;MACF;IACF;IAEA,MAAME,eAAA,GAAkBV,eAAA,CAAgBW,aAAa;IACrD,IAAID,eAAA,EAAiB;MACnBf,cAAA,CAAee,eAAA;IACjB;IAEA;;;IAGA,IAAIV,eAAA,CAAgBY,KAAK,EAAEN,MAAA,EAAQ;MACjC,KAAK,MAAMO,IAAA,IAAQb,eAAA,CAAgBY,KAAK,EAAE;QACxC,IAAI,OAAOC,IAAA,EAAMC,YAAA,KAAiB,YAAY;UAC5C;QACF;QACA,MAAMC,SAAA,GAAYF,IAAA,CAAKC,YAAY,CAAC,CAAC;QACrC,IAAIC,SAAA,EAAWT,MAAA,EAAQ;UACrBd,yBAAA,CAA0B;YACxBG,cAAA;YACAC,OAAA;YACAC,MAAA;YACAmB,MAAA,EAAQD,SAAA;YACRjB,SAAA;YACAC;UACF;QACF;MACF;IACF;EACF;AACF","ignoreList":[]}