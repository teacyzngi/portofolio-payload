{"version":3,"file":"forEachNodeRecursively.js","names":["recurseNodes","callback","nodes","node","Array","isArray","children","length","recurseNodesAsync"],"sources":["../../src/utilities/forEachNodeRecursively.ts"],"sourcesContent":["import type { SerializedLexicalNode } from 'lexical'\n\nexport function recurseNodes({\n  callback,\n  nodes,\n}: {\n  callback: (node: SerializedLexicalNode) => void\n  nodes: SerializedLexicalNode[]\n}) {\n  for (const node of nodes) {\n    callback(node)\n\n    if ('children' in node && Array.isArray(node?.children) && node?.children?.length) {\n      recurseNodes({ callback, nodes: node.children as SerializedLexicalNode[] })\n    }\n  }\n}\n\nexport async function recurseNodesAsync({\n  callback,\n  nodes,\n}: {\n  callback: (node: SerializedLexicalNode) => Promise<void>\n  nodes: SerializedLexicalNode[]\n}) {\n  for (const node of nodes) {\n    await callback(node)\n\n    if ('children' in node && Array.isArray(node?.children) && node?.children?.length) {\n      await recurseNodesAsync({ callback, nodes: node.children as SerializedLexicalNode[] })\n    }\n  }\n}\n"],"mappings":"AAEA,OAAO,SAASA,aAAa;EAC3BC,QAAQ;EACRC;AAAK,CAIN;EACC,KAAK,MAAMC,IAAA,IAAQD,KAAA,EAAO;IACxBD,QAAA,CAASE,IAAA;IAET,IAAI,cAAcA,IAAA,IAAQC,KAAA,CAAMC,OAAO,CAACF,IAAA,EAAMG,QAAA,KAAaH,IAAA,EAAMG,QAAA,EAAUC,MAAA,EAAQ;MACjFP,YAAA,CAAa;QAAEC,QAAA;QAAUC,KAAA,EAAOC,IAAA,CAAKG;MAAoC;IAC3E;EACF;AACF;AAEA,OAAO,eAAeE,kBAAkB;EACtCP,QAAQ;EACRC;AAAK,CAIN;EACC,KAAK,MAAMC,IAAA,IAAQD,KAAA,EAAO;IACxB,MAAMD,QAAA,CAASE,IAAA;IAEf,IAAI,cAAcA,IAAA,IAAQC,KAAA,CAAMC,OAAO,CAACF,IAAA,EAAMG,QAAA,KAAaH,IAAA,EAAMG,QAAA,EAAUC,MAAA,EAAQ;MACjF,MAAMC,iBAAA,CAAkB;QAAEP,QAAA;QAAUC,KAAA,EAAOC,IAAA,CAAKG;MAAoC;IACtF;EACF;AACF","ignoreList":[]}