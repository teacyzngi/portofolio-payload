{"version":3,"file":"jsx.js","names":["propsToJSXString","props","propsArray","key","value","Object","entries","push","escapeQuotes","Array","isArray","map","v","JSON","stringify","replacer","join","str","replace","frontmatterToObject","frontmatter","lines","trim","split","result","inFrontmatter","line","valueParts","objectToFrontmatter","obj","length","extractFrontmatter","mdxContent","frontmatterRegex","match","contentWithoutFrontmatter","slice","content"],"sources":["../../../src/utilities/jsx/jsx.ts"],"sourcesContent":["/**\n * Converts an object of props to a JSX props string.\n *\n * This function is the inverse of `extractPropsFromJSXPropsString`.\n */\nexport function propsToJSXString({ props }: { props: Record<string, any> }): string {\n  const propsArray: string[] = []\n\n  for (const [key, value] of Object.entries(props)) {\n    if (typeof value === 'string') {\n      // Handle simple string props\n      propsArray.push(`${key}=\"${escapeQuotes(value)}\"`)\n    } else if (typeof value === 'number') {\n      // Handle number and boolean props\n      propsArray.push(`${key}={${value}}`)\n    } else if (typeof value === 'boolean') {\n      if (value) {\n        propsArray.push(`${key}`)\n      }\n    } else if (value !== null && typeof value === 'object') {\n      if (Array.isArray(value)) {\n        // Handle array props\n        propsArray.push(`${key}={[${value.map((v) => JSON.stringify(v, replacer)).join(', ')}]}`)\n      } else {\n        // Handle complex object props\n        propsArray.push(`${key}={${JSON.stringify(value, replacer)}}`)\n      }\n    }\n  }\n\n  return propsArray.join(' ')\n}\n\n// Helper function to escape quotes in string values\nfunction escapeQuotes(str: string): string {\n  return str.replace(/\"/g, '&quot;')\n}\n\n// Custom replacer function for JSON.stringify to handle single quotes\nfunction replacer(key: string, value: any): any {\n  if (typeof value === 'string') {\n    return value.replace(/'/g, \"\\\\'\")\n  }\n  return value\n}\n\n/**\n * Converts a frontmatter string to an object.\n */\nexport function frontmatterToObject(frontmatter: string): Record<string, any> {\n  const lines = frontmatter.trim().split('\\n')\n  const result = {}\n  let inFrontmatter = false\n\n  for (const line of lines) {\n    if (line.trim() === '---') {\n      inFrontmatter = !inFrontmatter\n      continue\n    }\n\n    if (inFrontmatter) {\n      const [key, ...valueParts] = line.split(':')\n      const value = valueParts.join(':').trim()\n\n      // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n      result[key.trim()] = value\n    }\n  }\n\n  return result\n}\n\n/**\n * Converts an object to a frontmatter string.\n */\nexport function objectToFrontmatter(obj: Record<string, any>): null | string {\n  if (!Object.entries(obj)?.length) {\n    return null\n  }\n  let frontmatter = '---\\n'\n\n  for (const [key, value] of Object.entries(obj)) {\n    if (Array.isArray(value)) {\n      frontmatter += `${key}: ${value.join(', ')}\\n`\n    } else {\n      frontmatter += `${key}: ${value}\\n`\n    }\n  }\n\n  frontmatter += '---\\n'\n  return frontmatter\n}\n\n/**\n * Takes an MDX content string and extracts the frontmatter and content.\n *\n * The resulting object contains the mdx content without the frontmatter and the frontmatter itself.\n */\nexport function extractFrontmatter(mdxContent: string) {\n  // eslint-disable-next-line regexp/no-super-linear-backtracking\n  const frontmatterRegex = /^---\\s*\\n[\\s\\S]*?\\n---\\s*\\n/\n  const match = mdxContent.match(frontmatterRegex)\n\n  if (match) {\n    const frontmatter = match[0]\n    const contentWithoutFrontmatter = mdxContent.slice(frontmatter.length).trim()\n    return {\n      content: contentWithoutFrontmatter,\n      frontmatter: frontmatter.trim(),\n    }\n  } else {\n    // If no frontmatter is found, return the original content\n    return {\n      content: mdxContent.trim(),\n      frontmatter: '',\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}