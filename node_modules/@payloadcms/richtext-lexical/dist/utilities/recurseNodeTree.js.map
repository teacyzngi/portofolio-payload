{"version":3,"file":"recurseNodeTree.js","names":["recurseNodeTree","flattenedNodes","nodeIDMap","nodes","length","node","push","id","fields","Array","isArray","children"],"sources":["../../src/utilities/recurseNodeTree.ts"],"sourcesContent":["import type { SerializedLexicalNode } from 'lexical'\n\n// Initialize both flattenedNodes and nodeIDMap\nexport const recurseNodeTree = ({\n  flattenedNodes,\n  nodeIDMap,\n  nodes,\n}: {\n  flattenedNodes?: SerializedLexicalNode[]\n  nodeIDMap?: {\n    [key: string]: SerializedLexicalNode\n  }\n  nodes: SerializedLexicalNode[]\n}): void => {\n  if (!nodes?.length) {\n    return\n  }\n\n  for (const node of nodes) {\n    if (flattenedNodes) {\n      flattenedNodes.push(node)\n    }\n    if (nodeIDMap) {\n      if (node && 'id' in node && node.id) {\n        nodeIDMap[node.id as string] = node\n      } else if (\n        'fields' in node &&\n        typeof node.fields === 'object' &&\n        node.fields &&\n        'id' in node.fields &&\n        node?.fields?.id\n      ) {\n        nodeIDMap[node.fields.id as string] = node\n      }\n    }\n\n    if ('children' in node && Array.isArray(node?.children) && node?.children?.length) {\n      recurseNodeTree({\n        flattenedNodes,\n        nodeIDMap,\n        nodes: node.children as SerializedLexicalNode[],\n      })\n    }\n  }\n}\n"],"mappings":"AAEA;AACA,OAAO,MAAMA,eAAA,GAAkBA,CAAC;EAC9BC,cAAc;EACdC,SAAS;EACTC;AAAK,CAON;EACC,IAAI,CAACA,KAAA,EAAOC,MAAA,EAAQ;IAClB;EACF;EAEA,KAAK,MAAMC,IAAA,IAAQF,KAAA,EAAO;IACxB,IAAIF,cAAA,EAAgB;MAClBA,cAAA,CAAeK,IAAI,CAACD,IAAA;IACtB;IACA,IAAIH,SAAA,EAAW;MACb,IAAIG,IAAA,IAAQ,QAAQA,IAAA,IAAQA,IAAA,CAAKE,EAAE,EAAE;QACnCL,SAAS,CAACG,IAAA,CAAKE,EAAE,CAAW,GAAGF,IAAA;MACjC,OAAO,IACL,YAAYA,IAAA,IACZ,OAAOA,IAAA,CAAKG,MAAM,KAAK,YACvBH,IAAA,CAAKG,MAAM,IACX,QAAQH,IAAA,CAAKG,MAAM,IACnBH,IAAA,EAAMG,MAAA,EAAQD,EAAA,EACd;QACAL,SAAS,CAACG,IAAA,CAAKG,MAAM,CAACD,EAAE,CAAW,GAAGF,IAAA;MACxC;IACF;IAEA,IAAI,cAAcA,IAAA,IAAQI,KAAA,CAAMC,OAAO,CAACL,IAAA,EAAMM,QAAA,KAAaN,IAAA,EAAMM,QAAA,EAAUP,MAAA,EAAQ;MACjFJ,eAAA,CAAgB;QACdC,cAAA;QACAC,SAAA;QACAC,KAAA,EAAOE,IAAA,CAAKM;MACd;IACF;EACF;AACF","ignoreList":[]}