{"version":3,"file":"index.js","names":["upgradeDocumentFieldsRecursively","upgradeLexicalData","payload","collections","config","allLocales","localization","localeCodes","totalCollections","length","locale","curCollection","collection","upgradeCollection","cur","max","global","globals","upgradeGlobal","console","log","slug","document","findGlobal","depth","undefined","overrideAccess","found","upgradeDocument","fields","updateGlobal","data","documentCount","count","totalDocs","page","upgraded","documents","find","pagination","docs","id","update"],"sources":["../../../src/utilities/upgradeLexicalData/index.ts"],"sourcesContent":["import type { CollectionConfig, Field, GlobalConfig, Payload } from 'payload'\n\nimport { upgradeDocumentFieldsRecursively } from './upgradeDocumentFieldsRecursively.js'\n\n/**\n * This goes through every single document in your payload app and re-saves it, if it has a lexical editor.\n * This way, the data is automatically converted to the new format, and that automatic conversion gets applied to every single document in your app.\n *\n * @param payload\n */\nexport async function upgradeLexicalData({ payload }: { payload: Payload }) {\n  const collections = payload.config.collections\n\n  const allLocales = payload.config.localization ? payload.config.localization.localeCodes : [null]\n\n  const totalCollections = collections.length\n  for (const locale of allLocales) {\n    let curCollection = 0\n    for (const collection of collections) {\n      curCollection++\n      await upgradeCollection({\n        collection,\n        cur: curCollection,\n        locale,\n        max: totalCollections,\n        payload,\n      })\n    }\n    for (const global of payload.config.globals) {\n      await upgradeGlobal({\n        global,\n        locale,\n        payload,\n      })\n    }\n  }\n}\n\nasync function upgradeGlobal({\n  global,\n  locale,\n  payload,\n}: {\n  global: GlobalConfig\n  locale: null | string\n  payload: Payload\n}) {\n  console.log(`Lexical Upgrader: ${locale}: Upgrading global:`, global.slug)\n\n  const document = await payload.findGlobal({\n    slug: global.slug,\n    depth: 0,\n    locale: locale || undefined,\n    overrideAccess: true,\n  })\n\n  const found = upgradeDocument({\n    document,\n    fields: global.fields,\n    payload,\n  })\n\n  if (found) {\n    await payload.updateGlobal({\n      slug: global.slug,\n      data: document,\n      depth: 0,\n      locale: locale || undefined,\n    })\n  }\n}\n\nasync function upgradeCollection({\n  collection,\n  cur,\n  locale,\n  max,\n  payload,\n}: {\n  collection: CollectionConfig\n  cur: number\n  locale: null | string\n  max: number\n  payload: Payload\n}) {\n  console.log(\n    `Lexical Upgrade: ${locale}: Upgrading collection:`,\n    collection.slug,\n    '(' + cur + '/' + max + ')',\n  )\n\n  const documentCount = (\n    await payload.count({\n      collection: collection.slug,\n      depth: 0,\n      locale: locale || undefined,\n    })\n  ).totalDocs\n\n  let page = 1\n  let upgraded = 0\n\n  while (upgraded < documentCount) {\n    const documents = await payload.find({\n      collection: collection.slug,\n      depth: 0,\n      locale: locale || undefined,\n      overrideAccess: true,\n      page,\n      pagination: true,\n    })\n\n    for (const document of documents.docs) {\n      upgraded++\n      console.log(\n        `Lexical Upgrade: ${locale}: Upgrading collection:`,\n        collection.slug,\n        '(' +\n          cur +\n          '/' +\n          max +\n          ') - Upgrading Document: ' +\n          document.id +\n          ' (' +\n          upgraded +\n          '/' +\n          documentCount +\n          ')',\n      )\n      const found = upgradeDocument({\n        document,\n        fields: collection.fields,\n        payload,\n      })\n\n      if (found) {\n        await payload.update({\n          id: document.id,\n          collection: collection.slug,\n          data: document,\n          depth: 0,\n          locale: locale || undefined,\n        })\n      }\n    }\n    page++\n  }\n}\n\nfunction upgradeDocument({\n  document,\n  fields,\n  payload,\n}: {\n  document: Record<string, unknown>\n  fields: Field[]\n  payload: Payload\n}): boolean {\n  return !!upgradeDocumentFieldsRecursively({\n    data: document,\n    fields,\n    found: 0,\n    payload,\n  })\n}\n"],"mappings":"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","ignoreList":[]}