{"version":3,"file":"index.js","names":["hasText","validateNodes","richTextValidateHOC","editorConfig","richTextValidate","value","options","req","t","required","rootNodes","root","children","Array","isArray","length","nodes","nodeValidations","features","validations","validation"],"sources":["../../src/validate/index.ts"],"sourcesContent":["import type { SerializedEditorState } from 'lexical'\nimport type { RichTextField, Validate } from 'payload'\n\nimport type { SanitizedServerEditorConfig } from '../lexical/config/types.js'\n\nimport { hasText } from './hasText.js'\nimport { validateNodes } from './validateNodes.js'\n\nexport const richTextValidateHOC = ({\n  editorConfig,\n}: {\n  editorConfig: SanitizedServerEditorConfig\n}) => {\n  const richTextValidate: Validate<SerializedEditorState, unknown, unknown, RichTextField> = async (\n    value,\n    options,\n  ) => {\n    const {\n      req: { t },\n      required,\n    } = options\n\n    if (required && hasText(value) === false) {\n      return t('validation:required')\n    }\n\n    // Traverse through nodes and validate them. Just like a node can hook into the population process (e.g. link or relationship nodes),\n    // they can also hook into the validation process. E.g. a block node probably has fields with validation rules.\n\n    const rootNodes = value?.root?.children\n    if (rootNodes && Array.isArray(rootNodes) && rootNodes?.length) {\n      return await validateNodes({\n        nodes: rootNodes,\n        nodeValidations: editorConfig.features.validations,\n        validation: {\n          options,\n          value,\n        },\n      })\n    }\n\n    return true\n  }\n\n  return richTextValidate\n}\n"],"mappings":"AAKA,SAASA,OAAO,QAAQ;AACxB,SAASC,aAAa,QAAQ;AAE9B,OAAO,MAAMC,mBAAA,GAAsBA,CAAC;EAClCC;AAAY,CAGb;EACC,MAAMC,gBAAA,GAAqF,MAAAA,CACzFC,KAAA,EACAC,OAAA;IAEA,MAAM;MACJC,GAAA,EAAK;QAAEC;MAAC,CAAE;MACVC;IAAQ,CACT,GAAGH,OAAA;IAEJ,IAAIG,QAAA,IAAYT,OAAA,CAAQK,KAAA,MAAW,OAAO;MACxC,OAAOG,CAAA,CAAE;IACX;IAEA;IACA;IAEA,MAAME,SAAA,GAAYL,KAAA,EAAOM,IAAA,EAAMC,QAAA;IAC/B,IAAIF,SAAA,IAAaG,KAAA,CAAMC,OAAO,CAACJ,SAAA,KAAcA,SAAA,EAAWK,MAAA,EAAQ;MAC9D,OAAO,MAAMd,aAAA,CAAc;QACzBe,KAAA,EAAON,SAAA;QACPO,eAAA,EAAiBd,YAAA,CAAae,QAAQ,CAACC,WAAW;QAClDC,UAAA,EAAY;UACVd,OAAA;UACAD;QACF;MACF;IACF;IAEA,OAAO;EACT;EAEA,OAAOD,gBAAA;AACT","ignoreList":[]}