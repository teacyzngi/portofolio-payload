{"version":3,"file":"hasText.js","names":["hasText","value","hasChildren","root","children","length","hasOnlyEmptyParagraph","type","paragraphNode","paragraphNodeChild"],"sources":["../../src/validate/hasText.ts"],"sourcesContent":["import type {\n  SerializedEditorState,\n  SerializedLexicalNode,\n  SerializedParagraphNode,\n  SerializedTextNode,\n} from 'lexical'\n\nexport function hasText(\n  value: null | SerializedEditorState<SerializedLexicalNode> | undefined,\n): boolean {\n  const hasChildren = !!value?.root?.children?.length\n\n  let hasOnlyEmptyParagraph = false\n  if (value?.root?.children?.length === 1) {\n    if (value?.root?.children[0]?.type === 'paragraph') {\n      const paragraphNode = value?.root?.children[0] as SerializedParagraphNode\n\n      if (!paragraphNode?.children || paragraphNode?.children?.length === 0) {\n        hasOnlyEmptyParagraph = true\n      } else if (paragraphNode?.children?.length === 1) {\n        const paragraphNodeChild = paragraphNode?.children[0]\n        if (paragraphNodeChild?.type === 'text') {\n          if (!(paragraphNodeChild as SerializedTextNode | undefined)?.['text']?.length) {\n            hasOnlyEmptyParagraph = true\n          }\n        }\n      }\n    }\n  }\n\n  if (!hasChildren || hasOnlyEmptyParagraph) {\n    return false\n  } else {\n    return true\n  }\n}\n"],"mappings":"AAOA,OAAO,SAASA,QACdC,KAAsE;EAEtE,MAAMC,WAAA,GAAc,CAAC,CAACD,KAAA,EAAOE,IAAA,EAAMC,QAAA,EAAUC,MAAA;EAE7C,IAAIC,qBAAA,GAAwB;EAC5B,IAAIL,KAAA,EAAOE,IAAA,EAAMC,QAAA,EAAUC,MAAA,KAAW,GAAG;IACvC,IAAIJ,KAAA,EAAOE,IAAA,EAAMC,QAAQ,CAAC,EAAE,EAAEG,IAAA,KAAS,aAAa;MAClD,MAAMC,aAAA,GAAgBP,KAAA,EAAOE,IAAA,EAAMC,QAAQ,CAAC,EAAE;MAE9C,IAAI,CAACI,aAAA,EAAeJ,QAAA,IAAYI,aAAA,EAAeJ,QAAA,EAAUC,MAAA,KAAW,GAAG;QACrEC,qBAAA,GAAwB;MAC1B,OAAO,IAAIE,aAAA,EAAeJ,QAAA,EAAUC,MAAA,KAAW,GAAG;QAChD,MAAMI,kBAAA,GAAqBD,aAAA,EAAeJ,QAAQ,CAAC,EAAE;QACrD,IAAIK,kBAAA,EAAoBF,IAAA,KAAS,QAAQ;UACvC,IAAI,CAAEE,kBAAA,GAAwD,OAAO,EAAEJ,MAAA,EAAQ;YAC7EC,qBAAA,GAAwB;UAC1B;QACF;MACF;IACF;EACF;EAEA,IAAI,CAACJ,WAAA,IAAeI,qBAAA,EAAuB;IACzC,OAAO;EACT,OAAO;IACL,OAAO;EACT;AACF","ignoreList":[]}