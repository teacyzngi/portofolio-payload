{"version":3,"file":"index.js","names":["c","_c","useLexicalComposerContext","useLexicalEditable","$computeTableMapSkipCellCheck","$deleteTableColumnAtSelection","$deleteTableRowAtSelection","$getNodeTriplet","$getTableCellNodeFromLexicalNode","$getTableColumnIndexFromTableCellNode","$getTableNodeFromLexicalNodeOrThrow","$getTableRowIndexFromTableCellNode","$insertTableColumnAtSelection","$insertTableRowAtSelection","$isTableCellNode","$isTableSelection","$mergeCells","$unmergeCell","getTableElement","getTableObserverFromTableElement","TableCellHeaderStates","TableCellNode","mergeRegister","useScrollInfo","$getSelection","$isElementNode","$isRangeSelection","$isTextNode","$setSelection","COMMAND_PRIORITY_CRITICAL","getDOMSelection","isDOMNode","SELECTION_CHANGE_COMMAND","React","useCallback","useEffect","useRef","useState","createPortal","MeatballsIcon","computeSelectionCount","selection","selectionShape","getShape","columns","toX","fromX","rows","toY","fromY","$canUnmerge","isCollapsed","anchor","is","focus","cell","__colSpan","__rowSpan","$selectLastDescendant","node","lastDescendant","getLastDescendant","select","selectEnd","selectNext","TableActionMenu","cellMerge","contextRef","onClose","setIsMenuOpen","tableCellNode","_tableCellNode","editor","dropDownRef","updateTableCellNode","selectionCounts","updateSelectionCounts","canMergeCells","setCanMergeCells","canUnmergeCell","setCanUnmergeCell","y","registerMutationListener","nodeMutations","nodeUpdated","get","getKey","getEditorState","read","getLatest","skipInitialization","currentSelectionCounts","menuButtonElement","current","dropDownElement","rootElement","getRootElement","rootEleRect","getBoundingClientRect","menuButtonRect","style","opacity","dropDownElementRect","margin","leftPosition","right","width","window","innerWidth","position","left","pageXOffset","topPosition","top","height","innerHeight","bottom","handleClickOutside","event","target","contains","addEventListener","removeEventListener","clearTableSelection","update","isAttached","tableNode","tableElement","getElementByKey","Error","tableObserver","$clearHighlight","markDirty","mergeTableCellsAtSelection","nodes","getNodes","tableCells","filter","targetCell","unmergeTableCellsAtSelection","insertTableRowAtSelection","shouldInsertAfter","i","insertTableColumnAtSelection","deleteTableRowAtSelection","deleteTableAtSelection","remove","deleteTableColumnAtSelection","toggleTableRowIsHeader","tableRowIndex","gridMap","rowCells","Set","newStyle","getHeaderStyles","ROW","col","length","mapCell","has","add","setHeaderStyles","toggleTableColumnIsHeader","tableColumnIndex","columnCells","COLUMN","row","toggleRowStriping","setRowStriping","getRowStriping","toggleFirstColumnFreeze","setFrozenColumns","getFrozenColumns","mergeCellButton","_jsx","className","onClick","type","_jsxs","e","stopPropagation","ref","Fragment","__headerState","document","body","TableCellActionMenuContainer","anchorElem","menuButtonRef","menuRootRef","isMenuOpen","setTableMenuCellNode","$moveMenu","menu","nativeSelection","_window","activeElement","disable","classList","tableCellParentNodeDOM","anchorNode","tableCellNodeFromSelection","getNode","enabled","isSelecting","toggle","tableCellRect","anchorRect","transform","timeoutId","undefined","callback","delayedCallback","setTimeout","registerUpdateListener","registerCommand","registerRootListener","prevRootElement","clearTimeout","prevTableCellDOM","TableActionMenuPlugin","t0","$","isEditable","t1"],"sources":["../../../../../../src/features/experimental_table/client/plugins/TableActionMenuPlugin/index.tsx"],"sourcesContent":["'use client'\n\nimport type { TableObserver, TableSelection } from '@lexical/table'\nimport type { ElementNode } from 'lexical'\nimport type { JSX } from 'react'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { useLexicalEditable } from '@lexical/react/useLexicalEditable'\nimport {\n  $computeTableMapSkipCellCheck,\n  $deleteTableColumnAtSelection,\n  $deleteTableRowAtSelection,\n  $getNodeTriplet,\n  $getTableCellNodeFromLexicalNode,\n  $getTableColumnIndexFromTableCellNode,\n  $getTableNodeFromLexicalNodeOrThrow,\n  $getTableRowIndexFromTableCellNode,\n  $insertTableColumnAtSelection,\n  $insertTableRowAtSelection,\n  $isTableCellNode,\n  $isTableSelection,\n  $mergeCells,\n  $unmergeCell,\n  getTableElement,\n  getTableObserverFromTableElement,\n  TableCellHeaderStates,\n  TableCellNode,\n} from '@lexical/table'\nimport { mergeRegister } from '@lexical/utils'\nimport { useScrollInfo } from '@payloadcms/ui'\nimport {\n  $getSelection,\n  $isElementNode,\n  $isRangeSelection,\n  $isTextNode,\n  $setSelection,\n  COMMAND_PRIORITY_CRITICAL,\n  getDOMSelection,\n  isDOMNode,\n  SELECTION_CHANGE_COMMAND,\n} from 'lexical'\nimport * as React from 'react'\nimport { useCallback, useEffect, useRef, useState } from 'react'\nimport { createPortal } from 'react-dom'\n\nimport type { PluginComponentWithAnchor } from '../../../../typesClient.js'\n\nimport './index.scss'\nimport { MeatballsIcon } from '../../../../../lexical/ui/icons/Meatballs/index.js'\n\nfunction computeSelectionCount(selection: TableSelection): {\n  columns: number\n  rows: number\n} {\n  const selectionShape = selection.getShape()\n  return {\n    columns: selectionShape.toX - selectionShape.fromX + 1,\n    rows: selectionShape.toY - selectionShape.fromY + 1,\n  }\n}\n\nfunction $canUnmerge(): boolean {\n  const selection = $getSelection()\n  if (\n    ($isRangeSelection(selection) && !selection.isCollapsed()) ||\n    ($isTableSelection(selection) && !selection.anchor.is(selection.focus)) ||\n    (!$isRangeSelection(selection) && !$isTableSelection(selection))\n  ) {\n    return false\n  }\n  const [cell] = $getNodeTriplet(selection.anchor)\n  return cell.__colSpan > 1 || cell.__rowSpan > 1\n}\n\nfunction $selectLastDescendant(node: ElementNode): void {\n  const lastDescendant = node.getLastDescendant()\n  if ($isTextNode(lastDescendant)) {\n    lastDescendant.select()\n  } else if ($isElementNode(lastDescendant)) {\n    lastDescendant.selectEnd()\n  } else if (lastDescendant !== null) {\n    lastDescendant.selectNext()\n  }\n}\n\ntype TableCellActionMenuProps = Readonly<{\n  cellMerge: boolean\n  contextRef: { current: HTMLElement | null }\n  onClose: () => void\n  setIsMenuOpen: (isOpen: boolean) => void\n  tableCellNode: TableCellNode\n}>\n\nfunction TableActionMenu({\n  cellMerge,\n  contextRef,\n  onClose,\n  setIsMenuOpen,\n  tableCellNode: _tableCellNode,\n}: TableCellActionMenuProps) {\n  const [editor] = useLexicalComposerContext()\n  const dropDownRef = useRef<HTMLDivElement | null>(null)\n  const [tableCellNode, updateTableCellNode] = useState(_tableCellNode)\n  const [selectionCounts, updateSelectionCounts] = useState({\n    columns: 1,\n    rows: 1,\n  })\n  const [canMergeCells, setCanMergeCells] = useState(false)\n  const [canUnmergeCell, setCanUnmergeCell] = useState(false)\n  const { y } = useScrollInfo()\n\n  useEffect(() => {\n    return editor.registerMutationListener(\n      TableCellNode,\n      (nodeMutations) => {\n        const nodeUpdated = nodeMutations.get(tableCellNode.getKey()) === 'updated'\n\n        if (nodeUpdated) {\n          editor.getEditorState().read(() => {\n            updateTableCellNode(tableCellNode.getLatest())\n          })\n        }\n      },\n      { skipInitialization: true },\n    )\n  }, [editor, tableCellNode])\n\n  useEffect(() => {\n    editor.getEditorState().read(() => {\n      const selection = $getSelection()\n      // Merge cells\n      if ($isTableSelection(selection)) {\n        const currentSelectionCounts = computeSelectionCount(selection)\n        updateSelectionCounts(computeSelectionCount(selection))\n\n        setCanMergeCells(currentSelectionCounts.columns > 1 || currentSelectionCounts.rows > 1)\n      }\n      // Unmerge cell\n      setCanUnmergeCell($canUnmerge())\n    })\n  }, [editor])\n\n  useEffect(() => {\n    const menuButtonElement = contextRef.current\n    const dropDownElement = dropDownRef.current\n    const rootElement = editor.getRootElement()\n\n    if (menuButtonElement != null && dropDownElement != null && rootElement != null) {\n      const rootEleRect = rootElement.getBoundingClientRect()\n      const menuButtonRect = menuButtonElement.getBoundingClientRect()\n      dropDownElement.style.opacity = '1'\n      const dropDownElementRect = dropDownElement.getBoundingClientRect()\n      const margin = 5\n      let leftPosition = menuButtonRect.right + margin\n      if (\n        leftPosition + dropDownElementRect.width > window.innerWidth ||\n        leftPosition + dropDownElementRect.width > rootEleRect.right\n      ) {\n        const position = menuButtonRect.left - dropDownElementRect.width - margin\n        leftPosition = (position < 0 ? margin : position) + window.pageXOffset\n      }\n      dropDownElement.style.left = `${leftPosition + window.pageXOffset}px`\n\n      let topPosition = menuButtonRect.top\n      if (topPosition + dropDownElementRect.height > window.innerHeight) {\n        const position = menuButtonRect.bottom - dropDownElementRect.height\n        topPosition = position < 0 ? margin : position\n      }\n      dropDownElement.style.top = `${topPosition}px`\n    }\n  }, [contextRef, dropDownRef, editor, y])\n\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (\n        dropDownRef.current != null &&\n        contextRef.current != null &&\n        isDOMNode(event.target) &&\n        !dropDownRef.current.contains(event.target) &&\n        !contextRef.current.contains(event.target)\n      ) {\n        setIsMenuOpen(false)\n      }\n    }\n\n    window.addEventListener('click', handleClickOutside)\n\n    return () => window.removeEventListener('click', handleClickOutside)\n  }, [setIsMenuOpen, contextRef])\n\n  const clearTableSelection = useCallback(() => {\n    editor.update(() => {\n      if (tableCellNode.isAttached()) {\n        const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode)\n        const tableElement = getTableElement(tableNode, editor.getElementByKey(tableNode.getKey()))\n\n        if (tableElement === null) {\n          throw new Error('Expected to find tableElement in DOM')\n        }\n\n        const tableObserver = getTableObserverFromTableElement(tableElement)\n        if (tableObserver !== null) {\n          tableObserver.$clearHighlight()\n        }\n\n        tableNode.markDirty()\n        updateTableCellNode(tableCellNode.getLatest())\n      }\n\n      $setSelection(null)\n    })\n  }, [editor, tableCellNode])\n\n  const mergeTableCellsAtSelection = () => {\n    editor.update(() => {\n      const selection = $getSelection()\n      if (!$isTableSelection(selection)) {\n        return\n      }\n      const nodes = selection.getNodes()\n      const tableCells = nodes.filter($isTableCellNode)\n      const targetCell = $mergeCells(tableCells)\n\n      if (targetCell) {\n        $selectLastDescendant(targetCell)\n        onClose()\n      }\n    })\n  }\n\n  const unmergeTableCellsAtSelection = () => {\n    editor.update(() => {\n      $unmergeCell()\n    })\n  }\n\n  const insertTableRowAtSelection = useCallback(\n    (shouldInsertAfter: boolean) => {\n      editor.update(() => {\n        for (let i = 0; i < selectionCounts.rows; i++) {\n          $insertTableRowAtSelection(shouldInsertAfter)\n        }\n        onClose()\n      })\n    },\n    [editor, onClose, selectionCounts.rows],\n  )\n\n  const insertTableColumnAtSelection = useCallback(\n    (shouldInsertAfter: boolean) => {\n      editor.update(() => {\n        for (let i = 0; i < selectionCounts.columns; i++) {\n          $insertTableColumnAtSelection(shouldInsertAfter)\n        }\n        onClose()\n      })\n    },\n    [editor, onClose, selectionCounts.columns],\n  )\n\n  const deleteTableRowAtSelection = useCallback(() => {\n    editor.update(() => {\n      $deleteTableRowAtSelection()\n      onClose()\n    })\n  }, [editor, onClose])\n\n  const deleteTableAtSelection = useCallback(() => {\n    editor.update(() => {\n      const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode)\n      tableNode.remove()\n\n      clearTableSelection()\n      onClose()\n    })\n  }, [editor, tableCellNode, clearTableSelection, onClose])\n\n  const deleteTableColumnAtSelection = useCallback(() => {\n    editor.update(() => {\n      $deleteTableColumnAtSelection()\n      onClose()\n    })\n  }, [editor, onClose])\n\n  const toggleTableRowIsHeader = useCallback(() => {\n    editor.update(() => {\n      const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode)\n\n      const tableRowIndex = $getTableRowIndexFromTableCellNode(tableCellNode)\n\n      const [gridMap] = $computeTableMapSkipCellCheck(tableNode, null, null)\n\n      const rowCells = new Set<TableCellNode>()\n\n      const newStyle = tableCellNode.getHeaderStyles() ^ TableCellHeaderStates.ROW\n      if (gridMap[tableRowIndex]) {\n        for (let col = 0; col < gridMap[tableRowIndex].length; col++) {\n          const mapCell = gridMap[tableRowIndex][col]\n\n          if (!mapCell?.cell) {\n            continue\n          }\n\n          if (!rowCells.has(mapCell.cell)) {\n            rowCells.add(mapCell.cell)\n            mapCell.cell.setHeaderStyles(newStyle, TableCellHeaderStates.ROW)\n          }\n        }\n      }\n\n      clearTableSelection()\n      onClose()\n    })\n  }, [editor, tableCellNode, clearTableSelection, onClose])\n\n  const toggleTableColumnIsHeader = useCallback(() => {\n    editor.update(() => {\n      const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode)\n\n      const tableColumnIndex = $getTableColumnIndexFromTableCellNode(tableCellNode)\n\n      const [gridMap] = $computeTableMapSkipCellCheck(tableNode, null, null)\n\n      const columnCells = new Set<TableCellNode>()\n\n      const newStyle = tableCellNode.getHeaderStyles() ^ TableCellHeaderStates.COLUMN\n      if (gridMap) {\n        for (let row = 0; row < gridMap.length; row++) {\n          const mapCell = gridMap?.[row]?.[tableColumnIndex]\n\n          if (!mapCell?.cell) {\n            continue\n          }\n\n          if (!columnCells.has(mapCell.cell)) {\n            columnCells.add(mapCell.cell)\n            mapCell.cell.setHeaderStyles(newStyle, TableCellHeaderStates.COLUMN)\n          }\n        }\n      }\n\n      clearTableSelection()\n      onClose()\n    })\n  }, [editor, tableCellNode, clearTableSelection, onClose])\n\n  const toggleRowStriping = useCallback(() => {\n    editor.update(() => {\n      if (tableCellNode.isAttached()) {\n        const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode)\n        if (tableNode) {\n          tableNode.setRowStriping(!tableNode.getRowStriping())\n        }\n      }\n\n      clearTableSelection()\n      onClose()\n    })\n  }, [editor, tableCellNode, clearTableSelection, onClose])\n\n  const toggleFirstColumnFreeze = useCallback(() => {\n    editor.update(() => {\n      if (tableCellNode.isAttached()) {\n        const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode)\n        if (tableNode) {\n          tableNode.setFrozenColumns(tableNode.getFrozenColumns() === 0 ? 1 : 0)\n        }\n      }\n      clearTableSelection()\n      onClose()\n    })\n  }, [editor, tableCellNode, clearTableSelection, onClose])\n\n  let mergeCellButton: JSX.Element | null = null\n  if (cellMerge) {\n    if (canMergeCells) {\n      mergeCellButton = (\n        <button\n          className=\"item\"\n          data-test-id=\"table-merge-cells\"\n          onClick={() => mergeTableCellsAtSelection()}\n          type=\"button\"\n        >\n          <span className=\"text\">Merge cells</span>\n        </button>\n      )\n    } else if (canUnmergeCell) {\n      mergeCellButton = (\n        <button\n          className=\"item\"\n          data-test-id=\"table-unmerge-cells\"\n          onClick={() => unmergeTableCellsAtSelection()}\n          type=\"button\"\n        >\n          <span className=\"text\">Unmerge cells</span>\n        </button>\n      )\n    }\n  }\n\n  return createPortal(\n    // eslint-disable-next-line jsx-a11y/no-static-element-interactions,jsx-a11y/click-events-have-key-events\n    <div\n      className=\"table-action-menu-dropdown\"\n      onClick={(e) => {\n        e.stopPropagation()\n      }}\n      ref={dropDownRef}\n    >\n      {mergeCellButton ? (\n        <React.Fragment>\n          {mergeCellButton}\n          <hr />\n        </React.Fragment>\n      ) : null}\n\n      <button\n        className=\"item\"\n        data-test-id=\"table-row-striping\"\n        onClick={() => toggleRowStriping()}\n        type=\"button\"\n      >\n        <span className=\"text\">Toggle Row Striping</span>\n      </button>\n      <button\n        className=\"item\"\n        data-test-id=\"table-freeze-first-column\"\n        onClick={() => toggleFirstColumnFreeze()}\n        type=\"button\"\n      >\n        <span className=\"text\">Toggle First Column Freeze</span>\n      </button>\n      <button\n        className=\"item\"\n        data-test-id=\"table-insert-row-above\"\n        onClick={() => insertTableRowAtSelection(false)}\n        type=\"button\"\n      >\n        <span className=\"text\">\n          Insert {selectionCounts.rows === 1 ? 'row' : `${selectionCounts.rows} rows`} above\n        </span>\n      </button>\n      <button\n        className=\"item\"\n        data-test-id=\"table-insert-row-below\"\n        onClick={() => insertTableRowAtSelection(true)}\n        type=\"button\"\n      >\n        <span className=\"text\">\n          Insert {selectionCounts.rows === 1 ? 'row' : `${selectionCounts.rows} rows`} below\n        </span>\n      </button>\n      <hr />\n      <button\n        className=\"item\"\n        data-test-id=\"table-insert-column-before\"\n        onClick={() => insertTableColumnAtSelection(false)}\n        type=\"button\"\n      >\n        <span className=\"text\">\n          Insert {selectionCounts.columns === 1 ? 'column' : `${selectionCounts.columns} columns`}{' '}\n          left\n        </span>\n      </button>\n      <button\n        className=\"item\"\n        data-test-id=\"table-insert-column-after\"\n        onClick={() => insertTableColumnAtSelection(true)}\n        type=\"button\"\n      >\n        <span className=\"text\">\n          Insert {selectionCounts.columns === 1 ? 'column' : `${selectionCounts.columns} columns`}{' '}\n          right\n        </span>\n      </button>\n      <hr />\n      <button\n        className=\"item\"\n        data-test-id=\"table-delete-columns\"\n        onClick={() => deleteTableColumnAtSelection()}\n        type=\"button\"\n      >\n        <span className=\"text\">Delete column</span>\n      </button>\n      <button\n        className=\"item\"\n        data-test-id=\"table-delete-rows\"\n        onClick={() => deleteTableRowAtSelection()}\n        type=\"button\"\n      >\n        <span className=\"text\">Delete row</span>\n      </button>\n      <button\n        className=\"item\"\n        data-test-id=\"table-delete\"\n        onClick={() => deleteTableAtSelection()}\n        type=\"button\"\n      >\n        <span className=\"text\">Delete table</span>\n      </button>\n      <hr />\n      <button\n        className=\"item\"\n        data-test-id=\"table-row-header\"\n        onClick={() => toggleTableRowIsHeader()}\n        type=\"button\"\n      >\n        <span className=\"text\">\n          {(tableCellNode.__headerState & TableCellHeaderStates.ROW) === TableCellHeaderStates.ROW\n            ? 'Remove'\n            : 'Add'}{' '}\n          row header\n        </span>\n      </button>\n      <button\n        className=\"item\"\n        data-test-id=\"table-column-header\"\n        onClick={() => toggleTableColumnIsHeader()}\n        type=\"button\"\n      >\n        <span className=\"text\">\n          {(tableCellNode.__headerState & TableCellHeaderStates.COLUMN) ===\n          TableCellHeaderStates.COLUMN\n            ? 'Remove'\n            : 'Add'}{' '}\n          column header\n        </span>\n      </button>\n    </div>,\n    document.body,\n  )\n}\n\nfunction TableCellActionMenuContainer({\n  anchorElem,\n  cellMerge,\n}: {\n  anchorElem: HTMLElement\n  cellMerge: boolean\n}): JSX.Element {\n  const [editor] = useLexicalComposerContext()\n\n  const menuButtonRef = useRef<HTMLDivElement | null>(null)\n  const menuRootRef = useRef<HTMLButtonElement | null>(null)\n  const [isMenuOpen, setIsMenuOpen] = useState(false)\n\n  const [tableCellNode, setTableMenuCellNode] = useState<null | TableCellNode>(null)\n\n  const $moveMenu = useCallback(() => {\n    const menu = menuButtonRef.current\n    const selection = $getSelection()\n    const nativeSelection = getDOMSelection(editor._window)\n    const activeElement = document.activeElement\n    function disable() {\n      if (menu) {\n        menu.classList.remove('table-cell-action-button-container--active')\n        menu.classList.add('table-cell-action-button-container--inactive')\n      }\n      setTableMenuCellNode(null)\n    }\n\n    if (selection == null || menu == null) {\n      return disable()\n    }\n\n    const rootElement = editor.getRootElement()\n    let tableObserver: null | TableObserver = null\n    let tableCellParentNodeDOM: HTMLElement | null = null\n\n    if (\n      $isRangeSelection(selection) &&\n      rootElement !== null &&\n      nativeSelection !== null &&\n      rootElement.contains(nativeSelection.anchorNode)\n    ) {\n      const tableCellNodeFromSelection = $getTableCellNodeFromLexicalNode(\n        selection.anchor.getNode(),\n      )\n\n      if (tableCellNodeFromSelection == null) {\n        return disable()\n      }\n\n      tableCellParentNodeDOM = editor.getElementByKey(tableCellNodeFromSelection.getKey())\n\n      if (tableCellParentNodeDOM == null || !tableCellNodeFromSelection.isAttached()) {\n        return disable()\n      }\n\n      const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNodeFromSelection)\n      const tableElement = getTableElement(tableNode, editor.getElementByKey(tableNode.getKey()))\n\n      if (tableElement === null) {\n        throw new Error('TableActionMenu: Expected to find tableElement in DOM')\n      }\n\n      tableObserver = getTableObserverFromTableElement(tableElement)\n      setTableMenuCellNode(tableCellNodeFromSelection)\n    } else if ($isTableSelection(selection)) {\n      const anchorNode = $getTableCellNodeFromLexicalNode(selection.anchor.getNode())\n      if (!$isTableCellNode(anchorNode)) {\n        throw new Error('TableSelection anchorNode must be a TableCellNode')\n      }\n      const tableNode = $getTableNodeFromLexicalNodeOrThrow(anchorNode)\n      const tableElement = getTableElement(tableNode, editor.getElementByKey(tableNode.getKey()))\n\n      if (tableElement === null) {\n        throw new Error('TableActionMenu: Expected to find tableElement in DOM')\n      }\n\n      tableObserver = getTableObserverFromTableElement(tableElement)\n      tableCellParentNodeDOM = editor.getElementByKey(anchorNode.getKey())\n    } else if (!activeElement) {\n      return disable()\n    }\n    if (tableObserver === null || tableCellParentNodeDOM === null) {\n      return disable()\n    }\n    const enabled = !tableObserver || !tableObserver.isSelecting\n    menu.classList.toggle('table-cell-action-button-container--active', enabled)\n    menu.classList.toggle('table-cell-action-button-container--inactive', !enabled)\n    if (enabled) {\n      const tableCellRect = tableCellParentNodeDOM.getBoundingClientRect()\n      const anchorRect = anchorElem.getBoundingClientRect()\n      const top = tableCellRect.top - anchorRect.top\n      const left = tableCellRect.right - anchorRect.left\n      menu.style.transform = `translate(${left}px, ${top}px)`\n    }\n  }, [editor, anchorElem])\n\n  useEffect(() => {\n    // We call the $moveMenu callback every time the selection changes,\n    // once up front, and once after each pointerup\n    let timeoutId: ReturnType<typeof setTimeout> | undefined = undefined\n    const callback = () => {\n      timeoutId = undefined\n      editor.getEditorState().read($moveMenu)\n    }\n    const delayedCallback = () => {\n      if (timeoutId === undefined) {\n        timeoutId = setTimeout(callback, 0)\n      }\n      return false\n    }\n    return mergeRegister(\n      editor.registerUpdateListener(delayedCallback),\n      editor.registerCommand(SELECTION_CHANGE_COMMAND, delayedCallback, COMMAND_PRIORITY_CRITICAL),\n      editor.registerRootListener((rootElement, prevRootElement) => {\n        if (prevRootElement) {\n          prevRootElement.removeEventListener('pointerup', delayedCallback)\n        }\n        if (rootElement) {\n          rootElement.addEventListener('pointerup', delayedCallback)\n          delayedCallback()\n        }\n      }),\n      () => clearTimeout(timeoutId),\n    )\n  })\n\n  const prevTableCellDOM = useRef(tableCellNode)\n\n  useEffect(() => {\n    if (prevTableCellDOM.current !== tableCellNode) {\n      setIsMenuOpen(false)\n    }\n\n    prevTableCellDOM.current = tableCellNode\n  }, [prevTableCellDOM, tableCellNode])\n\n  return (\n    <div className=\"table-cell-action-button-container\" ref={menuButtonRef}>\n      {tableCellNode != null && (\n        <React.Fragment>\n          <button\n            className=\"table-cell-action-button\"\n            onClick={(e) => {\n              e.stopPropagation()\n              setIsMenuOpen(!isMenuOpen)\n            }}\n            ref={menuRootRef}\n            type=\"button\"\n          >\n            <MeatballsIcon />\n          </button>\n          {isMenuOpen && (\n            <TableActionMenu\n              cellMerge={cellMerge}\n              contextRef={menuRootRef}\n              onClose={() => setIsMenuOpen(false)}\n              setIsMenuOpen={setIsMenuOpen}\n              tableCellNode={tableCellNode}\n            />\n          )}\n        </React.Fragment>\n      )}\n    </div>\n  )\n}\n\nexport const TableActionMenuPlugin: PluginComponentWithAnchor = ({ anchorElem }) => {\n  const isEditable = useLexicalEditable()\n  return createPortal(\n    isEditable ? (\n      <TableCellActionMenuContainer anchorElem={anchorElem ?? document.body} cellMerge />\n    ) : null,\n    anchorElem ?? document.body,\n  )\n}\n"],"mappings":"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","ignoreList":[]}