{"version":3,"file":"Code.js","names":["CodeField","useFormFields","React","useMemo","defaultLanguages","CodeComponent","autoComplete","field","forceRender","languages","path","permissions","readOnly","renderedBlocks","schemaPath","typescript","validate","languageField","fields","language","value","initialValue","label","props","type","admin","editorOptions","editorProps","defaultPath","undefined","key","name","_jsx","onMount","_editor","monaco","editor","defineTheme","base","colors","inherit","rules","typescriptDefaults","setCompilerOptions","allowNonTsExtensions","allowJs","allowSyntheticDefaultImports","esModuleInterop","jsx","JsxEmit","moduleResolution","ModuleResolutionKind","NodeJs","noEmit","paths","reactNamespace","target","ScriptTarget","typeRoots","setDiagnosticsOptions","noSemanticValidation","enableSemanticValidation","noSyntaxValidation","run","fetchTypes","Array","isArray","length","Promise","all","map","types","fetch","url","typesText","text","addExtraLib","filePath"],"sources":["../../../../../../src/features/blocks/premade/CodeBlock/Component/Code.tsx"],"sourcesContent":["'use client'\n\nimport type { CodeFieldClient, CodeFieldClientProps } from 'payload'\n\nimport { CodeField, useFormFields } from '@payloadcms/ui'\nimport React, { useMemo } from 'react'\n\nimport { defaultLanguages } from './defaultLanguages.js'\n\nexport type AdditionalCodeComponentProps = {\n  /**\n   * @default first key of the `languages` prop\n   */\n  defaultLanguage?: string\n  /**\n   * @default all languages supported by Monaco Editor\n   */\n  languages?: Record<string, string>\n  /**\n   * Override the name of the block.\n   *\n   * @default 'Code'\n   */\n  slug?: string\n  /**\n   * Configure typescript settings for the editor\n   */\n  typescript?: {\n    /**\n     * By default, the editor will not perform semantic validation. This means that\n     * while syntax errors will be highlighted, other issues like missing imports or incorrect\n     * types will not be.\n     *\n     * @default false\n     */\n    enableSemanticValidation?: boolean\n    /**\n     * Additional types to fetch and include in the editor for autocompletion.\n     *\n     * For example, to include types for payload, you would set this to\n     *\n     * [{ url: 'https://unpkg.com/payload@latest/dist/index.d.ts', filePath: 'file:///node_modules/payload/index.d.ts' }]\n     */\n    fetchTypes?: Array<{\n      filePath: string\n      url: string\n    }>\n    /**\n     * @default undefined\n     */\n    paths?: Record<string, string[]>\n    /**\n     * @default \"ESNext\"\n     */\n    target?: string\n    /**\n     * @default ['node_modules/@types']\n     */\n    typeRoots?: string[]\n  }\n}\n\nexport const CodeComponent: React.FC<AdditionalCodeComponentProps & CodeFieldClientProps> = ({\n  autoComplete,\n  field,\n  forceRender,\n  languages = defaultLanguages,\n  path,\n  permissions,\n  readOnly,\n  renderedBlocks,\n  schemaPath,\n  typescript,\n  validate,\n}) => {\n  const languageField = useFormFields(([fields]) => fields['language'])\n\n  const language: string =\n    (languageField?.value as string) || (languageField?.initialValue as string) || 'typescript'\n\n  const label = languages[language]\n\n  const props: CodeFieldClient = useMemo<CodeFieldClient>(\n    () => ({\n      ...field,\n      type: 'code',\n      admin: {\n        ...field.admin,\n        editorOptions: {},\n        editorProps: {\n          // If typescript is set, @monaco-editor/react needs to set the URI to a .ts or .tsx file when it calls createModel().\n          // This is done through the `defaultPath` prop.\n          defaultPath: language === 'ts' ? 'file.tsx' : undefined,\n        },\n        language,\n      },\n    }),\n    [field, language],\n  )\n\n  const key = `${field.name}-${language}-${label}`\n\n  return (\n    props && (\n      <CodeField\n        autoComplete={autoComplete}\n        field={props}\n        forceRender={forceRender}\n        key={key}\n        onMount={(_editor, monaco) => {\n          monaco.editor.defineTheme('vs-dark', {\n            base: 'vs-dark',\n            colors: {\n              'editor.background': '#222222',\n            },\n            inherit: true,\n            rules: [],\n          })\n\n          monaco.editor.defineTheme('vs', {\n            base: 'vs',\n            colors: {\n              'editor.background': '#f5f5f5',\n            },\n            inherit: true,\n            rules: [],\n          })\n          monaco.languages.typescript.typescriptDefaults.setCompilerOptions({\n            allowNonTsExtensions: true,\n            // Set module resolution to NodeJs to enable autocompletion\n            allowJs: true,\n            allowSyntheticDefaultImports: true,\n            esModuleInterop: true,\n            jsx: monaco.languages.typescript.JsxEmit.React,\n            moduleResolution: monaco.languages.typescript.ModuleResolutionKind.NodeJs,\n            noEmit: true,\n            paths: typescript?.paths,\n            reactNamespace: 'React',\n            target: monaco.languages.typescript.ScriptTarget[\n              typescript?.target ?? ('ESNext' as any)\n            ] as any,\n            typeRoots: typescript?.typeRoots ?? ['node_modules/@types'],\n          })\n\n          monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({\n            noSemanticValidation: typescript?.enableSemanticValidation ? false : true,\n            noSyntaxValidation: false,\n          })\n\n          const run = async () => {\n            if (\n              typescript?.fetchTypes &&\n              Array.isArray(typescript.fetchTypes) &&\n              typescript.fetchTypes.length > 0\n            ) {\n              await Promise.all(\n                typescript.fetchTypes.map(async (type) => {\n                  const types = await fetch(type.url)\n                  const typesText = await types.text()\n                  monaco.languages.typescript.typescriptDefaults.addExtraLib(\n                    typesText,\n                    type.filePath,\n                  )\n                }),\n              )\n            }\n          }\n          void run()\n        }}\n        path={path}\n        permissions={permissions}\n        readOnly={readOnly}\n        renderedBlocks={renderedBlocks}\n        schemaPath={schemaPath}\n        validate={validate}\n      />\n    )\n  )\n}\n"],"mappings":"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","ignoreList":[]}