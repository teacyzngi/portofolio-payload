{"version":3,"file":"index.js","names":["defaultLanguages","codeConverter","CodeBlock","_args","fieldOverrides","args","languages","slug","admin","components","Block","clientProps","path","jsx","fields","name","type","hidden","defaultValue","defaultLanguage","Object","keys","options","entries","map","key","value","label","Field"],"sources":["../../../../../src/features/blocks/premade/CodeBlock/index.ts"],"sourcesContent":["import type { Block } from 'payload'\n\nimport type { AdditionalCodeComponentProps } from './Component/Code.js'\n\nimport { defaultLanguages } from './Component/defaultLanguages.js'\nimport { codeConverter } from './converter.js'\n\n/**\n * @experimental - this API may change in future, minor releases\n */\nexport const CodeBlock: (\n  args?: {\n    fieldOverrides?: Partial<Block>\n  } & AdditionalCodeComponentProps,\n) => Block = (_args) => {\n  const { fieldOverrides, ...args } = _args || {}\n  const languages = args?.languages || defaultLanguages\n\n  return {\n    slug: args?.slug || 'Code',\n    admin: {\n      components: {\n        Block: {\n          clientProps: {\n            // If default languages are used, return undefined (=> do not pass `languages` variable) in order to reduce data sent to the client\n            languages: args?.languages,\n          },\n          path: '@payloadcms/richtext-lexical/client#CodeBlockBlockComponent',\n        },\n      },\n      jsx: '@payloadcms/richtext-lexical/client#codeConverterClient',\n    },\n    fields: [\n      {\n        name: 'language',\n        type: 'select',\n        admin: {\n          // We'll manually render this field into the block component header\n          hidden: true,\n        },\n        defaultValue: args?.defaultLanguage || Object.keys(languages)[0],\n        options: Object.entries(languages).map(([key, value]) => ({\n          label: value,\n          value: key,\n        })),\n      },\n      {\n        name: 'code',\n        type: 'code',\n        admin: {\n          components: {\n            Field: {\n              clientProps: args,\n              path: '@payloadcms/richtext-lexical/client#CodeComponent',\n            },\n          },\n        },\n        label: '',\n      },\n    ],\n    jsx: codeConverter,\n    ...(fieldOverrides || {}),\n  }\n}\n"],"mappings":"AAIA,SAASA,gBAAgB,QAAQ;AACjC,SAASC,aAAa,QAAQ;AAE9B;;;AAGA,OAAO,MAAMC,SAAA,GAICC,KAAA;EACZ,MAAM;IAAEC,cAAc;IAAE,GAAGC;EAAA,CAAM,GAAGF,KAAA,IAAS,CAAC;EAC9C,MAAMG,SAAA,GAAYD,IAAA,EAAMC,SAAA,IAAaN,gBAAA;EAErC,OAAO;IACLO,IAAA,EAAMF,IAAA,EAAME,IAAA,IAAQ;IACpBC,KAAA,EAAO;MACLC,UAAA,EAAY;QACVC,KAAA,EAAO;UACLC,WAAA,EAAa;YACX;YACAL,SAAA,EAAWD,IAAA,EAAMC;UACnB;UACAM,IAAA,EAAM;QACR;MACF;MACAC,GAAA,EAAK;IACP;IACAC,MAAA,EAAQ,CACN;MACEC,IAAA,EAAM;MACNC,IAAA,EAAM;MACNR,KAAA,EAAO;QACL;QACAS,MAAA,EAAQ;MACV;MACAC,YAAA,EAAcb,IAAA,EAAMc,eAAA,IAAmBC,MAAA,CAAOC,IAAI,CAACf,SAAA,CAAU,CAAC,EAAE;MAChEgB,OAAA,EAASF,MAAA,CAAOG,OAAO,CAACjB,SAAA,EAAWkB,GAAG,CAAC,CAAC,CAACC,GAAA,EAAKC,KAAA,CAAM,MAAM;QACxDC,KAAA,EAAOD,KAAA;QACPA,KAAA,EAAOD;MACT;IACF,GACA;MACEV,IAAA,EAAM;MACNC,IAAA,EAAM;MACNR,KAAA,EAAO;QACLC,UAAA,EAAY;UACVmB,KAAA,EAAO;YACLjB,WAAA,EAAaN,IAAA;YACbO,IAAA,EAAM;UACR;QACF;MACF;MACAe,KAAA,EAAO;IACT,EACD;IACDd,GAAA,EAAKZ,aAAA;IACL,IAAIG,cAAA,IAAkB,CAAC,CAAC;EAC1B;AACF","ignoreList":[]}