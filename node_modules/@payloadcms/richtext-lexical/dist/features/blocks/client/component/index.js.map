{"version":3,"file":"index.js","names":["Button","Collapsible","Drawer","EditDepthProvider","ErrorPill","Form","formatDrawerSlug","FormSubmit","Pill","RenderFields","SectionTitle","useConfig","useDocumentForm","useDocumentInfo","useEditDepth","useFormSubmitted","useServerFunctions","useTranslation","abortAndIgnore","deepCopyObjectSimpleWithoutReactComponents","reduceFieldsToValues","React","useCallback","useEffect","useMemo","useRef","baseClass","useLexicalComposerContext","useLexicalEditable","getTranslation","$getNodeByKey","v4","uuid","useEditorConfigContext","useLexicalDrawer","$isBlockNode","BlockContent","removeEmptyArrayValues","BlockComponent","props","cacheBuster","formData","nodeKey","submitted","id","collectionSlug","globalSlug","fieldProps","featureClientSchemaMap","field","parentLexicalRichTextField","initialLexicalFormState","schemaPath","uuidFromContext","fields","parentDocumentFields","onChangeAbortControllerRef","AbortController","editDepth","errorCount","setErrorCount","useState","config","drawerSlug","slug","depth","toggleDrawer","getDocPreferences","setDocFieldPreferences","editor","isEditable","blockType","getFormState","schemaFieldsPath","initialState","setInitialState","formState","blockName","initialValue","passesCondition","valid","value","hasMounted","prevCacheBuster","current","CustomLabel","setCustomLabel","customComponents","BlockLabel","undefined","CustomBlock","setCustomBlock","Block","abortController","awaitInitialState","state","data","docPermissions","docPreferences","documentFormState","initialBlockData","operation","readOnly","renderAllFields","signal","newFormStateData","update","node","newData","setFields","_components","isCollapsed","setIsCollapsed","collapsed","componentMapRenderedBlockPath","clientSchemaMap","blocksField","clientBlock","blockReferences","blocksMap","blocks","i18n","t","onChange","prevFormState","submit","controller","newFormState","initialBlockFormState","setTimeout","rowErrorCount","formField","Object","values","removeBlock","remove","blockDisplayName","labels","singular","onCollapsedChange","changedCollapsed","then","currentDocPreferences","currentFieldPreferences","name","collapsedArray","newCollapsed","length","includes","push","splice","indexOf","hello","EditButton","_jsx","buttonStyle","className","disabled","el","icon","onClick","e","preventDefault","stopPropagation","onMouseDown","round","size","tooltip","label","RemoveButton","BlockCollapsible","Actions","children","collapsibleProps","disableBlockName","editButton","fieldHasErrors","Label","CustomPill","removeButton","filter","Boolean","join","collapsibleStyle","header","_jsxs","pillStyle","admin","path","count","withMessage","_Fragment","onToggle","incomingCollapsedState","blockID","BlockDrawer","title","forceRender","parentIndexPath","parentPath","parentSchemaPath","permissions","programmaticSubmit","beforeSubmit","onSubmit","formSchema"],"sources":["../../../../../src/features/blocks/client/component/index.tsx"],"sourcesContent":["'use client'\n\nimport {\n  Button,\n  Collapsible,\n  Drawer,\n  EditDepthProvider,\n  ErrorPill,\n  Form,\n  formatDrawerSlug,\n  FormSubmit,\n  Pill,\n  RenderFields,\n  SectionTitle,\n  useConfig,\n  useDocumentForm,\n  useDocumentInfo,\n  useEditDepth,\n  useFormSubmitted,\n  useServerFunctions,\n  useTranslation,\n} from '@payloadcms/ui'\nimport { abortAndIgnore } from '@payloadcms/ui/shared'\nimport { deepCopyObjectSimpleWithoutReactComponents, reduceFieldsToValues } from 'payload/shared'\nimport React, { useCallback, useEffect, useMemo, useRef } from 'react'\n\nconst baseClass = 'lexical-block'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { useLexicalEditable } from '@lexical/react/useLexicalEditable'\nimport { getTranslation } from '@payloadcms/translations'\nimport { $getNodeByKey } from 'lexical'\nimport {\n  type BlocksFieldClient,\n  type ClientBlock,\n  type CollapsedPreferences,\n  type FormState,\n} from 'payload'\nimport { v4 as uuid } from 'uuid'\n\nimport type { BlockFields } from '../../server/nodes/BlocksNode.js'\n\nimport { useEditorConfigContext } from '../../../../lexical/config/client/EditorConfigProvider.js'\nimport './index.scss'\nimport { useLexicalDrawer } from '../../../../utilities/fieldsDrawer/useLexicalDrawer.js'\nimport { $isBlockNode } from '../nodes/BlocksNode.js'\nimport { type BlockCollapsibleWithErrorProps, BlockContent } from './BlockContent.js'\nimport { removeEmptyArrayValues } from './removeEmptyArrayValues.js'\n\ntype Props = {\n  /**\n   * Can be modified by the node in order to trigger the re-fetch of the initial state based on the\n   * formData. This is useful when node.setFields() is explicitly called from outside of the form - in\n   * this case, the new field state is likely not reflected in the form state, so we need to re-fetch\n   */\n  readonly cacheBuster: number\n  readonly formData: BlockFields\n  readonly nodeKey: string\n}\n\nexport const BlockComponent: React.FC<Props> = (props) => {\n  const { cacheBuster, formData, nodeKey } = props\n  const submitted = useFormSubmitted()\n  const { id, collectionSlug, globalSlug } = useDocumentInfo()\n  const {\n    fieldProps: {\n      featureClientSchemaMap,\n      field: parentLexicalRichTextField,\n      initialLexicalFormState,\n      schemaPath,\n    },\n    uuid: uuidFromContext,\n  } = useEditorConfigContext()\n\n  const { fields: parentDocumentFields } = useDocumentForm()\n  const onChangeAbortControllerRef = useRef(new AbortController())\n  const editDepth = useEditDepth()\n  const [errorCount, setErrorCount] = React.useState(0)\n\n  const { config } = useConfig()\n\n  const drawerSlug = formatDrawerSlug({\n    slug: `lexical-blocks-create-${uuidFromContext}-${formData.id}`,\n    depth: editDepth,\n  })\n  const { toggleDrawer } = useLexicalDrawer(drawerSlug)\n\n  // Used for saving collapsed to preferences (and gettin' it from there again)\n  // Remember, these preferences are scoped to the whole document, not just this form. This\n  // is important to consider for the data path used in setDocFieldPreferences\n  const { getDocPreferences, setDocFieldPreferences } = useDocumentInfo()\n  const [editor] = useLexicalComposerContext()\n  const isEditable = useLexicalEditable()\n\n  const blockType = formData.blockType\n\n  const { getFormState } = useServerFunctions()\n  const schemaFieldsPath = `${schemaPath}.lexical_internal_feature.blocks.lexical_blocks.${blockType}.fields`\n\n  const [initialState, setInitialState] = React.useState<false | FormState | undefined>(() => {\n    return initialLexicalFormState?.[formData.id]?.formState\n      ? {\n          ...initialLexicalFormState?.[formData.id]?.formState,\n          blockName: {\n            initialValue: formData.blockName,\n            passesCondition: true,\n            valid: true,\n            value: formData.blockName,\n          },\n        }\n      : false\n  })\n\n  const hasMounted = useRef(false)\n  const prevCacheBuster = useRef(cacheBuster)\n  useEffect(() => {\n    if (hasMounted.current) {\n      if (prevCacheBuster.current !== cacheBuster) {\n        setInitialState(false)\n      }\n      prevCacheBuster.current = cacheBuster\n    } else {\n      hasMounted.current = true\n    }\n  }, [cacheBuster])\n\n  const [CustomLabel, setCustomLabel] = React.useState<React.ReactNode | undefined>(\n    // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n    initialState?.['_components']?.customComponents?.BlockLabel ?? undefined,\n  )\n\n  const [CustomBlock, setCustomBlock] = React.useState<React.ReactNode | undefined>(\n    // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n    initialState?.['_components']?.customComponents?.Block ?? undefined,\n  )\n\n  // Initial state for newly created blocks\n  useEffect(() => {\n    const abortController = new AbortController()\n\n    const awaitInitialState = async () => {\n      /*\n       * This will only run if a new block is created. For all existing blocks that are loaded when the document is loaded, or when the form is saved,\n       * this is not run, as the lexical field RSC will fetch the state server-side and pass it to the client. That way, we avoid unnecessary client-side\n       * requests. Though for newly created blocks, we need to fetch the state client-side, as the server doesn't know about the block yet.\n       */\n      const { state } = await getFormState({\n        id,\n        collectionSlug,\n        data: formData,\n        docPermissions: { fields: true },\n        docPreferences: await getDocPreferences(),\n        documentFormState: deepCopyObjectSimpleWithoutReactComponents(parentDocumentFields),\n        globalSlug,\n        initialBlockData: formData,\n        operation: 'update',\n        readOnly: !isEditable,\n        renderAllFields: true,\n        schemaPath: schemaFieldsPath,\n        signal: abortController.signal,\n      })\n\n      if (state) {\n        state.blockName = {\n          initialValue: formData.blockName,\n          passesCondition: true,\n          valid: true,\n          value: formData.blockName,\n        }\n\n        const newFormStateData: BlockFields = reduceFieldsToValues(\n          deepCopyObjectSimpleWithoutReactComponents(state),\n          true,\n        ) as BlockFields\n\n        // Things like default values may come back from the server => update the node with the new data\n        editor.update(() => {\n          const node = $getNodeByKey(nodeKey)\n          if (node && $isBlockNode(node)) {\n            const newData = newFormStateData\n            newData.blockType = blockType\n\n            node.setFields(newData, true)\n          }\n        })\n\n        setInitialState(state)\n        setCustomLabel(state._components?.customComponents?.BlockLabel ?? undefined)\n        setCustomBlock(state._components?.customComponents?.Block ?? undefined)\n      }\n    }\n\n    if (formData && !initialState) {\n      void awaitInitialState()\n    }\n\n    return () => {\n      abortAndIgnore(abortController)\n    }\n  }, [\n    getFormState,\n    schemaFieldsPath,\n    isEditable,\n    id,\n    formData,\n    editor,\n    nodeKey,\n    initialState,\n    collectionSlug,\n    globalSlug,\n    getDocPreferences,\n    parentDocumentFields,\n    blockType,\n  ])\n\n  const [isCollapsed, setIsCollapsed] = React.useState<boolean>(\n    initialLexicalFormState?.[formData.id]?.collapsed ?? false,\n  )\n\n  const componentMapRenderedBlockPath = `${schemaPath}.lexical_internal_feature.blocks.lexical_blocks.${blockType}`\n\n  const clientSchemaMap = featureClientSchemaMap['blocks']\n\n  const blocksField: BlocksFieldClient | undefined = clientSchemaMap?.[\n    componentMapRenderedBlockPath\n  ]?.[0] as BlocksFieldClient\n\n  const clientBlock: ClientBlock | undefined = blocksField.blockReferences\n    ? typeof blocksField?.blockReferences?.[0] === 'string'\n      ? config.blocksMap[blocksField?.blockReferences?.[0]]\n      : blocksField?.blockReferences?.[0]\n    : blocksField?.blocks?.[0]\n\n  const { i18n, t } = useTranslation<object, string>()\n\n  const onChange = useCallback(\n    async ({ formState: prevFormState, submit }: { formState: FormState; submit?: boolean }) => {\n      abortAndIgnore(onChangeAbortControllerRef.current)\n\n      const controller = new AbortController()\n      onChangeAbortControllerRef.current = controller\n\n      const { state: newFormState } = await getFormState({\n        id,\n        collectionSlug,\n        docPermissions: {\n          fields: true,\n        },\n        docPreferences: await getDocPreferences(),\n        documentFormState: deepCopyObjectSimpleWithoutReactComponents(parentDocumentFields),\n        formState: prevFormState,\n        globalSlug,\n        initialBlockFormState: prevFormState,\n        operation: 'update',\n        readOnly: !isEditable,\n        renderAllFields: submit ? true : false,\n        schemaPath: schemaFieldsPath,\n        signal: controller.signal,\n      })\n\n      if (!newFormState) {\n        return prevFormState\n      }\n\n      if (prevFormState.blockName) {\n        newFormState.blockName = prevFormState.blockName\n      }\n\n      const newFormStateData: BlockFields = reduceFieldsToValues(\n        removeEmptyArrayValues({\n          fields: deepCopyObjectSimpleWithoutReactComponents(newFormState),\n        }),\n        true,\n      ) as BlockFields\n\n      setTimeout(() => {\n        editor.update(() => {\n          const node = $getNodeByKey(nodeKey)\n          if (node && $isBlockNode(node)) {\n            const newData = newFormStateData\n            newData.blockType = blockType\n            node.setFields(newData, true)\n          }\n        })\n      }, 0)\n\n      if (submit) {\n        setCustomLabel(newFormState._components?.customComponents?.BlockLabel ?? undefined)\n        setCustomBlock(newFormState._components?.customComponents?.Block ?? undefined)\n\n        let rowErrorCount = 0\n        for (const formField of Object.values(newFormState)) {\n          if (formField?.valid === false) {\n            rowErrorCount++\n          }\n        }\n        setErrorCount(rowErrorCount)\n      }\n\n      return newFormState\n    },\n\n    [\n      getFormState,\n      id,\n      collectionSlug,\n      getDocPreferences,\n      globalSlug,\n      schemaFieldsPath,\n      blockType,\n      parentDocumentFields,\n      isEditable,\n      editor,\n      nodeKey,\n    ],\n  )\n\n  useEffect(() => {\n    return () => {\n      abortAndIgnore(onChangeAbortControllerRef.current)\n    }\n  }, [])\n\n  const removeBlock = useCallback(() => {\n    editor.update(() => {\n      $getNodeByKey(nodeKey)?.remove()\n    })\n  }, [editor, nodeKey])\n\n  const blockDisplayName = clientBlock?.labels?.singular\n    ? getTranslation(clientBlock.labels.singular, i18n)\n    : clientBlock?.slug\n\n  const onCollapsedChange = useCallback(\n    (changedCollapsed: boolean) => {\n      void getDocPreferences().then((currentDocPreferences) => {\n        const currentFieldPreferences =\n          currentDocPreferences?.fields?.[parentLexicalRichTextField.name]\n\n        const collapsedArray = currentFieldPreferences?.collapsed\n\n        const newCollapsed: CollapsedPreferences =\n          collapsedArray && collapsedArray?.length ? collapsedArray : []\n\n        if (changedCollapsed) {\n          if (!newCollapsed.includes(formData.id)) {\n            newCollapsed.push(formData.id)\n          }\n        } else {\n          if (newCollapsed.includes(formData.id)) {\n            newCollapsed.splice(newCollapsed.indexOf(formData.id), 1)\n          }\n        }\n\n        setDocFieldPreferences(parentLexicalRichTextField.name, {\n          collapsed: newCollapsed,\n          hello: 'hi',\n        })\n      })\n    },\n    [getDocPreferences, parentLexicalRichTextField.name, setDocFieldPreferences, formData.id],\n  )\n\n  const EditButton = useMemo(\n    () => () => (\n      <Button\n        buttonStyle=\"icon-label\"\n        className={`${baseClass}__editButton`}\n        disabled={!isEditable}\n        el=\"button\"\n        icon=\"edit\"\n        onClick={(e) => {\n          e.preventDefault()\n          e.stopPropagation()\n          toggleDrawer()\n          return false\n        }}\n        onMouseDown={(e) => {\n          // Needed to preserve lexical selection for toggleDrawer lexical selection restore.\n          // I believe this is needed due to this button (usually) being inside of a collapsible.\n          e.preventDefault()\n        }}\n        round\n        size=\"small\"\n        tooltip={t('lexical:blocks:inlineBlocks:edit', { label: blockDisplayName })}\n      />\n    ),\n    [blockDisplayName, t, isEditable, toggleDrawer],\n  )\n\n  const RemoveButton = useMemo(\n    () => () => (\n      <Button\n        buttonStyle=\"icon-label\"\n        className={`${baseClass}__removeButton`}\n        disabled={!isEditable}\n        icon=\"x\"\n        onClick={(e) => {\n          e.preventDefault()\n          removeBlock()\n        }}\n        round\n        tooltip=\"Remove Block\"\n      />\n    ),\n    [isEditable, removeBlock],\n  )\n\n  const BlockCollapsible = useMemo(\n    () =>\n      ({\n        Actions,\n        children,\n        className,\n        collapsibleProps,\n        disableBlockName,\n        editButton,\n        errorCount,\n        fieldHasErrors,\n        Label,\n        Pill: CustomPill,\n        removeButton,\n      }: BlockCollapsibleWithErrorProps) => {\n        return (\n          <div className={baseClass + ' ' + baseClass + '-' + blockType}>\n            <Collapsible\n              className={[\n                `${baseClass}__row`,\n                fieldHasErrors ? `${baseClass}__row--has-errors` : `${baseClass}__row--no-errors`,\n                className,\n              ]\n                .filter(Boolean)\n                .join(' ')}\n              collapsibleStyle={fieldHasErrors ? 'error' : 'default'}\n              header={\n                <div className={`${baseClass}__block-header`}>\n                  {typeof Label !== 'undefined' ? (\n                    Label\n                  ) : typeof CustomLabel !== 'undefined' ? (\n                    CustomLabel\n                  ) : (\n                    <div className={`${baseClass}__block-label`}>\n                      {typeof CustomPill !== 'undefined' ? (\n                        CustomPill\n                      ) : (\n                        <Pill\n                          className={`${baseClass}__block-pill ${baseClass}__block-pill-${blockType}`}\n                          pillStyle=\"white\"\n                          size=\"small\"\n                        >\n                          {blockDisplayName ?? blockType}\n                        </Pill>\n                      )}\n                      {!disableBlockName && !clientBlock?.admin?.disableBlockName && (\n                        <SectionTitle path=\"blockName\" readOnly={!isEditable} />\n                      )}\n\n                      {fieldHasErrors && (\n                        <ErrorPill count={errorCount ?? 0} i18n={i18n} withMessage />\n                      )}\n                    </div>\n                  )}\n\n                  <div className={`${baseClass}__block-actions`}>\n                    {typeof Actions !== 'undefined' ? (\n                      Actions\n                    ) : (\n                      <>\n                        {(CustomBlock && editButton !== false) || (!CustomBlock && editButton) ? (\n                          <EditButton />\n                        ) : null}\n                        {removeButton !== false && isEditable ? <RemoveButton /> : null}\n                      </>\n                    )}\n                  </div>\n                </div>\n              }\n              isCollapsed={isCollapsed}\n              key={0}\n              onToggle={(incomingCollapsedState) => {\n                onCollapsedChange(incomingCollapsedState)\n                setIsCollapsed(incomingCollapsedState)\n              }}\n              {...(collapsibleProps || {})}\n            >\n              {children}\n            </Collapsible>\n          </div>\n        )\n      },\n    [\n      CustomBlock,\n      CustomLabel,\n      EditButton,\n      RemoveButton,\n      blockDisplayName,\n      clientBlock?.admin?.disableBlockName,\n      blockType,\n      i18n,\n      isCollapsed,\n      onCollapsedChange,\n      isEditable,\n    ],\n  )\n\n  const blockID = formData?.id\n\n  const BlockDrawer = useMemo(\n    () => () => (\n      <EditDepthProvider>\n        <Drawer\n          className={''}\n          slug={drawerSlug}\n          title={t(`lexical:blocks:inlineBlocks:${blockID ? 'edit' : 'create'}`, {\n            label: blockDisplayName ?? t('lexical:blocks:inlineBlocks:label'),\n          })}\n        >\n          {initialState ? (\n            <>\n              <RenderFields\n                fields={clientBlock?.fields ?? []}\n                forceRender\n                parentIndexPath=\"\"\n                parentPath=\"\" // See Blocks feature path for details as for why this is empty\n                parentSchemaPath={schemaFieldsPath}\n                permissions={true}\n                readOnly={!isEditable}\n              />\n              <FormSubmit programmaticSubmit={true}>{t('fields:saveChanges')}</FormSubmit>\n            </>\n          ) : null}\n        </Drawer>\n      </EditDepthProvider>\n    ),\n    [\n      initialState,\n      drawerSlug,\n      blockID,\n      blockDisplayName,\n      t,\n      isEditable,\n      clientBlock?.fields,\n      schemaFieldsPath,\n      // DO NOT ADD FORMDATA HERE! Adding formData will kick you out of sub block editors while writing.\n    ],\n  )\n\n  // Memoized Form JSX\n  const Block = useMemo(() => {\n    if (!initialState) {\n      return null\n    }\n    return (\n      <Form\n        beforeSubmit={[\n          async ({ formState }) => {\n            // This is only called when form is submitted from drawer - usually only the case if the block has a custom Block component\n            return await onChange({ formState, submit: true })\n          },\n        ]}\n        el=\"div\"\n        fields={clientBlock?.fields ?? []}\n        initialState={initialState}\n        onChange={[onChange]}\n        onSubmit={(formState, newData) => {\n          // This is only called when form is submitted from drawer - usually only the case if the block has a custom Block component\n          newData.blockType = blockType\n          editor.update(() => {\n            const node = $getNodeByKey(nodeKey)\n            if (node && $isBlockNode(node)) {\n              node.setFields(newData as BlockFields, true)\n            }\n          })\n          toggleDrawer()\n        }}\n        submitted={submitted}\n        uuid={uuid()}\n      >\n        <BlockContent\n          baseClass={baseClass}\n          BlockDrawer={BlockDrawer}\n          Collapsible={BlockCollapsible}\n          CustomBlock={CustomBlock}\n          EditButton={EditButton}\n          errorCount={errorCount}\n          formSchema={clientBlock?.fields ?? []}\n          initialState={initialState}\n          nodeKey={nodeKey}\n          RemoveButton={RemoveButton}\n        />\n      </Form>\n    )\n  }, [\n    BlockCollapsible,\n    BlockDrawer,\n    CustomBlock,\n    blockType,\n    RemoveButton,\n    EditButton,\n    editor,\n    errorCount,\n    toggleDrawer,\n    clientBlock?.fields,\n    // DO NOT ADD FORMDATA HERE! Adding formData will kick you out of sub block editors while writing.\n    initialState,\n    nodeKey,\n    onChange,\n    submitted,\n  ])\n\n  if (!clientBlock) {\n    return (\n      <BlockCollapsible disableBlockName={true} fieldHasErrors={true}>\n        <div className=\"lexical-block-not-found\">\n          Error: Block '{blockType}' not found in the config but exists in the lexical data\n        </div>\n      </BlockCollapsible>\n    )\n  }\n\n  return Block\n}\n"],"mappings":"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","ignoreList":[]}