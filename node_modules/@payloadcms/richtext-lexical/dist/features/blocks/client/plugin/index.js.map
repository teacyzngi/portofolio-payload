{"version":3,"file":"index.js","names":["c","_c","useLexicalComposerContext","$insertNodeToNearestRoot","$wrapNodeInElement","mergeRegister","formatDrawerSlug","useEditDepth","$createParagraphNode","$getNodeByKey","$getPreviousSelection","$getSelection","$insertNodes","$isParagraphNode","$isRangeSelection","$isRootOrShadowRoot","COMMAND_PRIORITY_EDITOR","useEffect","useState","useEditorConfigContext","useLexicalDrawer","$createBlockNode","BlockNode","$createInlineBlockNode","$isInlineBlockNode","INSERT_BLOCK_COMMAND","INSERT_INLINE_BLOCK_COMMAND","BlocksPlugin","$","editor","targetNodeKey","setTargetNodeKey","setCreatedInlineBlock","uuid","editDepth","t0","t1","slug","depth","drawerSlug","toggleDrawer","t2","hasNodes","Error","registerCommand","payload","update","selection","blockNode","focus","focusNode","getNode","__first","remove","fields","node","setFields","inlineBlockNode","getParentOrThrow","selectEnd","t3"],"sources":["../../../../../src/features/blocks/client/plugin/index.tsx"],"sourcesContent":["'use client'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext.js'\nimport { $insertNodeToNearestRoot, $wrapNodeInElement, mergeRegister } from '@lexical/utils'\nimport { formatDrawerSlug, useEditDepth } from '@payloadcms/ui'\nimport {\n  $createParagraphNode,\n  $getNodeByKey,\n  $getPreviousSelection,\n  $getSelection,\n  $insertNodes,\n  $isParagraphNode,\n  $isRangeSelection,\n  $isRootOrShadowRoot,\n  COMMAND_PRIORITY_EDITOR,\n} from 'lexical'\nimport { useEffect, useState } from 'react'\n\nimport type { PluginComponent } from '../../../typesClient.js'\nimport type { BlockFields, BlockFieldsOptionalID } from '../../server/nodes/BlocksNode.js'\n\nimport { useEditorConfigContext } from '../../../../lexical/config/client/EditorConfigProvider.js'\nimport { useLexicalDrawer } from '../../../../utilities/fieldsDrawer/useLexicalDrawer.js'\nimport { $createBlockNode, BlockNode } from '../nodes/BlocksNode.js'\nimport { $createInlineBlockNode, $isInlineBlockNode } from '../nodes/InlineBlocksNode.js'\nimport { INSERT_BLOCK_COMMAND, INSERT_INLINE_BLOCK_COMMAND } from './commands.js'\n\nexport type InsertBlockPayload = BlockFieldsOptionalID\n\nexport const BlocksPlugin: PluginComponent = () => {\n  const [editor] = useLexicalComposerContext()\n\n  const [targetNodeKey, setTargetNodeKey] = useState<null | string>(null)\n\n  const { setCreatedInlineBlock, uuid } = useEditorConfigContext()\n  const editDepth = useEditDepth()\n\n  const drawerSlug = formatDrawerSlug({\n    slug: `lexical-inlineBlocks-create-` + uuid,\n    depth: editDepth,\n  })\n\n  const { toggleDrawer } = useLexicalDrawer(drawerSlug, true)\n\n  useEffect(() => {\n    if (!editor.hasNodes([BlockNode])) {\n      throw new Error('BlocksPlugin: BlocksNode not registered on editor')\n    }\n\n    return mergeRegister(\n      editor.registerCommand<InsertBlockPayload>(\n        INSERT_BLOCK_COMMAND,\n        (payload: InsertBlockPayload) => {\n          editor.update(() => {\n            const selection = $getSelection() || $getPreviousSelection()\n\n            if ($isRangeSelection(selection)) {\n              const blockNode = $createBlockNode(payload)\n\n              // we need to get the focus node before inserting the block node, as $insertNodeToNearestRoot can change the focus node\n              const { focus } = selection\n              const focusNode = focus.getNode()\n              // Insert blocks node BEFORE potentially removing focusNode, as $insertNodeToNearestRoot errors if the focusNode doesn't exist\n              $insertNodeToNearestRoot(blockNode)\n\n              // Delete the node it it's an empty paragraph\n              if ($isParagraphNode(focusNode) && !focusNode.__first) {\n                focusNode.remove()\n              }\n            }\n          })\n\n          return true\n        },\n        COMMAND_PRIORITY_EDITOR,\n      ),\n      editor.registerCommand(\n        INSERT_INLINE_BLOCK_COMMAND,\n        (fields) => {\n          if (targetNodeKey) {\n            const node = $getNodeByKey(targetNodeKey)\n\n            if (!node || !$isInlineBlockNode(node)) {\n              return false\n            }\n\n            node.setFields(fields as BlockFields)\n\n            setTargetNodeKey(null)\n            return true\n          }\n\n          const inlineBlockNode = $createInlineBlockNode(fields as BlockFields)\n          setCreatedInlineBlock?.(inlineBlockNode)\n          $insertNodes([inlineBlockNode])\n          if ($isRootOrShadowRoot(inlineBlockNode.getParentOrThrow())) {\n            $wrapNodeInElement(inlineBlockNode, $createParagraphNode).selectEnd()\n          }\n\n          return true\n        },\n        COMMAND_PRIORITY_EDITOR,\n      ),\n    )\n  }, [editor, setCreatedInlineBlock, targetNodeKey, toggleDrawer])\n\n  return null\n}\n"],"mappings":"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","ignoreList":[]}