{"version":3,"file":"convertLexicalToPlaintext.spec.js","names":["convertLexicalToPlaintext","textNode","text","bold","type","detail","format","mode","style","version","linebreakNode","tabNode","paragraphNode","children","direction","indent","textFormat","headingNode","tag","listItemNode","checked","value","listNode","listType","start","tableNode","tableRowNode","tableCellNode","headerState","rootNode","nodes","root","describe","it","data","plaintext","expect","toBe"],"sources":["../../../../src/features/converters/lexicalToPlaintext/convertLexicalToPlaintext.spec.ts"],"sourcesContent":["import type {\n  DefaultNodeTypes,\n  DefaultTypedEditorState,\n  SerializedTabNode,\n  SerializedParagraphNode,\n  SerializedTextNode,\n  SerializedLineBreakNode,\n  SerializedHeadingNode,\n  SerializedListItemNode,\n  SerializedListNode,\n  SerializedTableRowNode,\n  SerializedTableNode,\n  SerializedTableCellNode,\n} from '../../../nodeTypes.js'\nimport { convertLexicalToPlaintext } from './sync/index.js'\n\nfunction textNode(text: string, bold?: boolean): SerializedTextNode {\n  return {\n    type: 'text',\n    detail: 0,\n    format: bold ? 1 : 0,\n    mode: 'normal',\n    style: '',\n    text,\n    version: 1,\n  }\n}\n\nfunction linebreakNode(): SerializedLineBreakNode {\n  return {\n    type: 'linebreak',\n    version: 1,\n  }\n}\n\nfunction tabNode(): SerializedTabNode {\n  return {\n    type: 'tab',\n    detail: 0,\n    format: 0,\n    mode: 'normal',\n    style: '',\n    text: '',\n    version: 1,\n  }\n}\n\nfunction paragraphNode(children: DefaultNodeTypes[]): SerializedParagraphNode {\n  return {\n    type: 'paragraph',\n    children,\n    direction: 'ltr',\n    format: '',\n    indent: 0,\n    textFormat: 0,\n    version: 1,\n  }\n}\n\nfunction headingNode(children: DefaultNodeTypes[]): SerializedHeadingNode {\n  return {\n    type: 'heading',\n    children,\n    direction: 'ltr',\n    format: '',\n    indent: 0,\n    textFormat: 0,\n    tag: 'h1',\n    version: 1,\n  }\n}\n\nfunction listItemNode(children: DefaultNodeTypes[]): SerializedListItemNode {\n  return {\n    type: 'listitem',\n    children,\n    checked: false,\n    direction: 'ltr',\n    format: '',\n    indent: 0,\n    value: 0,\n    version: 1,\n  }\n}\n\nfunction listNode(children: DefaultNodeTypes[]): SerializedListNode {\n  return {\n    type: 'list',\n    children,\n    direction: 'ltr',\n    format: '',\n    indent: 0,\n    listType: 'bullet',\n    start: 0,\n    tag: 'ul',\n    version: 1,\n  }\n}\n\nfunction tableNode(children: (DefaultNodeTypes | SerializedTableRowNode)[]): SerializedTableNode {\n  return {\n    type: 'table',\n    children,\n    direction: 'ltr',\n    format: '',\n    indent: 0,\n    version: 1,\n  }\n}\n\nfunction tableRowNode(\n  children: (DefaultNodeTypes | SerializedTableCellNode)[],\n): SerializedTableRowNode {\n  return {\n    type: 'tablerow',\n    children,\n    direction: 'ltr',\n    format: '',\n    indent: 0,\n    version: 1,\n  }\n}\n\nfunction tableCellNode(children: DefaultNodeTypes[]): SerializedTableCellNode {\n  return {\n    type: 'tablecell',\n    children,\n    direction: 'ltr',\n    format: '',\n    indent: 0,\n    headerState: 0,\n    version: 1,\n  }\n}\n\nfunction rootNode(nodes: (DefaultNodeTypes | SerializedTableNode)[]): DefaultTypedEditorState {\n  return {\n    root: {\n      type: 'root',\n      children: nodes,\n      direction: 'ltr',\n      format: '',\n      indent: 0,\n      version: 1,\n    },\n  }\n}\n\ndescribe('convertLexicalToPlaintext', () => {\n  it('ensure paragraph with text is correctly converted', () => {\n    const data: DefaultTypedEditorState = rootNode([paragraphNode([textNode('Basic Text')])])\n\n    const plaintext = convertLexicalToPlaintext({\n      data,\n    })\n\n    expect(plaintext).toBe('Basic Text')\n  })\n\n  it('ensure paragraph with multiple text nodes is correctly converted', () => {\n    const data: DefaultTypedEditorState = rootNode([\n      paragraphNode([textNode('Basic Text'), textNode(' Bold', true), textNode(' Text')]),\n    ])\n\n    const plaintext = convertLexicalToPlaintext({\n      data,\n    })\n\n    expect(plaintext).toBe('Basic Text Bold Text')\n  })\n\n  it('ensure linebreaks are converted correctly', () => {\n    const data: DefaultTypedEditorState = rootNode([\n      paragraphNode([textNode('Basic Text'), linebreakNode(), textNode('Next Line')]),\n    ])\n\n    const plaintext = convertLexicalToPlaintext({\n      data,\n    })\n\n    expect(plaintext).toBe('Basic Text\\nNext Line')\n  })\n\n  it('ensure tabs are converted correctly', () => {\n    const data: DefaultTypedEditorState = rootNode([\n      paragraphNode([textNode('Basic Text'), tabNode(), textNode('Next Line')]),\n    ])\n\n    const plaintext = convertLexicalToPlaintext({\n      data,\n    })\n\n    expect(plaintext).toBe('Basic Text\\tNext Line')\n  })\n\n  it('ensure new lines are added between paragraphs', () => {\n    const data: DefaultTypedEditorState = rootNode([\n      paragraphNode([textNode('Basic text')]),\n      paragraphNode([textNode('Next block-node')]),\n    ])\n\n    const plaintext = convertLexicalToPlaintext({\n      data,\n    })\n\n    expect(plaintext).toBe('Basic text\\n\\nNext block-node')\n  })\n\n  it('ensure new lines are added between heading nodes', () => {\n    const data: DefaultTypedEditorState = rootNode([\n      headingNode([textNode('Basic text')]),\n      headingNode([textNode('Next block-node')]),\n    ])\n\n    const plaintext = convertLexicalToPlaintext({\n      data,\n    })\n\n    expect(plaintext).toBe('Basic text\\n\\nNext block-node')\n  })\n\n  it('ensure new lines are added between list items and lists', () => {\n    const data: DefaultTypedEditorState = rootNode([\n      listNode([listItemNode([textNode('First item')]), listItemNode([textNode('Second item')])]),\n      listNode([listItemNode([textNode('Next list')])]),\n    ])\n\n    const plaintext = convertLexicalToPlaintext({\n      data,\n    })\n\n    expect(plaintext).toBe('First item\\nSecond item\\n\\nNext list')\n  })\n\n  it('ensure new lines are added between tables, table rows, and table cells', () => {\n    const data: DefaultTypedEditorState = rootNode([\n      tableNode([\n        tableRowNode([\n          tableCellNode([textNode('Cell 1, Row 1')]),\n          tableCellNode([textNode('Cell 2, Row 1')]),\n        ]),\n        tableRowNode([\n          tableCellNode([textNode('Cell 1, Row 2')]),\n          tableCellNode([textNode('Cell 2, Row 2')]),\n        ]),\n      ]),\n      tableNode([tableRowNode([tableCellNode([textNode('Cell in Table 2')])])]),\n    ])\n\n    const plaintext = convertLexicalToPlaintext({\n      data,\n    })\n\n    expect(plaintext).toBe(\n      'Cell 1, Row 1 | Cell 2, Row 1\\nCell 1, Row 2 | Cell 2, Row 2\\n\\nCell in Table 2',\n    )\n  })\n})\n"],"mappings":"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","ignoreList":[]}