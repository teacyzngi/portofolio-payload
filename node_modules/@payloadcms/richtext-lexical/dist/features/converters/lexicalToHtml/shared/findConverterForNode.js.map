{"version":3,"file":"findConverterForNode.js","names":["findConverterForNode","converters","disableIndent","disableTextAlign","node","unknownConverter","converterForNode","type","blocks","fields","blockType","console","error","inlineBlocks","style","Array","isArray","includes","format","indent","Number","providedCSSString","key","Object","keys","providedStyleTag","length"],"sources":["../../../../../src/features/converters/lexicalToHtml/shared/findConverterForNode.ts"],"sourcesContent":["/* eslint-disable no-console */\nimport type { SerializedLexicalNode } from 'lexical'\n\nimport type { SerializedBlockNode, SerializedInlineBlockNode } from '../../../../nodeTypes.js'\nimport type { HTMLConverterAsync, HTMLConvertersAsync } from '../async/types.js'\nimport type { HTMLConverter, HTMLConverters } from '../sync/types.js'\nimport type { ProvidedCSS } from './types.js'\n\nexport function findConverterForNode<\n  TConverters extends HTMLConverters | HTMLConvertersAsync,\n  TConverter extends HTMLConverter | HTMLConverterAsync,\n>({\n  converters,\n  disableIndent,\n  disableTextAlign,\n  node,\n  unknownConverter,\n}: {\n  converters: TConverters\n  disableIndent?: boolean | string[]\n  disableTextAlign?: boolean | string[]\n  node: SerializedLexicalNode\n  unknownConverter: TConverter\n}): {\n  converterForNode: TConverter | undefined\n  providedCSSString: string\n  providedStyleTag: string\n} {\n  let converterForNode: TConverter | undefined\n  if (node.type === 'block') {\n    converterForNode = converters?.blocks?.[\n      (node as SerializedBlockNode)?.fields?.blockType\n    ] as TConverter\n    if (!converterForNode && !unknownConverter) {\n      console.error(\n        `Lexical => HTML converter: Blocks converter: found ${(node as SerializedBlockNode)?.fields?.blockType} block, but no converter is provided`,\n      )\n    }\n  } else if (node.type === 'inlineBlock') {\n    converterForNode = converters?.inlineBlocks?.[\n      (node as SerializedInlineBlockNode)?.fields?.blockType\n    ] as TConverter\n    if (!converterForNode && !unknownConverter) {\n      console.error(\n        `Lexical => HTML converter: Inline Blocks converter: found ${(node as SerializedInlineBlockNode)?.fields?.blockType} inline block, but no converter is provided`,\n      )\n    }\n  } else {\n    converterForNode = converters[node.type] as TConverter\n  }\n\n  const style: ProvidedCSS = {}\n\n  // Check if disableTextAlign is not true and does not include node type\n  if (\n    !disableTextAlign &&\n    (!Array.isArray(disableTextAlign) || !disableTextAlign?.includes(node.type))\n  ) {\n    if ('format' in node && node.format) {\n      switch (node.format) {\n        case 'center':\n          style['text-align'] = 'center'\n          break\n        case 'end':\n          style['text-align'] = 'right'\n          break\n        case 'justify':\n          style['text-align'] = 'justify'\n          break\n        case 'left':\n          //style['text-align'] = 'left'\n          // Do nothing, as left is the default\n          break\n        case 'right':\n          style['text-align'] = 'right'\n          break\n        case 'start':\n          style['text-align'] = 'left'\n          break\n      }\n    }\n  }\n\n  if (!disableIndent && (!Array.isArray(disableIndent) || !disableIndent?.includes(node.type))) {\n    if ('indent' in node && node.indent && node.type !== 'listitem') {\n      // the unit should be px. Do not change it to rem, em, or something else.\n      // The quantity should be 40px. Do not change it either.\n      // See rationale in\n      // https://github.com/payloadcms/payload/issues/13130#issuecomment-3058348085\n      style['padding-inline-start'] = `${Number(node.indent) * 40}px`\n    }\n  }\n\n  let providedCSSString: string = ''\n  for (const key of Object.keys(style)) {\n    // @ts-expect-error we're iterating over the keys of the object\n    providedCSSString += `${key}: ${style[key]};`\n  }\n  const providedStyleTag = providedCSSString?.length ? ` style=\"${providedCSSString}\"` : ''\n\n  return {\n    converterForNode: converterForNode ?? unknownConverter,\n    providedCSSString,\n    providedStyleTag,\n  }\n}\n"],"mappings":"AAAA,+BAQA,OAAO,SAASA,qBAGd;EACAC,UAAU;EACVC,aAAa;EACbC,gBAAgB;EAChBC,IAAI;EACJC;AAAgB,CAOjB;EAKC,IAAIC,gBAAA;EACJ,IAAIF,IAAA,CAAKG,IAAI,KAAK,SAAS;IACzBD,gBAAA,GAAmBL,UAAA,EAAYO,MAAA,GAC5BJ,IAAA,EAA8BK,MAAA,EAAQC,SAAA,CACxC;IACD,IAAI,CAACJ,gBAAA,IAAoB,CAACD,gBAAA,EAAkB;MAC1CM,OAAA,CAAQC,KAAK,CACX,sDAAuDR,IAAA,EAA8BK,MAAA,EAAQC,SAAA,sCAA+C;IAEhJ;EACF,OAAO,IAAIN,IAAA,CAAKG,IAAI,KAAK,eAAe;IACtCD,gBAAA,GAAmBL,UAAA,EAAYY,YAAA,GAC5BT,IAAA,EAAoCK,MAAA,EAAQC,SAAA,CAC9C;IACD,IAAI,CAACJ,gBAAA,IAAoB,CAACD,gBAAA,EAAkB;MAC1CM,OAAA,CAAQC,KAAK,CACX,6DAA8DR,IAAA,EAAoCK,MAAA,EAAQC,SAAA,6CAAsD;IAEpK;EACF,OAAO;IACLJ,gBAAA,GAAmBL,UAAU,CAACG,IAAA,CAAKG,IAAI,CAAC;EAC1C;EAEA,MAAMO,KAAA,GAAqB,CAAC;EAE5B;EACA,IACE,CAACX,gBAAA,KACA,CAACY,KAAA,CAAMC,OAAO,CAACb,gBAAA,KAAqB,CAACA,gBAAA,EAAkBc,QAAA,CAASb,IAAA,CAAKG,IAAI,IAC1E;IACA,IAAI,YAAYH,IAAA,IAAQA,IAAA,CAAKc,MAAM,EAAE;MACnC,QAAQd,IAAA,CAAKc,MAAM;QACjB,KAAK;UACHJ,KAAK,CAAC,aAAa,GAAG;UACtB;QACF,KAAK;UACHA,KAAK,CAAC,aAAa,GAAG;UACtB;QACF,KAAK;UACHA,KAAK,CAAC,aAAa,GAAG;UACtB;QACF,KAAK;UAGH;QACF,KAAK;UACHA,KAAK,CAAC,aAAa,GAAG;UACtB;QACF,KAAK;UACHA,KAAK,CAAC,aAAa,GAAG;UACtB;MACJ;IACF;EACF;EAEA,IAAI,CAACZ,aAAA,KAAkB,CAACa,KAAA,CAAMC,OAAO,CAACd,aAAA,KAAkB,CAACA,aAAA,EAAee,QAAA,CAASb,IAAA,CAAKG,IAAI,IAAI;IAC5F,IAAI,YAAYH,IAAA,IAAQA,IAAA,CAAKe,MAAM,IAAIf,IAAA,CAAKG,IAAI,KAAK,YAAY;MAC/D;MACA;MACA;MACA;MACAO,KAAK,CAAC,uBAAuB,GAAG,GAAGM,MAAA,CAAOhB,IAAA,CAAKe,MAAM,IAAI,MAAM;IACjE;EACF;EAEA,IAAIE,iBAAA,GAA4B;EAChC,KAAK,MAAMC,GAAA,IAAOC,MAAA,CAAOC,IAAI,CAACV,KAAA,GAAQ;IACpC;IACAO,iBAAA,IAAqB,GAAGC,GAAA,KAAQR,KAAK,CAACQ,GAAA,CAAI,GAAG;EAC/C;EACA,MAAMG,gBAAA,GAAmBJ,iBAAA,EAAmBK,MAAA,GAAS,WAAWL,iBAAA,GAAoB,GAAG;EAEvF,OAAO;IACLf,gBAAA,EAAkBA,gBAAA,IAAoBD,gBAAA;IACtCgB,iBAAA;IACAI;EACF;AACF","ignoreList":[]}