{"version":3,"file":"list.js","names":["v4","uuidv4","ListHTMLConverterAsync","list","node","nodesToHTML","providedStyleTag","children","nodes","join","tag","listType","listitem","parent","providedCSSString","hasSubLists","some","child","type","uuid","checked","value"],"sources":["../../../../../../src/features/converters/lexicalToHtml/async/converters/list.ts"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid'\n\nimport type { SerializedListItemNode, SerializedListNode } from '../../../../../nodeTypes.js'\nimport type { HTMLConvertersAsync } from '../types.js'\n\nexport const ListHTMLConverterAsync: HTMLConvertersAsync<\n  SerializedListItemNode | SerializedListNode\n> = {\n  list: async ({ node, nodesToHTML, providedStyleTag }) => {\n    const children = (\n      await nodesToHTML({\n        nodes: node.children,\n      })\n    ).join('')\n\n    return `<${node.tag}${providedStyleTag} class=\"list-${node.listType}\">${children}</${node.tag}>`\n  },\n  listitem: async ({ node, nodesToHTML, parent, providedCSSString }) => {\n    const hasSubLists = node.children.some((child) => child.type === 'list')\n\n    const children = (\n      await nodesToHTML({\n        nodes: node.children,\n      })\n    ).join('')\n\n    if ('listType' in parent && parent?.listType === 'check') {\n      const uuid = uuidv4()\n      return `<li\n          aria-checked=\"${node.checked ? 'true' : 'false'}\"\n          class=\"list-item-checkbox${node.checked ? ' list-item-checkbox-checked' : ' list-item-checkbox-unchecked'}${hasSubLists ? ' nestedListItem' : ''}\"\n          role=\"checkbox\"\n          style=\"list-style-type: none;${providedCSSString}\"\n          tabIndex=\"-1\"\n          value=\"${node.value}\"\n        >\n          ${\n            hasSubLists\n              ? children\n              : `<input${node.checked ? ' checked' : ''} id=\"${uuid}\" readOnly=\"true\" type=\"checkbox\" />\n            <label htmlFor=\"${uuid}\">${children}</label>\n            <br />`\n          }\n        </li>`\n    } else {\n      return `<li\n          class=\"${hasSubLists ? 'nestedListItem' : ''}\"\n          style=\"${hasSubLists ? `list-style-type: none;${providedCSSString}` : providedCSSString}\"\n          value=\"${node.value}\"\n        >${children}</li>`\n    }\n  },\n}\n"],"mappings":"AAAA,SAASA,EAAA,IAAMC,MAAM,QAAQ;AAK7B,OAAO,MAAMC,sBAAA,GAET;EACFC,IAAA,EAAM,MAAAA,CAAO;IAAEC,IAAI;IAAEC,WAAW;IAAEC;EAAgB,CAAE;IAClD,MAAMC,QAAA,GAAW,CACf,MAAMF,WAAA,CAAY;MAChBG,KAAA,EAAOJ,IAAA,CAAKG;IACd,EAAC,EACDE,IAAI,CAAC;IAEP,OAAO,IAAIL,IAAA,CAAKM,GAAG,GAAGJ,gBAAA,gBAAgCF,IAAA,CAAKO,QAAQ,KAAKJ,QAAA,KAAaH,IAAA,CAAKM,GAAG,GAAG;EAClG;EACAE,QAAA,EAAU,MAAAA,CAAO;IAAER,IAAI;IAAEC,WAAW;IAAEQ,MAAM;IAAEC;EAAiB,CAAE;IAC/D,MAAMC,WAAA,GAAcX,IAAA,CAAKG,QAAQ,CAACS,IAAI,CAAEC,KAAA,IAAUA,KAAA,CAAMC,IAAI,KAAK;IAEjE,MAAMX,QAAA,GAAW,CACf,MAAMF,WAAA,CAAY;MAChBG,KAAA,EAAOJ,IAAA,CAAKG;IACd,EAAC,EACDE,IAAI,CAAC;IAEP,IAAI,cAAcI,MAAA,IAAUA,MAAA,EAAQF,QAAA,KAAa,SAAS;MACxD,MAAMQ,IAAA,GAAOlB,MAAA;MACb,OAAO;0BACaG,IAAA,CAAKgB,OAAO,GAAG,SAAS;qCACbhB,IAAA,CAAKgB,OAAO,GAAG,gCAAgC,kCAAkCL,WAAA,GAAc,oBAAoB;;yCAE/GD,iBAAA;;mBAEtBV,IAAA,CAAKiB,KAAK;;YAGjBN,WAAA,GACIR,QAAA,GACA,SAASH,IAAA,CAAKgB,OAAO,GAAG,aAAa,UAAUD,IAAA;8BACjCA,IAAA,KAASZ,QAAA;mBACpB;cAEL;IACV,OAAO;MACL,OAAO;mBACMQ,WAAA,GAAc,mBAAmB;mBACjCA,WAAA,GAAc,yBAAyBD,iBAAA,EAAmB,GAAGA,iBAAA;mBAC7DV,IAAA,CAAKiB,KAAK;WAClBd,QAAA,OAAe;IACtB;EACF;AACF","ignoreList":[]}