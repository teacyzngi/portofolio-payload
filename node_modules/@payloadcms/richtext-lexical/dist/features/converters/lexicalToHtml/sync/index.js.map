{"version":3,"file":"index.js","names":["hasText","findConverterForNode","defaultHTMLConverters","convertLexicalToHTML","className","converters","data","disableContainer","disableIndent","disableTextAlign","finalConverters","defaultConverters","html","convertLexicalNodesToHTML","nodes","root","children","parent","join","unknownConverter","unknown","htmlArray","i","node","converterForNode","providedCSSString","providedStyleTag","nodeHTML","converted","childIndex","nodesToHTML","args","push","error","console","filter","Boolean"],"sources":["../../../../../src/features/converters/lexicalToHtml/sync/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-console */\nimport type { SerializedEditorState, SerializedLexicalNode } from 'lexical'\n\nimport type { SerializedLexicalNodeWithParent } from '../shared/types.js'\nimport type { HTMLConverter, HTMLConverters, HTMLConvertersFunction } from './types.js'\n\nimport { hasText } from '../../../../validate/hasText.js'\nimport { findConverterForNode } from '../shared/findConverterForNode.js'\nimport { defaultHTMLConverters } from './defaultConverters.js'\n\nexport type ConvertLexicalToHTMLArgs = {\n  /**\n   * Override class names for the container.\n   */\n  className?: string\n  converters?: HTMLConverters | HTMLConvertersFunction\n  data: SerializedEditorState\n  /**\n   * If true, removes the container div wrapper.\n   */\n  disableContainer?: boolean\n  /**\n   * If true, disables indentation globally. If an array, disables for specific node `type` values.\n   */\n  disableIndent?: boolean | string[]\n  /**\n   * If true, disables text alignment globally. If an array, disables for specific node `type` values.\n   */\n  disableTextAlign?: boolean | string[]\n}\n\nexport function convertLexicalToHTML({\n  className,\n  converters,\n  data,\n  disableContainer,\n  disableIndent,\n  disableTextAlign,\n}: ConvertLexicalToHTMLArgs): string {\n  if (hasText(data)) {\n    let finalConverters: HTMLConverters = {}\n    if (converters) {\n      if (typeof converters === 'function') {\n        finalConverters = converters({ defaultConverters: defaultHTMLConverters })\n      } else {\n        finalConverters = converters\n      }\n    } else {\n      finalConverters = defaultHTMLConverters\n    }\n\n    const html = convertLexicalNodesToHTML({\n      converters: finalConverters,\n      disableIndent,\n      disableTextAlign,\n      nodes: data?.root?.children,\n      parent: data?.root,\n    }).join('')\n\n    if (disableContainer) {\n      return html\n    } else {\n      return `<div class=\"${className ?? 'payload-richtext'}\">${html}</div>`\n    }\n  }\n  if (disableContainer) {\n    return ''\n  } else {\n    return `<div class=\"${className ?? 'payload-richtext'}\"></div>`\n  }\n}\n\nexport function convertLexicalNodesToHTML({\n  converters,\n  disableIndent,\n  disableTextAlign,\n  nodes,\n  parent,\n}: {\n  converters: HTMLConverters\n  disableIndent?: boolean | string[]\n  disableTextAlign?: boolean | string[]\n  nodes: SerializedLexicalNode[]\n  parent: SerializedLexicalNodeWithParent\n}): string[] {\n  const unknownConverter: HTMLConverter<any> = converters.unknown as HTMLConverter<any>\n\n  const htmlArray: string[] = []\n\n  let i = -1\n  for (const node of nodes) {\n    i++\n    const { converterForNode, providedCSSString, providedStyleTag } = findConverterForNode({\n      converters,\n      disableIndent,\n      disableTextAlign,\n      node,\n      unknownConverter,\n    })\n\n    try {\n      let nodeHTML: string\n\n      if (converterForNode) {\n        const converted =\n          typeof converterForNode === 'function'\n            ? converterForNode({\n                childIndex: i,\n                converters,\n                node,\n                nodesToHTML: (args) => {\n                  return convertLexicalNodesToHTML({\n                    converters: args.converters ?? converters,\n                    disableIndent: args.disableIndent ?? disableIndent,\n                    disableTextAlign: args.disableTextAlign ?? disableTextAlign,\n                    nodes: args.nodes,\n                    parent: args.parent ?? {\n                      ...node,\n                      parent,\n                    },\n                  })\n                },\n                parent,\n                providedCSSString,\n                providedStyleTag,\n              })\n            : converterForNode\n        nodeHTML = converted\n      } else {\n        nodeHTML = '<span>unknown node</span>'\n      }\n\n      htmlArray.push(nodeHTML)\n    } catch (error) {\n      console.error('Error converting lexical node to HTML:', error, 'node:', node)\n      htmlArray.push('')\n    }\n  }\n\n  return htmlArray.filter(Boolean)\n}\n"],"mappings":"AAAA,wDACA,+BAMA,SAASA,OAAO,QAAQ;AACxB,SAASC,oBAAoB,QAAQ;AACrC,SAASC,qBAAqB,QAAQ;AAuBtC,OAAO,SAASC,qBAAqB;EACnCC,SAAS;EACTC,UAAU;EACVC,IAAI;EACJC,gBAAgB;EAChBC,aAAa;EACbC;AAAgB,CACS;EACzB,IAAIT,OAAA,CAAQM,IAAA,GAAO;IACjB,IAAII,eAAA,GAAkC,CAAC;IACvC,IAAIL,UAAA,EAAY;MACd,IAAI,OAAOA,UAAA,KAAe,YAAY;QACpCK,eAAA,GAAkBL,UAAA,CAAW;UAAEM,iBAAA,EAAmBT;QAAsB;MAC1E,OAAO;QACLQ,eAAA,GAAkBL,UAAA;MACpB;IACF,OAAO;MACLK,eAAA,GAAkBR,qBAAA;IACpB;IAEA,MAAMU,IAAA,GAAOC,yBAAA,CAA0B;MACrCR,UAAA,EAAYK,eAAA;MACZF,aAAA;MACAC,gBAAA;MACAK,KAAA,EAAOR,IAAA,EAAMS,IAAA,EAAMC,QAAA;MACnBC,MAAA,EAAQX,IAAA,EAAMS;IAChB,GAAGG,IAAI,CAAC;IAER,IAAIX,gBAAA,EAAkB;MACpB,OAAOK,IAAA;IACT,OAAO;MACL,OAAO,eAAeR,SAAA,IAAa,uBAAuBQ,IAAA,QAAY;IACxE;EACF;EACA,IAAIL,gBAAA,EAAkB;IACpB,OAAO;EACT,OAAO;IACL,OAAO,eAAeH,SAAA,IAAa,4BAA4B;EACjE;AACF;AAEA,OAAO,SAASS,0BAA0B;EACxCR,UAAU;EACVG,aAAa;EACbC,gBAAgB;EAChBK,KAAK;EACLG;AAAM,CAOP;EACC,MAAME,gBAAA,GAAuCd,UAAA,CAAWe,OAAO;EAE/D,MAAMC,SAAA,GAAsB,EAAE;EAE9B,IAAIC,CAAA,GAAI,CAAC;EACT,KAAK,MAAMC,IAAA,IAAQT,KAAA,EAAO;IACxBQ,CAAA;IACA,MAAM;MAAEE,gBAAgB;MAAEC,iBAAiB;MAAEC;IAAgB,CAAE,GAAGzB,oBAAA,CAAqB;MACrFI,UAAA;MACAG,aAAA;MACAC,gBAAA;MACAc,IAAA;MACAJ;IACF;IAEA,IAAI;MACF,IAAIQ,QAAA;MAEJ,IAAIH,gBAAA,EAAkB;QACpB,MAAMI,SAAA,GACJ,OAAOJ,gBAAA,KAAqB,aACxBA,gBAAA,CAAiB;UACfK,UAAA,EAAYP,CAAA;UACZjB,UAAA;UACAkB,IAAA;UACAO,WAAA,EAAcC,IAAA;YACZ,OAAOlB,yBAAA,CAA0B;cAC/BR,UAAA,EAAY0B,IAAA,CAAK1B,UAAU,IAAIA,UAAA;cAC/BG,aAAA,EAAeuB,IAAA,CAAKvB,aAAa,IAAIA,aAAA;cACrCC,gBAAA,EAAkBsB,IAAA,CAAKtB,gBAAgB,IAAIA,gBAAA;cAC3CK,KAAA,EAAOiB,IAAA,CAAKjB,KAAK;cACjBG,MAAA,EAAQc,IAAA,CAAKd,MAAM,IAAI;gBACrB,GAAGM,IAAI;gBACPN;cACF;YACF;UACF;UACAA,MAAA;UACAQ,iBAAA;UACAC;QACF,KACAF,gBAAA;QACNG,QAAA,GAAWC,SAAA;MACb,OAAO;QACLD,QAAA,GAAW;MACb;MAEAN,SAAA,CAAUW,IAAI,CAACL,QAAA;IACjB,EAAE,OAAOM,KAAA,EAAO;MACdC,OAAA,CAAQD,KAAK,CAAC,0CAA0CA,KAAA,EAAO,SAASV,IAAA;MACxEF,SAAA,CAAUW,IAAI,CAAC;IACjB;EACF;EAEA,OAAOX,SAAA,CAAUc,MAAM,CAACC,OAAA;AAC1B","ignoreList":[]}