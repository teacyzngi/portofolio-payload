{"version":3,"file":"useEnabledRelationships.js","names":["useConfig","useEntityVisibility","React","useEnabledRelationships","options","collectionSlugsBlacklist","collectionSlugsWhitelist","uploads","config","collections","visibleEntities","result","useMemo","enabledCollectionSlugs","enabledCollections","whitelistSet","Set","blacklistSet","collection","slug","admin","enableRichTextRelationship","upload","includes","has","push"],"sources":["../../../../../src/features/relationship/client/utils/useEnabledRelationships.tsx"],"sourcesContent":["'use client'\nimport type { ClientCollectionConfig, CollectionSlug } from 'payload'\n\nimport { useConfig, useEntityVisibility } from '@payloadcms/ui'\nimport * as React from 'react'\n\ntype UseEnabledRelationshipsOptions = {\n  collectionSlugsBlacklist?: string[]\n  collectionSlugsWhitelist?: string[]\n  uploads?: boolean\n}\n\ntype UseEnabledRelationshipsResult = {\n  enabledCollections: ClientCollectionConfig[]\n  enabledCollectionSlugs: CollectionSlug[]\n}\n\nexport const useEnabledRelationships = (\n  options?: UseEnabledRelationshipsOptions,\n): UseEnabledRelationshipsResult => {\n  const { collectionSlugsBlacklist, collectionSlugsWhitelist, uploads = false } = options || {}\n  const {\n    config: { collections },\n  } = useConfig()\n  const { visibleEntities } = useEntityVisibility()\n\n  const result = React.useMemo(() => {\n    const enabledCollectionSlugs: string[] = []\n    const enabledCollections: ClientCollectionConfig[] = []\n    const whitelistSet = collectionSlugsWhitelist ? new Set(collectionSlugsWhitelist) : null\n    const blacklistSet = collectionSlugsBlacklist ? new Set(collectionSlugsBlacklist) : null\n\n    for (const collection of collections) {\n      const {\n        slug,\n        admin: { enableRichTextRelationship },\n        upload,\n      } = collection\n\n      // Check visibility\n      if (!visibleEntities?.collections.includes(slug)) {\n        continue\n      }\n\n      // Check rich text relationship and upload settings\n      if (uploads) {\n        if (!enableRichTextRelationship || !upload) {\n          continue\n        }\n      } else {\n        if (upload || !enableRichTextRelationship) {\n          continue\n        }\n      }\n\n      // Check whitelist (if provided, only include slugs in the whitelist)\n      if (whitelistSet && !whitelistSet.has(slug)) {\n        continue\n      }\n\n      // Check blacklist (if provided, exclude slugs in the blacklist)\n      if (blacklistSet && blacklistSet.has(slug)) {\n        continue\n      }\n\n      enabledCollectionSlugs.push(slug)\n      enabledCollections.push(collection)\n    }\n\n    return { enabledCollections, enabledCollectionSlugs }\n  }, [collections, visibleEntities, uploads, collectionSlugsWhitelist, collectionSlugsBlacklist])\n\n  return result\n}\n"],"mappings":"AAAA;;AAGA,SAASA,SAAS,EAAEC,mBAAmB,QAAQ;AAC/C,YAAYC,KAAA,MAAW;AAavB,OAAO,MAAMC,uBAAA,GACXC,OAAA;EAEA,MAAM;IAAEC,wBAAwB;IAAEC,wBAAwB;IAAEC,OAAA,GAAU;EAAK,CAAE,GAAGH,OAAA,IAAW,CAAC;EAC5F,MAAM;IACJI,MAAA,EAAQ;MAAEC;IAAW;EAAE,CACxB,GAAGT,SAAA;EACJ,MAAM;IAAEU;EAAe,CAAE,GAAGT,mBAAA;EAE5B,MAAMU,MAAA,GAAST,KAAA,CAAMU,OAAO,CAAC;IAC3B,MAAMC,sBAAA,GAAmC,EAAE;IAC3C,MAAMC,kBAAA,GAA+C,EAAE;IACvD,MAAMC,YAAA,GAAeT,wBAAA,GAA2B,IAAIU,GAAA,CAAIV,wBAAA,IAA4B;IACpF,MAAMW,YAAA,GAAeZ,wBAAA,GAA2B,IAAIW,GAAA,CAAIX,wBAAA,IAA4B;IAEpF,KAAK,MAAMa,UAAA,IAAcT,WAAA,EAAa;MACpC,MAAM;QACJU,IAAI;QACJC,KAAA,EAAO;UAAEC;QAA0B,CAAE;QACrCC;MAAM,CACP,GAAGJ,UAAA;MAEJ;MACA,IAAI,CAACR,eAAA,EAAiBD,WAAA,CAAYc,QAAA,CAASJ,IAAA,GAAO;QAChD;MACF;MAEA;MACA,IAAIZ,OAAA,EAAS;QACX,IAAI,CAACc,0BAAA,IAA8B,CAACC,MAAA,EAAQ;UAC1C;QACF;MACF,OAAO;QACL,IAAIA,MAAA,IAAU,CAACD,0BAAA,EAA4B;UACzC;QACF;MACF;MAEA;MACA,IAAIN,YAAA,IAAgB,CAACA,YAAA,CAAaS,GAAG,CAACL,IAAA,GAAO;QAC3C;MACF;MAEA;MACA,IAAIF,YAAA,IAAgBA,YAAA,CAAaO,GAAG,CAACL,IAAA,GAAO;QAC1C;MACF;MAEAN,sBAAA,CAAuBY,IAAI,CAACN,IAAA;MAC5BL,kBAAA,CAAmBW,IAAI,CAACP,UAAA;IAC1B;IAEA,OAAO;MAAEJ,kBAAA;MAAoBD;IAAuB;EACtD,GAAG,CAACJ,WAAA,EAAaC,eAAA,EAAiBH,OAAA,EAASD,wBAAA,EAA0BD,wBAAA,CAAyB;EAE9F,OAAOM,MAAA;AACT","ignoreList":[]}