{"version":3,"file":"feature.server.js","names":["createServerFeature","i18n","TextStateFeature","feature","props","ClientFeature","clientFeatureProps","state","key"],"sources":["../../../src/features/textState/feature.server.ts"],"sourcesContent":["import type { PropertiesHyphenFallback } from 'csstype'\nimport type { Prettify } from 'ts-essentials'\n\nimport { createServerFeature } from '../../utilities/createServerFeature.js'\nimport { i18n } from './i18n.js'\n\n// extracted from https://github.com/facebook/lexical/pull/7294\nexport type StyleObject = Prettify<{\n  [K in keyof PropertiesHyphenFallback]?:\n    | Extract<PropertiesHyphenFallback[K], string>\n    // This is simplified to not deal with arrays or numbers.\n    // This is an example after all!\n    | undefined\n}>\n\nexport type StateValues = { [stateValue: string]: { css: StyleObject; label: string } }\n\nexport type TextStateFeatureProps = {\n  /**\n   * The keys of the top-level object (stateKeys) represent the attributes that the textNode can have (e.g., color).\n   * The values of the top-level object (stateValues) represent the values that the attribute can have (e.g., red, blue, etc.).\n   * Within the stateValue, you can define inline styles and labels.\n   *\n   * @note Because this is a common use case, we provide a defaultColors object with colors that\n   * look good in both dark and light mode, which you can use or adapt to your liking.\n   *\n   *\n   *\n   * @example\n   * import { defaultColors } from '@payloadcms/richtext-lexical'\n   *\n   * state: {\n   *   color: {\n   *     ...defaultColors.background,\n   *     ...defaultColors.text,\n   *     // fancy gradients!\n   *     galaxy: { label: 'Galaxy', css: { background: 'linear-gradient(to right, #0000ff, #ff0000)', color: 'white' } },\n   *     sunset: { label: 'Sunset', css: { background: 'linear-gradient(to top, #ff5f6d, #6a3093)' } },\n   *    },\n   *    // You can have both colored and underlined text at the same time.\n   *    // If you don't want that, you should group them within the same key.\n   *    // (just like I did with defaultColors and my fancy gradients)\n   *    underline: {\n   *      'solid': { label: 'Solid', css: { 'text-decoration': 'underline', 'text-underline-offset': '4px' } },\n   *      // You'll probably want to use the CSS light-dark() utility.\n   *      'yellow-dashed': { label: 'Yellow Dashed', css: { 'text-decoration': 'underline dashed', 'text-decoration-color': 'light-dark(#EAB308,yellow)', 'text-underline-offset': '4px' } },\n   *    },\n   * }\n   *\n   */\n  state: { [stateKey: string]: StateValues }\n}\n\n/**\n * Allows you to store key-value attributes within TextNodes and define inline styles for each combination.\n * Inline styles are not part of the editorState, reducing the JSON size and allowing you to easily migrate or adapt styles later.\n *\n * This feature can be used, among other things, to add colors to text.\n *\n * For more information and examples, see the JSdocs for the \"state\" property that this feature receives as a parameter.\n *\n * @experimental There may be breaking changes to this API\n */\nexport const TextStateFeature = createServerFeature<\n  TextStateFeatureProps,\n  TextStateFeatureProps,\n  TextStateFeatureProps\n>({\n  feature: ({ props }) => {\n    return {\n      ClientFeature: '@payloadcms/richtext-lexical/client#TextStateFeatureClient',\n      clientFeatureProps: {\n        state: props?.state,\n      },\n      i18n,\n    }\n  },\n  key: 'textState',\n})\n"],"mappings":"AAGA,SAASA,mBAAmB,QAAQ;AACpC,SAASC,IAAI,QAAQ;AAiDrB;;;;;;;;;;AAUA,OAAO,MAAMC,gBAAA,GAAmBF,mBAAA,CAI9B;EACAG,OAAA,EAASA,CAAC;IAAEC;EAAK,CAAE;IACjB,OAAO;MACLC,aAAA,EAAe;MACfC,kBAAA,EAAoB;QAClBC,KAAA,EAAOH,KAAA,EAAOG;MAChB;MACAN;IACF;EACF;EACAO,GAAA,EAAK;AACP","ignoreList":[]}