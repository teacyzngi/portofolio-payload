{"version":3,"file":"converter.js","names":["convertLexicalPluginNodesToLexical","ListConverter","converter","converters","lexicalPluginNode","quiet","type","children","lexicalPluginNodes","parentNodeType","listType","tag","version","nodeTypes"],"sources":["../../../../../../../src/features/migrations/lexicalPluginToLexical/converter/converters/list/converter.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type { SerializedListNode } from '../../../../../lists/plugin/index.js'\nimport type { LexicalPluginNodeConverter } from '../../types.js'\n\nimport { convertLexicalPluginNodesToLexical } from '../../index.js'\n\nexport const ListConverter: LexicalPluginNodeConverter = {\n  converter({ converters, lexicalPluginNode, quiet }) {\n    return {\n      ...lexicalPluginNode,\n      type: 'list',\n      children: convertLexicalPluginNodesToLexical({\n        converters,\n        lexicalPluginNodes: lexicalPluginNode.children,\n        parentNodeType: 'list',\n        quiet,\n      }),\n      listType: (lexicalPluginNode as any)?.listType || 'number',\n      tag: (lexicalPluginNode as any)?.tag || 'ol',\n      version: 1,\n    } as const as SerializedListNode\n  },\n  nodeTypes: ['list'],\n}\n"],"mappings":"AAAA,uDAKA,SAASA,kCAAkC,QAAQ;AAEnD,OAAO,MAAMC,aAAA,GAA4C;EACvDC,UAAU;IAAEC,UAAU;IAAEC,iBAAiB;IAAEC;EAAK,CAAE;IAChD,OAAO;MACL,GAAGD,iBAAiB;MACpBE,IAAA,EAAM;MACNC,QAAA,EAAUP,kCAAA,CAAmC;QAC3CG,UAAA;QACAK,kBAAA,EAAoBJ,iBAAA,CAAkBG,QAAQ;QAC9CE,cAAA,EAAgB;QAChBJ;MACF;MACAK,QAAA,EAAUN,iBAAC,EAA2BM,QAAA,IAAY;MAClDC,GAAA,EAAKP,iBAAC,EAA2BO,GAAA,IAAO;MACxCC,OAAA,EAAS;IACX;EACF;EACAC,SAAA,EAAW,CAAC;AACd","ignoreList":[]}