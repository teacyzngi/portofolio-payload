{"version":3,"file":"index.js","names":["$findMatchingParent","$getSelection","$isRangeSelection","LinkIcon","getSelectedNode","createClientFeature","toolbarFeatureButtonsGroupWithItems","LinkMarkdownTransformer","AutoLinkNode","$isLinkNode","LinkNode","TOGGLE_LINK_COMMAND","AutoLinkPlugin","ClickableLinkPlugin","FloatingLinkEditorPlugin","TOGGLE_LINK_WITH_MODAL_COMMAND","LinkPlugin","toolbarGroups","ChildComponent","isActive","selection","selectedNode","linkParent","isEnabled","getTextContent","length","key","label","i18n","t","onSelect","editor","selectedText","selectedNodes","getEditorState","read","getNodes","linkFields","doc","dispatchCommand","fields","text","order","LinkFeatureClient","props","markdownTransformers","nodes","disableAutoLinks","filter","Boolean","plugins","Component","position","sanitizedClientFeatureProps","toolbarFixed","groups","toolbarInline"],"sources":["../../../../src/features/link/client/index.tsx"],"sourcesContent":["'use client'\n\nimport type { Klass, LexicalNode } from 'lexical'\n\nimport { $findMatchingParent } from '@lexical/utils'\nimport { $getSelection, $isRangeSelection } from 'lexical'\n\nimport type { ToolbarGroup } from '../../toolbars/types.js'\nimport type { ClientFeature } from '../../typesClient.js'\nimport type { LinkFields } from '../nodes/types.js'\nimport type { ExclusiveLinkCollectionsProps } from '../server/index.js'\n\nimport { LinkIcon } from '../../../lexical/ui/icons/Link/index.js'\nimport { getSelectedNode } from '../../../lexical/utils/getSelectedNode.js'\nimport { createClientFeature } from '../../../utilities/createClientFeature.js'\nimport { toolbarFeatureButtonsGroupWithItems } from '../../shared/toolbar/featureButtonsGroup.js'\nimport { LinkMarkdownTransformer } from '../markdownTransformer.js'\nimport { AutoLinkNode } from '../nodes/AutoLinkNode.js'\nimport { $isLinkNode, LinkNode, TOGGLE_LINK_COMMAND } from '../nodes/LinkNode.js'\nimport { AutoLinkPlugin } from './plugins/autoLink/index.js'\nimport { ClickableLinkPlugin } from './plugins/clickableLink/index.js'\nimport { FloatingLinkEditorPlugin } from './plugins/floatingLinkEditor/index.js'\nimport { TOGGLE_LINK_WITH_MODAL_COMMAND } from './plugins/floatingLinkEditor/LinkEditor/commands.js'\nimport { LinkPlugin } from './plugins/link/index.js'\n\nexport type ClientProps = {\n  defaultLinkType?: string\n  defaultLinkURL?: string\n  disableAutoLinks?: 'creationOnly' | true\n} & ExclusiveLinkCollectionsProps\n\nconst toolbarGroups: ToolbarGroup[] = [\n  toolbarFeatureButtonsGroupWithItems([\n    {\n      ChildComponent: LinkIcon,\n      isActive: ({ selection }) => {\n        if ($isRangeSelection(selection)) {\n          const selectedNode = getSelectedNode(selection)\n          const linkParent = $findMatchingParent(selectedNode, $isLinkNode)\n          return linkParent != null\n        }\n        return false\n      },\n      isEnabled: ({ selection }) => {\n        return !!($isRangeSelection(selection) && $getSelection()?.getTextContent()?.length)\n      },\n      key: 'link',\n      label: ({ i18n }) => {\n        return i18n.t('lexical:link:label')\n      },\n      onSelect: ({ editor, isActive }) => {\n        if (!isActive) {\n          let selectedText: string | undefined\n          let selectedNodes: LexicalNode[] = []\n          editor.getEditorState().read(() => {\n            selectedText = $getSelection()?.getTextContent()\n            // We need to selected nodes here before the drawer opens, as clicking around in the drawer may change the original selection\n            selectedNodes = $getSelection()?.getNodes() ?? []\n          })\n\n          if (!selectedText?.length) {\n            return\n          }\n\n          const linkFields: Partial<LinkFields> = {\n            doc: null,\n          }\n\n          editor.dispatchCommand(TOGGLE_LINK_WITH_MODAL_COMMAND, {\n            fields: linkFields,\n            selectedNodes,\n            text: selectedText,\n          })\n        } else {\n          // remove link\n          editor.dispatchCommand(TOGGLE_LINK_COMMAND, null)\n        }\n      },\n      order: 1,\n    },\n  ]),\n]\n\nexport const LinkFeatureClient = createClientFeature<ClientProps>(({ props }) => ({\n  markdownTransformers: [LinkMarkdownTransformer],\n  nodes: [LinkNode, props?.disableAutoLinks === true ? null : AutoLinkNode].filter(\n    Boolean,\n  ) as Array<Klass<LexicalNode>>,\n  plugins: [\n    {\n      Component: LinkPlugin,\n      position: 'normal',\n    },\n    props?.disableAutoLinks === true || props?.disableAutoLinks === 'creationOnly'\n      ? null\n      : {\n          Component: AutoLinkPlugin,\n          position: 'normal',\n        },\n    {\n      Component: ClickableLinkPlugin,\n      position: 'normal',\n    },\n    {\n      Component: FloatingLinkEditorPlugin,\n      position: 'floatingAnchorElem',\n    },\n  ].filter(Boolean) as ClientFeature<ClientProps>['plugins'],\n  sanitizedClientFeatureProps: props,\n  toolbarFixed: {\n    groups: toolbarGroups,\n  },\n  toolbarInline: {\n    groups: toolbarGroups,\n  },\n}))\n"],"mappings":"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","ignoreList":[]}