{"version":3,"file":"index.js","names":["c","_c","useLexicalComposerContext","mergeRegister","$getSelection","$isElementNode","$isRangeSelection","COMMAND_PRIORITY_LOW","PASTE_COMMAND","useEffect","validateUrl","$toggleLink","LinkNode","TOGGLE_LINK_COMMAND","LinkPlugin","t0","$","clientProps","editor","t1","t2","defaultLinkType","defaultLinkURL","hasNodes","Error","registerCommand","payload","fields","linkType","url","event","selection","isCollapsed","ClipboardEvent","clipboardData","clipboardText","getData","getNodes","some","_temp","linkFields","doc","newTab","dispatchCommand","text","preventDefault","node"],"sources":["../../../../../../src/features/link/client/plugins/link/index.tsx"],"sourcesContent":["'use client'\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext.js'\nimport { mergeRegister } from '@lexical/utils'\nimport {\n  $getSelection,\n  $isElementNode,\n  $isRangeSelection,\n  COMMAND_PRIORITY_LOW,\n  PASTE_COMMAND,\n} from 'lexical'\nimport { useEffect } from 'react'\n\nimport type { PluginComponent } from '../../../../typesClient.js'\nimport type { LinkFields } from '../../../nodes/types.js'\nimport type { ClientProps } from '../../index.js'\nimport type { LinkPayload } from '../floatingLinkEditor/types.js'\n\nimport { validateUrl } from '../../../../../lexical/utils/url.js'\nimport { $toggleLink, LinkNode, TOGGLE_LINK_COMMAND } from '../../../nodes/LinkNode.js'\n\nexport const LinkPlugin: PluginComponent<ClientProps> = ({ clientProps }) => {\n  const [editor] = useLexicalComposerContext()\n\n  useEffect(() => {\n    if (!editor.hasNodes([LinkNode])) {\n      throw new Error('LinkPlugin: LinkNode not registered on editor')\n    }\n    return mergeRegister(\n      editor.registerCommand(\n        TOGGLE_LINK_COMMAND,\n        (payload: LinkPayload) => {\n          if (payload === null) {\n            $toggleLink(null)\n            return true\n          }\n          if (!payload.fields?.linkType) {\n            payload.fields.linkType = clientProps.defaultLinkType as any\n          }\n          if (!payload.fields?.url) {\n            payload.fields.url = clientProps.defaultLinkURL as any\n          }\n          $toggleLink(payload as { fields: LinkFields } & LinkPayload)\n          return true\n        },\n        COMMAND_PRIORITY_LOW,\n      ),\n      editor.registerCommand(\n        PASTE_COMMAND,\n        (event) => {\n          const selection = $getSelection()\n          if (\n            !$isRangeSelection(selection) ||\n            selection.isCollapsed() ||\n            !(event instanceof ClipboardEvent) ||\n            event.clipboardData == null\n          ) {\n            return false\n          }\n          const clipboardText = event.clipboardData.getData('text')\n          if (!validateUrl(clipboardText)) {\n            return false\n          }\n          // If we select nodes that are elements then avoid applying the link.\n          if (!selection.getNodes().some((node) => $isElementNode(node))) {\n            const linkFields: LinkFields = {\n              doc: null,\n              linkType: 'custom',\n              newTab: false,\n              url: clipboardText,\n            }\n            editor.dispatchCommand(TOGGLE_LINK_COMMAND, {\n              fields: linkFields,\n              text: null,\n            })\n            event.preventDefault()\n            return true\n          }\n          return false\n        },\n        COMMAND_PRIORITY_LOW,\n      ),\n    )\n  }, [clientProps.defaultLinkType, clientProps.defaultLinkURL, editor])\n\n  return null\n}\n"],"mappings":"AAAA;;AAAA,SAAAA,CAAA,IAAAC,EAAA;AACA,SAASC,yBAAyB,QAAQ;AAC1C,SAASC,aAAa,QAAQ;AAC9B,SACEC,aAAa,EACbC,cAAc,EACdC,iBAAiB,EACjBC,oBAAoB,EACpBC,aAAa,QACR;AACP,SAASC,SAAS,QAAQ;AAO1B,SAASC,WAAW,QAAQ;AAC5B,SAASC,WAAW,EAAEC,QAAQ,EAAEC,mBAAmB,QAAQ;AAE3D,OAAO,MAAMC,UAAA,GAA2CC,EAAA;EAAA,MAAAC,CAAA,GAAAf,EAAA;EAAC;IAAAgB;EAAA,IAAAF,EAAe;EACtE,OAAAG,MAAA,IAAiBhB,yBAAA;EAAA,IAAAiB,EAAA;EAAA,IAAAC,EAAA;EAAA,IAAAJ,CAAA,QAAAC,WAAA,CAAAI,eAAA,IAAAL,CAAA,QAAAC,WAAA,CAAAK,cAAA,IAAAN,CAAA,QAAAE,MAAA;IAEPC,EAAA,GAAAA,CAAA;MAAA,KACHD,MAAA,CAAAK,QAAA,EAAAX,QAAA,CAA0B;QAAA,UAAAY,KAAA,CACb;MAAA;MAAA,OAEXrB,aAAA,CACLe,MAAA,CAAAO,eAAA,CAAAZ,mBAAA,EAAAa,OAAA;QAAA,IAGQA,OAAA,SAAY;UACdf,WAAA,KAAY;UAAA;QAAA;QAAA,KAGTe,OAAA,CAAAC,MAAA,EAAAC,QAAA;UACHF,OAAA,CAAAC,MAAA,CAAAC,QAAA,GAA0BX,WAAA,CAAAI,eAAA;QAAA;QAAA,KAEvBK,OAAA,CAAAC,MAAA,EAAAE,GAAA;UACHH,OAAA,CAAAC,MAAA,CAAAE,GAAA,GAAqBZ,WAAA,CAAAK,cAAA;QAAA;QAEvBX,WAAA,CAAYe,OAAA;QAAA;MAAA,GAAAnB,oBAGd,GAEFW,MAAA,CAAAO,eAAA,CAAAjB,aAAA,EAAAsB,KAAA;QAGI,MAAAC,SAAA,GAAkB3B,aAAA;QAAA,IAEhB,CAACE,iBAAA,CAAkByB,SAAA,KACnBA,SAAA,CAAAC,WAAA,CAAqB,OACnBF,KAAA,YAAAG,cAA8B,KAChCH,KAAA,CAAAI,aAAA,QAAuB;UAAA;QAAA;QAIzB,MAAAC,aAAA,GAAsBL,KAAA,CAAAI,aAAA,CAAAE,OAAA,CAA4B;QAAA,KAC7C1B,WAAA,CAAYyB,aAAA;UAAA;QAAA;QAAA,KAIZJ,SAAA,CAAAM,QAAA,CAAkB,EAAAC,IAAA,CAAAC,KAAiC;UACtD,MAAAC,UAAA;YAAAC,GAAA;YAAAb,QAAA,EAEY;YAAAc,MAAA;YAAAb,GAAA,EAELM;UAAA;UAEPjB,MAAA,CAAAyB,eAAA,CAAA9B,mBAAA;YAAAc,MAAA,EACUa,UAAA;YAAAI,IAAA;UAAA,CAEV;UACAd,KAAA,CAAAe,cAAA,CAAoB;UAAA;QAAA;QAAA;MAAA,GAAAtC,oBAKxB;IAAA;IAGHa,EAAA,IAACH,WAAA,CAAAI,eAAA,EAA6BJ,WAAA,CAAAK,cAAA,EAA4BJ,MAAA;IAAOF,CAAA,MAAAC,WAAA,CAAAI,eAAA;IAAAL,CAAA,MAAAC,WAAA,CAAAK,cAAA;IAAAN,CAAA,MAAAE,MAAA;IAAAF,CAAA,MAAAG,EAAA;IAAAH,CAAA,MAAAI,EAAA;EAAA;IAAAD,EAAA,GAAAH,CAAA;IAAAI,EAAA,GAAAJ,CAAA;EAAA;EA3DpEP,SAAA,CAAUU,EA2DV,EAAGC,EAAiE;EAAA;AAAA,CAGtE;AAjEwD,SAAAmB,MAAAO,IAAA;EAAA,OA2CLzC,cAAA,CAAeyC,IAAA;AAAA","ignoreList":[]}