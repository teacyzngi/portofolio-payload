{"version":3,"file":"LinkNode.js","names":["addClassNamesToElement","isHTMLAnchorElement","ObjectID","$applyNodeReplacement","$createTextNode","$getSelection","$isElementNode","$isRangeSelection","createCommand","ElementNode","SUPPORTED_URL_PROTOCOLS","Set","LinkNode","__fields","__id","constructor","id","fields","linkType","newTab","key","clone","node","__key","getType","importDOM","a","conversion","$convertAnchorElement","priority","importJSON","serializedNode","$createLinkNode","updateFromJSON","version","doc","value","default","toHexString","canBeEmpty","canInsertTextAfter","canInsertTextBefore","createDOM","config","element","document","createElement","href","sanitizeUrl","url","target","rel","manageRel","theme","link","exportJSON","getFields","returnObject","type","getID","extractWithChild","child","selection","destination","anchorNode","anchor","getNode","focusNode","focus","isParentOf","getTextContent","length","getLatest","insertNewAfter","restoreSelection","getParentOrThrow","linkNode","append","isInline","parsedUrl","URL","has","protocol","e","setFields","writable","getWritable","setID","updateDOM","prevNode","removeAttribute","domNode","content","textContent","getAttribute","$isLinkNode","TOGGLE_LINK_COMMAND","$toggleLink","payload","selectedNodes","nodes","extract","forEach","parent","getParent","children","getChildren","insertBefore","remove","firstNode","$getLinkAncestor","text","getLastChild","prevParent","is","getPreviousSibling","insertAfter","$getAncestor","ancestor","predicate","input","action","result","mutableInput","includes","re","RegExp","replace","trim"],"sources":["../../../../src/features/link/nodes/LinkNode.ts"],"sourcesContent":["import type {\n  BaseSelection,\n  DOMConversionMap,\n  DOMConversionOutput,\n  EditorConfig,\n  ElementNode as ElementNodeType,\n  LexicalCommand,\n  LexicalNode,\n  LexicalUpdateJSON,\n  NodeKey,\n  RangeSelection,\n} from 'lexical'\n\nimport { addClassNamesToElement, isHTMLAnchorElement } from '@lexical/utils'\nimport ObjectID from 'bson-objectid'\nimport {\n  $applyNodeReplacement,\n  $createTextNode,\n  $getSelection,\n  $isElementNode,\n  $isRangeSelection,\n  createCommand,\n  ElementNode,\n} from 'lexical'\n\nimport type { LinkPayload } from '../client/plugins/floatingLinkEditor/types.js'\nimport type { LinkFields, SerializedLinkNode } from './types.js'\n\nconst SUPPORTED_URL_PROTOCOLS = new Set(['http:', 'https:', 'mailto:', 'sms:', 'tel:'])\n\n/** @noInheritDoc */\nexport class LinkNode extends ElementNode {\n  __fields: LinkFields\n  __id: string\n\n  constructor({\n    id,\n    fields = {\n      linkType: 'custom',\n      newTab: false,\n    },\n    key,\n  }: {\n    fields?: LinkFields\n    id: string\n    key?: NodeKey\n  }) {\n    super(key)\n    this.__fields = fields\n    this.__id = id\n  }\n\n  static override clone(node: LinkNode): LinkNode {\n    return new LinkNode({\n      id: node.__id,\n      fields: node.__fields,\n      key: node.__key,\n    })\n  }\n\n  static override getType(): string {\n    return 'link'\n  }\n\n  static override importDOM(): DOMConversionMap | null {\n    return {\n      a: (node: Node) => ({\n        conversion: $convertAnchorElement,\n        priority: 1,\n      }),\n    }\n  }\n\n  static override importJSON(serializedNode: SerializedLinkNode): LinkNode {\n    const node = $createLinkNode({}).updateFromJSON(serializedNode)\n\n    /**\n     * @todo remove this in 4.0\n     */\n    if (\n      serializedNode.version === 1 &&\n      typeof serializedNode.fields?.doc?.value === 'object' &&\n      serializedNode.fields?.doc?.value?.id\n    ) {\n      serializedNode.fields.doc.value = serializedNode.fields.doc.value.id\n      serializedNode.version = 2\n    }\n\n    if (serializedNode.version === 2 && !serializedNode.id) {\n      serializedNode.id = new ObjectID.default().toHexString()\n      serializedNode.version = 3\n    }\n    return node\n  }\n\n  override canBeEmpty(): false {\n    return false\n  }\n\n  override canInsertTextAfter(): false {\n    return false\n  }\n\n  override canInsertTextBefore(): false {\n    return false\n  }\n\n  override createDOM(config: EditorConfig): HTMLAnchorElement {\n    const element = document.createElement('a')\n    if (this.__fields?.linkType === 'custom') {\n      element.href = this.sanitizeUrl(this.__fields.url ?? '')\n    }\n    if (this.__fields?.newTab ?? false) {\n      element.target = '_blank'\n    }\n\n    if (this.__fields?.newTab === true && this.__fields?.linkType === 'custom') {\n      element.rel = manageRel(element.rel, 'add', 'noopener')\n    }\n\n    addClassNamesToElement(element, config.theme.link)\n    return element\n  }\n\n  override exportJSON(): SerializedLinkNode {\n    const fields = this.getFields()\n\n    if (fields?.linkType === 'internal') {\n      delete fields.url\n    } else if (fields?.linkType === 'custom') {\n      delete fields.doc\n    }\n\n    const returnObject: SerializedLinkNode = {\n      ...super.exportJSON(),\n      type: 'link',\n      fields,\n      version: 3,\n    }\n    const id = this.getID()\n    if (id) {\n      returnObject.id = id\n    }\n    return returnObject\n  }\n\n  override extractWithChild(\n    child: LexicalNode,\n    selection: BaseSelection,\n    destination: 'clone' | 'html',\n  ): boolean {\n    if (!$isRangeSelection(selection)) {\n      return false\n    }\n\n    const anchorNode = selection.anchor.getNode()\n    const focusNode = selection.focus.getNode()\n\n    return (\n      this.isParentOf(anchorNode) &&\n      this.isParentOf(focusNode) &&\n      selection.getTextContent().length > 0\n    )\n  }\n\n  getFields(): LinkFields {\n    return this.getLatest().__fields\n  }\n\n  getID(): string {\n    return this.getLatest().__id\n  }\n\n  override insertNewAfter(\n    selection: RangeSelection,\n    restoreSelection = true,\n  ): ElementNodeType | null {\n    const element = this.getParentOrThrow().insertNewAfter(selection, restoreSelection)\n    if ($isElementNode(element)) {\n      const linkNode = $createLinkNode({ fields: this.__fields })\n      element.append(linkNode)\n      return linkNode\n    }\n    return null\n  }\n\n  override isInline(): true {\n    return true\n  }\n\n  sanitizeUrl(url: string): string {\n    try {\n      const parsedUrl = new URL(url)\n\n      if (!SUPPORTED_URL_PROTOCOLS.has(parsedUrl.protocol)) {\n        return 'about:blank'\n      }\n    } catch (e) {\n      return 'https://'\n    }\n    return url\n  }\n\n  setFields(fields: LinkFields): this {\n    const writable = this.getWritable()\n    writable.__fields = fields\n    return writable\n  }\n\n  setID(id: string): this {\n    const writable = this.getWritable()\n    writable.__id = id\n    return writable\n  }\n\n  override updateDOM(prevNode: this, anchor: HTMLAnchorElement, config: EditorConfig): boolean {\n    const url = this.__fields?.url\n    const newTab = this.__fields?.newTab\n    if (url != null && url !== prevNode.__fields?.url && this.__fields?.linkType === 'custom') {\n      anchor.href = url\n    }\n    if (this.__fields?.linkType === 'internal' && prevNode.__fields?.linkType === 'custom') {\n      anchor.removeAttribute('href')\n    }\n\n    // TODO: not 100% sure why we're settign rel to '' - revisit\n    // Start rel config here, then check newTab below\n    if (anchor.rel == null) {\n      anchor.rel = ''\n    }\n\n    if (newTab !== prevNode.__fields?.newTab) {\n      if (newTab ?? false) {\n        anchor.target = '_blank'\n        if (this.__fields?.linkType === 'custom') {\n          anchor.rel = manageRel(anchor.rel, 'add', 'noopener')\n        }\n      } else {\n        anchor.removeAttribute('target')\n        anchor.rel = manageRel(anchor.rel, 'remove', 'noopener')\n      }\n    }\n\n    return false\n  }\n\n  override updateFromJSON(serializedNode: LexicalUpdateJSON<SerializedLinkNode>): this {\n    return super\n      .updateFromJSON(serializedNode)\n      .setFields(serializedNode.fields)\n      .setID(serializedNode.id as string)\n  }\n}\n\nfunction $convertAnchorElement(domNode: Node): DOMConversionOutput {\n  let node: LinkNode | null = null\n  if (isHTMLAnchorElement(domNode)) {\n    const content = domNode.textContent\n    if (content !== null && content !== '') {\n      node = $createLinkNode({\n        id: new ObjectID.default().toHexString(),\n        fields: {\n          doc: null,\n          linkType: 'custom',\n          newTab: domNode.getAttribute('target') === '_blank',\n          url: domNode.getAttribute('href') ?? '',\n        },\n      })\n    }\n  }\n  return { node }\n}\n\nexport function $createLinkNode({ id, fields }: { fields?: LinkFields; id?: string }): LinkNode {\n  return $applyNodeReplacement(\n    new LinkNode({\n      id: id ?? new ObjectID.default().toHexString(),\n      fields,\n    }),\n  )\n}\n\nexport function $isLinkNode(node: LexicalNode | null | undefined): node is LinkNode {\n  return node instanceof LinkNode\n}\n\nexport const TOGGLE_LINK_COMMAND: LexicalCommand<LinkPayload | null> =\n  createCommand('TOGGLE_LINK_COMMAND')\n\nexport function $toggleLink(payload: ({ fields: LinkFields } & LinkPayload) | null): void {\n  const selection = $getSelection()\n\n  if (!$isRangeSelection(selection) && (payload === null || !payload.selectedNodes?.length)) {\n    return\n  }\n  const nodes = $isRangeSelection(selection)\n    ? selection.extract()\n    : payload === null\n      ? []\n      : payload.selectedNodes\n\n  if (payload === null) {\n    // Remove LinkNodes\n    nodes?.forEach((node) => {\n      const parent = node.getParent()\n\n      if ($isLinkNode(parent)) {\n        const children = parent.getChildren()\n\n        children.forEach((child) => {\n          parent.insertBefore(child)\n        })\n\n        parent.remove()\n      }\n    })\n\n    return\n  }\n  // Add or merge LinkNodes\n  if (nodes?.length === 1) {\n    const firstNode = nodes[0]!\n    // if the first node is a LinkNode or if its\n    // parent is a LinkNode, we update the URL, target and rel.\n    const linkNode: LinkNode | null = $isLinkNode(firstNode)\n      ? firstNode\n      : $getLinkAncestor(firstNode)\n    if (linkNode !== null) {\n      linkNode.setFields(payload.fields)\n\n      if (payload.text != null && payload.text !== linkNode.getTextContent()) {\n        // remove all children and add child with new textcontent:\n        linkNode.append($createTextNode(payload.text))\n        linkNode.getChildren().forEach((child) => {\n          if (child !== linkNode.getLastChild()) {\n            child.remove()\n          }\n        })\n      }\n      return\n    }\n  }\n\n  let prevParent: ElementNodeType | LinkNode | null = null\n  let linkNode: LinkNode | null = null\n\n  nodes?.forEach((node) => {\n    const parent = node.getParent()\n\n    if (parent === linkNode || parent === null || ($isElementNode(node) && !node.isInline())) {\n      return\n    }\n\n    if ($isLinkNode(parent)) {\n      linkNode = parent\n      parent.setFields(payload.fields)\n      if (payload.text != null && payload.text !== parent.getTextContent()) {\n        // remove all children and add child with new textcontent:\n        parent.append($createTextNode(payload.text))\n        parent.getChildren().forEach((child) => {\n          if (child !== parent.getLastChild()) {\n            child.remove()\n          }\n        })\n      }\n      return\n    }\n\n    if (!parent.is(prevParent)) {\n      prevParent = parent\n      linkNode = $createLinkNode({ fields: payload.fields })\n\n      if ($isLinkNode(parent)) {\n        if (node.getPreviousSibling() === null) {\n          parent.insertBefore(linkNode)\n        } else {\n          parent.insertAfter(linkNode)\n        }\n      } else {\n        node.insertBefore(linkNode)\n      }\n    }\n\n    if ($isLinkNode(node)) {\n      if (node.is(linkNode)) {\n        return\n      }\n      if (linkNode !== null) {\n        const children = node.getChildren()\n        linkNode.append(...children)\n      }\n\n      node.remove()\n      return\n    }\n\n    if (linkNode !== null) {\n      linkNode.append(node)\n    }\n  })\n}\n\nfunction $getLinkAncestor(node: LexicalNode): LinkNode | null {\n  return $getAncestor(node, (ancestor) => $isLinkNode(ancestor)) as LinkNode\n}\n\nfunction $getAncestor(\n  node: LexicalNode,\n  predicate: (ancestor: LexicalNode) => boolean,\n): LexicalNode | null {\n  let parent: LexicalNode | null = node\n  while (parent !== null) {\n    parent = parent.getParent()\n    if (parent === null || predicate(parent)) {\n      break\n    }\n  }\n  return parent\n}\n\nfunction manageRel(input: string, action: 'add' | 'remove', value: string): string {\n  let result: string\n  let mutableInput = `${input}`\n  if (action === 'add') {\n    // if we somehow got out of sync - clean up\n    if (mutableInput.includes(value)) {\n      const re = new RegExp(value, 'g')\n      mutableInput = mutableInput.replace(re, '').trim()\n    }\n    mutableInput = mutableInput.trim()\n    result = mutableInput.length === 0 ? `${value}` : `${mutableInput} ${value}`\n  } else {\n    const re = new RegExp(value, 'g')\n    result = mutableInput.replace(re, '').trim()\n  }\n  return result\n}\n"],"mappings":"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","ignoreList":[]}