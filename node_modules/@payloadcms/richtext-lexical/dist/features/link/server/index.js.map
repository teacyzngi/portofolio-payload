{"version":3,"file":"index.js","names":["escapeHTML","sanitizeFields","createServerFeature","convertLexicalNodesToHTML","createNode","LinkMarkdownTransformer","AutoLinkNode","LinkNode","linkPopulationPromiseHOC","i18n","transformExtraFields","linkValidation","LinkFeature","feature","config","_config","isRoot","parentIsLocalized","props","validRelationships","collections","map","c","slug","_transformedFields","fields","enabledCollections","disabledCollections","maxDepth","sanitizedFields","requireFieldLevelRichTextEditor","sanitizedFieldsWithoutText","filter","field","name","linkTypeField","linkURLField","defaultLinkType","defaultValue","undefined","defaultLinkURL","ClientFeature","clientFeatureProps","disableAutoLinks","generateSchemaMap","Array","isArray","length","schemaMap","Map","set","markdownTransformers","nodes","converters","html","converter","currentDepth","depth","draft","node","overrideAccess","parent","req","showHiddenFields","childrenText","lexicalNodes","children","href","url","linkType","doc","value","String","id","newTab","nodeTypes","getType","validations","getSubFields","getSubFieldsData","graphQLPopulationPromises","Boolean","sanitizedServerFeatureProps","key"],"sources":["../../../../src/features/link/server/index.ts"],"sourcesContent":["import type {\n  CollectionSlug,\n  Config,\n  Field,\n  FieldAffectingData,\n  FieldSchemaMap,\n  SanitizedConfig,\n} from 'payload'\n\nimport escapeHTML from 'escape-html'\nimport { sanitizeFields } from 'payload'\n\nimport type { NodeWithHooks } from '../../typesServer.js'\nimport type { ClientProps } from '../client/index.js'\n\nimport { createServerFeature } from '../../../utilities/createServerFeature.js'\nimport { convertLexicalNodesToHTML } from '../../converters/lexicalToHtml_deprecated/converter/index.js'\nimport { createNode } from '../../typeUtilities.js'\nimport { LinkMarkdownTransformer } from '../markdownTransformer.js'\nimport { AutoLinkNode } from '../nodes/AutoLinkNode.js'\nimport { LinkNode } from '../nodes/LinkNode.js'\nimport { linkPopulationPromiseHOC } from './graphQLPopulationPromise.js'\nimport { i18n } from './i18n.js'\nimport { transformExtraFields } from './transformExtraFields.js'\nimport { linkValidation } from './validate.js'\n\nexport type ExclusiveLinkCollectionsProps =\n  | {\n      /**\n       * The collections that should be disabled for internal linking. Overrides the `enableRichTextLink` property in the collection config.\n       * When this property is set, `enabledCollections` will not be available.\n       **/\n      disabledCollections?: CollectionSlug[]\n\n      // Ensures that enabledCollections is not available when disabledCollections is set\n      enabledCollections?: never\n    }\n  | {\n      // Ensures that disabledCollections is not available when enabledCollections is set\n      disabledCollections?: never\n\n      /**\n       * The collections that should be enabled for internal linking. Overrides the `enableRichTextLink` property in the collection config\n       * When this property is set, `disabledCollections` will not be available.\n       **/\n      enabledCollections?: CollectionSlug[]\n    }\n\nexport type LinkFeatureServerProps = {\n  /**\n   * Disables the automatic creation of links from URLs pasted into the editor, as well\n   * as auto link nodes.\n   *\n   * If set to 'creationOnly', only the creation of new auto link nodes will be disabled.\n   * Existing auto link nodes will still be editable.\n   *\n   * @default false\n   */\n  disableAutoLinks?: 'creationOnly' | true\n  /**\n   * A function or array defining additional fields for the link feature. These will be\n   * displayed in the link editor drawer.\n   */\n  fields?:\n    | ((args: {\n        config: SanitizedConfig\n        defaultFields: FieldAffectingData[]\n      }) => (Field | FieldAffectingData)[])\n    | Field[]\n  /**\n   * Sets a maximum population depth for the internal doc default field of link, regardless of the remaining depth when the field is reached.\n   * This behaves exactly like the maxDepth properties of relationship and upload fields.\n   *\n   * {@link https://payloadcms.com/docs/getting-started/concepts#field-level-max-depth}\n   */\n  maxDepth?: number\n} & ExclusiveLinkCollectionsProps\n\nexport const LinkFeature = createServerFeature<\n  LinkFeatureServerProps,\n  LinkFeatureServerProps,\n  ClientProps\n>({\n  feature: async ({ config: _config, isRoot, parentIsLocalized, props }) => {\n    if (!props) {\n      props = {}\n    }\n    const validRelationships = _config.collections.map((c) => c.slug) || []\n\n    const _transformedFields = transformExtraFields(\n      props.fields ? props.fields : null,\n      _config,\n      props.enabledCollections,\n      props.disabledCollections,\n      props.maxDepth,\n    )\n\n    const sanitizedFields = await sanitizeFields({\n      config: _config as unknown as Config,\n      fields: _transformedFields,\n      parentIsLocalized,\n      requireFieldLevelRichTextEditor: isRoot,\n      validRelationships,\n    })\n    props.fields = sanitizedFields\n\n    // the text field is not included in the node data.\n    // Thus, for tasks like validation, we do not want to pass it a text field in the schema which will never have data.\n    // Otherwise, it will cause a validation error (field is required).\n    const sanitizedFieldsWithoutText = sanitizedFields.filter(\n      (field) => !('name' in field) || field.name !== 'text',\n    )\n\n    let linkTypeField: Field | null = null\n    let linkURLField: Field | null = null\n\n    for (const field of sanitizedFields) {\n      if ('name' in field && field.name === 'linkType') {\n        linkTypeField = field\n      }\n\n      if ('name' in field && field.name === 'url') {\n        linkURLField = field\n      }\n    }\n\n    const defaultLinkType = linkTypeField\n      ? 'defaultValue' in linkTypeField && typeof linkTypeField.defaultValue === 'string'\n        ? linkTypeField.defaultValue\n        : 'custom'\n      : undefined\n\n    const defaultLinkURL = linkURLField\n      ? 'defaultValue' in linkURLField && typeof linkURLField.defaultValue === 'string'\n        ? linkURLField.defaultValue\n        : 'https://'\n      : undefined\n\n    return {\n      ClientFeature: '@payloadcms/richtext-lexical/client#LinkFeatureClient',\n      clientFeatureProps: {\n        defaultLinkType,\n        defaultLinkURL,\n        disableAutoLinks: props.disableAutoLinks,\n        disabledCollections: props.disabledCollections,\n        enabledCollections: props.enabledCollections,\n      } as ClientProps,\n      generateSchemaMap: () => {\n        if (!sanitizedFields || !Array.isArray(sanitizedFields) || sanitizedFields.length === 0) {\n          return null\n        }\n\n        const schemaMap: FieldSchemaMap = new Map()\n        schemaMap.set('fields', {\n          fields: sanitizedFields,\n        })\n\n        return schemaMap\n      },\n      i18n,\n      markdownTransformers: [LinkMarkdownTransformer],\n      nodes: [\n        props?.disableAutoLinks === true\n          ? null\n          : createNode({\n              converters: {\n                html: {\n                  converter: async ({\n                    converters,\n                    currentDepth,\n                    depth,\n                    draft,\n                    node,\n                    overrideAccess,\n                    parent,\n                    req,\n                    showHiddenFields,\n                  }) => {\n                    const childrenText = await convertLexicalNodesToHTML({\n                      converters,\n                      currentDepth,\n                      depth,\n                      draft,\n                      lexicalNodes: node.children,\n                      overrideAccess,\n                      parent: {\n                        ...node,\n                        parent,\n                      },\n                      req,\n                      showHiddenFields,\n                    })\n\n                    let href: string = node.fields.url ?? ''\n                    if (node.fields.linkType === 'internal') {\n                      href =\n                        typeof node.fields.doc?.value !== 'object'\n                          ? String(node.fields.doc?.value)\n                          : String(node.fields.doc?.value?.id)\n                    }\n\n                    return `<a href=\"${href}\"${node.fields.newTab ? ' rel=\"noopener noreferrer\" target=\"_blank\"' : ''}>${childrenText}</a>`\n                  },\n                  nodeTypes: [AutoLinkNode.getType()],\n                },\n              },\n              node: AutoLinkNode,\n              // Since AutoLinkNodes are just internal links, they need no hooks or graphQL population promises\n              validations: [linkValidation(props, sanitizedFieldsWithoutText)],\n            }),\n        createNode({\n          converters: {\n            html: {\n              converter: async ({\n                converters,\n                currentDepth,\n                depth,\n                draft,\n                node,\n                overrideAccess,\n                parent,\n                req,\n                showHiddenFields,\n              }) => {\n                const childrenText = await convertLexicalNodesToHTML({\n                  converters,\n                  currentDepth,\n                  depth,\n                  draft,\n                  lexicalNodes: node.children,\n                  overrideAccess,\n                  parent: {\n                    ...node,\n                    parent,\n                  },\n                  req,\n                  showHiddenFields,\n                })\n\n                const href: string =\n                  node.fields.linkType === 'custom'\n                    ? escapeHTML(node.fields.url)\n                    : (node.fields.doc?.value as string)\n\n                return `<a href=\"${href}\"${node.fields.newTab ? ' rel=\"noopener noreferrer\" target=\"_blank\"' : ''}>${childrenText}</a>`\n              },\n              nodeTypes: [LinkNode.getType()],\n            },\n          },\n          getSubFields: () => {\n            return sanitizedFieldsWithoutText\n          },\n          getSubFieldsData: ({ node }) => {\n            return node?.fields\n          },\n          graphQLPopulationPromises: [linkPopulationPromiseHOC(props)],\n          node: LinkNode,\n          validations: [linkValidation(props, sanitizedFieldsWithoutText)],\n        }),\n      ].filter(Boolean) as Array<NodeWithHooks>,\n      sanitizedServerFeatureProps: props,\n    }\n  },\n  key: 'link',\n})\n"],"mappings":"AASA,OAAOA,UAAA,MAAgB;AACvB,SAASC,cAAc,QAAQ;AAK/B,SAASC,mBAAmB,QAAQ;AACpC,SAASC,yBAAyB,QAAQ;AAC1C,SAASC,UAAU,QAAQ;AAC3B,SAASC,uBAAuB,QAAQ;AACxC,SAASC,YAAY,QAAQ;AAC7B,SAASC,QAAQ,QAAQ;AACzB,SAASC,wBAAwB,QAAQ;AACzC,SAASC,IAAI,QAAQ;AACrB,SAASC,oBAAoB,QAAQ;AACrC,SAASC,cAAc,QAAQ;AAsD/B,OAAO,MAAMC,WAAA,GAAcV,mBAAA,CAIzB;EACAW,OAAA,EAAS,MAAAA,CAAO;IAAEC,MAAA,EAAQC,OAAO;IAAEC,MAAM;IAAEC,iBAAiB;IAAEC;EAAK,CAAE;IACnE,IAAI,CAACA,KAAA,EAAO;MACVA,KAAA,GAAQ,CAAC;IACX;IACA,MAAMC,kBAAA,GAAqBJ,OAAA,CAAQK,WAAW,CAACC,GAAG,CAAEC,CAAA,IAAMA,CAAA,CAAEC,IAAI,KAAK,EAAE;IAEvE,MAAMC,kBAAA,GAAqBd,oBAAA,CACzBQ,KAAA,CAAMO,MAAM,GAAGP,KAAA,CAAMO,MAAM,GAAG,MAC9BV,OAAA,EACAG,KAAA,CAAMQ,kBAAkB,EACxBR,KAAA,CAAMS,mBAAmB,EACzBT,KAAA,CAAMU,QAAQ;IAGhB,MAAMC,eAAA,GAAkB,MAAM5B,cAAA,CAAe;MAC3Ca,MAAA,EAAQC,OAAA;MACRU,MAAA,EAAQD,kBAAA;MACRP,iBAAA;MACAa,+BAAA,EAAiCd,MAAA;MACjCG;IACF;IACAD,KAAA,CAAMO,MAAM,GAAGI,eAAA;IAEf;IACA;IACA;IACA,MAAME,0BAAA,GAA6BF,eAAA,CAAgBG,MAAM,CACtDC,KAAA,IAAU,EAAE,UAAUA,KAAI,KAAMA,KAAA,CAAMC,IAAI,KAAK;IAGlD,IAAIC,aAAA,GAA8B;IAClC,IAAIC,YAAA,GAA6B;IAEjC,KAAK,MAAMH,KAAA,IAASJ,eAAA,EAAiB;MACnC,IAAI,UAAUI,KAAA,IAASA,KAAA,CAAMC,IAAI,KAAK,YAAY;QAChDC,aAAA,GAAgBF,KAAA;MAClB;MAEA,IAAI,UAAUA,KAAA,IAASA,KAAA,CAAMC,IAAI,KAAK,OAAO;QAC3CE,YAAA,GAAeH,KAAA;MACjB;IACF;IAEA,MAAMI,eAAA,GAAkBF,aAAA,GACpB,kBAAkBA,aAAA,IAAiB,OAAOA,aAAA,CAAcG,YAAY,KAAK,WACvEH,aAAA,CAAcG,YAAY,GAC1B,WACFC,SAAA;IAEJ,MAAMC,cAAA,GAAiBJ,YAAA,GACnB,kBAAkBA,YAAA,IAAgB,OAAOA,YAAA,CAAaE,YAAY,KAAK,WACrEF,YAAA,CAAaE,YAAY,GACzB,aACFC,SAAA;IAEJ,OAAO;MACLE,aAAA,EAAe;MACfC,kBAAA,EAAoB;QAClBL,eAAA;QACAG,cAAA;QACAG,gBAAA,EAAkBzB,KAAA,CAAMyB,gBAAgB;QACxChB,mBAAA,EAAqBT,KAAA,CAAMS,mBAAmB;QAC9CD,kBAAA,EAAoBR,KAAA,CAAMQ;MAC5B;MACAkB,iBAAA,EAAmBA,CAAA;QACjB,IAAI,CAACf,eAAA,IAAmB,CAACgB,KAAA,CAAMC,OAAO,CAACjB,eAAA,KAAoBA,eAAA,CAAgBkB,MAAM,KAAK,GAAG;UACvF,OAAO;QACT;QAEA,MAAMC,SAAA,GAA4B,IAAIC,GAAA;QACtCD,SAAA,CAAUE,GAAG,CAAC,UAAU;UACtBzB,MAAA,EAAQI;QACV;QAEA,OAAOmB,SAAA;MACT;MACAvC,IAAA;MACA0C,oBAAA,EAAsB,CAAC9C,uBAAA,CAAwB;MAC/C+C,KAAA,EAAO,CACLlC,KAAA,EAAOyB,gBAAA,KAAqB,OACxB,OACAvC,UAAA,CAAW;QACTiD,UAAA,EAAY;UACVC,IAAA,EAAM;YACJC,SAAA,EAAW,MAAAA,CAAO;cAChBF,UAAU;cACVG,YAAY;cACZC,KAAK;cACLC,KAAK;cACLC,IAAI;cACJC,cAAc;cACdC,MAAM;cACNC,GAAG;cACHC;YAAgB,CACjB;cACC,MAAMC,YAAA,GAAe,MAAM7D,yBAAA,CAA0B;gBACnDkD,UAAA;gBACAG,YAAA;gBACAC,KAAA;gBACAC,KAAA;gBACAO,YAAA,EAAcN,IAAA,CAAKO,QAAQ;gBAC3BN,cAAA;gBACAC,MAAA,EAAQ;kBACN,GAAGF,IAAI;kBACPE;gBACF;gBACAC,GAAA;gBACAC;cACF;cAEA,IAAII,IAAA,GAAeR,IAAA,CAAKlC,MAAM,CAAC2C,GAAG,IAAI;cACtC,IAAIT,IAAA,CAAKlC,MAAM,CAAC4C,QAAQ,KAAK,YAAY;gBACvCF,IAAA,GACE,OAAOR,IAAA,CAAKlC,MAAM,CAAC6C,GAAG,EAAEC,KAAA,KAAU,WAC9BC,MAAA,CAAOb,IAAA,CAAKlC,MAAM,CAAC6C,GAAG,EAAEC,KAAA,IACxBC,MAAA,CAAOb,IAAA,CAAKlC,MAAM,CAAC6C,GAAG,EAAEC,KAAA,EAAOE,EAAA;cACvC;cAEA,OAAO,YAAYN,IAAA,IAAQR,IAAA,CAAKlC,MAAM,CAACiD,MAAM,GAAG,+CAA+C,MAAMV,YAAA,MAAkB;YACzH;YACAW,SAAA,EAAW,CAACrE,YAAA,CAAasE,OAAO;UAClC;QACF;QACAjB,IAAA,EAAMrD,YAAA;QACN;QACAuE,WAAA,EAAa,CAAClE,cAAA,CAAeO,KAAA,EAAOa,0BAAA;MACtC,IACJ3B,UAAA,CAAW;QACTiD,UAAA,EAAY;UACVC,IAAA,EAAM;YACJC,SAAA,EAAW,MAAAA,CAAO;cAChBF,UAAU;cACVG,YAAY;cACZC,KAAK;cACLC,KAAK;cACLC,IAAI;cACJC,cAAc;cACdC,MAAM;cACNC,GAAG;cACHC;YAAgB,CACjB;cACC,MAAMC,YAAA,GAAe,MAAM7D,yBAAA,CAA0B;gBACnDkD,UAAA;gBACAG,YAAA;gBACAC,KAAA;gBACAC,KAAA;gBACAO,YAAA,EAAcN,IAAA,CAAKO,QAAQ;gBAC3BN,cAAA;gBACAC,MAAA,EAAQ;kBACN,GAAGF,IAAI;kBACPE;gBACF;gBACAC,GAAA;gBACAC;cACF;cAEA,MAAMI,IAAA,GACJR,IAAA,CAAKlC,MAAM,CAAC4C,QAAQ,KAAK,WACrBrE,UAAA,CAAW2D,IAAA,CAAKlC,MAAM,CAAC2C,GAAG,IACzBT,IAAA,CAAKlC,MAAM,CAAC6C,GAAG,EAAEC,KAAA;cAExB,OAAO,YAAYJ,IAAA,IAAQR,IAAA,CAAKlC,MAAM,CAACiD,MAAM,GAAG,+CAA+C,MAAMV,YAAA,MAAkB;YACzH;YACAW,SAAA,EAAW,CAACpE,QAAA,CAASqE,OAAO;UAC9B;QACF;QACAE,YAAA,EAAcA,CAAA;UACZ,OAAO/C,0BAAA;QACT;QACAgD,gBAAA,EAAkBA,CAAC;UAAEpB;QAAI,CAAE;UACzB,OAAOA,IAAA,EAAMlC,MAAA;QACf;QACAuD,yBAAA,EAA2B,CAACxE,wBAAA,CAAyBU,KAAA,EAAO;QAC5DyC,IAAA,EAAMpD,QAAA;QACNsE,WAAA,EAAa,CAAClE,cAAA,CAAeO,KAAA,EAAOa,0BAAA;MACtC,GACD,CAACC,MAAM,CAACiD,OAAA;MACTC,2BAAA,EAA6BhE;IAC/B;EACF;EACAiE,GAAA,EAAK;AACP","ignoreList":[]}