{"version":3,"file":"transformExtraFields.js","names":["getBaseFields","transformExtraFields","customFieldSchema","config","enabledCollections","disabledCollections","maxDepth","baseFields","fields","defaultFields","Array","isArray"],"sources":["../../../../src/features/link/server/transformExtraFields.ts"],"sourcesContent":["import type { CollectionSlug, Field, FieldAffectingData, SanitizedConfig } from 'payload'\n\nimport { getBaseFields } from './baseFields.js'\n\n/**\n * This function is run to enrich the basefields which every link has with potential, custom user-added fields.\n */\nexport function transformExtraFields(\n  customFieldSchema:\n    | ((args: {\n        config: SanitizedConfig\n        defaultFields: FieldAffectingData[]\n      }) => (Field | FieldAffectingData)[])\n    | Field[]\n    | null,\n  config: SanitizedConfig,\n  enabledCollections?: CollectionSlug[],\n  disabledCollections?: CollectionSlug[],\n  maxDepth?: number,\n): Field[] {\n  const baseFields: FieldAffectingData[] = getBaseFields(\n    config,\n    enabledCollections,\n    disabledCollections,\n    maxDepth,\n  )\n\n  let fields: (Field | FieldAffectingData)[]\n\n  if (typeof customFieldSchema === 'function') {\n    fields = customFieldSchema({ config, defaultFields: baseFields })\n  } else if (Array.isArray(customFieldSchema)) {\n    fields = customFieldSchema\n  } else {\n    fields = baseFields\n  }\n\n  return fields as Field[]\n}\n"],"mappings":"AAEA,SAASA,aAAa,QAAQ;AAE9B;;;AAGA,OAAO,SAASC,qBACdC,iBAMQ,EACRC,MAAuB,EACvBC,kBAAqC,EACrCC,mBAAsC,EACtCC,QAAiB;EAEjB,MAAMC,UAAA,GAAmCP,aAAA,CACvCG,MAAA,EACAC,kBAAA,EACAC,mBAAA,EACAC,QAAA;EAGF,IAAIE,MAAA;EAEJ,IAAI,OAAON,iBAAA,KAAsB,YAAY;IAC3CM,MAAA,GAASN,iBAAA,CAAkB;MAAEC,MAAA;MAAQM,aAAA,EAAeF;IAAW;EACjE,OAAO,IAAIG,KAAA,CAAMC,OAAO,CAACT,iBAAA,GAAoB;IAC3CM,MAAA,GAASN,iBAAA;EACX,OAAO;IACLM,MAAA,GAASD,UAAA;EACX;EAEA,OAAOC,MAAA;AACT","ignoreList":[]}