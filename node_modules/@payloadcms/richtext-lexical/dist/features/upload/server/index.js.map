{"version":3,"file":"index.js","names":["sanitizeFields","populate","createServerFeature","createNode","uploadPopulationPromiseHOC","i18n","UploadServerNode","uploadValidation","getAbsoluteURL","url","payload","startsWith","config","serverURL","UploadFeature","feature","_config","isRoot","parentIsLocalized","props","collections","clientProps","disabledCollections","enabledCollections","collection","hasExtraFields","fields","length","validRelationships","map","c","slug","collectionKey","requireFieldLevelRichTextEditor","ClientFeature","clientFeatureProps","generateSchemaMap","schemaMap","Map","set","nodes","converters","html","converter","currentDepth","depth","draft","node","overrideAccess","req","showHiddenFields","id","value","uploadDocument","collectionSlug","relationTo","data","key","ignored","console","error","mimeType","filename","sizes","Object","keys","width","height","pictureHTML","size","imageSize","filesize","imageSizeURL","nodeTypes","getType","getSubFields","allSubFields","collectionFields","concat","collectionFieldSchema","Array","isArray","getSubFieldsData","graphQLPopulationPromises","hooks","afterRead","populateArg","populationPromises","populateDepth","maxDepth","undefined","push","select","defaultPopulate","validations","sanitizedServerFeatureProps"],"sources":["../../../../src/features/upload/server/index.ts"],"sourcesContent":["import type {\n  Config,\n  Field,\n  FieldSchemaMap,\n  FileData,\n  FileSizeImproved,\n  Payload,\n  TypeWithID,\n  UploadCollectionSlug,\n} from 'payload'\n\nimport { sanitizeFields } from 'payload'\n\nimport type { UploadFeaturePropsClient } from '../client/index.js'\n\nimport { populate } from '../../../populateGraphQL/populate.js'\nimport { createServerFeature } from '../../../utilities/createServerFeature.js'\nimport { createNode } from '../../typeUtilities.js'\nimport { uploadPopulationPromiseHOC } from './graphQLPopulationPromise.js'\nimport { i18n } from './i18n.js'\nimport { UploadServerNode } from './nodes/UploadNode.js'\nimport { uploadValidation } from './validate.js'\n\nexport type ExclusiveUploadFeatureProps =\n  | {\n      /**\n       * The collections that should be disabled. Overrides the `enableRichTextRelationship` property in the collection config.\n       * When this property is set, `enabledCollections` will not be available.\n       **/\n      disabledCollections?: UploadCollectionSlug[]\n\n      // Ensures that enabledCollections is not available when disabledCollections is set\n      enabledCollections?: never\n    }\n  | {\n      // Ensures that disabledCollections is not available when enabledCollections is set\n      disabledCollections?: never\n\n      /**\n       * The collections that should be enabled. Overrides the `enableRichTextRelationship` property in the collection config\n       * When this property is set, `disabledCollections` will not be available.\n       **/\n      enabledCollections?: UploadCollectionSlug[]\n    }\n\nexport type UploadFeatureProps = {\n  collections?: {\n    [collection: UploadCollectionSlug]: {\n      fields: Field[]\n    }\n  }\n  /**\n   * Sets a maximum population depth for this upload (not the fields for this upload), regardless of the remaining depth when the respective field is reached.\n   * This behaves exactly like the maxDepth properties of relationship and upload fields.\n   *\n   * {@link https://payloadcms.com/docs/getting-started/concepts#field-level-max-depth}\n   */\n  maxDepth?: number\n} & ExclusiveUploadFeatureProps\n\n/**\n * Get the absolute URL for an upload URL by potentially prepending the serverURL\n */\nfunction getAbsoluteURL(url: string, payload: Payload): string {\n  return url?.startsWith('http') ? url : (payload?.config?.serverURL || '') + url\n}\n\nexport const UploadFeature = createServerFeature<\n  UploadFeatureProps,\n  UploadFeatureProps,\n  UploadFeaturePropsClient\n>({\n  feature: async ({ config: _config, isRoot, parentIsLocalized, props }) => {\n    if (!props) {\n      props = { collections: {} }\n    }\n\n    const clientProps: UploadFeaturePropsClient = {\n      collections: {},\n    }\n    if (props.disabledCollections) {\n      clientProps.disabledCollections = props.disabledCollections\n    }\n    if (props.enabledCollections) {\n      clientProps.enabledCollections = props.enabledCollections\n    }\n\n    if (props.collections) {\n      for (const collection in props.collections) {\n        clientProps.collections[collection] = {\n          hasExtraFields: props.collections[collection]!.fields.length >= 1,\n        }\n      }\n    }\n\n    const validRelationships = _config.collections.map((c) => c.slug) || []\n\n    for (const collectionKey in props.collections) {\n      const collection = props.collections[collectionKey]!\n      if (collection.fields?.length) {\n        collection.fields = await sanitizeFields({\n          config: _config as unknown as Config,\n          fields: collection.fields,\n          parentIsLocalized,\n          requireFieldLevelRichTextEditor: isRoot,\n          validRelationships,\n        })\n      }\n    }\n\n    return {\n      ClientFeature: '@payloadcms/richtext-lexical/client#UploadFeatureClient',\n      clientFeatureProps: clientProps,\n      generateSchemaMap: ({ props }) => {\n        if (!props?.collections) {\n          return null\n        }\n\n        const schemaMap: FieldSchemaMap = new Map()\n\n        for (const collectionKey in props.collections) {\n          const collection = props.collections[collectionKey]!\n          if (collection.fields?.length) {\n            schemaMap.set(collectionKey, {\n              fields: collection.fields,\n            })\n          }\n        }\n\n        return schemaMap\n      },\n      i18n,\n      nodes: [\n        createNode({\n          converters: {\n            html: {\n              converter: async ({\n                currentDepth,\n                depth,\n                draft,\n                node,\n                overrideAccess,\n                req,\n                showHiddenFields,\n              }) => {\n                // @ts-expect-error - for backwards-compatibility\n                const id = node?.value?.id || node?.value\n\n                if (req?.payload) {\n                  const uploadDocument: {\n                    value?: FileData & TypeWithID\n                  } = {}\n\n                  try {\n                    await populate({\n                      id,\n                      collectionSlug: node.relationTo,\n                      currentDepth,\n                      data: uploadDocument,\n                      depth,\n                      draft,\n                      key: 'value',\n                      overrideAccess,\n                      req,\n                      showHiddenFields,\n                    })\n                  } catch (ignored) {\n                    // eslint-disable-next-line no-console\n                    console.error(\n                      'Lexical upload node HTML converter: error fetching upload file',\n                      ignored,\n                      'Node:',\n                      node,\n                    )\n                    return `<img />`\n                  }\n\n                  const url = getAbsoluteURL(uploadDocument?.value?.url ?? '', req?.payload)\n\n                  /**\n                   * If the upload is not an image, return a link to the upload\n                   */\n                  if (!uploadDocument?.value?.mimeType?.startsWith('image')) {\n                    return `<a href=\"${url}\" rel=\"noopener noreferrer\">${uploadDocument.value?.filename}</a>`\n                  }\n\n                  /**\n                   * If the upload is a simple image with no different sizes, return a simple img tag\n                   */\n                  if (\n                    !uploadDocument?.value?.sizes ||\n                    !Object.keys(uploadDocument?.value?.sizes).length\n                  ) {\n                    return `<img src=\"${url}\" alt=\"${uploadDocument?.value?.filename}\" width=\"${uploadDocument?.value?.width}\"  height=\"${uploadDocument?.value?.height}\"/>`\n                  }\n\n                  /**\n                   * If the upload is an image with different sizes, return a picture element\n                   */\n                  let pictureHTML = '<picture>'\n\n                  // Iterate through each size in the data.sizes object\n                  for (const size in uploadDocument.value?.sizes) {\n                    const imageSize = uploadDocument.value.sizes[size] as FileSizeImproved\n\n                    // Skip if any property of the size object is null\n                    if (\n                      !imageSize.width ||\n                      !imageSize.height ||\n                      !imageSize.mimeType ||\n                      !imageSize.filesize ||\n                      !imageSize.filename ||\n                      !imageSize.url\n                    ) {\n                      continue\n                    }\n                    const imageSizeURL = getAbsoluteURL(imageSize?.url, req?.payload)\n\n                    pictureHTML += `<source srcset=\"${imageSizeURL}\" media=\"(max-width: ${imageSize.width}px)\" type=\"${imageSize.mimeType}\">`\n                  }\n\n                  // Add the default img tag\n                  pictureHTML += `<img src=\"${url}\" alt=\"Image\" width=\"${uploadDocument.value?.width}\" height=\"${uploadDocument.value?.height}\">`\n                  pictureHTML += '</picture>'\n                  return pictureHTML\n                } else {\n                  return `<img src=\"${id}\" />`\n                }\n              },\n              nodeTypes: [UploadServerNode.getType()],\n            },\n          },\n          getSubFields: ({ node, req }) => {\n            if (!node) {\n              let allSubFields: Field[] = []\n              for (const collection in props?.collections) {\n                const collectionFields = props.collections[collection]!.fields\n                allSubFields = allSubFields.concat(collectionFields)\n              }\n              return allSubFields\n            }\n            const collection = req ? req.payload.collections[node?.relationTo] : null\n\n            if (collection) {\n              const collectionFieldSchema = props?.collections?.[node?.relationTo]?.fields\n\n              if (Array.isArray(collectionFieldSchema)) {\n                if (!collectionFieldSchema?.length) {\n                  return null\n                }\n                return collectionFieldSchema\n              }\n            }\n            return null\n          },\n          getSubFieldsData: ({ node }) => {\n            return node?.fields\n          },\n          graphQLPopulationPromises: [uploadPopulationPromiseHOC(props)],\n          hooks: {\n            afterRead: [\n              ({\n                currentDepth,\n                depth,\n                draft,\n                node,\n                overrideAccess,\n                populateArg,\n                populationPromises,\n                req,\n                showHiddenFields,\n              }) => {\n                if (!node?.value) {\n                  return node\n                }\n                const collection = req.payload.collections[node?.relationTo]\n\n                if (!collection) {\n                  return node\n                }\n                // @ts-expect-error - Fix in Payload v4\n                const id = node?.value?.id || node?.value // for backwards-compatibility\n\n                const populateDepth =\n                  props?.maxDepth !== undefined && props?.maxDepth < depth ? props?.maxDepth : depth\n\n                populationPromises.push(\n                  populate({\n                    id,\n                    collectionSlug: collection.config.slug,\n                    currentDepth,\n                    data: node,\n                    depth: populateDepth,\n                    draft,\n                    key: 'value',\n                    overrideAccess,\n                    req,\n                    select:\n                      populateArg?.[collection.config.slug] ?? collection.config.defaultPopulate,\n                    showHiddenFields,\n                  }),\n                )\n\n                return node\n              },\n            ],\n          },\n          node: UploadServerNode,\n          validations: [uploadValidation(props)],\n        }),\n      ],\n      sanitizedServerFeatureProps: props,\n    }\n  },\n  key: 'upload',\n})\n"],"mappings":"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","ignoreList":[]}