{"version":3,"file":"conversions.js","names":["ObjectID","isGoogleDocCheckboxImg","img","parentElement","tagName","previousSibling","getAttribute","$convertUploadElement","domNode","$createNode","hasAttribute","formID","node","data","pending","src","id","relationTo","fields","value","default","toHexString"],"sources":["../../../../../src/features/upload/server/nodes/conversions.ts"],"sourcesContent":["// This file contains functions used to convert dom elements to upload or pending upload lexical nodes. It requires the actual node\n// creation functions to be passed in to stay compatible with both client and server code.\nimport type { DOMConversionOutput } from 'lexical'\n\nimport ObjectID from 'bson-objectid'\n\nimport type { $createUploadNode } from '../../client/nodes/UploadNode.js'\nimport type { $createUploadServerNode, Internal_UploadData } from './UploadNode.js'\n\nexport function isGoogleDocCheckboxImg(img: HTMLImageElement): boolean {\n  return (\n    img.parentElement != null &&\n    img.parentElement.tagName === 'LI' &&\n    img.previousSibling === null &&\n    img.getAttribute('aria-roledescription') === 'checkbox'\n  )\n}\n\nexport function $convertUploadElement(\n  domNode: HTMLImageElement,\n  $createNode: typeof $createUploadNode | typeof $createUploadServerNode,\n): DOMConversionOutput | null {\n  if (domNode.hasAttribute('data-lexical-pending-upload-form-id')) {\n    const formID = domNode.getAttribute('data-lexical-pending-upload-form-id')\n\n    if (formID != null) {\n      const node = $createNode({\n        data: {\n          pending: {\n            formID,\n            src: domNode.getAttribute('src') || '',\n          },\n        } as Internal_UploadData,\n      })\n      return { node }\n    }\n  }\n  if (\n    domNode.hasAttribute('data-lexical-upload-relation-to') &&\n    domNode.hasAttribute('data-lexical-upload-id')\n  ) {\n    const id = domNode.getAttribute('data-lexical-upload-id')\n    const relationTo = domNode.getAttribute('data-lexical-upload-relation-to')\n\n    if (id != null && relationTo != null) {\n      const node = $createNode({\n        data: {\n          fields: {},\n          relationTo,\n          value: id,\n        },\n      })\n      return { node }\n    }\n  }\n\n  // Create pending UploadNode. Auto-Upload functionality will then be handled by the node transform\n  const node = $createNode({\n    data: {\n      pending: {\n        formID: new ObjectID.default().toHexString(),\n        src: domNode.getAttribute('src') || '',\n      },\n    } as Internal_UploadData,\n  })\n\n  return { node }\n}\n"],"mappings":"AAAA;AACA;AAGA,OAAOA,QAAA,MAAc;AAKrB,OAAO,SAASC,uBAAuBC,GAAqB;EAC1D,OACEA,GAAA,CAAIC,aAAa,IAAI,QACrBD,GAAA,CAAIC,aAAa,CAACC,OAAO,KAAK,QAC9BF,GAAA,CAAIG,eAAe,KAAK,QACxBH,GAAA,CAAII,YAAY,CAAC,4BAA4B;AAEjD;AAEA,OAAO,SAASC,sBACdC,OAAyB,EACzBC,WAAsE;EAEtE,IAAID,OAAA,CAAQE,YAAY,CAAC,wCAAwC;IAC/D,MAAMC,MAAA,GAASH,OAAA,CAAQF,YAAY,CAAC;IAEpC,IAAIK,MAAA,IAAU,MAAM;MAClB,MAAMC,IAAA,GAAOH,WAAA,CAAY;QACvBI,IAAA,EAAM;UACJC,OAAA,EAAS;YACPH,MAAA;YACAI,GAAA,EAAKP,OAAA,CAAQF,YAAY,CAAC,UAAU;UACtC;QACF;MACF;MACA,OAAO;QAAEM;MAAK;IAChB;EACF;EACA,IACEJ,OAAA,CAAQE,YAAY,CAAC,sCACrBF,OAAA,CAAQE,YAAY,CAAC,2BACrB;IACA,MAAMM,EAAA,GAAKR,OAAA,CAAQF,YAAY,CAAC;IAChC,MAAMW,UAAA,GAAaT,OAAA,CAAQF,YAAY,CAAC;IAExC,IAAIU,EAAA,IAAM,QAAQC,UAAA,IAAc,MAAM;MACpC,MAAML,IAAA,GAAOH,WAAA,CAAY;QACvBI,IAAA,EAAM;UACJK,MAAA,EAAQ,CAAC;UACTD,UAAA;UACAE,KAAA,EAAOH;QACT;MACF;MACA,OAAO;QAAEJ;MAAK;IAChB;EACF;EAEA;EACA,MAAMA,IAAA,GAAOH,WAAA,CAAY;IACvBI,IAAA,EAAM;MACJC,OAAA,EAAS;QACPH,MAAA,EAAQ,IAAIX,QAAA,CAASoB,OAAO,GAAGC,WAAW;QAC1CN,GAAA,EAAKP,OAAA,CAAQF,YAAY,CAAC,UAAU;MACtC;IACF;EACF;EAEA,OAAO;IAAEM;EAAK;AAChB","ignoreList":[]}