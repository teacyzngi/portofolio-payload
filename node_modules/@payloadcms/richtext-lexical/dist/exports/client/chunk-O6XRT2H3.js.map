{
  "version": 3,
  "sources": ["../../../src/utilities/fieldsDrawer/Drawer.tsx", "../../../src/utilities/fieldsDrawer/DrawerContent.tsx", "../../../src/features/upload/client/drawer/commands.ts"],
  "sourcesContent": ["'use client'\nimport type { ClientField, Data, FormState, JsonObject } from 'payload'\n\nimport { Drawer, EditDepthProvider, useModal } from '@payloadcms/ui'\nimport React from 'react'\n\nimport { DrawerContent } from './DrawerContent.js'\n\nexport type FieldsDrawerProps = {\n  readonly className?: string\n  readonly data?: Data\n  readonly drawerSlug: string\n  readonly drawerTitle?: string\n  readonly featureKey: string\n  readonly fieldMapOverride?: ClientField[]\n  readonly handleDrawerSubmit: (fields: FormState, data: JsonObject) => void\n  readonly schemaFieldsPathOverride?: string\n  readonly schemaPath: string\n  readonly schemaPathSuffix?: string\n}\n\n/**\n * This FieldsDrawer component can be used to easily create a Drawer that contains a form with fields within your feature.\n * The fields are taken directly from the schema map based on your `featureKey` and `schemaPathSuffix`. Thus, this can only\n * be used if you provide your field schema inside the `generateSchemaMap` prop of your feature.server.ts.\n */\nexport const FieldsDrawer: React.FC<FieldsDrawerProps> = ({\n  className,\n  data,\n  drawerSlug,\n  drawerTitle,\n  featureKey,\n  fieldMapOverride,\n  handleDrawerSubmit,\n  schemaFieldsPathOverride,\n  schemaPath,\n  schemaPathSuffix,\n}) => {\n  const { closeModal } = useModal()\n  // The Drawer only renders its children (and itself) if it's open. Thus, by extracting the main content\n  // to DrawerContent, this should be faster\n  return (\n    <EditDepthProvider>\n      <Drawer className={className} slug={drawerSlug} title={drawerTitle ?? ''}>\n        <DrawerContent\n          data={data}\n          featureKey={featureKey}\n          fieldMapOverride={fieldMapOverride}\n          handleDrawerSubmit={(args, args2) => {\n            // Simply close drawer - no need for useLexicalDrawer here as at this point,\n            // we don't need to restore the cursor position. This is handled by the useEffect in useLexicalDrawer.\n            closeModal(drawerSlug)\n\n            // Actual drawer submit logic needs to be triggered after the drawer is closed.\n            // That's because the lexical selection / cursor restore logic that is striggerer by\n            // `useLexicalDrawer` neeeds to be triggered before any editor.update calls that may happen\n            // in the `handleDrawerSubmit` function.\n            setTimeout(() => {\n              handleDrawerSubmit(args, args2)\n            }, 1)\n          }}\n          schemaFieldsPathOverride={schemaFieldsPathOverride}\n          schemaPath={schemaPath}\n          schemaPathSuffix={schemaPathSuffix}\n        />\n      </Drawer>\n    </EditDepthProvider>\n  )\n}\n", "'use client'\nimport type { FormState } from 'payload'\n\nimport { useLexicalEditable } from '@lexical/react/useLexicalEditable'\nimport {\n  Form,\n  FormSubmit,\n  RenderFields,\n  useDocumentForm,\n  useDocumentInfo,\n  useServerFunctions,\n  useTranslation,\n} from '@payloadcms/ui'\nimport { abortAndIgnore } from '@payloadcms/ui/shared'\nimport { deepCopyObjectSimpleWithoutReactComponents } from 'payload/shared'\nimport React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { v4 as uuid } from 'uuid'\n\nimport type { FieldsDrawerProps } from './Drawer.js'\n\nimport { useEditorConfigContext } from '../../lexical/config/client/EditorConfigProvider.js'\n\nexport const DrawerContent: React.FC<Omit<FieldsDrawerProps, 'drawerSlug' | 'drawerTitle'>> = ({\n  data,\n  featureKey,\n  fieldMapOverride,\n  handleDrawerSubmit,\n  schemaFieldsPathOverride,\n  schemaPath,\n  schemaPathSuffix,\n}) => {\n  const { t } = useTranslation()\n  const { id, collectionSlug, getDocPreferences, globalSlug } = useDocumentInfo()\n  const { fields: parentDocumentFields } = useDocumentForm()\n  const isEditable = useLexicalEditable()\n\n  const onChangeAbortControllerRef = useRef(new AbortController())\n\n  const [initialState, setInitialState] = useState<false | FormState | undefined>(false)\n\n  const {\n    fieldProps: { featureClientSchemaMap },\n  } = useEditorConfigContext()\n\n  const { getFormState } = useServerFunctions()\n\n  const schemaFieldsPath =\n    schemaFieldsPathOverride ??\n    `${schemaPath}.lexical_internal_feature.${featureKey}${schemaPathSuffix ? `.${schemaPathSuffix}` : ''}`\n\n  const fields: any = fieldMapOverride ?? featureClientSchemaMap[featureKey]?.[schemaFieldsPath] // Field Schema\n\n  useEffect(() => {\n    const controller = new AbortController()\n\n    const awaitInitialState = async () => {\n      const { state } = await getFormState({\n        id,\n        collectionSlug,\n        data: data ?? {},\n        docPermissions: {\n          fields: true,\n        },\n        docPreferences: await getDocPreferences(),\n        documentFormState: deepCopyObjectSimpleWithoutReactComponents(parentDocumentFields),\n        globalSlug,\n        initialBlockData: data,\n        operation: 'update',\n        readOnly: !isEditable,\n        renderAllFields: true,\n        schemaPath: schemaFieldsPath,\n        signal: controller.signal,\n      })\n\n      setInitialState(state)\n    }\n\n    void awaitInitialState()\n\n    return () => {\n      abortAndIgnore(controller)\n    }\n  }, [\n    schemaFieldsPath,\n    id,\n    data,\n    getFormState,\n    collectionSlug,\n    isEditable,\n    globalSlug,\n    getDocPreferences,\n    parentDocumentFields,\n  ])\n\n  const onChange = useCallback(\n    async ({ formState: prevFormState }: { formState: FormState }) => {\n      abortAndIgnore(onChangeAbortControllerRef.current)\n\n      const controller = new AbortController()\n      onChangeAbortControllerRef.current = controller\n\n      const { state } = await getFormState({\n        id,\n        collectionSlug,\n        docPermissions: {\n          fields: true,\n        },\n        docPreferences: await getDocPreferences(),\n        documentFormState: deepCopyObjectSimpleWithoutReactComponents(parentDocumentFields),\n        formState: prevFormState,\n        globalSlug,\n        initialBlockFormState: prevFormState,\n        operation: 'update',\n        readOnly: !isEditable,\n        schemaPath: schemaFieldsPath,\n        signal: controller.signal,\n      })\n\n      if (!state) {\n        return prevFormState\n      }\n\n      return state\n    },\n    [\n      getFormState,\n      id,\n      isEditable,\n      collectionSlug,\n      getDocPreferences,\n      parentDocumentFields,\n      globalSlug,\n      schemaFieldsPath,\n    ],\n  )\n\n  // cleanup effect\n  useEffect(() => {\n    return () => {\n      abortAndIgnore(onChangeAbortControllerRef.current)\n    }\n  }, [])\n\n  if (initialState === false) {\n    return null\n  }\n\n  return (\n    <Form\n      beforeSubmit={[onChange]}\n      disableValidationOnSubmit\n      fields={Array.isArray(fields) ? fields : []}\n      initialState={initialState}\n      onChange={[onChange]}\n      onSubmit={handleDrawerSubmit}\n      uuid={uuid()}\n    >\n      <RenderFields\n        fields={Array.isArray(fields) ? fields : []}\n        forceRender\n        parentIndexPath=\"\"\n        parentPath=\"\" // See Blocks feature path for details as for why this is empty\n        parentSchemaPath={schemaFieldsPath}\n        permissions={true}\n        readOnly={!isEditable}\n      />\n      <FormSubmit>{t('fields:saveChanges')}</FormSubmit>\n    </Form>\n  )\n}\n", "'use client'\nimport type { LexicalCommand } from 'lexical'\n\nimport { createCommand } from 'lexical'\n\nexport const INSERT_UPLOAD_WITH_DRAWER_COMMAND: LexicalCommand<{\n  replace: { nodeKey: string } | false\n}> = createCommand('INSERT_UPLOAD_WITH_DRAWER_COMMAND')\n"],
  "mappings": "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",
  "names": ["c", "_c", "Drawer", "EditDepthProvider", "useModal", "useLexicalEditable", "Form", "FormSubmit", "RenderFields", "useDocumentForm", "useDocumentInfo", "useServerFunctions", "useTranslation", "abortAndIgnore", "deepCopyObjectSimpleWithoutReactComponents", "useCallback", "useEffect", "useRef", "useState", "v4", "uuid", "DrawerContent", "data", "featureKey", "fieldMapOverride", "handleDrawerSubmit", "schemaFieldsPathOverride", "schemaPath", "schemaPathSuffix", "t", "useTranslation", "id", "collectionSlug", "getDocPreferences", "globalSlug", "useDocumentInfo", "fields", "parentDocumentFields", "useDocumentForm", "isEditable", "useLexicalEditable", "onChangeAbortControllerRef", "useRef", "AbortController", "initialState", "setInitialState", "useState", "fieldProps", "featureClientSchemaMap", "useEditorConfigContext", "getFormState", "useServerFunctions", "schemaFieldsPath", "useEffect", "controller", "state", "docPermissions", "docPreferences", "documentFormState", "deepCopyObjectSimpleWithoutReactComponents", "initialBlockData", "operation", "readOnly", "renderAllFields", "signal", "abortAndIgnore", "onChange", "useCallback", "formState", "prevFormState", "current", "initialBlockFormState", "_jsxs", "Form", "beforeSubmit", "disableValidationOnSubmit", "Array", "isArray", "onSubmit", "uuid", "_jsx", "RenderFields", "forceRender", "parentIndexPath", "parentPath", "parentSchemaPath", "permissions", "FormSubmit", "FieldsDrawer", "t0", "$", "_c", "className", "data", "drawerSlug", "drawerTitle", "featureKey", "fieldMapOverride", "handleDrawerSubmit", "schemaFieldsPathOverride", "schemaPath", "schemaPathSuffix", "closeModal", "useModal", "t1", "t2", "args", "args2", "setTimeout", "t3", "_jsx", "EditDepthProvider", "children", "Drawer", "slug", "title", "DrawerContent", "createCommand", "INSERT_UPLOAD_WITH_DRAWER_COMMAND"]
}
