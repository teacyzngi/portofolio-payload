import{jsx as x}from"react/jsx-runtime";import{useLexicalComposerContext as b}from"@lexical/react/LexicalComposerContext.js";import{useEditDepth as S}from"@payloadcms/ui";import"react";import{createContext as k,use as v,useMemo as j,useRef as g,useState as s}from"react";function B(){return Math.random().toString(36).substring(2,12)+Math.random().toString(36).substring(2,12)}var w=k({editorConfig:null,fieldProps:null,uuid:null}),H=({children:o,editorConfig:c,editorContainerRef:d,fieldProps:a,parentContext:n})=>{let[f]=b(),[l]=s(()=>B()),r=g(new Map),[m,C]=s(null),u=g(new Set),[E,p]=s(),h=S(),M=j(()=>({blurEditor:t=>{u.current.clear()},childrenEditors:r,createdInlineBlock:E,editDepth:h,editor:f,editorConfig:c,editorContainerRef:d,fieldProps:a,focusedEditor:m,focusEditor:t=>{let e=t.uuid;u.current.has(e)||(u.current.add(e),C(t),n?.uuid&&n.focusEditor(t),r.current.forEach(i=>{i.focusEditor(t)}),u.current.clear())},parentEditor:n,registerChild:(t,e)=>{if(!r.current.has(t)){let i=new Map(r.current);i.set(t,e),r.current=i}},setCreatedInlineBlock:p,unregisterChild:t=>{if(r.current.has(t)){let e=new Map(r.current);e.delete(t),r.current=e}},uuid:l}),[E,p,f,r,c,d,h,a,m,n,l]);return x(w,{value:M,children:o})},I=()=>{let o=v(w);if(o===void 0)throw new Error("useEditorConfigContext must be used within an EditorConfigProvider");return o};export{H as a,I as b};
//# sourceMappingURL=chunk-BZZVLW4U.js.map
