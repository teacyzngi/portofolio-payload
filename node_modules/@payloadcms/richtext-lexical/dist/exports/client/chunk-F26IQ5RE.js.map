{
  "version": 3,
  "sources": ["../../../src/utilities/fieldsDrawer/useLexicalDocumentDrawer.tsx"],
  "sourcesContent": ["'use client'\nimport type { UseDocumentDrawer } from '@payloadcms/ui'\nimport type { BaseSelection } from 'lexical'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { useDocumentDrawer, useModal } from '@payloadcms/ui'\nimport { $getPreviousSelection, $getSelection, $setSelection } from 'lexical'\nimport { useCallback, useEffect, useState } from 'react'\n\n/**\n *\n * Wrapper around useDocumentDrawer that restores and saves selection state (cursor position) when opening and closing the drawer.\n * By default, the lexical cursor position may be lost when opening a drawer and clicking somewhere on that drawer.\n */\nexport const useLexicalDocumentDrawer = (\n  args: Parameters<UseDocumentDrawer>[0],\n): {\n  closeDocumentDrawer: () => void\n  DocumentDrawer: ReturnType<UseDocumentDrawer>[0]\n  documentDrawerSlug: string\n  DocumentDrawerToggler: ReturnType<UseDocumentDrawer>[1]\n} => {\n  const [editor] = useLexicalComposerContext()\n  const [selectionState, setSelectionState] = useState<BaseSelection | null>(null)\n  const [wasOpen, setWasOpen] = useState<boolean>(false)\n\n  const [\n    DocumentDrawer,\n    DocumentDrawerToggler,\n    { closeDrawer: closeDrawer, drawerSlug: documentDrawerSlug },\n  ] = useDocumentDrawer(args)\n  const { modalState } = useModal()\n\n  const storeSelection = useCallback(() => {\n    editor.read(() => {\n      const selection = $getSelection() ?? $getPreviousSelection()\n      setSelectionState(selection)\n    })\n    setWasOpen(true)\n  }, [editor])\n\n  const restoreSelection = useCallback(() => {\n    if (selectionState) {\n      editor.update(\n        () => {\n          $setSelection(selectionState.clone())\n        },\n        { discrete: true, skipTransforms: true },\n      )\n    }\n  }, [editor, selectionState])\n\n  const closeDocumentDrawer = () => {\n    //restoreSelection() // Should already be stored by the useEffect below\n    closeDrawer()\n  }\n\n  // We need to handle drawer closing via a useEffect, as toggleDrawer / closeDrawer will not be triggered if the drawer\n  // is closed by clicking outside of the drawer. This useEffect will handle everything.\n  useEffect(() => {\n    if (!wasOpen) {\n      return\n    }\n\n    const thisModalState = modalState[documentDrawerSlug]\n    // Exists in modalState (thus has opened at least once before) and is closed\n    if (thisModalState && !thisModalState?.isOpen) {\n      setWasOpen(false)\n      setTimeout(() => {\n        restoreSelection()\n      }, 1)\n    }\n  }, [modalState, documentDrawerSlug, restoreSelection, wasOpen])\n\n  return {\n    closeDocumentDrawer,\n    DocumentDrawer,\n    documentDrawerSlug,\n    DocumentDrawerToggler: (props) => <DocumentDrawerToggler {...props} onClick={storeSelection} />,\n  }\n}\n"],
  "mappings": "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",
  "names": ["c", "_c", "useLexicalComposerContext", "useDocumentDrawer", "useModal", "$getPreviousSelection", "$getSelection", "$setSelection", "useEffect", "useState", "useLexicalDocumentDrawer", "args", "$", "editor", "selectionState", "setSelectionState", "wasOpen", "setWasOpen", "DocumentDrawer", "DocumentDrawerToggler", "t0", "closeDrawer", "drawerSlug", "documentDrawerSlug", "modalState", "t1", "read", "selection", "storeSelection", "t2", "update", "clone", "discrete", "skipTransforms", "restoreSelection", "t3", "closeDocumentDrawer", "t4", "t5", "thisModalState", "isOpen", "setTimeout", "t6", "props", "_jsx", "onClick", "t7"]
}
