{
  "version": 3,
  "sources": ["../../../src/utilities/fieldsDrawer/useLexicalDrawer.tsx"],
  "sourcesContent": ["'use client'\nimport type { BaseSelection } from 'lexical'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { useModal } from '@payloadcms/ui'\nimport { $getPreviousSelection, $getSelection, $setSelection } from 'lexical'\nimport { useCallback, useEffect, useState } from 'react'\n\n/**\n *\n * Wrapper around useModal that restores and saves selection state (cursor position) when opening and closing the drawer.\n * By default, the lexical cursor position may be lost when opening a drawer and clicking somewhere on that drawer.\n */\nexport const useLexicalDrawer = (slug: string, restoreLate?: boolean) => {\n  const [editor] = useLexicalComposerContext()\n  const [selectionState, setSelectionState] = useState<BaseSelection | null>(null)\n  const [wasOpen, setWasOpen] = useState<boolean>(false)\n\n  const { closeModal: closeBaseModal, modalState, toggleModal: toggleBaseModal } = useModal()\n\n  const storeSelection = useCallback(() => {\n    editor.read(() => {\n      const selection = $getSelection() ?? $getPreviousSelection()\n      setSelectionState(selection)\n    })\n  }, [editor])\n\n  const restoreSelection = useCallback(() => {\n    if (selectionState) {\n      editor.update(\n        () => {\n          $setSelection(selectionState.clone())\n        },\n        { discrete: true, skipTransforms: true },\n      )\n    }\n  }, [editor, selectionState])\n\n  const closeDrawer = useCallback(() => {\n    //restoreSelection() // Should already be stored by the useEffect below\n    closeBaseModal(slug)\n  }, [closeBaseModal, slug])\n  const isModalOpen = modalState?.[slug]?.isOpen\n\n  const toggleDrawer = useCallback(() => {\n    if (!isModalOpen) {\n      storeSelection()\n    } else {\n      restoreSelection()\n    }\n    setWasOpen(true)\n    toggleBaseModal(slug)\n  }, [slug, storeSelection, toggleBaseModal, restoreSelection, isModalOpen])\n\n  // We need to handle drawer closing via a useEffect, as toggleDrawer / closeDrawer will not be triggered if the drawer\n  // is closed by clicking outside of the drawer. This useEffect will handle everything.\n  useEffect(() => {\n    if (!wasOpen) {\n      return\n    }\n\n    const thisModalState = modalState[slug]\n    // Exists in modalState (thus has opened at least once before) and is closed\n    if (thisModalState && !thisModalState?.isOpen) {\n      setWasOpen(false)\n\n      if (restoreLate) {\n        // restoreLate is used for upload extra field drawers. For some reason, the selection is not restored if we call restoreSelection immediately.\n        setTimeout(() => {\n          restoreSelection()\n        }, 0)\n      } else {\n        restoreSelection()\n      }\n    }\n  }, [modalState, slug, restoreSelection, wasOpen, restoreLate])\n\n  return {\n    closeDrawer,\n    toggleDrawer,\n  }\n}\n"],
  "mappings": "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",
  "names": ["c", "_c", "useLexicalComposerContext", "useModal", "$getPreviousSelection", "$getSelection", "$setSelection", "useEffect", "useState", "useLexicalDrawer", "slug", "restoreLate", "$", "editor", "selectionState", "setSelectionState", "wasOpen", "setWasOpen", "closeModal", "closeBaseModal", "modalState", "toggleModal", "toggleBaseModal", "t0", "read", "selection", "storeSelection", "t1", "update", "clone", "discrete", "skipTransforms", "restoreSelection", "t2", "closeDrawer", "isModalOpen", "isOpen", "t3", "toggleDrawer", "t4", "t5", "thisModalState", "setTimeout", "t6"]
}
