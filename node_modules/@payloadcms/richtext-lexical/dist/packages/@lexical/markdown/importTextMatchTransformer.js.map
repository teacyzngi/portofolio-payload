{"version":3,"file":"importTextMatchTransformer.js","names":["findOutermostTextMatchTransformer","textNode_","textMatchTransformers","textNode","foundMatchStartIndex","undefined","foundMatchEndIndex","foundMatchTransformer","foundMatch","transformer","replace","importRegExp","match","getTextContent","startIndex","index","endIndex","getEndIndex","length","importFoundTextMatchTransformer","nodeAfter","nodeBefore","transformedNode","splitText","potentialTransformedNode"],"sources":["../../../../src/packages/@lexical/markdown/importTextMatchTransformer.ts"],"sourcesContent":["import { type TextNode } from 'lexical'\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport type { TextMatchTransformer } from './MarkdownTransformers.js'\n\nexport function findOutermostTextMatchTransformer(\n  textNode_: TextNode,\n  textMatchTransformers: Array<TextMatchTransformer>,\n): {\n  endIndex: number\n  match: RegExpMatchArray\n  startIndex: number\n  transformer: TextMatchTransformer\n} | null {\n  const textNode = textNode_\n\n  let foundMatchStartIndex: number | undefined = undefined\n  let foundMatchEndIndex: number | undefined = undefined\n  let foundMatchTransformer: TextMatchTransformer | undefined = undefined\n  let foundMatch: RegExpMatchArray | undefined = undefined\n\n  for (const transformer of textMatchTransformers) {\n    if (!transformer.replace || !transformer.importRegExp) {\n      continue\n    }\n    const match = textNode.getTextContent().match(transformer.importRegExp)\n\n    if (!match) {\n      continue\n    }\n\n    const startIndex = match.index || 0\n    const endIndex = transformer.getEndIndex\n      ? transformer.getEndIndex(textNode, match)\n      : startIndex + match[0].length\n\n    if (endIndex === false) {\n      continue\n    }\n\n    if (\n      foundMatchStartIndex === undefined ||\n      foundMatchEndIndex === undefined ||\n      (startIndex < foundMatchStartIndex && endIndex > foundMatchEndIndex)\n    ) {\n      foundMatchStartIndex = startIndex\n      foundMatchEndIndex = endIndex\n      foundMatchTransformer = transformer\n      foundMatch = match\n    }\n  }\n\n  if (\n    foundMatchStartIndex === undefined ||\n    foundMatchEndIndex === undefined ||\n    foundMatchTransformer === undefined ||\n    foundMatch === undefined\n  ) {\n    return null\n  }\n\n  return {\n    endIndex: foundMatchEndIndex,\n    match: foundMatch,\n    startIndex: foundMatchStartIndex,\n    transformer: foundMatchTransformer,\n  }\n}\n\nexport function importFoundTextMatchTransformer(\n  textNode: TextNode,\n  startIndex: number,\n  endIndex: number,\n  transformer: TextMatchTransformer,\n  match: RegExpMatchArray,\n): {\n  nodeAfter: TextNode | undefined // If split\n  nodeBefore: TextNode | undefined // If split\n  transformedNode?: TextNode\n} | null {\n  let nodeAfter, nodeBefore, transformedNode\n\n  if (startIndex === 0) {\n    ;[transformedNode, nodeAfter] = textNode.splitText(endIndex)\n  } else {\n    ;[nodeBefore, transformedNode, nodeAfter] = textNode.splitText(startIndex, endIndex)\n  }\n\n  if (!transformer.replace) {\n    return null\n  }\n  const potentialTransformedNode = transformedNode\n    ? transformer.replace(transformedNode, match)\n    : undefined\n\n  return {\n    nodeAfter,\n    nodeBefore,\n    transformedNode: potentialTransformedNode || undefined,\n  }\n}\n"],"mappings":"AAWA,OAAO,SAASA,kCACdC,SAAmB,EACnBC,qBAAkD;EAOlD,MAAMC,QAAA,GAAWF,SAAA;EAEjB,IAAIG,oBAAA,GAA2CC,SAAA;EAC/C,IAAIC,kBAAA,GAAyCD,SAAA;EAC7C,IAAIE,qBAAA,GAA0DF,SAAA;EAC9D,IAAIG,UAAA,GAA2CH,SAAA;EAE/C,KAAK,MAAMI,WAAA,IAAeP,qBAAA,EAAuB;IAC/C,IAAI,CAACO,WAAA,CAAYC,OAAO,IAAI,CAACD,WAAA,CAAYE,YAAY,EAAE;MACrD;IACF;IACA,MAAMC,KAAA,GAAQT,QAAA,CAASU,cAAc,GAAGD,KAAK,CAACH,WAAA,CAAYE,YAAY;IAEtE,IAAI,CAACC,KAAA,EAAO;MACV;IACF;IAEA,MAAME,UAAA,GAAaF,KAAA,CAAMG,KAAK,IAAI;IAClC,MAAMC,QAAA,GAAWP,WAAA,CAAYQ,WAAW,GACpCR,WAAA,CAAYQ,WAAW,CAACd,QAAA,EAAUS,KAAA,IAClCE,UAAA,GAAaF,KAAK,CAAC,EAAE,CAACM,MAAM;IAEhC,IAAIF,QAAA,KAAa,OAAO;MACtB;IACF;IAEA,IACEZ,oBAAA,KAAyBC,SAAA,IACzBC,kBAAA,KAAuBD,SAAA,IACtBS,UAAA,GAAaV,oBAAA,IAAwBY,QAAA,GAAWV,kBAAA,EACjD;MACAF,oBAAA,GAAuBU,UAAA;MACvBR,kBAAA,GAAqBU,QAAA;MACrBT,qBAAA,GAAwBE,WAAA;MACxBD,UAAA,GAAaI,KAAA;IACf;EACF;EAEA,IACER,oBAAA,KAAyBC,SAAA,IACzBC,kBAAA,KAAuBD,SAAA,IACvBE,qBAAA,KAA0BF,SAAA,IAC1BG,UAAA,KAAeH,SAAA,EACf;IACA,OAAO;EACT;EAEA,OAAO;IACLW,QAAA,EAAUV,kBAAA;IACVM,KAAA,EAAOJ,UAAA;IACPM,UAAA,EAAYV,oBAAA;IACZK,WAAA,EAAaF;EACf;AACF;AAEA,OAAO,SAASY,gCACdhB,QAAkB,EAClBW,UAAkB,EAClBE,QAAgB,EAChBP,WAAiC,EACjCG,KAAuB;EAMvB,IAAIQ,SAAA,EAAWC,UAAA,EAAYC,eAAA;EAE3B,IAAIR,UAAA,KAAe,GAAG;IACnB,CAACQ,eAAA,EAAiBF,SAAA,CAAU,GAAGjB,QAAA,CAASoB,SAAS,CAACP,QAAA;EACrD,OAAO;IACJ,CAACK,UAAA,EAAYC,eAAA,EAAiBF,SAAA,CAAU,GAAGjB,QAAA,CAASoB,SAAS,CAACT,UAAA,EAAYE,QAAA;EAC7E;EAEA,IAAI,CAACP,WAAA,CAAYC,OAAO,EAAE;IACxB,OAAO;EACT;EACA,MAAMc,wBAAA,GAA2BF,eAAA,GAC7Bb,WAAA,CAAYC,OAAO,CAACY,eAAA,EAAiBV,KAAA,IACrCP,SAAA;EAEJ,OAAO;IACLe,SAAA;IACAC,UAAA;IACAC,eAAA,EAAiBE,wBAAA,IAA4BnB;EAC/C;AACF","ignoreList":[]}