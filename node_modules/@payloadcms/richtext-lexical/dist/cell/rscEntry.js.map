{"version":3,"file":"rscEntry.js","names":["getTranslation","Link","formatAdminURL","React","recurseEditorState","editorState","textContent","i","node","text","push","_jsxs","type","children","RscEntryLexicalCell","props","cellData","className","classNameFromProps","collectionConfig","field","admin","i18n","link","onClick","onClickFromProps","payload","rowData","sanitizedEditorConfig","classNameFromConfigContext","undefined","adminRoute","config","routes","WrapElement","wrapElementProps","prefetch","href","slug","path","id","collectionSlug","root","length","t","label","_jsx"],"sources":["../../src/cell/rscEntry.tsx"],"sourcesContent":["import type { SerializedLexicalNode } from 'lexical'\nimport type { Payload } from 'payload'\n\nimport { getTranslation, type I18nClient } from '@payloadcms/translations'\nimport { Link } from '@payloadcms/ui'\nimport { formatAdminURL } from 'payload/shared'\nimport React from 'react'\n\nimport type { SanitizedServerEditorConfig } from '../lexical/config/types.js'\nimport type { LexicalFieldAdminProps, LexicalRichTextCellProps } from '../types.js'\n\nfunction recurseEditorState(\n  editorState: SerializedLexicalNode[],\n  textContent: React.ReactNode[],\n  i: number = 0,\n): React.ReactNode[] {\n  for (const node of editorState) {\n    i++\n    if ('text' in node && node.text) {\n      textContent.push(node.text as string)\n    } else {\n      if (!('children' in node)) {\n        textContent.push(<code key={i}>&#32;[{node.type}]</code>)\n      }\n    }\n    if ('children' in node && node.children) {\n      textContent = recurseEditorState(node.children as SerializedLexicalNode[], textContent, i)\n    }\n  }\n  return textContent\n}\n\nexport const RscEntryLexicalCell: React.FC<\n  {\n    admin: LexicalFieldAdminProps\n    i18n: I18nClient\n    payload: Payload\n    sanitizedEditorConfig: SanitizedServerEditorConfig\n  } & LexicalRichTextCellProps\n> = (props) => {\n  const {\n    cellData,\n    className: classNameFromProps,\n    collectionConfig,\n    field: { admin },\n    field,\n    i18n,\n    link,\n    onClick: onClickFromProps,\n    payload,\n    rowData,\n    sanitizedEditorConfig,\n  } = props\n\n  const classNameFromConfigContext = admin && 'className' in admin ? admin.className : undefined\n\n  const className =\n    classNameFromProps ||\n    (field.admin && 'className' in field.admin ? field.admin.className : null) ||\n    classNameFromConfigContext\n  const adminRoute = payload.config.routes.admin\n\n  const onClick = onClickFromProps\n\n  let WrapElement: React.ComponentType<any> | string = 'span'\n\n  const wrapElementProps: {\n    className?: string\n    href?: string\n    onClick?: () => void\n    prefetch?: false\n    type?: 'button'\n  } = {\n    className,\n  }\n\n  if (link) {\n    wrapElementProps.prefetch = false\n    WrapElement = Link\n    wrapElementProps.href = collectionConfig?.slug\n      ? formatAdminURL({\n          adminRoute,\n          path: `/collections/${collectionConfig?.slug}/${rowData.id}`,\n        })\n      : ''\n  }\n\n  if (typeof onClick === 'function') {\n    WrapElement = 'button'\n    wrapElementProps.type = 'button'\n    wrapElementProps.onClick = () => {\n      onClick({\n        cellData,\n        collectionSlug: collectionConfig?.slug,\n        rowData,\n      })\n    }\n  }\n\n  let textContent: React.ReactNode[] = []\n\n  if (cellData?.root?.children) {\n    textContent = recurseEditorState(cellData?.root?.children, textContent)\n  }\n\n  if (!textContent?.length) {\n    textContent = [\n      i18n.t('general:noLabel', {\n        label: getTranslation(('label' in field ? field.label : null) || 'data', i18n),\n      }),\n    ]\n  }\n\n  return <WrapElement {...wrapElementProps}>{textContent}</WrapElement>\n}\n"],"mappings":"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","ignoreList":[]}