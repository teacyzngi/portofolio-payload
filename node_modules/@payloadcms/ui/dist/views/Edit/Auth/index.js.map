{"version":3,"file":"index.js","names":["c","_c","getFieldPermissions","React","Fragment","useCallback","useEffect","useMemo","useState","toast","Button","EmailAndUsernameFields","CheckboxField","ConfirmPasswordField","PasswordField","useFormFields","useFormModified","useAuth","useConfig","useDocumentInfo","useTranslation","APIKey","baseClass","Auth","props","$","className","collectionSlug","disableLocalStrategy","email","loginWithUsername","operation","readOnly","requirePassword","setValidateBeforeSubmit","useAPIKey","username","verify","permissions","changingPassword","setChangingPassword","enableAPIKey","_temp","dispatchFields","_temp2","modified","i18n","t","docPermissions","isEditing","isInitializing","isTrashed","config","t0","routes","t1","serverURL","api","showPasswordFields","showUnlock","hasPasswordFieldOverride","fields","hasLoginFieldOverride","passwordPermissions","field","name","type","parentName","create","update","hasEmailAndUsernameFields","requireEmail","allowEmailLogin","t2","emailPermission","t3","usernamePermission","enableFields","disabled","apiKeyPermissions","apiKeyReadOnly","enableAPIKeyReadOnly","canReadApiKey","read","bb0","collection","collections","Boolean","unlock","undefined","hasPermissionToUnlock","changingPassword_0","errorMessage","path","valid","handleChangePassword","t4","url","response","fetch","body","JSON","stringify","credentials","headers","language","method","status","success","error","t5","t6","showAuthBlock","showAPIKeyBlock","showVerifyBlock","t7","filter","_jsxs","join","children","_jsx","autoComplete","label","required","indexPath","parentPath","parentSchemaPath","schemaPath","buttonStyle","onClick","size","id","admin","enabled","value","reducer"],"sources":["../../../../src/views/Edit/Auth/index.tsx"],"sourcesContent":["'use client'\n\nimport type { SanitizedFieldPermissions } from 'payload'\n\nimport { getFieldPermissions } from 'payload/shared'\nimport React, { Fragment, useCallback, useEffect, useMemo, useState } from 'react'\nimport { toast } from 'sonner'\n\nimport type { Props } from './types.js'\n\nimport { Button } from '../../../elements/Button/index.js'\nimport { EmailAndUsernameFields } from '../../../elements/EmailAndUsername/index.js'\nimport { CheckboxField } from '../../../fields/Checkbox/index.js'\nimport { ConfirmPasswordField } from '../../../fields/ConfirmPassword/index.js'\nimport { PasswordField } from '../../../fields/Password/index.js'\nimport { useFormFields, useFormModified } from '../../../forms/Form/context.js'\nimport { useAuth } from '../../../providers/Auth/index.js'\nimport { useConfig } from '../../../providers/Config/index.js'\nimport { useDocumentInfo } from '../../../providers/DocumentInfo/index.js'\nimport { useTranslation } from '../../../providers/Translation/index.js'\nimport './index.scss'\nimport { APIKey } from './APIKey.js'\n\nconst baseClass = 'auth-fields'\n\nexport const Auth: React.FC<Props> = (props) => {\n  const {\n    className,\n    collectionSlug,\n    disableLocalStrategy,\n    email,\n    loginWithUsername,\n    operation,\n    readOnly,\n    requirePassword,\n    setValidateBeforeSubmit,\n    useAPIKey,\n    username,\n    verify,\n  } = props\n\n  const { permissions } = useAuth()\n  const [changingPassword, setChangingPassword] = useState(requirePassword)\n  const enableAPIKey = useFormFields(([fields]) => (fields && fields?.enableAPIKey) || null)\n  const dispatchFields = useFormFields((reducer) => reducer[1])\n  const modified = useFormModified()\n  const { i18n, t } = useTranslation()\n  const { docPermissions, isEditing, isInitializing, isTrashed } = useDocumentInfo()\n\n  const {\n    config: {\n      routes: { api },\n      serverURL,\n    },\n  } = useConfig()\n\n  let showPasswordFields: SanitizedFieldPermissions = true\n  let showUnlock = true\n  const hasPasswordFieldOverride =\n    typeof docPermissions.fields === 'object' && 'password' in docPermissions.fields\n  const hasLoginFieldOverride =\n    typeof docPermissions.fields === 'object' &&\n    ('username' in docPermissions.fields || 'email' in docPermissions.fields)\n\n  if (hasPasswordFieldOverride) {\n    const { permissions: passwordPermissions } = getFieldPermissions({\n      field: { name: 'password', type: 'text' },\n      operation,\n      parentName: '',\n      permissions: docPermissions?.fields,\n    })\n\n    if (operation === 'create') {\n      showPasswordFields =\n        passwordPermissions === true ||\n        ((typeof passwordPermissions === 'object' &&\n          passwordPermissions.create) as SanitizedFieldPermissions)\n    } else {\n      showPasswordFields =\n        passwordPermissions === true ||\n        ((typeof passwordPermissions === 'object' &&\n          passwordPermissions.update) as SanitizedFieldPermissions)\n    }\n  }\n\n  if (hasLoginFieldOverride) {\n    const hasEmailAndUsernameFields =\n      loginWithUsername && (loginWithUsername.requireEmail || loginWithUsername.allowEmailLogin)\n\n    const { operation: emailPermission } = getFieldPermissions({\n      field: { name: 'email', type: 'text' },\n      operation: 'read',\n      parentName: '',\n      permissions: docPermissions?.fields,\n    })\n\n    const { operation: usernamePermission } = getFieldPermissions({\n      field: { name: 'username', type: 'text' },\n      operation: 'read',\n      parentName: '',\n      permissions: docPermissions?.fields,\n    })\n\n    if (hasEmailAndUsernameFields) {\n      showUnlock = usernamePermission || emailPermission\n    } else if (loginWithUsername && !hasEmailAndUsernameFields) {\n      showUnlock = usernamePermission\n    } else {\n      showUnlock = emailPermission\n    }\n  }\n\n  const enableFields =\n    (!disableLocalStrategy ||\n      (typeof disableLocalStrategy === 'object' && disableLocalStrategy.enableFields === true)) &&\n    (showUnlock || showPasswordFields)\n\n  const disabled = readOnly || isInitializing || isTrashed\n\n  const apiKeyPermissions =\n    docPermissions?.fields === true ? true : docPermissions?.fields?.enableAPIKey\n\n  const apiKeyReadOnly =\n    readOnly ||\n    apiKeyPermissions === true ||\n    (apiKeyPermissions && typeof apiKeyPermissions === 'object' && !apiKeyPermissions?.update)\n\n  const enableAPIKeyReadOnly =\n    readOnly || (apiKeyPermissions !== true && !apiKeyPermissions?.update)\n\n  const canReadApiKey = apiKeyPermissions === true || apiKeyPermissions?.read\n\n  const hasPermissionToUnlock: boolean = useMemo(() => {\n    const collection = permissions?.collections?.[collectionSlug]\n\n    if (collection) {\n      return Boolean('unlock' in collection ? collection.unlock : undefined)\n    }\n\n    return false\n  }, [permissions, collectionSlug])\n\n  const handleChangePassword = useCallback(\n    (changingPassword: boolean) => {\n      if (changingPassword) {\n        setValidateBeforeSubmit(true)\n\n        dispatchFields({\n          type: 'UPDATE',\n          errorMessage: t('validation:required'),\n          path: 'password',\n          valid: false,\n        })\n\n        dispatchFields({\n          type: 'UPDATE',\n          errorMessage: t('validation:required'),\n          path: 'confirm-password',\n          valid: false,\n        })\n      } else {\n        setValidateBeforeSubmit(false)\n        dispatchFields({ type: 'REMOVE', path: 'password' })\n        dispatchFields({ type: 'REMOVE', path: 'confirm-password' })\n      }\n\n      setChangingPassword(changingPassword)\n    },\n    [dispatchFields, t, setValidateBeforeSubmit],\n  )\n\n  const unlock = useCallback(async () => {\n    const url = `${serverURL}${api}/${collectionSlug}/unlock`\n    const response = await fetch(url, {\n      body:\n        loginWithUsername && username ? JSON.stringify({ username }) : JSON.stringify({ email }),\n      credentials: 'include',\n      headers: {\n        'Accept-Language': i18n.language,\n        'Content-Type': 'application/json',\n      },\n      method: 'post',\n    })\n\n    if (response.status === 200) {\n      toast.success(t('authentication:successfullyUnlocked'))\n    } else {\n      toast.error(t('authentication:failedToUnlock'))\n    }\n  }, [i18n, serverURL, api, collectionSlug, email, username, t, loginWithUsername])\n\n  useEffect(() => {\n    if (!modified) {\n      setChangingPassword(false)\n    }\n  }, [modified])\n\n  const showAuthBlock = enableFields\n  const showAPIKeyBlock = useAPIKey && canReadApiKey\n  const showVerifyBlock = verify && isEditing\n\n  if (!(showAuthBlock || showAPIKeyBlock || showVerifyBlock)) {\n    return null\n  }\n\n  return (\n    <div className={[baseClass, className].filter(Boolean).join(' ')}>\n      {enableFields && (\n        <React.Fragment>\n          <EmailAndUsernameFields\n            loginWithUsername={loginWithUsername}\n            operation={operation}\n            permissions={docPermissions?.fields}\n            readOnly={readOnly || isTrashed}\n            t={t}\n          />\n          {(changingPassword || requirePassword) && (!disableLocalStrategy || !enableFields) && (\n            <div className={`${baseClass}__changing-password`}>\n              <PasswordField\n                autoComplete=\"new-password\"\n                field={{\n                  name: 'password',\n                  label: t('authentication:newPassword'),\n                  required: true,\n                }}\n                indexPath=\"\"\n                parentPath=\"\"\n                parentSchemaPath=\"\"\n                path=\"password\"\n                schemaPath=\"password\"\n              />\n              <ConfirmPasswordField disabled={readOnly || isTrashed} />\n            </div>\n          )}\n          <div className={`${baseClass}__controls`}>\n            {changingPassword && !requirePassword && (\n              <Button\n                buttonStyle=\"secondary\"\n                disabled={disabled}\n                onClick={() => handleChangePassword(false)}\n                size=\"medium\"\n              >\n                {t('general:cancel')}\n              </Button>\n            )}\n            {!changingPassword &&\n              !requirePassword &&\n              !disableLocalStrategy &&\n              showPasswordFields && (\n                <Button\n                  buttonStyle=\"secondary\"\n                  disabled={disabled}\n                  id=\"change-password\"\n                  onClick={() => handleChangePassword(true)}\n                  size=\"medium\"\n                >\n                  {t('authentication:changePassword')}\n                </Button>\n              )}\n            {operation === 'update' && hasPermissionToUnlock && (\n              <Button\n                buttonStyle=\"secondary\"\n                disabled={disabled || !showUnlock}\n                onClick={() => void unlock()}\n                size=\"medium\"\n              >\n                {t('authentication:forceUnlock')}\n              </Button>\n            )}\n          </div>\n        </React.Fragment>\n      )}\n      {useAPIKey && (\n        <div className={`${baseClass}__api-key`}>\n          {canReadApiKey && (\n            <Fragment>\n              <CheckboxField\n                field={{\n                  name: 'enableAPIKey',\n                  admin: { disabled, readOnly: enableAPIKeyReadOnly },\n                  label: t('authentication:enableAPIKey'),\n                }}\n                path=\"enableAPIKey\"\n                schemaPath={`${collectionSlug}.enableAPIKey`}\n              />\n              <APIKey enabled={!!enableAPIKey?.value} readOnly={apiKeyReadOnly} />\n            </Fragment>\n          )}\n        </div>\n      )}\n      {verify && isEditing && (\n        <CheckboxField\n          field={{\n            name: '_verified',\n            admin: { disabled, readOnly },\n            label: t('authentication:verified'),\n          }}\n          path=\"_verified\"\n          schemaPath={`${collectionSlug}._verified`}\n        />\n      )}\n    </div>\n  )\n}\n"],"mappings":"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","ignoreList":[]}