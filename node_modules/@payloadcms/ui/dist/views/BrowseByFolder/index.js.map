{"version":3,"file":"index.js","names":["c","_c","useDndMonitor","getTranslation","useRouter","React","Fragment","DroppableBreadcrumb","ColoredFolderIcon","CurrentFolderActions","DragOverlaySelection","FilterFolderTypePill","FolderFileTable","ItemCardGrid","SortByPill","ToggleViewButtons","Gutter","ListHeader","ListCreateNewDocInFolderButton","NoListResults","SearchBar","useStepNav","useConfig","useEditDepth","FolderProvider","useFolder","usePreferences","useRouteCache","useRouteTransition","useTranslation","useWindowInfo","ListSelection","baseClass","DefaultBrowseByFolderView","activeCollectionFolderSlugs","allCollectionFolderSlugs","allowCreateCollectionSlugs","baseFolderPath","breadcrumbs","documents","folderFieldName","folderID","FolderResultsComponent","search","subfolders","restOfProps","_jsx","BrowseByFolderViewInContext","props","$","AfterFolderList","AfterFolderListTable","BeforeFolderList","BeforeFolderListTable","Description","disableBulkDelete","disableBulkEdit","folderAssignedCollections","viewPreference","router","getEntityConfig","i18n","t","drawerDepth","setStepNav","startRouteTransition","clearRouteCache","breakpoints","t0","s","smallBreak","setPreference","visibleCollectionSlugs","dragOverlayItem","folderCollectionConfig","folderType","getFolderRoute","getSelectedItems","moveToFolder","refineFolderData","selectedItemKeys","setIsDragging","activeView","setActiveView","useState","t1","locationLabel","length","labels","plural","name","folderName","searchPlaceholder","t2","event","over","data","current","type","itemsToMove","toFolderID","id","onDragEnd","totalDocsAndSubfolders","listHeaderTitle","t3","acc","slug","index","array","collectionConfig","collectionSlug","toLowerCase","noResultsLabel","reduce","handleSetViewType","view","t4","t5","label","_jsxs","className","children","filter","Boolean","join","onClick","push","map","crumb","crumbIndex","useEffect","nonFolderCollectionSlugs","slug_0","t6","search_0","query","updateURL","DndEventListener","Actions","AfterListHeaderContent","title","TitleActions","buttonLabel","singular","collectionSlugs","Array","isArray","onCreateSuccess","slugPrefix","onSearchChange","searchQueryParam","_Fragment","items","subfolderCount","includes","Message","size","item","selectedCount","onDragCancel","onDragStart"],"sources":["../../../src/views/BrowseByFolder/index.tsx"],"sourcesContent":["'use client'\n\nimport type { DragEndEvent } from '@dnd-kit/core'\nimport type { FolderListViewClientProps } from 'payload'\n\nimport { useDndMonitor } from '@dnd-kit/core'\nimport { getTranslation } from '@payloadcms/translations'\nimport { useRouter } from 'next/navigation.js'\nimport React, { Fragment } from 'react'\n\nimport { DroppableBreadcrumb } from '../../elements/FolderView/Breadcrumbs/index.js'\nimport { ColoredFolderIcon } from '../../elements/FolderView/ColoredFolderIcon/index.js'\nimport { CurrentFolderActions } from '../../elements/FolderView/CurrentFolderActions/index.js'\nimport { DragOverlaySelection } from '../../elements/FolderView/DragOverlaySelection/index.js'\nimport { FilterFolderTypePill } from '../../elements/FolderView/FilterFolderTypePill/index.js'\nimport { FolderFileTable } from '../../elements/FolderView/FolderFileTable/index.js'\nimport { ItemCardGrid } from '../../elements/FolderView/ItemCardGrid/index.js'\nimport { SortByPill } from '../../elements/FolderView/SortByPill/index.js'\nimport { ToggleViewButtons } from '../../elements/FolderView/ToggleViewButtons/index.js'\nimport { Gutter } from '../../elements/Gutter/index.js'\nimport { ListHeader } from '../../elements/ListHeader/index.js'\nimport { ListCreateNewDocInFolderButton } from '../../elements/ListHeader/TitleActions/index.js'\nimport { NoListResults } from '../../elements/NoListResults/index.js'\nimport { SearchBar } from '../../elements/SearchBar/index.js'\nimport { useStepNav } from '../../elements/StepNav/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useEditDepth } from '../../providers/EditDepth/index.js'\nimport { FolderProvider, useFolder } from '../../providers/Folders/index.js'\nimport { usePreferences } from '../../providers/Preferences/index.js'\nimport { useRouteCache } from '../../providers/RouteCache/index.js'\nimport { useRouteTransition } from '../../providers/RouteTransition/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { useWindowInfo } from '../../providers/WindowInfo/index.js'\nimport { ListSelection } from '../CollectionFolder/ListSelection/index.js'\nimport './index.scss'\n\nconst baseClass = 'folder-list'\n\nexport function DefaultBrowseByFolderView({\n  activeCollectionFolderSlugs,\n  allCollectionFolderSlugs,\n  allowCreateCollectionSlugs,\n  baseFolderPath,\n  breadcrumbs,\n  documents,\n  folderFieldName,\n  folderID,\n  FolderResultsComponent,\n  search,\n  subfolders,\n  ...restOfProps\n}: FolderListViewClientProps) {\n  return (\n    <FolderProvider\n      activeCollectionFolderSlugs={activeCollectionFolderSlugs}\n      allCollectionFolderSlugs={allCollectionFolderSlugs}\n      allowCreateCollectionSlugs={allowCreateCollectionSlugs}\n      baseFolderPath={baseFolderPath}\n      breadcrumbs={breadcrumbs}\n      documents={documents}\n      folderFieldName={folderFieldName}\n      folderID={folderID}\n      FolderResultsComponent={FolderResultsComponent}\n      search={search}\n      subfolders={subfolders}\n    >\n      <BrowseByFolderViewInContext {...restOfProps} />\n    </FolderProvider>\n  )\n}\n\ntype BrowseByFolderViewInContextProps = Omit<\n  FolderListViewClientProps,\n  | 'activeCollectionFolderSlugs'\n  | 'allCollectionFolderSlugs'\n  | 'allowCreateCollectionSlugs'\n  | 'baseFolderPath'\n  | 'breadcrumbs'\n  | 'documents'\n  | 'folderFieldName'\n  | 'folderID'\n  | 'FolderResultsComponent'\n  | 'subfolders'\n>\n\nfunction BrowseByFolderViewInContext(props: BrowseByFolderViewInContextProps) {\n  const {\n    AfterFolderList,\n    AfterFolderListTable,\n    BeforeFolderList,\n    BeforeFolderListTable,\n    Description,\n    disableBulkDelete,\n    disableBulkEdit,\n    folderAssignedCollections,\n    viewPreference,\n  } = props\n\n  const router = useRouter()\n  const { getEntityConfig } = useConfig()\n  const { i18n, t } = useTranslation()\n  const drawerDepth = useEditDepth()\n  const { setStepNav } = useStepNav()\n  const { startRouteTransition } = useRouteTransition()\n  const { clearRouteCache } = useRouteCache()\n  const {\n    breakpoints: { s: smallBreak },\n  } = useWindowInfo()\n  const { setPreference } = usePreferences()\n  const {\n    activeCollectionFolderSlugs: visibleCollectionSlugs,\n    allowCreateCollectionSlugs,\n    breadcrumbs,\n    documents,\n    dragOverlayItem,\n    folderCollectionConfig,\n    folderID,\n    folderType,\n    getFolderRoute,\n    getSelectedItems,\n    moveToFolder,\n    refineFolderData,\n    search,\n    selectedItemKeys,\n    setIsDragging,\n    subfolders,\n  } = useFolder()\n\n  const [activeView, setActiveView] = React.useState<'grid' | 'list'>(viewPreference || 'grid')\n  const [searchPlaceholder] = React.useState(() => {\n    const locationLabel =\n      breadcrumbs.length === 0\n        ? getTranslation(folderCollectionConfig.labels?.plural, i18n)\n        : breadcrumbs[breadcrumbs.length - 1].name\n    return t('folder:searchByNameInFolder', {\n      folderName: locationLabel,\n    })\n  })\n\n  const onDragEnd = React.useCallback(\n    async (event: DragEndEvent) => {\n      if (!event.over) {\n        return\n      }\n\n      if (event.over.data.current.type === 'folder' && 'id' in event.over.data.current) {\n        await moveToFolder({\n          itemsToMove: getSelectedItems(),\n          toFolderID: event.over.data.current.id || null,\n        })\n        clearRouteCache()\n      }\n    },\n    [moveToFolder, getSelectedItems, clearRouteCache],\n  )\n\n  const totalDocsAndSubfolders = documents.length + subfolders.length\n  const listHeaderTitle = !breadcrumbs.length\n    ? t('folder:browseByFolder')\n    : breadcrumbs[breadcrumbs.length - 1].name\n  const noResultsLabel = visibleCollectionSlugs.reduce((acc, slug, index, array) => {\n    const collectionConfig = getEntityConfig({ collectionSlug: slug })\n    if (index === 0) {\n      return getTranslation(collectionConfig.labels?.plural, i18n)\n    }\n    if (index === array.length - 1) {\n      return `${acc} ${t('general:or').toLowerCase()} ${getTranslation(collectionConfig.labels?.plural, i18n)}`\n    }\n    return `${acc}, ${getTranslation(collectionConfig.labels?.plural, i18n)}`\n  }, '')\n\n  const handleSetViewType = React.useCallback(\n    (view: 'grid' | 'list') => {\n      void setPreference('browse-by-folder', {\n        viewPreference: view,\n      })\n      setActiveView(view)\n    },\n    [setPreference],\n  )\n\n  React.useEffect(() => {\n    if (!drawerDepth) {\n      setStepNav([\n        !breadcrumbs.length\n          ? {\n              label: (\n                <div className={`${baseClass}__step-nav-icon-label`} key=\"root\">\n                  <ColoredFolderIcon />\n                  {t('folder:browseByFolder')}\n                </div>\n              ),\n            }\n          : {\n              label: (\n                <DroppableBreadcrumb\n                  className={[\n                    `${baseClass}__step-nav-droppable`,\n                    `${baseClass}__step-nav-icon-label`,\n                  ]\n                    .filter(Boolean)\n                    .join(' ')}\n                  id={null}\n                  key=\"root\"\n                  onClick={() => {\n                    startRouteTransition(() => {\n                      router.push(getFolderRoute(null))\n                    })\n                  }}\n                >\n                  <ColoredFolderIcon />\n                  {t('folder:browseByFolder')}\n                </DroppableBreadcrumb>\n              ),\n            },\n        ...breadcrumbs.map((crumb, crumbIndex) => {\n          return {\n            label:\n              crumbIndex === breadcrumbs.length - 1 ? (\n                crumb.name\n              ) : (\n                <DroppableBreadcrumb\n                  className={`${baseClass}__step-nav-droppable`}\n                  id={crumb.id}\n                  key={crumb.id}\n                  onClick={() => {\n                    startRouteTransition(() => {\n                      router.push(getFolderRoute(crumb.id))\n                    })\n                  }}\n                >\n                  {crumb.name}\n                </DroppableBreadcrumb>\n              ),\n          }\n        }),\n      ])\n    }\n  }, [breadcrumbs, drawerDepth, getFolderRoute, router, setStepNav, startRouteTransition, t])\n\n  const nonFolderCollectionSlugs = allowCreateCollectionSlugs.filter(\n    (slug) => slug !== folderCollectionConfig.slug,\n  )\n\n  return (\n    <Fragment>\n      <DndEventListener onDragEnd={onDragEnd} setIsDragging={setIsDragging} />\n      <div className={`${baseClass} ${baseClass}--folders`}>\n        {BeforeFolderList}\n        <Gutter className={`${baseClass}__wrap`}>\n          <ListHeader\n            Actions={[\n              !smallBreak && (\n                <ListSelection\n                  disableBulkDelete={disableBulkDelete}\n                  disableBulkEdit={disableBulkEdit}\n                  folderAssignedCollections={folderAssignedCollections}\n                  key=\"list-selection\"\n                />\n              ),\n            ].filter(Boolean)}\n            AfterListHeaderContent={Description}\n            title={listHeaderTitle}\n            TitleActions={[\n              allowCreateCollectionSlugs.length && (\n                <ListCreateNewDocInFolderButton\n                  buttonLabel={\n                    allowCreateCollectionSlugs.length > 1\n                      ? t('general:createNew')\n                      : `${t('general:create')} ${getTranslation(folderCollectionConfig.labels?.singular, i18n).toLowerCase()}`\n                  }\n                  collectionSlugs={allowCreateCollectionSlugs}\n                  folderAssignedCollections={Array.isArray(folderType) ? folderType : []}\n                  key=\"create-new-button\"\n                  onCreateSuccess={clearRouteCache}\n                  slugPrefix=\"create-document--header-pill\"\n                />\n              ),\n            ].filter(Boolean)}\n          />\n          <SearchBar\n            Actions={[\n              <SortByPill key=\"sort-by-pill\" />,\n              folderID && <FilterFolderTypePill key=\"collection-type\" />,\n              <ToggleViewButtons\n                activeView={activeView}\n                key=\"toggle-view-buttons\"\n                setActiveView={handleSetViewType}\n              />,\n              <CurrentFolderActions key=\"current-folder-actions\" />,\n            ].filter(Boolean)}\n            label={searchPlaceholder}\n            onSearchChange={(search) => refineFolderData({ query: { search }, updateURL: true })}\n            searchQueryParam={search}\n          />\n          {BeforeFolderListTable}\n          {totalDocsAndSubfolders > 0 && (\n            <>\n              {activeView === 'grid' ? (\n                <div>\n                  {subfolders.length ? (\n                    <>\n                      <ItemCardGrid items={subfolders} title={'Folders'} type=\"folder\" />\n                    </>\n                  ) : null}\n\n                  {documents.length ? (\n                    <>\n                      <ItemCardGrid\n                        items={documents}\n                        subfolderCount={subfolders.length}\n                        title={'Documents'}\n                        type=\"file\"\n                      />\n                    </>\n                  ) : null}\n                </div>\n              ) : (\n                <FolderFileTable />\n              )}\n            </>\n          )}\n          {totalDocsAndSubfolders === 0 && (\n            <NoListResults\n              Actions={[\n                allowCreateCollectionSlugs.includes(folderCollectionConfig.slug) && (\n                  <ListCreateNewDocInFolderButton\n                    buttonLabel={`${t('general:create')} ${getTranslation(folderCollectionConfig.labels?.singular, i18n).toLowerCase()}`}\n                    collectionSlugs={[folderCollectionConfig.slug]}\n                    folderAssignedCollections={Array.isArray(folderType) ? folderType : []}\n                    key=\"create-folder\"\n                    onCreateSuccess={clearRouteCache}\n                    slugPrefix=\"create-folder--no-results\"\n                  />\n                ),\n                folderID && nonFolderCollectionSlugs.length > 0 && (\n                  <ListCreateNewDocInFolderButton\n                    buttonLabel={`${t('general:create')} ${t('general:document').toLowerCase()}`}\n                    collectionSlugs={nonFolderCollectionSlugs}\n                    folderAssignedCollections={Array.isArray(folderType) ? folderType : []}\n                    key=\"create-document\"\n                    onCreateSuccess={clearRouteCache}\n                    slugPrefix=\"create-document--no-results\"\n                  />\n                ),\n              ].filter(Boolean)}\n              Message={\n                <p>\n                  {i18n.t('general:noResults', {\n                    label: noResultsLabel,\n                  })}\n                </p>\n              }\n            />\n          )}\n          {AfterFolderListTable}\n        </Gutter>\n        {AfterFolderList}\n      </div>\n      {selectedItemKeys.size > 0 && dragOverlayItem && (\n        <DragOverlaySelection item={dragOverlayItem} selectedCount={selectedItemKeys.size} />\n      )}\n    </Fragment>\n  )\n}\nfunction DndEventListener({ onDragEnd, setIsDragging }) {\n  useDndMonitor({\n    onDragCancel() {\n      setIsDragging(false)\n    },\n    onDragEnd(event) {\n      setIsDragging(false)\n      onDragEnd(event)\n    },\n    onDragStart() {\n      setIsDragging(true)\n    },\n  })\n\n  return null\n}\n"],"mappings":"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","ignoreList":[]}