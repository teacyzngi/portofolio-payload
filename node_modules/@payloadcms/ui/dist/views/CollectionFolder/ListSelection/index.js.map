{"version":3,"file":"index.js","names":["c","_c","useModal","extractID","React","Fragment","toast","DeleteMany_v4","EditMany_v4","EditFolderAction","MoveItemsToFolderDrawer","ListSelection_v4","ListSelectionButton","PublishMany_v4","UnpublishMany_v4","useConfig","useFolder","useRouteCache","useTranslation","moveToFolderDrawerSlug","ListSelection","t0","$","disableBulkDelete","disableBulkEdit","folderAssignedCollections","clearSelections","currentFolder","folderCollectionSlug","folderFieldName","folderID","getSelectedItems","moveToFolder","clearRouteCache","config","t","closeModal","openModal","t1","t2","value","_folderOrDocumentTitle","Symbol","for","bb0","items","groupedSelections","reduce","_temp","count","length","singleNonFolderCollectionSelected","Object","keys","collectionConfig","collections","find","collection","slug","ids","_jsx","ListActions","onClick","children","filter","Boolean","SelectionActions","_jsxs","selectAll","id","type","action","drawerSlug","fromFolderID","fromFolderName","itemsToMove","onConfirm","t3","name","toFolderID","success","folderName","title","afterDelete","selections","acc","item","relationTo","push","totalCount"],"sources":["../../../../src/views/CollectionFolder/ListSelection/index.tsx"],"sourcesContent":["'use client'\n\nimport type { CollectionSlug } from 'payload'\n\nimport { useModal } from '@faceless-ui/modal'\nimport { extractID } from 'payload/shared'\nimport React, { Fragment } from 'react'\nimport { toast } from 'sonner'\n\nimport { DeleteMany_v4 } from '../../../elements/DeleteMany/index.js'\nimport { EditMany_v4 } from '../../../elements/EditMany/index.js'\nimport { EditFolderAction } from '../../../elements/FolderView/Drawers/EditFolderAction/index.js'\nimport { MoveItemsToFolderDrawer } from '../../../elements/FolderView/Drawers/MoveToFolder/index.js'\nimport { ListSelection_v4, ListSelectionButton } from '../../../elements/ListSelection/index.js'\nimport { PublishMany_v4 } from '../../../elements/PublishMany/index.js'\nimport { UnpublishMany_v4 } from '../../../elements/UnpublishMany/index.js'\nimport { useConfig } from '../../../providers/Config/index.js'\nimport { useFolder } from '../../../providers/Folders/index.js'\nimport { useRouteCache } from '../../../providers/RouteCache/index.js'\nimport { useTranslation } from '../../../providers/Translation/index.js'\n\nconst moveToFolderDrawerSlug = 'move-to-folder--list'\n\ntype GroupedSelections = {\n  [relationTo: string]: {\n    all?: boolean\n    ids?: (number | string)[]\n    totalCount: number\n  }\n}\n\nexport type ListSelectionProps = {\n  disableBulkDelete?: boolean\n  disableBulkEdit?: boolean\n  folderAssignedCollections: CollectionSlug[]\n}\n\nexport const ListSelection: React.FC<ListSelectionProps> = ({\n  disableBulkDelete,\n  disableBulkEdit,\n  folderAssignedCollections,\n}) => {\n  const {\n    clearSelections,\n    currentFolder,\n    folderCollectionSlug,\n    folderFieldName,\n    folderID,\n    getSelectedItems,\n    moveToFolder,\n  } = useFolder()\n\n  const { clearRouteCache } = useRouteCache()\n  const { config } = useConfig()\n  const { t } = useTranslation()\n  const { closeModal, openModal } = useModal()\n  const items = getSelectedItems()\n\n  const groupedSelections: GroupedSelections = items.reduce((acc, item) => {\n    if (item) {\n      if (acc[item.relationTo]) {\n        acc[item.relationTo].ids.push(extractID(item.value))\n        acc[item.relationTo].totalCount += 1\n      } else {\n        acc[item.relationTo] = {\n          ids: [extractID(item.value)],\n          totalCount: 1,\n        }\n      }\n    }\n\n    return acc\n  }, {} as GroupedSelections)\n\n  const count = items.length\n  const singleNonFolderCollectionSelected =\n    Object.keys(groupedSelections).length === 1 &&\n    Object.keys(groupedSelections)[0] !== folderCollectionSlug\n  const collectionConfig = singleNonFolderCollectionSelected\n    ? config.collections.find((collection) => {\n        return collection.slug === Object.keys(groupedSelections)[0]\n      })\n    : null\n\n  if (count === 0) {\n    return null\n  }\n\n  const ids = singleNonFolderCollectionSelected\n    ? groupedSelections[Object.keys(groupedSelections)[0]]?.ids || []\n    : []\n\n  return (\n    <ListSelection_v4\n      count={count}\n      ListActions={[\n        count > 0 && (\n          <ListSelectionButton key=\"clear-all\" onClick={() => clearSelections()}>\n            {t('general:clearAll')}\n          </ListSelectionButton>\n        ),\n      ].filter(Boolean)}\n      SelectionActions={[\n        !disableBulkEdit && ids.length && (\n          <Fragment key=\"bulk-actions\">\n            <EditMany_v4 collection={collectionConfig} count={count} ids={ids} selectAll={false} />\n            <PublishMany_v4\n              collection={collectionConfig}\n              count={count}\n              ids={ids}\n              selectAll={false}\n            />\n            <UnpublishMany_v4\n              collection={collectionConfig}\n              count={count}\n              ids={ids}\n              selectAll={false}\n            />\n          </Fragment>\n        ),\n        count === 1 && !singleNonFolderCollectionSelected && (\n          <EditFolderAction\n            folderCollectionSlug={folderCollectionSlug}\n            id={groupedSelections[folderCollectionSlug].ids[0]}\n            key=\"edit-folder-action\"\n          />\n        ),\n        count > 0 ? (\n          <React.Fragment key={moveToFolderDrawerSlug}>\n            <ListSelectionButton\n              onClick={() => {\n                openModal(moveToFolderDrawerSlug)\n              }}\n              type=\"button\"\n            >\n              {t('general:move')}\n            </ListSelectionButton>\n\n            <MoveItemsToFolderDrawer\n              action=\"moveItemsToFolder\"\n              drawerSlug={moveToFolderDrawerSlug}\n              folderAssignedCollections={folderAssignedCollections}\n              folderCollectionSlug={folderCollectionSlug}\n              folderFieldName={folderFieldName}\n              fromFolderID={folderID}\n              fromFolderName={currentFolder?.value?._folderOrDocumentTitle}\n              itemsToMove={getSelectedItems()}\n              onConfirm={async ({ id, name }) => {\n                await moveToFolder({\n                  itemsToMove: getSelectedItems(),\n                  toFolderID: id,\n                })\n\n                if (id) {\n                  // moved to folder\n                  toast.success(\n                    t('folder:itemsMovedToFolder', {\n                      folderName: `\"${name}\"`,\n                      title: `${count} ${count > 1 ? t('general:items') : t('general:item')}`,\n                    }),\n                  )\n                } else {\n                  // moved to root\n                  toast.success(\n                    t('folder:itemsMovedToRoot', {\n                      title: `${count} ${count > 1 ? t('general:items') : t('general:item')}`,\n                    }),\n                  )\n                }\n\n                clearRouteCache()\n                closeModal(moveToFolderDrawerSlug)\n              }}\n            />\n          </React.Fragment>\n        ) : null,\n        !disableBulkDelete && (\n          <DeleteMany_v4\n            afterDelete={() => {\n              clearRouteCache()\n              clearSelections()\n            }}\n            key=\"bulk-delete\"\n            selections={groupedSelections}\n          />\n        ),\n      ].filter(Boolean)}\n    />\n  )\n}\n"],"mappings":"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","ignoreList":[]}