{"version":3,"file":"index.js","names":["c","_c","useDndMonitor","getTranslation","useRouter","formatAdminURL","React","Fragment","DefaultListViewTabs","DroppableBreadcrumb","ColoredFolderIcon","CurrentFolderActions","DragOverlaySelection","SortByPill","ToggleViewButtons","Gutter","ListHeader","ListBulkUploadButton","ListCreateNewDocInFolderButton","NoListResults","SearchBar","useStepNav","useConfig","useEditDepth","FolderProvider","useFolder","usePreferences","useRouteCache","useRouteTransition","useTranslation","useWindowInfo","ListSelection","baseClass","DefaultCollectionFolderView","allCollectionFolderSlugs","folderCollectionSlugs","allowCreateCollectionSlugs","baseFolderPath","breadcrumbs","documents","folderFieldName","folderID","FolderResultsComponent","search","sort","subfolders","restOfProps","_jsx","CollectionFolderViewInContext","props","$","AfterFolderList","AfterFolderListTable","BeforeFolderList","BeforeFolderListTable","collectionSlug","Description","disableBulkDelete","disableBulkEdit","viewPreference","config","getEntityConfig","i18n","t","drawerDepth","setStepNav","setPreference","dragOverlayItem","folderCollectionConfig","folderCollectionSlug","folderType","getSelectedItems","moveToFolder","refineFolderData","selectedItemKeys","setIsDragging","router","startRouteTransition","clearRouteCache","collectionConfig","labels","upload","isUploadCollection","Boolean","isBulkUploadEnabled","bulkUpload","breakpoints","t0","s","smallBreak","t1","event","over","data","current","type","itemsToMove","toFolderID","id","t2","error","console","onDragEnd","handleSetViewType","view","useEffect","length","label","_jsxs","className","children","plural","filter","join","onClick","folders","push","adminRoute","routes","admin","path","slug","map","crumb","crumbIndex","name","totalDocsAndSubfolders","search_0","query","updateURL","DndEventListener","Actions","folderAssignedCollections","Array","isArray","viewType","AfterListHeaderContent","title","TitleActions","buttonLabel","singular","toLowerCase","collectionSlugs","onCreateSuccess","slugPrefix","hasCreatePermission","includes","activeView","setActiveView","onSearchChange","searchQueryParam","Message","size","item","selectedCount","onDragCancel","onDragStart"],"sources":["../../../src/views/CollectionFolder/index.tsx"],"sourcesContent":["'use client'\n\nimport type { DragEndEvent } from '@dnd-kit/core'\nimport type { FolderListViewClientProps } from 'payload'\n\nimport { useDndMonitor } from '@dnd-kit/core'\nimport { getTranslation } from '@payloadcms/translations'\nimport { useRouter } from 'next/navigation.js'\nimport { formatAdminURL } from 'payload/shared'\nimport React, { Fragment } from 'react'\n\nimport { DefaultListViewTabs } from '../../elements/DefaultListViewTabs/index.js'\nimport { DroppableBreadcrumb } from '../../elements/FolderView/Breadcrumbs/index.js'\nimport { ColoredFolderIcon } from '../../elements/FolderView/ColoredFolderIcon/index.js'\nimport { CurrentFolderActions } from '../../elements/FolderView/CurrentFolderActions/index.js'\nimport { DragOverlaySelection } from '../../elements/FolderView/DragOverlaySelection/index.js'\nimport { SortByPill } from '../../elements/FolderView/SortByPill/index.js'\nimport { ToggleViewButtons } from '../../elements/FolderView/ToggleViewButtons/index.js'\nimport { Gutter } from '../../elements/Gutter/index.js'\nimport { ListHeader } from '../../elements/ListHeader/index.js'\nimport {\n  ListBulkUploadButton,\n  ListCreateNewDocInFolderButton,\n} from '../../elements/ListHeader/TitleActions/index.js'\nimport { NoListResults } from '../../elements/NoListResults/index.js'\nimport { SearchBar } from '../../elements/SearchBar/index.js'\nimport { useStepNav } from '../../elements/StepNav/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useEditDepth } from '../../providers/EditDepth/index.js'\nimport { FolderProvider, useFolder } from '../../providers/Folders/index.js'\nimport { usePreferences } from '../../providers/Preferences/index.js'\nimport { useRouteCache } from '../../providers/RouteCache/index.js'\nimport './index.scss'\nimport { useRouteTransition } from '../../providers/RouteTransition/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { useWindowInfo } from '../../providers/WindowInfo/index.js'\nimport { ListSelection } from './ListSelection/index.js'\n\nconst baseClass = 'collection-folder-list'\n\nexport function DefaultCollectionFolderView({\n  allCollectionFolderSlugs: folderCollectionSlugs,\n  allowCreateCollectionSlugs,\n  baseFolderPath,\n  breadcrumbs,\n  documents,\n  folderFieldName,\n  folderID,\n  FolderResultsComponent,\n  search,\n  sort,\n  subfolders,\n  ...restOfProps\n}: FolderListViewClientProps) {\n  return (\n    <FolderProvider\n      allCollectionFolderSlugs={folderCollectionSlugs}\n      allowCreateCollectionSlugs={allowCreateCollectionSlugs}\n      baseFolderPath={baseFolderPath}\n      breadcrumbs={breadcrumbs}\n      documents={documents}\n      folderFieldName={folderFieldName}\n      folderID={folderID}\n      FolderResultsComponent={FolderResultsComponent}\n      search={search}\n      sort={sort}\n      subfolders={subfolders}\n    >\n      <CollectionFolderViewInContext {...restOfProps} />\n    </FolderProvider>\n  )\n}\n\ntype CollectionFolderViewInContextProps = Omit<\n  FolderListViewClientProps,\n  | 'allCollectionFolderSlugs'\n  | 'allowCreateCollectionSlugs'\n  | 'baseFolderPath'\n  | 'breadcrumbs'\n  | 'documents'\n  | 'folderFieldName'\n  | 'folderID'\n  | 'FolderResultsComponent'\n  | 'subfolders'\n>\n\nfunction CollectionFolderViewInContext(props: CollectionFolderViewInContextProps) {\n  const {\n    AfterFolderList,\n    AfterFolderListTable,\n    BeforeFolderList,\n    BeforeFolderListTable,\n    collectionSlug,\n    Description,\n    disableBulkDelete,\n    disableBulkEdit,\n    search,\n    viewPreference,\n  } = props\n\n  const { config, getEntityConfig } = useConfig()\n  const { i18n, t } = useTranslation()\n  const drawerDepth = useEditDepth()\n  const { setStepNav } = useStepNav()\n  const { setPreference } = usePreferences()\n  const {\n    allowCreateCollectionSlugs,\n    breadcrumbs,\n    documents,\n    dragOverlayItem,\n    folderCollectionConfig,\n    folderCollectionSlug,\n    FolderResultsComponent,\n    folderType,\n    getSelectedItems,\n    moveToFolder,\n    refineFolderData,\n    selectedItemKeys,\n    setIsDragging,\n    subfolders,\n  } = useFolder()\n\n  const router = useRouter()\n  const { startRouteTransition } = useRouteTransition()\n  const { clearRouteCache } = useRouteCache()\n\n  const collectionConfig = getEntityConfig({ collectionSlug })\n\n  const { labels, upload } = collectionConfig\n  const isUploadCollection = Boolean(upload)\n  const isBulkUploadEnabled = isUploadCollection && collectionConfig.upload.bulkUpload\n\n  const {\n    breakpoints: { s: smallBreak },\n  } = useWindowInfo()\n\n  const onDragEnd = React.useCallback(\n    async (event: DragEndEvent) => {\n      if (!event.over) {\n        return\n      }\n\n      if (event.over.data.current.type === 'folder' && 'id' in event.over.data.current) {\n        try {\n          await moveToFolder({\n            itemsToMove: getSelectedItems(),\n            toFolderID: event.over.data.current.id,\n          })\n        } catch (error) {\n          // eslint-disable-next-line no-console\n          console.error('Error moving items:', error)\n        }\n\n        clearRouteCache()\n      }\n    },\n    [moveToFolder, getSelectedItems, clearRouteCache],\n  )\n\n  const handleSetViewType = React.useCallback(\n    async (view: 'grid' | 'list') => {\n      await setPreference(`${collectionSlug}-collection-folder`, {\n        viewPreference: view,\n      })\n      clearRouteCache()\n    },\n    [collectionSlug, setPreference, clearRouteCache],\n  )\n\n  React.useEffect(() => {\n    if (!drawerDepth) {\n      setStepNav([\n        !breadcrumbs.length\n          ? {\n              label: (\n                <div className={`${baseClass}__step-nav-icon-label`} key=\"root\">\n                  <ColoredFolderIcon />\n                  {getTranslation(labels?.plural, i18n)}\n                </div>\n              ),\n            }\n          : {\n              label: (\n                <DroppableBreadcrumb\n                  className={[\n                    `${baseClass}__step-nav-droppable`,\n                    `${baseClass}__step-nav-icon-label`,\n                  ]\n                    .filter(Boolean)\n                    .join(' ')}\n                  id={null}\n                  key=\"root\"\n                  onClick={() => {\n                    startRouteTransition(() => {\n                      if (config.folders) {\n                        router.push(\n                          formatAdminURL({\n                            adminRoute: config.routes.admin,\n                            path: `/collections/${collectionSlug}/${config.folders.slug}`,\n                          }),\n                        )\n                      }\n                    })\n                  }}\n                >\n                  <ColoredFolderIcon />\n                  {getTranslation(labels?.plural, i18n)}\n                </DroppableBreadcrumb>\n              ),\n            },\n        ...breadcrumbs.map((crumb, crumbIndex) => {\n          return {\n            label:\n              crumbIndex === breadcrumbs.length - 1 ? (\n                crumb.name\n              ) : (\n                <DroppableBreadcrumb\n                  className={`${baseClass}__step-nav-droppable`}\n                  id={crumb.id}\n                  key={crumb.id}\n                  onClick={() => {\n                    startRouteTransition(() => {\n                      if (config.folders) {\n                        router.push(\n                          formatAdminURL({\n                            adminRoute: config.routes.admin,\n                            path: `/collections/${collectionSlug}/${config.folders.slug}/${crumb.id}`,\n                          }),\n                        )\n                      }\n                    })\n                  }}\n                >\n                  {crumb.name}\n                </DroppableBreadcrumb>\n              ),\n          }\n        }),\n      ])\n    }\n  }, [\n    breadcrumbs,\n    collectionSlug,\n    config.folders,\n    config.routes.admin,\n    drawerDepth,\n    i18n,\n    labels?.plural,\n    router,\n    setStepNav,\n    startRouteTransition,\n  ])\n\n  const totalDocsAndSubfolders = documents.length + subfolders.length\n\n  return (\n    <Fragment>\n      <DndEventListener onDragEnd={onDragEnd} setIsDragging={setIsDragging} />\n\n      <div className={`${baseClass} ${baseClass}--${collectionSlug}`}>\n        {BeforeFolderList}\n        <Gutter className={`${baseClass}__wrap`}>\n          <ListHeader\n            Actions={[\n              !smallBreak && (\n                <ListSelection\n                  disableBulkDelete={disableBulkDelete}\n                  disableBulkEdit={collectionConfig.disableBulkEdit ?? disableBulkEdit}\n                  folderAssignedCollections={\n                    Array.isArray(folderType) ? folderType : [collectionSlug]\n                  }\n                  key=\"list-selection\"\n                />\n              ),\n              <DefaultListViewTabs\n                collectionConfig={collectionConfig}\n                config={config}\n                key=\"default-list-actions\"\n                viewType=\"folders\"\n              />,\n            ].filter(Boolean)}\n            AfterListHeaderContent={Description}\n            title={getTranslation(labels?.plural, i18n)}\n            TitleActions={[\n              allowCreateCollectionSlugs.length && (\n                <ListCreateNewDocInFolderButton\n                  buttonLabel={\n                    allowCreateCollectionSlugs.length > 1\n                      ? t('general:createNew')\n                      : `${t('general:create')} ${getTranslation(folderCollectionConfig.labels?.singular, i18n).toLowerCase()}`\n                  }\n                  collectionSlugs={allowCreateCollectionSlugs}\n                  folderAssignedCollections={\n                    Array.isArray(folderType) ? folderType : [collectionSlug]\n                  }\n                  key=\"create-new-button\"\n                  onCreateSuccess={clearRouteCache}\n                  slugPrefix=\"create-document--header-pill\"\n                />\n              ),\n              <ListBulkUploadButton\n                collectionSlug={collectionSlug}\n                hasCreatePermission={allowCreateCollectionSlugs.includes(collectionSlug)}\n                isBulkUploadEnabled={isBulkUploadEnabled}\n                key=\"bulk-upload-button\"\n              />,\n            ].filter(Boolean)}\n          />\n          <SearchBar\n            Actions={[\n              <SortByPill key=\"sort-by-pill\" />,\n              <ToggleViewButtons\n                activeView={viewPreference}\n                key=\"toggle-view-buttons\"\n                setActiveView={handleSetViewType}\n              />,\n              <CurrentFolderActions key=\"current-folder-actions\" />,\n            ].filter(Boolean)}\n            label={t('general:searchBy', {\n              label: t('general:name'),\n            })}\n            onSearchChange={(search) => refineFolderData({ query: { search }, updateURL: true })}\n            searchQueryParam={search}\n          />\n          {BeforeFolderListTable}\n          {totalDocsAndSubfolders > 0 && FolderResultsComponent}\n          {totalDocsAndSubfolders === 0 && (\n            <NoListResults\n              Actions={[\n                allowCreateCollectionSlugs.includes(folderCollectionSlug) && (\n                  <ListCreateNewDocInFolderButton\n                    buttonLabel={`${t('general:create')} ${getTranslation(folderCollectionConfig.labels?.singular, i18n).toLowerCase()}`}\n                    collectionSlugs={[folderCollectionConfig.slug]}\n                    folderAssignedCollections={\n                      Array.isArray(folderType) ? folderType : [collectionSlug]\n                    }\n                    key=\"create-folder\"\n                    onCreateSuccess={clearRouteCache}\n                    slugPrefix=\"create-folder--no-results\"\n                  />\n                ),\n                allowCreateCollectionSlugs.includes(collectionSlug) && (\n                  <ListCreateNewDocInFolderButton\n                    buttonLabel={`${t('general:create')} ${t('general:document').toLowerCase()}`}\n                    collectionSlugs={[collectionSlug]}\n                    folderAssignedCollections={\n                      Array.isArray(folderType) ? folderType : [collectionSlug]\n                    }\n                    key=\"create-document\"\n                    onCreateSuccess={clearRouteCache}\n                    slugPrefix=\"create-document--no-results\"\n                  />\n                ),\n              ].filter(Boolean)}\n              Message={\n                <p>\n                  {i18n.t('general:noResults', {\n                    label: `${getTranslation(labels?.plural, i18n)} ${t('general:or').toLowerCase()} ${getTranslation(\n                      folderCollectionConfig.labels?.plural,\n                      i18n,\n                    )}`,\n                  })}\n                </p>\n              }\n            />\n          )}\n          {AfterFolderListTable}\n        </Gutter>\n        {AfterFolderList}\n      </div>\n      {selectedItemKeys.size > 0 && dragOverlayItem && (\n        <DragOverlaySelection item={dragOverlayItem} selectedCount={selectedItemKeys.size} />\n      )}\n    </Fragment>\n  )\n}\n\nfunction DndEventListener({ onDragEnd, setIsDragging }) {\n  useDndMonitor({\n    onDragCancel() {\n      setIsDragging(false)\n    },\n    onDragEnd(event) {\n      setIsDragging(false)\n      onDragEnd(event)\n    },\n    onDragStart() {\n      setIsDragging(true)\n    },\n  })\n\n  return null\n}\n"],"mappings":"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","ignoreList":[]}