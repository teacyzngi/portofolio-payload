{"version":3,"file":"validOperators.js","names":["getOperatorValueTypes","fieldType","all","contains","equals","exists","greater_than","greater_than_equal","in","intersects","less_than","less_than_equal","like","near","not_equals","not_in","not_like","within"],"sources":["../../../../src/elements/WhereBuilder/Condition/validOperators.ts"],"sourcesContent":["export const getOperatorValueTypes = (fieldType) => {\n  return {\n    all: 'any',\n    contains: 'string',\n    equals: 'any',\n    /*\n     * exists:\n     * The expected value is boolean, but it's passed as a string ('true' or 'false').\n     * Need to additionally check if the value is strictly 'true' or 'false' as a string,\n     * rather than using a direct typeof comparison.\n     * This is handled as:\n     * validOperatorValue === 'boolean' && (value === 'true' || value === 'false')\n     */\n    exists: 'boolean',\n    /*\n     * greater_than, greater_than_equal, less_than, less_than_equal:\n     * Used for number and date fields:\n     * - For date fields, the value is an object (e.g., Mon Feb 17 2025 12:00:00 GMT+0000).\n     * - For number fields, the value is a string representing the number.\n     */\n    greater_than: fieldType === 'date' ? 'object' : 'string',\n    greater_than_equal: fieldType === 'date' ? 'object' : 'string',\n    in: 'any',\n    intersects: 'any',\n    less_than: fieldType === 'date' ? 'object' : 'string',\n    less_than_equal: fieldType === 'date' ? 'object' : 'string',\n    like: 'string',\n    near: 'any',\n    not_equals: 'any',\n    not_in: 'any',\n    not_like: 'string',\n    within: 'any',\n  }\n}\n"],"mappings":"AAAA,OAAO,MAAMA,qBAAA,GAAyBC,SAAA;EACpC,OAAO;IACLC,GAAA,EAAK;IACLC,QAAA,EAAU;IACVC,MAAA,EAAQ;IACR;;;;;;;;IAQAC,MAAA,EAAQ;IACR;;;;;;IAMAC,YAAA,EAAcL,SAAA,KAAc,SAAS,WAAW;IAChDM,kBAAA,EAAoBN,SAAA,KAAc,SAAS,WAAW;IACtDO,EAAA,EAAI;IACJC,UAAA,EAAY;IACZC,SAAA,EAAWT,SAAA,KAAc,SAAS,WAAW;IAC7CU,eAAA,EAAiBV,SAAA,KAAc,SAAS,WAAW;IACnDW,IAAA,EAAM;IACNC,IAAA,EAAM;IACNC,UAAA,EAAY;IACZC,MAAA,EAAQ;IACRC,QAAA,EAAU;IACVC,MAAA,EAAQ;EACV;AACF","ignoreList":[]}