{"version":3,"file":"index.client.js","names":["React","useEffect","MoveDocToFolderButton","useConfig","useTranslation","FolderTableCellClient","collectionSlug","data","docTitle","folderCollectionSlug","folderFieldName","viewType","docID","id","intialFolderID","config","t","fromFolderName","setFromFolderName","useState","fromFolderID","setFromFolderID","hasLoadedFolderName","useRef","onConfirm","useCallback","name","fetch","routes","api","body","JSON","stringify","credentials","headers","method","error","console","loadFolderName","req","res","json","current","_jsx","buttonProps","disabled","size","docData","modalSlug","skipConfirmModal"],"sources":["../../../../src/elements/FolderView/Cell/index.client.tsx"],"sourcesContent":["'use client'\n\nimport type { Data, ViewTypes } from 'payload'\nimport type { FolderOrDocument } from 'payload/shared'\n\nimport React, { useEffect } from 'react'\n\n// eslint-disable-next-line payload/no-imports-from-exports-dir\nimport { MoveDocToFolderButton, useConfig, useTranslation } from '../../../exports/client/index.js'\n\ntype Props = {\n  readonly collectionSlug: string\n  readonly data: Data\n  readonly docTitle: string\n  readonly folderCollectionSlug: string\n  readonly folderFieldName: string\n  readonly viewType?: ViewTypes\n}\n\nexport const FolderTableCellClient = ({\n  collectionSlug,\n  data,\n  docTitle,\n  folderCollectionSlug,\n  folderFieldName,\n  viewType,\n}: Props) => {\n  const docID = data.id\n  const intialFolderID = data?.[folderFieldName]\n\n  const { config } = useConfig()\n  const { t } = useTranslation()\n  const [fromFolderName, setFromFolderName] = React.useState(() =>\n    intialFolderID ? `${t('general:loading')}...` : t('folder:noFolder'),\n  )\n  const [fromFolderID, setFromFolderID] = React.useState(intialFolderID)\n\n  const hasLoadedFolderName = React.useRef(false)\n\n  const onConfirm = React.useCallback(\n    async ({ id, name }) => {\n      try {\n        await fetch(`${config.routes.api}/${collectionSlug}/${docID}`, {\n          body: JSON.stringify({\n            [folderFieldName]: id,\n          }),\n          credentials: 'include',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          method: 'PATCH',\n        })\n\n        setFromFolderID(id)\n        setFromFolderName(name || t('folder:noFolder'))\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('Error moving document to folder', error)\n      }\n    },\n    [config.routes.api, collectionSlug, docID, folderFieldName, t],\n  )\n\n  useEffect(() => {\n    const loadFolderName = async () => {\n      try {\n        const req = await fetch(\n          `${config.routes.api}/${folderCollectionSlug}${intialFolderID ? `/${intialFolderID}` : ''}`,\n          {\n            credentials: 'include',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            method: 'GET',\n          },\n        )\n\n        const res = await req.json()\n        setFromFolderName(res?.name || t('folder:noFolder'))\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('Error moving document to folder', error)\n      }\n    }\n\n    if (!hasLoadedFolderName.current) {\n      void loadFolderName()\n      hasLoadedFolderName.current = true\n    }\n  }, [config.routes.api, folderCollectionSlug, intialFolderID, t])\n\n  return (\n    <MoveDocToFolderButton\n      buttonProps={{\n        disabled: viewType === 'trash',\n        size: 'small',\n      }}\n      collectionSlug={collectionSlug}\n      docData={data as FolderOrDocument['value']}\n      docID={docID}\n      docTitle={docTitle}\n      folderCollectionSlug={folderCollectionSlug}\n      folderFieldName={folderFieldName}\n      fromFolderID={fromFolderID}\n      fromFolderName={fromFolderName}\n      modalSlug={`move-doc-to-folder-cell--${docID}`}\n      onConfirm={onConfirm}\n      skipConfirmModal={false}\n    />\n  )\n}\n"],"mappings":"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","ignoreList":[]}