{"version":3,"file":"index.js","names":["DragOverlay","getEventCoordinates","FolderFileCard","baseClass","DragOverlaySelection","item","selectedCount","_jsx","dropAnimation","modifiers","snapTopLeftToCursor","style","height","maxWidth","_jsxs","className","Array","from","length","map","_","index","right","top","id","isSelected","itemKey","title","value","_folderOrDocumentTitle","type","activatorEvent","draggingNodeRect","transform","activatorCoordinates","offsetX","x","left","offsetY","y"],"sources":["../../../../src/elements/FolderView/DragOverlaySelection/index.tsx"],"sourcesContent":["import type { Modifier } from '@dnd-kit/core'\nimport type { FolderOrDocument } from 'payload/shared'\n\nimport { DragOverlay } from '@dnd-kit/core'\nimport { getEventCoordinates } from '@dnd-kit/utilities'\n\nimport { FolderFileCard } from '../FolderFileCard/index.js'\nimport './index.scss'\n\nconst baseClass = 'drag-overlay-selection'\n\ntype DragCardsProps = {\n  readonly item: FolderOrDocument\n  readonly selectedCount: number\n}\nexport function DragOverlaySelection({ item, selectedCount }: DragCardsProps) {\n  return (\n    <DragOverlay\n      dropAnimation={null}\n      modifiers={[snapTopLeftToCursor]}\n      style={{\n        height: 'unset',\n        maxWidth: '220px',\n      }}\n    >\n      <div className={`${baseClass}__cards`}>\n        {Array.from({ length: selectedCount > 1 ? 2 : 1 }).map((_, index) => (\n          <div\n            className={`${baseClass}__card`}\n            key={index}\n            style={{\n              right: `${index * 3}px`,\n              top: `-${index * 3}px`,\n            }}\n          >\n            <FolderFileCard\n              id={null}\n              isSelected\n              itemKey=\"overlay-card\"\n              title={item.value._folderOrDocumentTitle}\n              type=\"folder\"\n            />\n          </div>\n        ))}\n        {selectedCount > 1 ? (\n          <span className={`${baseClass}__card-count`}>{selectedCount}</span>\n        ) : null}\n      </div>\n    </DragOverlay>\n  )\n}\n\nexport const snapTopLeftToCursor: Modifier = ({ activatorEvent, draggingNodeRect, transform }) => {\n  if (draggingNodeRect && activatorEvent) {\n    const activatorCoordinates = getEventCoordinates(activatorEvent)\n\n    if (!activatorCoordinates) {\n      return transform\n    }\n\n    const offsetX = activatorCoordinates.x - draggingNodeRect.left\n    const offsetY = activatorCoordinates.y - draggingNodeRect.top\n\n    return {\n      ...transform,\n      x: transform.x + offsetX + 5,\n      y: transform.y + offsetY + 5,\n    }\n  }\n\n  return transform\n}\n"],"mappings":";AAGA,SAASA,WAAW,QAAQ;AAC5B,SAASC,mBAAmB,QAAQ;AAEpC,SAASC,cAAc,QAAQ;AAC/B,OAAO;AAEP,MAAMC,SAAA,GAAY;AAMlB,OAAO,SAASC,qBAAqB;EAAEC,IAAI;EAAEC;AAAa,CAAkB;EAC1E,oBACEC,IAAA,CAACP,WAAA;IACCQ,aAAA,EAAe;IACfC,SAAA,EAAW,CAACC,mBAAA,CAAoB;IAChCC,KAAA,EAAO;MACLC,MAAA,EAAQ;MACRC,QAAA,EAAU;IACZ;cAEA,aAAAC,KAAA,CAAC;MAAIC,SAAA,EAAW,GAAGZ,SAAA,SAAkB;iBAClCa,KAAA,CAAMC,IAAI,CAAC;QAAEC,MAAA,EAAQZ,aAAA,GAAgB,IAAI,IAAI;MAAE,GAAGa,GAAG,CAAC,CAACC,CAAA,EAAGC,KAAA,kBACzDd,IAAA,CAAC;QACCQ,SAAA,EAAW,GAAGZ,SAAA,QAAiB;QAE/BQ,KAAA,EAAO;UACLW,KAAA,EAAO,GAAGD,KAAA,GAAQ,KAAK;UACvBE,GAAA,EAAK,IAAIF,KAAA,GAAQ;QACnB;kBAEA,aAAAd,IAAA,CAACL,cAAA;UACCsB,EAAA,EAAI;UACJC,UAAU;UACVC,OAAA,EAAQ;UACRC,KAAA,EAAOtB,IAAA,CAAKuB,KAAK,CAACC,sBAAsB;UACxCC,IAAA,EAAK;;SAXFT,KAAA,IAeRf,aAAA,GAAgB,iBACfC,IAAA,CAAC;QAAKQ,SAAA,EAAW,GAAGZ,SAAA,cAAuB;kBAAGG;WAC5C;;;AAIZ;AAEA,OAAO,MAAMI,mBAAA,GAAgCA,CAAC;EAAEqB,cAAc;EAAEC,gBAAgB;EAAEC;AAAS,CAAE;EAC3F,IAAID,gBAAA,IAAoBD,cAAA,EAAgB;IACtC,MAAMG,oBAAA,GAAuBjC,mBAAA,CAAoB8B,cAAA;IAEjD,IAAI,CAACG,oBAAA,EAAsB;MACzB,OAAOD,SAAA;IACT;IAEA,MAAME,OAAA,GAAUD,oBAAA,CAAqBE,CAAC,GAAGJ,gBAAA,CAAiBK,IAAI;IAC9D,MAAMC,OAAA,GAAUJ,oBAAA,CAAqBK,CAAC,GAAGP,gBAAA,CAAiBT,GAAG;IAE7D,OAAO;MACL,GAAGU,SAAS;MACZG,CAAA,EAAGH,SAAA,CAAUG,CAAC,GAAGD,OAAA,GAAU;MAC3BI,CAAA,EAAGN,SAAA,CAAUM,CAAC,GAAGD,OAAA,GAAU;IAC7B;EACF;EAEA,OAAOL,SAAA;AACT","ignoreList":[]}