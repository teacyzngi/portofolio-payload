{"version":3,"file":"index.js","names":["c","_c","getTranslation","extractID","React","DocumentIcon","useConfig","useFolder","useTranslation","formatDate","ColoredFolderIcon","DraggableTableRow","SimpleTable","TableHeader","baseClass","FolderFileTable","t0","$","showRelationCell","t1","undefined","checkIfItemIsDisabled","documents","focusedRowIndex","onItemClick","onItemKeyPress","selectedItemKeys","subfolders","config","i18n","t","t2","map","collections","forEach","collection","slug","plural","labels","singular","relationToMap","useState","t3","columnsToShow","name","label","push","columns","t4","t5","subfolder","rowIndex","itemKey","relationTo","value","subfolderID","_jsx","t6","index","name_0","cellValue","_folderOrDocumentTitle","pattern","admin","dateFormat","Array","isArray","folderType","reduce","acc","index_0","_jsxs","className","children","disabled","dragData","id","type","isDroppable","isFocused","isSelected","has","isSelecting","size","onClick","event","item","onKeyDown","event_0","length","document","unadjustedIndex","itemKey_0","relationTo_0","value_0","documentID","rowIndex_0","t7","index_1","name_1","cellValue_0","event_1","event_2","headerCells","_temp","tableRows"],"sources":["../../../../src/elements/FolderView/FolderFileTable/index.tsx"],"sourcesContent":["'use client'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport { extractID } from 'payload/shared'\nimport React from 'react'\n\nimport { DocumentIcon } from '../../../icons/Document/index.js'\nimport { useConfig } from '../../../providers/Config/index.js'\nimport { useFolder } from '../../../providers/Folders/index.js'\nimport { useTranslation } from '../../../providers/Translation/index.js'\nimport { formatDate } from '../../../utilities/formatDocTitle/formatDateTitle.js'\nimport { ColoredFolderIcon } from '../ColoredFolderIcon/index.js'\nimport { DraggableTableRow } from '../DraggableTableRow/index.js'\nimport { SimpleTable, TableHeader } from '../SimpleTable/index.js'\nimport './index.scss'\n\nconst baseClass = 'folder-file-table'\n\ntype Props = {\n  showRelationCell?: boolean\n}\n\nexport function FolderFileTable({ showRelationCell = true }: Props) {\n  const {\n    checkIfItemIsDisabled,\n    documents,\n    focusedRowIndex,\n    onItemClick,\n    onItemKeyPress,\n    selectedItemKeys,\n    subfolders,\n  } = useFolder()\n  const { config } = useConfig()\n  const { i18n, t } = useTranslation()\n\n  const [relationToMap] = React.useState(() => {\n    const map: Record<string, { plural: string; singular: string }> = {}\n    config.collections.forEach((collection) => {\n      map[collection.slug] = {\n        plural: getTranslation(collection.labels?.plural, i18n),\n        singular: getTranslation(collection.labels?.singular, i18n),\n      }\n    })\n    return map\n  })\n\n  const [columns] = React.useState(() => {\n    const columnsToShow = [\n      {\n        name: 'name',\n        label: t('general:name'),\n      },\n      {\n        name: 'createdAt',\n        label: t('general:createdAt'),\n      },\n      {\n        name: 'updatedAt',\n        label: t('general:updatedAt'),\n      },\n    ]\n\n    if (showRelationCell) {\n      columnsToShow.push({\n        name: 'type',\n        label: t('version:type'),\n      })\n    }\n\n    return columnsToShow\n  })\n\n  return (\n    <SimpleTable\n      headerCells={columns.map(({ name, label }) => (\n        <TableHeader key={name}>{label}</TableHeader>\n      ))}\n      tableRows={[\n        ...subfolders.map((subfolder, rowIndex) => {\n          const { itemKey, relationTo, value } = subfolder\n          const subfolderID = extractID(value)\n\n          return (\n            <DraggableTableRow\n              columns={columns.map(({ name }, index) => {\n                let cellValue: React.ReactNode = '—'\n                if (name === 'name' && value._folderOrDocumentTitle !== undefined) {\n                  cellValue = value._folderOrDocumentTitle\n                }\n\n                if ((name === 'createdAt' || name === 'updatedAt') && value[name]) {\n                  cellValue = formatDate({\n                    date: value[name],\n                    i18n,\n                    pattern: config.admin.dateFormat,\n                  })\n                }\n\n                if (name === 'type') {\n                  cellValue = (\n                    <>\n                      {relationToMap[relationTo]?.singular || relationTo}\n                      {Array.isArray(subfolder.value?.folderType)\n                        ? subfolder.value?.folderType.reduce((acc, slug, index) => {\n                            if (index === 0) {\n                              return ` — ${relationToMap[slug]?.plural || slug}`\n                            }\n                            if (index > 0) {\n                              return `${acc}, ${relationToMap[slug]?.plural || slug}`\n                            }\n                            return acc\n                          }, '')\n                        : ''}\n                    </>\n                  )\n                }\n\n                if (index === 0) {\n                  return (\n                    <span className={`${baseClass}__cell-with-icon`} key={`${itemKey}-${name}`}>\n                      <ColoredFolderIcon />\n                      {cellValue}\n                    </span>\n                  )\n                } else {\n                  return cellValue\n                }\n              })}\n              disabled={checkIfItemIsDisabled(subfolder)}\n              dragData={{\n                id: subfolderID,\n                type: 'folder',\n              }}\n              id={subfolderID}\n              isDroppable\n              isFocused={focusedRowIndex === rowIndex}\n              isSelected={selectedItemKeys.has(itemKey)}\n              isSelecting={selectedItemKeys.size > 0}\n              itemKey={itemKey}\n              key={`${rowIndex}-${itemKey}`}\n              onClick={(event) => {\n                void onItemClick({\n                  event,\n                  index: rowIndex,\n                  item: subfolder,\n                })\n              }}\n              onKeyDown={(event) => {\n                void onItemKeyPress({\n                  event,\n                  index: rowIndex,\n                  item: subfolder,\n                })\n              }}\n            />\n          )\n        }),\n\n        ...documents.map((document, unadjustedIndex) => {\n          const { itemKey, relationTo, value } = document\n          const documentID = extractID(value)\n          const rowIndex = unadjustedIndex + subfolders.length\n\n          return (\n            <DraggableTableRow\n              columns={columns.map(({ name }, index) => {\n                let cellValue: React.ReactNode = '—'\n                if (name === 'name' && value._folderOrDocumentTitle !== undefined) {\n                  cellValue = value._folderOrDocumentTitle\n                }\n\n                if ((name === 'createdAt' || name === 'updatedAt') && value[name]) {\n                  cellValue = formatDate({\n                    date: value[name],\n                    i18n,\n                    pattern: config.admin.dateFormat,\n                  })\n                }\n\n                if (name === 'type') {\n                  cellValue = relationToMap[relationTo]?.singular || relationTo\n                }\n\n                if (index === 0) {\n                  return (\n                    <span className={`${baseClass}__cell-with-icon`} key={`${itemKey}-${name}`}>\n                      <DocumentIcon />\n                      {cellValue}\n                    </span>\n                  )\n                } else {\n                  return cellValue\n                }\n              })}\n              disabled={checkIfItemIsDisabled(document)}\n              dragData={{\n                id: documentID,\n                type: 'document',\n              }}\n              id={documentID}\n              isFocused={focusedRowIndex === rowIndex}\n              isSelected={selectedItemKeys.has(itemKey)}\n              isSelecting={selectedItemKeys.size > 0}\n              itemKey={itemKey}\n              key={`${rowIndex}-${itemKey}`}\n              onClick={(event) => {\n                void onItemClick({\n                  event,\n                  index: rowIndex,\n                  item: document,\n                })\n              }}\n              onKeyDown={(event) => {\n                void onItemKeyPress({\n                  event,\n                  index: rowIndex,\n                  item: document,\n                })\n              }}\n            />\n          )\n        }),\n      ]}\n    />\n  )\n}\n"],"mappings":"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","ignoreList":[]}