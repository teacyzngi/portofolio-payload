{"version":3,"file":"index.js","names":["c","_c","useModal","getTranslation","extractID","React","useAuth","FolderProvider","useFolder","useRouteCache","useServerFunctions","useTranslation","Button","ConfirmationModal","useDocumentDrawer","Drawer","DrawerActionHeader","DrawerContentContainer","ListCreateNewDocInFolderButton","LoadingOverlay","NoListResults","Translation","FolderBreadcrumbs","ColoredFolderIcon","baseClass","baseModalSlug","confirmModalSlug","MoveItemsToFolderDrawer","props","_jsx","gutter","Header","slug","drawerSlug","LoadFolderData","permissions","subfolders","setSubfolders","useState","documents","setDocuments","breadcrumbs","setBreadcrumbs","FolderResultsComponent","setFolderResultsComponent","hasLoaded","setHasLoaded","folderID","setFolderID","fromFolderID","hasLoadedRef","useRef","getFolderResultsComponentAndData","populateMoveToFolderDrawer","useCallback","folderIDToPopulate","result","browseByFolder","collectionsToDisplay","folderCollectionSlug","displayAs","folderAssignedCollections","sort","e","current","useEffect","allCollectionFolderSlugs","allowCreateCollectionSlugs","collections","create","allowMultiSelection","folderFieldName","onItemClick","item","value","id","Content","t0","$","fromFolderName","itemsToMove","onConfirm","skipConfirmModal","clearRouteCache","closeModal","isModalOpen","openModal","t1","length","count","folderAddedToUnderlyingFolder","setFolderAddedToUnderlyingFolder","i18n","t","folderCollectionConfig","folderType","getSelectedItems","t2","collectionSlug","FolderDocumentDrawer","t3","closeDrawer","closeFolderDrawer","openDrawer","openFolderDrawer","t4","selected","lastCrumb","name","_folderOrDocumentTitle","getSelectedFolder","t5","t6","doc","folder","onCreateSuccess","onConfirmMove","t7","t8","t9","t10","t11","undefined","t12","crumb","index","onClick","_jsxs","className","children","onCancel","onSave","saveLabel","title","DrawerHeading","action","map","_Fragment","buttonStyle","margin","label","labels","singular","initialData","redirectAfterCreate","Actions","buttonLabel","toLowerCase","collectionSlugs","slugPrefix","Message","plural","body","ConfirmationMessage","toFolderName","confirmLabel","heading","modalSlug","fromFolder","elements","1","_temp","2","_temp2","i18nKey","variables","toFolder","_temp3","_temp4","_temp5","_temp6","children_1","children_0","children_4","children_3","children_2"],"sources":["../../../../../src/elements/FolderView/Drawers/MoveToFolder/index.tsx"],"sourcesContent":["'use client'\n\nimport type { CollectionSlug, Document } from 'payload'\nimport type { FolderBreadcrumb, FolderOrDocument } from 'payload/shared'\n\nimport { useModal } from '@faceless-ui/modal'\nimport { getTranslation } from '@payloadcms/translations'\nimport { extractID } from 'payload/shared'\nimport React from 'react'\n\nimport { useAuth } from '../../../../providers/Auth/index.js'\nimport { FolderProvider, useFolder } from '../../../../providers/Folders/index.js'\nimport { useRouteCache } from '../../../../providers/RouteCache/index.js'\nimport { useServerFunctions } from '../../../../providers/ServerFunctions/index.js'\nimport { useTranslation } from '../../../../providers/Translation/index.js'\nimport { Button } from '../../../Button/index.js'\nimport { ConfirmationModal } from '../../../ConfirmationModal/index.js'\nimport { useDocumentDrawer } from '../../../DocumentDrawer/index.js'\nimport { Drawer } from '../../../Drawer/index.js'\nimport { DrawerActionHeader } from '../../../DrawerActionHeader/index.js'\nimport { DrawerContentContainer } from '../../../DrawerContentContainer/index.js'\nimport { ListCreateNewDocInFolderButton } from '../../../ListHeader/TitleActions/ListCreateNewDocInFolderButton.js'\nimport { LoadingOverlay } from '../../../Loading/index.js'\nimport { NoListResults } from '../../../NoListResults/index.js'\nimport { Translation } from '../../../Translation/index.js'\nimport { FolderBreadcrumbs } from '../../Breadcrumbs/index.js'\nimport { ColoredFolderIcon } from '../../ColoredFolderIcon/index.js'\nimport './index.scss'\n\nconst baseClass = 'move-folder-drawer'\nconst baseModalSlug = 'move-folder-drawer'\nconst confirmModalSlug = `${baseModalSlug}-confirm-move`\n\ntype ActionProps =\n  | {\n      readonly action: 'moveItemsToFolder'\n    }\n  | {\n      readonly action: 'moveItemToFolder'\n      readonly title: string\n    }\nexport type MoveToFolderDrawerProps = {\n  readonly drawerSlug: string\n  readonly folderAssignedCollections: CollectionSlug[]\n  readonly folderCollectionSlug: string\n  readonly folderFieldName: string\n  readonly fromFolderID?: number | string\n  readonly fromFolderName?: string\n  readonly itemsToMove: FolderOrDocument[]\n  /**\n   * Callback function to be called when the user confirms the move\n   *\n   * @param folderID - The ID of the folder to move the items to\n   */\n  readonly onConfirm: (args: {\n    id: null | number | string\n    name: null | string\n  }) => Promise<void> | void\n  readonly populateMoveToFolderDrawer?: (folderID: null | number | string) => Promise<void> | void\n  /**\n   * Set to `true` to skip the confirmation modal\n   * @default false\n   */\n  readonly skipConfirmModal?: boolean\n} & ActionProps\n\nexport function MoveItemsToFolderDrawer(props: MoveToFolderDrawerProps) {\n  return (\n    <Drawer gutter={false} Header={null} slug={props.drawerSlug}>\n      <LoadFolderData {...props} />\n    </Drawer>\n  )\n}\n\nfunction LoadFolderData(props: MoveToFolderDrawerProps) {\n  const { permissions } = useAuth()\n  const [subfolders, setSubfolders] = React.useState<FolderOrDocument[]>([])\n  const [documents, setDocuments] = React.useState<FolderOrDocument[]>([])\n  const [breadcrumbs, setBreadcrumbs] = React.useState<FolderBreadcrumb[]>([])\n  const [FolderResultsComponent, setFolderResultsComponent] = React.useState<React.ReactNode>(null)\n  const [hasLoaded, setHasLoaded] = React.useState(false)\n  const [folderID, setFolderID] = React.useState<null | number | string>(props.fromFolderID || null)\n  const hasLoadedRef = React.useRef(false)\n  const { getFolderResultsComponentAndData } = useServerFunctions()\n\n  const populateMoveToFolderDrawer = React.useCallback(\n    async (folderIDToPopulate: null | number | string) => {\n      try {\n        const result = await getFolderResultsComponentAndData({\n          browseByFolder: false,\n          collectionsToDisplay: [props.folderCollectionSlug],\n          displayAs: 'grid',\n          // todo: should be able to pass undefined, empty array or null and get all folders. Need to look at API for this in the server function\n          folderAssignedCollections: props.folderAssignedCollections,\n          folderID: folderIDToPopulate,\n          sort: 'name',\n        })\n\n        setBreadcrumbs(result.breadcrumbs || [])\n        setSubfolders(result?.subfolders || [])\n        setDocuments(result?.documents || [])\n        setFolderResultsComponent(result.FolderResultsComponent || null)\n        setFolderID(folderIDToPopulate)\n        setHasLoaded(true)\n      } catch (e) {\n        setBreadcrumbs([])\n        setSubfolders([])\n        setDocuments([])\n      }\n\n      hasLoadedRef.current = true\n    },\n    [getFolderResultsComponentAndData, props.folderAssignedCollections, props.folderCollectionSlug],\n  )\n\n  React.useEffect(() => {\n    if (!hasLoadedRef.current) {\n      void populateMoveToFolderDrawer(props.fromFolderID)\n    }\n  }, [populateMoveToFolderDrawer, props.fromFolderID])\n\n  if (!hasLoaded) {\n    return <LoadingOverlay />\n  }\n\n  return (\n    <FolderProvider\n      allCollectionFolderSlugs={[props.folderCollectionSlug]}\n      allowCreateCollectionSlugs={\n        permissions.collections[props.folderCollectionSlug]?.create\n          ? [props.folderCollectionSlug]\n          : []\n      }\n      allowMultiSelection={false}\n      breadcrumbs={breadcrumbs}\n      documents={documents}\n      folderFieldName={props.folderFieldName}\n      folderID={folderID}\n      FolderResultsComponent={FolderResultsComponent}\n      key={folderID}\n      onItemClick={async (item) => {\n        await populateMoveToFolderDrawer(item.value.id)\n      }}\n      subfolders={subfolders}\n    >\n      <Content {...props} populateMoveToFolderDrawer={populateMoveToFolderDrawer} />\n    </FolderProvider>\n  )\n}\n\nfunction Content({\n  drawerSlug,\n  fromFolderID,\n  fromFolderName,\n  itemsToMove,\n  onConfirm,\n  populateMoveToFolderDrawer,\n  skipConfirmModal,\n  ...props\n}: MoveToFolderDrawerProps) {\n  const { clearRouteCache } = useRouteCache()\n  const { closeModal, isModalOpen, openModal } = useModal()\n  const [count] = React.useState(() => itemsToMove.length)\n  const [folderAddedToUnderlyingFolder, setFolderAddedToUnderlyingFolder] = React.useState(false)\n  const { i18n, t } = useTranslation()\n  const {\n    breadcrumbs,\n    folderCollectionConfig,\n    folderCollectionSlug,\n    folderFieldName,\n    folderID,\n    FolderResultsComponent,\n    folderType,\n    getSelectedItems,\n    subfolders,\n  } = useFolder()\n  const [FolderDocumentDrawer, , { closeDrawer: closeFolderDrawer, openDrawer: openFolderDrawer }] =\n    useDocumentDrawer({\n      collectionSlug: folderCollectionSlug,\n    })\n\n  const getSelectedFolder = React.useCallback((): {\n    id: null | number | string\n    name: null | string\n  } => {\n    const selected = getSelectedItems()\n\n    if (selected.length === 0) {\n      const lastCrumb = breadcrumbs?.[breadcrumbs.length - 1]\n      // use the breadcrumb\n      return {\n        id: lastCrumb?.id || null,\n        name: lastCrumb?.name || null,\n      }\n    } else {\n      // use the selected item\n      return {\n        id: selected[0].value.id,\n        name: selected[0].value._folderOrDocumentTitle,\n      }\n    }\n  }, [breadcrumbs, getSelectedItems])\n\n  const onCreateSuccess = React.useCallback(\n    async ({ collectionSlug, doc }: { collectionSlug: CollectionSlug; doc: Document }) => {\n      await populateMoveToFolderDrawer(folderID)\n      if (\n        collectionSlug === folderCollectionSlug &&\n        ((doc?.folder && fromFolderID === extractID(doc?.folder)) ||\n          (!fromFolderID && !doc?.folder))\n      ) {\n        // if the folder we created is in the same folder as the one we are moving from\n        // set variable so we can clear the route cache when we close the drawer\n        setFolderAddedToUnderlyingFolder(true)\n      }\n    },\n    [populateMoveToFolderDrawer, folderID, fromFolderID, folderCollectionSlug],\n  )\n\n  const onConfirmMove = React.useCallback(() => {\n    if (typeof onConfirm === 'function') {\n      void onConfirm(getSelectedFolder())\n    }\n  }, [getSelectedFolder, onConfirm])\n\n  React.useEffect(() => {\n    if (!isModalOpen(drawerSlug) && folderAddedToUnderlyingFolder) {\n      // if we added a folder to the underlying folder, clear the route cache\n      // so that the folder view will be reloaded with the new folder\n      setFolderAddedToUnderlyingFolder(false)\n      clearRouteCache()\n    }\n  }, [drawerSlug, isModalOpen, clearRouteCache, folderAddedToUnderlyingFolder])\n\n  return (\n    <div className={baseClass}>\n      <DrawerActionHeader\n        onCancel={() => {\n          closeModal(drawerSlug)\n        }}\n        onSave={() => {\n          if (skipConfirmModal) {\n            onConfirmMove()\n          } else {\n            openModal(confirmModalSlug)\n          }\n        }}\n        saveLabel={t('general:select')}\n        title={\n          <DrawerHeading\n            action={props.action}\n            count={count}\n            fromFolderName={fromFolderID ? fromFolderName : undefined}\n            title={props.action === 'moveItemToFolder' ? props.title : undefined}\n          />\n        }\n      />\n\n      <div className={`${baseClass}__breadcrumbs-section`}>\n        <FolderBreadcrumbs\n          breadcrumbs={[\n            {\n              id: null,\n              name: (\n                <span className={`${baseClass}__folder-breadcrumbs-root`}>\n                  <ColoredFolderIcon />\n                  {t('folder:folders')}\n                </span>\n              ),\n              onClick: breadcrumbs.length\n                ? () => {\n                    void populateMoveToFolderDrawer(null)\n                  }\n                : undefined,\n            },\n            ...breadcrumbs.map((crumb, index) => ({\n              id: crumb.id,\n              name: crumb.name,\n              onClick:\n                index !== breadcrumbs.length - 1\n                  ? () => {\n                      void populateMoveToFolderDrawer(crumb.id)\n                    }\n                  : undefined,\n            })),\n          ]}\n        />\n        {subfolders.length > 0 && (\n          <>\n            <Button\n              buttonStyle=\"pill\"\n              className={`${baseClass}__add-folder-button`}\n              margin={false}\n              onClick={() => {\n                openFolderDrawer()\n              }}\n            >\n              {t('fields:addLabel', {\n                label: getTranslation(folderCollectionConfig.labels?.singular, i18n),\n              })}\n            </Button>\n            <FolderDocumentDrawer\n              initialData={{\n                [folderFieldName]: folderID,\n                folderType,\n              }}\n              onSave={(result) => {\n                void onCreateSuccess({\n                  collectionSlug: folderCollectionConfig.slug,\n                  doc: result.doc,\n                })\n                closeFolderDrawer()\n              }}\n              redirectAfterCreate={false}\n            />\n          </>\n        )}\n      </div>\n\n      <DrawerContentContainer className={`${baseClass}__body-section`}>\n        {subfolders.length > 0 ? (\n          FolderResultsComponent\n        ) : (\n          <NoListResults\n            Actions={[\n              <ListCreateNewDocInFolderButton\n                buttonLabel={`${t('general:create')} ${getTranslation(folderCollectionConfig.labels?.singular, i18n).toLowerCase()}`}\n                collectionSlugs={[folderCollectionSlug]}\n                folderAssignedCollections={props.folderAssignedCollections}\n                key=\"create-folder\"\n                onCreateSuccess={onCreateSuccess}\n                slugPrefix=\"create-new-folder-from-drawer--no-results\"\n              />,\n            ]}\n            Message={\n              <p>\n                {i18n.t('general:noResults', {\n                  label: `${getTranslation(folderCollectionConfig.labels?.plural, i18n)}`,\n                })}\n              </p>\n            }\n          />\n        )}\n      </DrawerContentContainer>\n\n      {!skipConfirmModal && (\n        <ConfirmationModal\n          body={\n            <ConfirmationMessage\n              action={props.action}\n              count={count}\n              fromFolderName={fromFolderName}\n              title={props.action === 'moveItemToFolder' ? props.title : undefined}\n              toFolderName={getSelectedFolder().name}\n            />\n          }\n          confirmingLabel={t('general:moving')}\n          confirmLabel={t('general:move')}\n          heading={t('general:confirmMove')}\n          modalSlug={confirmModalSlug}\n          onConfirm={onConfirmMove}\n        />\n      )}\n    </div>\n  )\n}\n\nfunction DrawerHeading(\n  props: { count?: number } & ActionProps & Pick<MoveToFolderDrawerProps, 'fromFolderName'>,\n): string {\n  const { t } = useTranslation()\n\n  switch (props.action) {\n    case 'moveItemToFolder':\n      // moving current folder from list view actions menu\n      // or moving item from edit view\n      if (props.fromFolderName) {\n        // move from folder\n        return t('folder:movingFromFolder', {\n          fromFolder: props.fromFolderName,\n          title: props.title,\n        })\n      } else {\n        // move from root\n        return t('folder:selectFolderForItem', {\n          title: props.title,\n        })\n      }\n\n    case 'moveItemsToFolder':\n      if (props.fromFolderName) {\n        // move from folder\n        return t('folder:movingFromFolder', {\n          fromFolder: props.fromFolderName,\n          title: `${props.count} ${props.count > 1 ? t('general:items') : t('general:item')}`,\n        })\n      } else {\n        // move from root\n        return t('folder:selectFolderForItem', {\n          title: `${props.count} ${props.count > 1 ? t('general:items') : t('general:item')}`,\n        })\n      }\n  }\n}\n\nfunction ConfirmationMessage(\n  props: { count?: number; toFolderName?: string } & ActionProps &\n    Pick<MoveToFolderDrawerProps, 'fromFolderName'>,\n) {\n  const { t } = useTranslation()\n\n  switch (props.action) {\n    case 'moveItemToFolder':\n      // moving current folder from list view actions menu\n      // or moving item from edit view\n      if (props.toFolderName) {\n        // move to destination\n        // You are about to move {{title}} to {{toFolder}}. Are you sure?\n        return (\n          <Translation\n            elements={{\n              1: ({ children }) => <strong>{children}</strong>,\n              2: ({ children }) => <strong>{children}</strong>,\n            }}\n            i18nKey=\"folder:moveItemToFolderConfirmation\"\n            t={t}\n            variables={{\n              title: props.title,\n              toFolder: props.toFolderName,\n            }}\n          />\n        )\n      } else {\n        // move to root\n        // You are about to move {{title}} to the root folder. Are you sure?\n        return (\n          <Translation\n            elements={{\n              1: ({ children }) => <strong>{children}</strong>,\n            }}\n            i18nKey=\"folder:moveItemToRootConfirmation\"\n            t={t}\n            variables={{\n              title: props.title,\n            }}\n          />\n        )\n      }\n\n    case 'moveItemsToFolder':\n      // moving many (documents/folders) from list view\n      if (props.toFolderName) {\n        // move to destination\n        // You are about to move {{count}} {{label}} to {{toFolder}}. Are you sure?\n        return (\n          <Translation\n            elements={{\n              1: ({ children }) => <strong>{children}</strong>,\n              2: ({ children }) => <strong>{children}</strong>,\n            }}\n            i18nKey=\"folder:moveItemsToFolderConfirmation\"\n            t={t}\n            variables={{\n              count: props.count,\n              label: props.count > 1 ? t('general:items') : t('general:item'),\n              toFolder: props.toFolderName,\n            }}\n          />\n        )\n      } else {\n        // move to root\n        // You are about to move {{count}} {{label}} to the root folder. Are you sure?\n        return (\n          <Translation\n            elements={{\n              1: ({ children }) => <strong>{children}</strong>,\n            }}\n            i18nKey=\"folder:moveItemsToRootConfirmation\"\n            t={t}\n            variables={{\n              count: props.count,\n              label: props.count > 1 ? t('general:items') : t('general:item'),\n            }}\n          />\n        )\n      }\n  }\n}\n"],"mappings":"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","ignoreList":[]}