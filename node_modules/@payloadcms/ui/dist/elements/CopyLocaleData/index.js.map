{"version":3,"file":"index.js","names":["c","_c","useModal","getTranslation","useRouter","formatAdminURL","React","useCallback","toast","CheckboxField","SelectInput","useFormModified","useConfig","useDocumentInfo","useLocale","useRouteTransition","useServerFunctions","useTranslation","DrawerHeader","Button","Drawer","PopupList","baseClass","drawerSlug","CopyLocaleData","$","config","t0","localization","routes","t1","serverURL","admin","code","id","collectionSlug","globalSlug","i18n","t","modified","toggleModal","copyDataFromLocale","router","startRouteTransition","localeOptions","locales","map","_temp","t2","locale_0","locale","value","localeOptionsWithoutCurrent","filter","t3","code_0","locale_1","find","l","label","getLocaleLabel","copying","setCopying","useState","toLocale","setToLocale","fromLocale","setFromLocale","overwriteExisting","setOverwriteExisting","t4","t5","useEffect","t6","t7","from","to","docID","overrideData","push","adminRoute","path","t8","error","message","copyLocaleData","info","t9","t10","Symbol","for","selectedOption","t11","selectedOption_0","t12","_jsxs","Fragment","children","_jsx","onClick","className","gutter","Header","onClose","title","buttonStyle","disabled","iconPosition","size","name","onChange","options","readOnly","checked","field"],"sources":["../../../src/elements/CopyLocaleData/index.tsx"],"sourcesContent":["'use client'\n\nimport { useModal } from '@faceless-ui/modal'\nimport { getTranslation } from '@payloadcms/translations'\nimport { useRouter } from 'next/navigation.js'\nimport { formatAdminURL } from 'payload/shared'\nimport React, { useCallback } from 'react'\nimport { toast } from 'sonner'\n\nimport { CheckboxField } from '../../fields/Checkbox/index.js'\nimport { SelectInput } from '../../fields/Select/index.js'\nimport { useFormModified } from '../../forms/Form/context.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useDocumentInfo } from '../../providers/DocumentInfo/index.js'\nimport { useLocale } from '../../providers/Locale/index.js'\nimport { useRouteTransition } from '../../providers/RouteTransition/index.js'\nimport { useServerFunctions } from '../../providers/ServerFunctions/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { DrawerHeader } from '../BulkUpload/Header/index.js'\nimport { Button } from '../Button/index.js'\nimport { Drawer } from '../Drawer/index.js'\nimport { PopupList } from '../Popup/index.js'\nimport './index.scss'\n\nconst baseClass = 'copy-locale-data'\n\nconst drawerSlug = 'copy-locale'\nexport const CopyLocaleData: React.FC = () => {\n  const {\n    config: {\n      localization,\n      routes: { admin },\n      serverURL,\n    },\n  } = useConfig()\n  const { code } = useLocale()\n  const { id, collectionSlug, globalSlug } = useDocumentInfo()\n  const { i18n, t } = useTranslation()\n  const modified = useFormModified()\n  const { toggleModal } = useModal()\n  const { copyDataFromLocale } = useServerFunctions()\n  const router = useRouter()\n  const { startRouteTransition } = useRouteTransition()\n\n  const localeOptions =\n    (localization &&\n      localization.locales.map((locale) => ({ label: locale.label, value: locale.code }))) ||\n    []\n\n  const localeOptionsWithoutCurrent = localeOptions.filter((locale) => locale.value !== code)\n\n  const getLocaleLabel = (code: string) => {\n    const locale = localization && localization.locales.find((l) => l.code === code)\n    return locale && locale.label ? getTranslation(locale.label, i18n) : code\n  }\n\n  const [copying, setCopying] = React.useState(false)\n  const [toLocale, setToLocale] = React.useState<null | string>(null)\n  const [fromLocale, setFromLocale] = React.useState<null | string>(code)\n  const [overwriteExisting, setOverwriteExisting] = React.useState(false)\n\n  React.useEffect(() => {\n    if (fromLocale !== code) {\n      setFromLocale(code)\n    }\n  }, [code, fromLocale])\n\n  const copyLocaleData = useCallback(\n    async ({ from, to }) => {\n      setCopying(true)\n\n      try {\n        await copyDataFromLocale({\n          collectionSlug,\n          docID: id,\n          fromLocale: from,\n          globalSlug,\n          overrideData: overwriteExisting,\n          toLocale: to,\n        })\n\n        setCopying(false)\n\n        startRouteTransition(() =>\n          router.push(\n            formatAdminURL({\n              adminRoute: admin,\n              path: `/${collectionSlug ? `collections/${collectionSlug}/${id}` : `globals/${globalSlug}`}`,\n              serverURL,\n            }) + `?locale=${to}`,\n          ),\n        )\n\n        toggleModal(drawerSlug)\n      } catch (error) {\n        toast.error(error.message)\n      }\n    },\n    [\n      copyDataFromLocale,\n      collectionSlug,\n      id,\n      globalSlug,\n      overwriteExisting,\n      toggleModal,\n      router,\n      serverURL,\n      admin,\n      startRouteTransition,\n    ],\n  )\n\n  if (!id && !globalSlug) {\n    return null\n  }\n\n  return (\n    <React.Fragment>\n      <PopupList.Button\n        id={`${baseClass}__button`}\n        onClick={() => {\n          if (modified) {\n            toast.info(t('general:unsavedChanges'))\n          } else {\n            toggleModal(drawerSlug)\n          }\n        }}\n      >\n        {t('localization:copyToLocale')}\n      </PopupList.Button>\n      <Drawer\n        className={baseClass}\n        gutter={false}\n        Header={\n          <DrawerHeader\n            onClose={() => {\n              toggleModal(drawerSlug)\n            }}\n            title={t('localization:copyToLocale')}\n          />\n        }\n        slug={drawerSlug}\n      >\n        <div className={`${baseClass}__sub-header`}>\n          <span>\n            {fromLocale && toLocale ? (\n              <div>\n                {t('localization:copyFromTo', {\n                  from: getLocaleLabel(fromLocale),\n                  to: getLocaleLabel(toLocale),\n                })}\n              </div>\n            ) : (\n              t('localization:selectLocaleToCopy')\n            )}\n          </span>\n          <Button\n            buttonStyle=\"primary\"\n            disabled={!fromLocale || !toLocale}\n            iconPosition=\"left\"\n            onClick={async () => {\n              if (fromLocale === toLocale) {\n                toast.error(t('localization:cannotCopySameLocale'))\n                return\n              }\n              if (!copying) {\n                await copyLocaleData({\n                  from: fromLocale,\n                  to: toLocale,\n                })\n              }\n            }}\n            size=\"medium\"\n          >\n            {copying ? t('general:copying') + '...' : t('general:copy')}\n          </Button>\n        </div>\n\n        <div className={`${baseClass}__content`}>\n          <SelectInput\n            label={t('localization:copyFrom')}\n            name={'fromLocale'}\n            onChange={(selectedOption: { value: string }) => {\n              if (selectedOption?.value) {\n                setFromLocale(selectedOption.value)\n              }\n            }}\n            options={localeOptions}\n            path=\"fromLocale\"\n            readOnly\n            value={fromLocale}\n          />\n          <SelectInput\n            label={t('localization:copyTo')}\n            name=\"toLocale\"\n            onChange={(selectedOption: { value: string }) => {\n              if (selectedOption?.value) {\n                setToLocale(selectedOption.value)\n              }\n            }}\n            options={localeOptionsWithoutCurrent}\n            path=\"toLocale\"\n            value={toLocale}\n          />\n          <CheckboxField\n            checked={overwriteExisting}\n            field={{\n              name: 'overwriteExisting',\n              label: t('general:overwriteExistingData'),\n            }}\n            onChange={() => setOverwriteExisting(!overwriteExisting)}\n            path={'overwriteExisting'}\n          />\n        </div>\n      </Drawer>\n    </React.Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]}