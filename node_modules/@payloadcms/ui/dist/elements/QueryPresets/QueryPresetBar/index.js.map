{"version":3,"file":"index.js","names":["useModal","getTranslation","transformColumnsToPreferences","transformColumnsToSearchParams","React","Fragment","useCallback","useMemo","toast","PlusIcon","useConfig","useListQuery","useTranslation","ConfirmationModal","useDocumentDrawer","useListDrawer","ListSelectionButton","Pill","Translation","QueryPresetToggler","confirmDeletePresetModalSlug","queryPresetsSlug","baseClass","QueryPresetBar","activePreset","collectionSlug","queryPresetPermissions","modified","query","refineListData","setModified","setQueryModified","i18n","t","openModal","config","routes","api","apiRoute","getEntityConfig","presetConfig","PresetDocumentDrawer","openDrawer","openDocumentDrawer","id","CreateNewPresetDrawer","closeDrawer","closeCreateNewDrawer","openCreateNewDrawer","filterOptions","isTemp","not_equals","relatedCollection","equals","ListDrawer","closeListDrawer","openListDrawer","collectionSlugs","selectedCollection","handlePresetChange","preset","columns","undefined","where","resetQueryPreset","handleDeletePreset","fetch","method","then","res","json","status","success","label","labels","singular","title","errors","forEach","error","message","_err","saveCurrentChanges","body","JSON","stringify","credentials","headers","hasModifiedPreset","_jsxs","className","_jsx","openPresetListDrawer","resetPreset","icon","onClick","size","type","update","isShared","delete","initialData","onSave","doc","redirectAfterCreate","elements","1","children","i18nKey","variables","confirmingLabel","heading","modalSlug","onConfirm","onDelete","onDuplicate","allowCreate","disableQueryPresets","onSelect"],"sources":["../../../../src/elements/QueryPresets/QueryPresetBar/index.tsx"],"sourcesContent":["import type { QueryPreset, SanitizedCollectionPermission } from 'payload'\n\nimport { useModal } from '@faceless-ui/modal'\nimport { getTranslation } from '@payloadcms/translations'\nimport { transformColumnsToPreferences, transformColumnsToSearchParams } from 'payload/shared'\nimport React, { Fragment, useCallback, useMemo } from 'react'\nimport { toast } from 'sonner'\n\nimport { PlusIcon } from '../../../icons/Plus/index.js'\nimport { useConfig } from '../../../providers/Config/index.js'\nimport { useListQuery } from '../../../providers/ListQuery/context.js'\nimport { useTranslation } from '../../../providers/Translation/index.js'\nimport { ConfirmationModal } from '../../ConfirmationModal/index.js'\nimport { useDocumentDrawer } from '../../DocumentDrawer/index.js'\nimport { useListDrawer } from '../../ListDrawer/index.js'\nimport { ListSelectionButton } from '../../ListSelection/index.js'\nimport { Pill } from '../../Pill/index.js'\nimport { Translation } from '../../Translation/index.js'\nimport { QueryPresetToggler } from '../QueryPresetToggler/index.js'\nimport './index.scss'\n\nconst confirmDeletePresetModalSlug = 'confirm-delete-preset'\n\nconst queryPresetsSlug = 'payload-query-presets'\n\nconst baseClass = 'query-preset-bar'\n\nexport const QueryPresetBar: React.FC<{\n  activePreset: QueryPreset\n  collectionSlug?: string\n  queryPresetPermissions: SanitizedCollectionPermission\n}> = ({ activePreset, collectionSlug, queryPresetPermissions }) => {\n  const { modified, query, refineListData, setModified: setQueryModified } = useListQuery()\n\n  const { i18n, t } = useTranslation()\n  const { openModal } = useModal()\n\n  const {\n    config: {\n      routes: { api: apiRoute },\n    },\n    getEntityConfig,\n  } = useConfig()\n\n  const presetConfig = getEntityConfig({ collectionSlug: queryPresetsSlug })\n\n  const [PresetDocumentDrawer, , { openDrawer: openDocumentDrawer }] = useDocumentDrawer({\n    id: activePreset?.id,\n    collectionSlug: queryPresetsSlug,\n  })\n\n  const [\n    CreateNewPresetDrawer,\n    ,\n    { closeDrawer: closeCreateNewDrawer, openDrawer: openCreateNewDrawer },\n  ] = useDocumentDrawer({\n    collectionSlug: queryPresetsSlug,\n  })\n\n  const filterOptions = useMemo(\n    () => ({\n      'payload-query-presets': {\n        isTemp: {\n          not_equals: true,\n        },\n        relatedCollection: {\n          equals: collectionSlug,\n        },\n      },\n    }),\n    [collectionSlug],\n  )\n\n  const [ListDrawer, , { closeDrawer: closeListDrawer, openDrawer: openListDrawer }] =\n    useListDrawer({\n      collectionSlugs: [queryPresetsSlug],\n      filterOptions,\n      selectedCollection: queryPresetsSlug,\n    })\n\n  const handlePresetChange = useCallback(\n    async (preset: QueryPreset) => {\n      await refineListData(\n        {\n          columns: preset.columns ? transformColumnsToSearchParams(preset.columns) : undefined,\n          preset: preset.id,\n          where: preset.where,\n        },\n        false,\n      )\n    },\n    [refineListData],\n  )\n\n  const resetQueryPreset = useCallback(async () => {\n    await refineListData(\n      {\n        columns: [],\n        preset: '',\n        where: {},\n      },\n      false,\n    )\n  }, [refineListData])\n\n  const handleDeletePreset = useCallback(async () => {\n    try {\n      await fetch(`${apiRoute}/${queryPresetsSlug}/${activePreset.id}`, {\n        method: 'DELETE',\n      }).then(async (res) => {\n        try {\n          const json = await res.json()\n\n          if (res.status < 400) {\n            toast.success(\n              t('general:titleDeleted', {\n                label: getTranslation(presetConfig?.labels?.singular, i18n),\n                title: activePreset.title,\n              }),\n            )\n\n            await resetQueryPreset()\n          } else {\n            if (json.errors) {\n              json.errors.forEach((error) => toast.error(error.message))\n            } else {\n              toast.error(t('error:deletingTitle', { title: activePreset.title }))\n            }\n          }\n        } catch (_err) {\n          toast.error(t('error:deletingTitle', { title: activePreset.title }))\n        }\n      })\n    } catch (_err) {\n      toast.error(t('error:deletingTitle', { title: activePreset.title }))\n    }\n  }, [apiRoute, activePreset?.id, activePreset?.title, t, presetConfig, i18n, resetQueryPreset])\n\n  const saveCurrentChanges = useCallback(async () => {\n    try {\n      await fetch(`${apiRoute}/payload-query-presets/${activePreset.id}`, {\n        body: JSON.stringify({\n          columns: transformColumnsToPreferences(query.columns),\n          where: query.where,\n        }),\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        method: 'PATCH',\n      }).then(async (res) => {\n        try {\n          const json = await res.json()\n\n          if (res.status < 400) {\n            toast.success(\n              t('general:updatedLabelSuccessfully', {\n                label: getTranslation(presetConfig?.labels?.singular, i18n),\n              }),\n            )\n\n            setQueryModified(false)\n          } else {\n            if (json.errors) {\n              json.errors.forEach((error) => toast.error(error.message))\n            } else {\n              toast.error(t('error:unknown'))\n            }\n          }\n        } catch (_err) {\n          toast.error(t('error:unknown'))\n        }\n      })\n    } catch (_err) {\n      toast.error(t('error:unknown'))\n    }\n  }, [\n    apiRoute,\n    activePreset?.id,\n    query.columns,\n    query.where,\n    t,\n    presetConfig?.labels?.singular,\n    i18n,\n    setQueryModified,\n  ])\n\n  const hasModifiedPreset = activePreset && modified\n\n  return (\n    <Fragment>\n      <div className={baseClass}>\n        <div className={`${baseClass}__menu`}>\n          <QueryPresetToggler\n            activePreset={activePreset}\n            openPresetListDrawer={openListDrawer}\n            resetPreset={resetQueryPreset}\n          />\n          <Pill\n            aria-label={t('general:newLabel', { label: presetConfig?.labels?.singular })}\n            className={`${baseClass}__create-new-preset`}\n            icon={<PlusIcon />}\n            id=\"create-new-preset\"\n            onClick={() => {\n              openCreateNewDrawer()\n            }}\n            size=\"small\"\n          />\n        </div>\n        <div className={`${baseClass}__menu-items`}>\n          {hasModifiedPreset && (\n            <ListSelectionButton\n              id=\"reset-preset\"\n              key=\"reset\"\n              onClick={async () => {\n                await refineListData(\n                  {\n                    columns: transformColumnsToSearchParams(activePreset.columns),\n                    where: activePreset.where,\n                  },\n                  false,\n                )\n              }}\n              type=\"button\"\n            >\n              {t('general:reset')}\n            </ListSelectionButton>\n          )}\n          {hasModifiedPreset && queryPresetPermissions.update && (\n            <ListSelectionButton\n              id=\"save-preset\"\n              key=\"save\"\n              onClick={async () => {\n                await saveCurrentChanges()\n              }}\n              type=\"button\"\n            >\n              {activePreset?.isShared ? t('general:updateForEveryone') : t('fields:saveChanges')}\n            </ListSelectionButton>\n          )}\n          {activePreset && queryPresetPermissions?.delete && (\n            <Fragment>\n              <ListSelectionButton\n                id=\"delete-preset\"\n                onClick={() => openModal(confirmDeletePresetModalSlug)}\n                type=\"button\"\n              >\n                {t('general:deleteLabel', { label: presetConfig?.labels?.singular })}\n              </ListSelectionButton>\n              <ListSelectionButton\n                id=\"edit-preset\"\n                onClick={() => {\n                  openDocumentDrawer()\n                }}\n                type=\"button\"\n              >\n                {t('general:editLabel', { label: presetConfig?.labels?.singular })}\n              </ListSelectionButton>\n            </Fragment>\n          )}\n        </div>\n      </div>\n      <CreateNewPresetDrawer\n        initialData={{\n          columns: transformColumnsToPreferences(query.columns),\n          relatedCollection: collectionSlug,\n          where: query.where,\n        }}\n        onSave={async ({ doc }) => {\n          closeCreateNewDrawer()\n          await handlePresetChange(doc as QueryPreset)\n        }}\n        redirectAfterCreate={false}\n      />\n      <ConfirmationModal\n        body={\n          <Translation\n            elements={{\n              '1': ({ children }) => <strong>{children}</strong>,\n            }}\n            i18nKey=\"general:aboutToDelete\"\n            t={t}\n            variables={{\n              label: presetConfig?.labels?.singular,\n              title: activePreset?.title,\n            }}\n          />\n        }\n        confirmingLabel={t('general:deleting')}\n        heading={t('general:confirmDeletion')}\n        modalSlug={confirmDeletePresetModalSlug}\n        onConfirm={handleDeletePreset}\n      />\n      <PresetDocumentDrawer\n        onDelete={() => {\n          // setSelectedPreset(undefined)\n        }}\n        onDuplicate={async ({ doc }) => {\n          await handlePresetChange(doc as QueryPreset)\n        }}\n        onSave={async ({ doc }) => {\n          await handlePresetChange(doc as QueryPreset)\n        }}\n      />\n      <ListDrawer\n        allowCreate={false}\n        disableQueryPresets\n        onSelect={async ({ doc }) => {\n          closeListDrawer()\n          await handlePresetChange(doc as QueryPreset)\n        }}\n      />\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]}