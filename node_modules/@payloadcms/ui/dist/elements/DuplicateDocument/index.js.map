{"version":3,"file":"index.js","names":["useModal","getTranslation","useRouter","formatAdminURL","React","useCallback","toast","useForm","useFormModified","useConfig","useLocale","useRouteTransition","useTranslation","requests","ConfirmationModal","PopupList","DuplicateDocument","id","slug","onDuplicate","redirectAfterDuplicate","singularLabel","router","modified","openModal","locale","setModified","startRouteTransition","config","routes","admin","adminRoute","api","apiRoute","serverURL","getEntityConfig","collectionConfig","collectionSlug","renderModal","setRenderModal","useState","i18n","t","modalSlug","duplicate","post","code","body","JSON","stringify","headers","language","credentials","then","res","doc","errors","message","json","status","success","label","push","path","error","onConfirm","_jsxs","Fragment","_jsx","Button","onClick","confirmLabel","heading"],"sources":["../../../src/elements/DuplicateDocument/index.tsx"],"sourcesContent":["'use client'\n\nimport type { SanitizedCollectionConfig } from 'payload'\n\nimport { useModal } from '@faceless-ui/modal'\nimport { getTranslation } from '@payloadcms/translations'\nimport { useRouter } from 'next/navigation.js'\nimport { formatAdminURL } from 'payload/shared'\nimport React, { useCallback } from 'react'\nimport { toast } from 'sonner'\n\nimport type { DocumentDrawerContextType } from '../DocumentDrawer/Provider.js'\n\nimport { useForm, useFormModified } from '../../forms/Form/context.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useLocale } from '../../providers/Locale/index.js'\nimport { useRouteTransition } from '../../providers/RouteTransition/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { requests } from '../../utilities/api.js'\nimport { ConfirmationModal } from '../ConfirmationModal/index.js'\nimport { PopupList } from '../Popup/index.js'\n\nexport type Props = {\n  readonly id: string\n  readonly onDuplicate?: DocumentDrawerContextType['onDuplicate']\n  readonly redirectAfterDuplicate?: boolean\n  readonly singularLabel: SanitizedCollectionConfig['labels']['singular']\n  readonly slug: string\n}\n\nexport const DuplicateDocument: React.FC<Props> = ({\n  id,\n  slug,\n  onDuplicate,\n  redirectAfterDuplicate = true,\n  singularLabel,\n}) => {\n  const router = useRouter()\n  const modified = useFormModified()\n  const { openModal } = useModal()\n  const locale = useLocale()\n  const { setModified } = useForm()\n  const { startRouteTransition } = useRouteTransition()\n\n  const {\n    config: {\n      routes: { admin: adminRoute, api: apiRoute },\n      serverURL,\n    },\n    getEntityConfig,\n  } = useConfig()\n\n  const collectionConfig = getEntityConfig({ collectionSlug: slug })\n\n  const [renderModal, setRenderModal] = React.useState(false)\n  const { i18n, t } = useTranslation()\n\n  const modalSlug = `duplicate-${id}`\n\n  const duplicate = useCallback(async () => {\n    setRenderModal(true)\n\n    await requests\n      .post(\n        `${serverURL}${apiRoute}/${slug}/${id}/duplicate${locale?.code ? `?locale=${locale.code}` : ''}`,\n        {\n          body: JSON.stringify({}),\n          headers: {\n            'Accept-Language': i18n.language,\n            'Content-Type': 'application/json',\n            credentials: 'include',\n          },\n        },\n      )\n      .then(async (res) => {\n        const { doc, errors, message } = await res.json()\n\n        if (res.status < 400) {\n          toast.success(\n            message ||\n              t('general:successfullyDuplicated', { label: getTranslation(singularLabel, i18n) }),\n          )\n\n          setModified(false)\n\n          if (redirectAfterDuplicate) {\n            return startRouteTransition(() =>\n              router.push(\n                formatAdminURL({\n                  adminRoute,\n                  path: `/collections/${slug}/${doc.id}${locale?.code ? `?locale=${locale.code}` : ''}`,\n                }),\n              ),\n            )\n          }\n\n          if (typeof onDuplicate === 'function') {\n            void onDuplicate({ collectionConfig, doc })\n          }\n        } else {\n          toast.error(\n            errors?.[0].message ||\n              message ||\n              t('error:unspecific', { label: getTranslation(singularLabel, i18n) }),\n          )\n        }\n      })\n  }, [\n    locale,\n    serverURL,\n    apiRoute,\n    slug,\n    id,\n    i18n,\n    t,\n    singularLabel,\n    onDuplicate,\n    redirectAfterDuplicate,\n    setModified,\n    router,\n    adminRoute,\n    collectionConfig,\n    startRouteTransition,\n  ])\n\n  const onConfirm = useCallback(async () => {\n    setRenderModal(false)\n\n    await duplicate()\n  }, [duplicate])\n\n  return (\n    <React.Fragment>\n      <PopupList.Button\n        id=\"action-duplicate\"\n        onClick={() => {\n          if (modified) {\n            setRenderModal(true)\n            return openModal(modalSlug)\n          }\n\n          return duplicate()\n        }}\n      >\n        {t('general:duplicate')}\n      </PopupList.Button>\n      {renderModal && (\n        <ConfirmationModal\n          body={t('general:unsavedChangesDuplicate')}\n          confirmLabel={t('general:duplicateWithoutSaving')}\n          heading={t('general:unsavedChanges')}\n          modalSlug={modalSlug}\n          onConfirm={onConfirm}\n        />\n      )}\n    </React.Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]}