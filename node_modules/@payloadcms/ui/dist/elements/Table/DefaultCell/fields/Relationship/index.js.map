{"version":3,"file":"index.js","names":["c","_c","getTranslation","React","useEffect","useMemo","useState","useIntersect","useConfig","useTranslation","canUseDOM","formatDocTitle","useListRelationships","FileCell","baseClass","totalToShow","RelationshipCell","t0","$","cellData","cellDataFromProps","customCellProps","customCellContext","field","t1","label","relationTo","collection","docs","config","getEntityConfig","collections","routes","intersectionRef","entry","t2","Symbol","for","values","setValues","documents","getRelationships","hasRequested","setHasRequested","i18n","t","isAboveViewport","boundingClientRect","top","window","innerHeight","t3","formattedValues","arrayCellData","Array","isArray","slice","length","forEach","cell","push","value","t4","api","t5","t6","t7","admin","t8","t9","i","relationTo_0","document","relatedCollection","collectionSlug","label_0","collectionConfig","data","dateFormat","fallback","fileField","type","fieldPreviewAllowed","displayPreview","undefined","previewAllowed","upload","slug","rowData","_jsxs","Fragment","children","className","ref","map","count","items"],"sources":["../../../../../../src/elements/Table/DefaultCell/fields/Relationship/index.tsx"],"sourcesContent":["'use client'\nimport type {\n  DefaultCellComponentProps,\n  JoinFieldClient,\n  RelationshipFieldClient,\n  UploadFieldClient,\n} from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport React, { useEffect, useMemo, useState } from 'react'\n\nimport { useIntersect } from '../../../../../hooks/useIntersect.js'\nimport { useConfig } from '../../../../../providers/Config/index.js'\nimport { useTranslation } from '../../../../../providers/Translation/index.js'\nimport { canUseDOM } from '../../../../../utilities/canUseDOM.js'\nimport { formatDocTitle } from '../../../../../utilities/formatDocTitle/index.js'\nimport { useListRelationships } from '../../../RelationshipProvider/index.js'\nimport { FileCell } from '../File/index.js'\nimport './index.scss'\n\ntype Value = { relationTo: string; value: number | string }\nconst baseClass = 'relationship-cell'\nconst totalToShow = 3\n\nexport type RelationshipCellProps = DefaultCellComponentProps<\n  JoinFieldClient | RelationshipFieldClient | UploadFieldClient\n>\n\nexport const RelationshipCell: React.FC<RelationshipCellProps> = ({\n  cellData: cellDataFromProps,\n  customCellProps: customCellContext,\n  field,\n  field: { label },\n}) => {\n  // conditionally extract relationTo both both relationship and join fields\n  const relationTo =\n    ('relationTo' in field && field.relationTo) || ('collection' in field && field.collection)\n\n  // conditionally extract docs from join fields\n  const cellData = useMemo(() => {\n    return 'collection' in field ? cellDataFromProps?.docs : cellDataFromProps\n  }, [cellDataFromProps, field])\n\n  const { config, getEntityConfig } = useConfig()\n  const { collections, routes } = config\n  const [intersectionRef, entry] = useIntersect()\n  const [values, setValues] = useState<Value[]>([])\n  const { documents, getRelationships } = useListRelationships()\n  const [hasRequested, setHasRequested] = useState(false)\n  const { i18n, t } = useTranslation()\n\n  const isAboveViewport = canUseDOM ? entry?.boundingClientRect?.top < window.innerHeight : false\n\n  useEffect(() => {\n    if ((cellData || typeof cellData === 'number') && isAboveViewport && !hasRequested) {\n      const formattedValues: Value[] = []\n      const arrayCellData = Array.isArray(cellData) ? cellData : [cellData]\n      arrayCellData\n        .slice(0, arrayCellData.length < totalToShow ? arrayCellData.length : totalToShow)\n        .forEach((cell) => {\n          if (typeof cell === 'object' && 'relationTo' in cell && 'value' in cell) {\n            formattedValues.push(cell)\n          }\n          if (\n            (typeof cell === 'number' || typeof cell === 'string') &&\n            typeof relationTo === 'string'\n          ) {\n            formattedValues.push({\n              relationTo,\n              value: cell,\n            })\n          }\n        })\n      getRelationships(formattedValues)\n      setHasRequested(true)\n      setValues(formattedValues)\n    }\n  }, [\n    cellData,\n    relationTo,\n    collections,\n    isAboveViewport,\n    routes.api,\n    hasRequested,\n    getRelationships,\n  ])\n\n  useEffect(() => {\n    if (hasRequested) {\n      setHasRequested(false)\n    }\n  }, [cellData])\n\n  return (\n    <div className={baseClass} ref={intersectionRef}>\n      {values.map(({ relationTo, value }, i) => {\n        const document = documents[relationTo][value]\n        const relatedCollection = getEntityConfig({\n          collectionSlug: relationTo,\n        })\n\n        const label = formatDocTitle({\n          collectionConfig: relatedCollection,\n          data: document || null,\n          dateFormat: config.admin.dateFormat,\n          fallback: `${t('general:untitled')} - ID: ${value}`,\n          i18n,\n        })\n\n        let fileField = null\n\n        if (field.type === 'upload') {\n          const fieldPreviewAllowed = 'displayPreview' in field ? field.displayPreview : undefined\n          const previewAllowed =\n            fieldPreviewAllowed ?? relatedCollection.upload?.displayPreview ?? true\n\n          if (previewAllowed && document) {\n            fileField = (\n              <FileCell\n                cellData={label}\n                collectionConfig={relatedCollection}\n                collectionSlug={relatedCollection.slug}\n                customCellProps={customCellContext}\n                field={field}\n                rowData={document}\n              />\n            )\n          }\n        }\n\n        return (\n          <React.Fragment key={i}>\n            {document === false && `${t('general:untitled')} - ID: ${value}`}\n            {document === null && `${t('general:loading')}...`}\n            {document ? fileField || label : null}\n            {values.length > i + 1 && ', '}\n          </React.Fragment>\n        )\n      })}\n      {Array.isArray(cellData) &&\n        cellData.length > totalToShow &&\n        t('fields:itemsAndMore', { count: cellData.length - totalToShow, items: '' })}\n      {values.length === 0 && t('general:noLabel', { label: getTranslation(label || '', i18n) })}\n    </div>\n  )\n}\n"],"mappings":"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","ignoreList":[]}