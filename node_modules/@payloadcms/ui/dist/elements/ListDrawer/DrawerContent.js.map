{"version":3,"file":"DrawerContent.js","names":["useModal","hoistQueryParamsToAnd","React","useCallback","useEffect","useState","useDocumentDrawer","useEffectEvent","useConfig","useServerFunctions","ListDrawerContextProvider","LoadingOverlay","ListDrawerContent","allowCreate","collectionSlugs","disableQueryPresets","drawerSlug","enableRowSelections","filterOptions","onBulkSelect","onSelect","overrideEntityVisibility","selectedCollection","collectionSlugFromProps","closeModal","isModalOpen","serverFunction","ListView","setListView","undefined","isLoading","setIsLoading","config","collections","getEntityConfig","isOpen","enabledCollections","filter","slug","includes","selectedOption","setSelectedOption","initialSelection","found","collectionSlug","label","labels","value","DocumentDrawer","DocumentDrawerToggler","documentDrawerSlug","updateSelectedOption","refresh","query","newQuery","where","filterOption","result","name","args","disableBulkDelete","disableBulkEdit","List","_err","console","error","onCreateNew","doc","docID","id","onQueryChange","setMySelectedOption","incomingSelection","refreshSelf","incomingCollectionSlug","_jsx","_jsxs","createNewDrawerSlug","onSave"],"sources":["../../../src/elements/ListDrawer/DrawerContent.tsx"],"sourcesContent":["'use client'\nimport type { CollectionSlug, ListQuery } from 'payload'\n\nimport { useModal } from '@faceless-ui/modal'\nimport { hoistQueryParamsToAnd } from 'payload/shared'\nimport React, { useCallback, useEffect, useState } from 'react'\n\nimport type { ListDrawerContextProps, ListDrawerContextType } from '../ListDrawer/Provider.js'\nimport type { ListDrawerProps } from './types.js'\n\nimport { useDocumentDrawer } from '../../elements/DocumentDrawer/index.js'\nimport { useEffectEvent } from '../../hooks/useEffectEvent.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useServerFunctions } from '../../providers/ServerFunctions/index.js'\nimport { ListDrawerContextProvider } from '../ListDrawer/Provider.js'\nimport { LoadingOverlay } from '../Loading/index.js'\nimport { type Option } from '../ReactSelect/index.js'\n\nexport const ListDrawerContent: React.FC<ListDrawerProps> = ({\n  allowCreate = true,\n  collectionSlugs,\n  disableQueryPresets,\n  drawerSlug,\n  enableRowSelections,\n  filterOptions,\n  onBulkSelect,\n  onSelect,\n  overrideEntityVisibility = true,\n  selectedCollection: collectionSlugFromProps,\n}) => {\n  const { closeModal, isModalOpen } = useModal()\n\n  const { serverFunction } = useServerFunctions()\n  const [ListView, setListView] = useState<React.ReactNode>(undefined)\n  const [isLoading, setIsLoading] = useState(true)\n\n  const {\n    config: { collections },\n    getEntityConfig,\n  } = useConfig()\n\n  const isOpen = isModalOpen(drawerSlug)\n\n  const enabledCollections = collections.filter(({ slug }) => {\n    return collectionSlugs.includes(slug)\n  })\n\n  const [selectedOption, setSelectedOption] = useState<Option<string>>(() => {\n    const initialSelection = collectionSlugFromProps || enabledCollections[0]?.slug\n    const found = getEntityConfig({ collectionSlug: initialSelection })\n\n    return found\n      ? {\n          label: found.labels,\n          value: found.slug,\n        }\n      : undefined\n  })\n\n  const [DocumentDrawer, DocumentDrawerToggler, { drawerSlug: documentDrawerSlug }] =\n    useDocumentDrawer({\n      collectionSlug: selectedOption.value,\n    })\n\n  const updateSelectedOption = useEffectEvent((collectionSlug: CollectionSlug) => {\n    if (collectionSlug && collectionSlug !== selectedOption?.value) {\n      setSelectedOption({\n        label: getEntityConfig({ collectionSlug })?.labels,\n        value: collectionSlug,\n      })\n    }\n  })\n\n  useEffect(() => {\n    updateSelectedOption(collectionSlugFromProps)\n  }, [collectionSlugFromProps])\n\n  /**\n   * This performs a full server round trip to get the list view for the selected collection.\n   * On the server, the data is freshly queried for the list view and all components are fully rendered.\n   * This work includes building column state, rendering custom components, etc.\n   */\n  const refresh = useCallback(\n    async ({ slug, query }: { query?: ListQuery; slug: string }) => {\n      try {\n        const newQuery: ListQuery = { ...(query || {}), where: { ...(query?.where || {}) } }\n\n        const filterOption = filterOptions?.[slug]\n\n        if (filterOptions && typeof filterOption !== 'boolean') {\n          newQuery.where = hoistQueryParamsToAnd(newQuery.where, filterOption)\n        }\n\n        if (slug) {\n          const result: { List: React.ReactNode } = (await serverFunction({\n            name: 'render-list',\n            args: {\n              allowCreate,\n              collectionSlug: slug,\n              disableBulkDelete: true,\n              disableBulkEdit: true,\n              disableQueryPresets,\n              drawerSlug,\n              enableRowSelections,\n              overrideEntityVisibility,\n              query: newQuery,\n            },\n          })) as { List: React.ReactNode }\n\n          setListView(result?.List || null)\n        } else {\n          setListView(null)\n        }\n        setIsLoading(false)\n      } catch (_err) {\n        console.error('Error rendering List View: ', _err) // eslint-disable-line no-console\n\n        if (isOpen) {\n          closeModal(drawerSlug)\n        }\n      }\n    },\n    [\n      serverFunction,\n      closeModal,\n      allowCreate,\n      drawerSlug,\n      isOpen,\n      enableRowSelections,\n      filterOptions,\n      overrideEntityVisibility,\n      disableQueryPresets,\n    ],\n  )\n\n  useEffect(() => {\n    if (!ListView) {\n      void refresh({ slug: selectedOption?.value })\n    }\n  }, [refresh, ListView, selectedOption.value])\n\n  const onCreateNew = useCallback(\n    ({ doc }) => {\n      if (typeof onSelect === 'function') {\n        onSelect({\n          collectionSlug: selectedOption?.value,\n          doc,\n          docID: doc.id,\n        })\n      }\n\n      closeModal(documentDrawerSlug)\n      closeModal(drawerSlug)\n    },\n    [closeModal, documentDrawerSlug, drawerSlug, onSelect, selectedOption.value],\n  )\n\n  const onQueryChange: ListDrawerContextProps['onQueryChange'] = useCallback(\n    (query) => {\n      void refresh({ slug: selectedOption?.value, query })\n    },\n    [refresh, selectedOption.value],\n  )\n\n  const setMySelectedOption: ListDrawerContextProps['setSelectedOption'] = useCallback(\n    (incomingSelection) => {\n      setSelectedOption(incomingSelection)\n      void refresh({ slug: incomingSelection?.value })\n    },\n    [refresh],\n  )\n\n  const refreshSelf: ListDrawerContextType['refresh'] = useCallback(\n    async (incomingCollectionSlug) => {\n      if (incomingCollectionSlug) {\n        setSelectedOption({\n          label: getEntityConfig({ collectionSlug: incomingCollectionSlug })?.labels,\n          value: incomingCollectionSlug,\n        })\n      }\n\n      await refresh({ slug: selectedOption.value || incomingCollectionSlug })\n    },\n    [getEntityConfig, refresh, selectedOption.value],\n  )\n\n  if (isLoading) {\n    return <LoadingOverlay />\n  }\n\n  return (\n    <ListDrawerContextProvider\n      allowCreate={allowCreate}\n      createNewDrawerSlug={documentDrawerSlug}\n      DocumentDrawerToggler={DocumentDrawerToggler}\n      drawerSlug={drawerSlug}\n      enabledCollections={collectionSlugs}\n      onBulkSelect={onBulkSelect}\n      onQueryChange={onQueryChange}\n      onSelect={onSelect}\n      refresh={refreshSelf}\n      selectedOption={selectedOption}\n      setSelectedOption={setMySelectedOption}\n    >\n      {ListView}\n      <DocumentDrawer onSave={onCreateNew} />\n    </ListDrawerContextProvider>\n  )\n}\n"],"mappings":"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","ignoreList":[]}