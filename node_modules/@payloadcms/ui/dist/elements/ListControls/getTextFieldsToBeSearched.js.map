{"version":3,"file":"getTextFieldsToBeSearched.js","names":["fieldAffectsData","flattenTopLevelFields","getTextFieldsToBeSearched","listSearchableFields","fields","i18n","flattenedFields","moveSubFieldsToTop","searchableFieldNames","Set","matchingFields","field","has","name","push","delete"],"sources":["../../../src/elements/ListControls/getTextFieldsToBeSearched.ts"],"sourcesContent":["'use client'\nimport type { I18nClient } from '@payloadcms/translations'\nimport type { ClientField } from 'payload'\n\nimport { fieldAffectsData, flattenTopLevelFields } from 'payload/shared'\n\nexport const getTextFieldsToBeSearched = (\n  listSearchableFields: string[],\n  fields: ClientField[],\n  i18n: I18nClient,\n): ClientField[] => {\n  if (listSearchableFields) {\n    const flattenedFields = flattenTopLevelFields(fields, {\n      i18n,\n      moveSubFieldsToTop: true,\n    }) as ClientField[]\n\n    const searchableFieldNames = new Set(listSearchableFields)\n    const matchingFields: typeof flattenedFields = []\n\n    for (const field of flattenedFields) {\n      if (fieldAffectsData(field) && searchableFieldNames.has(field.name)) {\n        matchingFields.push(field)\n        searchableFieldNames.delete(field.name)\n      }\n    }\n\n    return matchingFields\n  }\n\n  return null\n}\n"],"mappings":"AAAA;;AAIA,SAASA,gBAAgB,EAAEC,qBAAqB,QAAQ;AAExD,OAAO,MAAMC,yBAAA,GAA4BA,CACvCC,oBAAA,EACAC,MAAA,EACAC,IAAA;EAEA,IAAIF,oBAAA,EAAsB;IACxB,MAAMG,eAAA,GAAkBL,qBAAA,CAAsBG,MAAA,EAAQ;MACpDC,IAAA;MACAE,kBAAA,EAAoB;IACtB;IAEA,MAAMC,oBAAA,GAAuB,IAAIC,GAAA,CAAIN,oBAAA;IACrC,MAAMO,cAAA,GAAyC,EAAE;IAEjD,KAAK,MAAMC,KAAA,IAASL,eAAA,EAAiB;MACnC,IAAIN,gBAAA,CAAiBW,KAAA,KAAUH,oBAAA,CAAqBI,GAAG,CAACD,KAAA,CAAME,IAAI,GAAG;QACnEH,cAAA,CAAeI,IAAI,CAACH,KAAA;QACpBH,oBAAA,CAAqBO,MAAM,CAACJ,KAAA,CAAME,IAAI;MACxC;IACF;IAEA,OAAOH,cAAA;EACT;EAEA,OAAO;AACT","ignoreList":[]}