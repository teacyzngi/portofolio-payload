{"version":3,"file":"mergeFormStateFromClipboard.js","names":["reduceFormStateByPath","formState","path","rowIndex","filteredState","prefix","key","startsWith","customComponents","_","validate","__","field","Array","isArray","rows","map","row","serializableRow","mergeFormStateFromClipboard","dataFromClipboard","clipboardData","type","typeFromClipboard","data","pathFromClipboard","rowIndexFromClipboard","copyFromField","pasteIntoField","fromRowToField","pathToReplace","targetSegment","lastRenderedPath","rowIDFromClipboard","value","hasRows","length","id","isLoading","initialValue","disableFormData","fieldPath","clipboardPath","endsWith","newPath","replace","undefined"],"sources":["../../../src/elements/ClipboardAction/mergeFormStateFromClipboard.ts"],"sourcesContent":["import type { FieldState, FormState } from 'payload'\n\nimport type { ClipboardPasteData } from './types.js'\n\nexport function reduceFormStateByPath({\n  formState,\n  path,\n  rowIndex,\n}: {\n  formState: FormState\n  path: string\n  rowIndex?: number\n}) {\n  const filteredState: Record<string, FieldState> = {}\n  const prefix = typeof rowIndex !== 'number' ? path : `${path}.${rowIndex}`\n\n  for (const key in formState) {\n    if (!key.startsWith(prefix)) {\n      continue\n    }\n\n    const { customComponents: _, validate: __, ...field } = formState[key]\n\n    if (Array.isArray(field.rows)) {\n      field.rows = field.rows.map((row) => {\n        if (!row || typeof row !== 'object') {\n          return row\n        }\n        const { customComponents: _, ...serializableRow } = row\n        return serializableRow\n      })\n    }\n\n    filteredState[key] = field\n  }\n\n  return filteredState\n}\n\nexport function mergeFormStateFromClipboard({\n  dataFromClipboard: clipboardData,\n  formState,\n  path,\n  rowIndex,\n}: {\n  dataFromClipboard: ClipboardPasteData\n  formState: FormState\n  path: string\n  rowIndex?: number\n}) {\n  const {\n    type: typeFromClipboard,\n    data: dataFromClipboard,\n    path: pathFromClipboard,\n    rowIndex: rowIndexFromClipboard,\n  } = clipboardData\n\n  const copyFromField = typeof rowIndexFromClipboard !== 'number'\n  const pasteIntoField = typeof rowIndex !== 'number'\n  const fromRowToField = !copyFromField && pasteIntoField\n  const isArray = typeFromClipboard === 'array'\n\n  let pathToReplace: string\n  if (copyFromField && pasteIntoField) {\n    pathToReplace = pathFromClipboard\n  } else if (copyFromField) {\n    pathToReplace = `${pathFromClipboard}.${rowIndex}`\n  } else {\n    pathToReplace = `${pathFromClipboard}.${rowIndexFromClipboard}`\n  }\n\n  let targetSegment: string\n  if (!pasteIntoField) {\n    targetSegment = `${path}.${rowIndex}`\n  } else if (fromRowToField) {\n    targetSegment = `${path}.0`\n  } else {\n    targetSegment = path\n  }\n\n  if (fromRowToField) {\n    const lastRenderedPath = `${path}.0`\n    const rowIDFromClipboard = dataFromClipboard[`${pathToReplace}.id`].value as string\n    const hasRows = formState[path].rows?.length\n\n    formState[path].rows = [\n      {\n        ...(hasRows && isArray ? formState[path].rows[0] : {}),\n        id: rowIDFromClipboard,\n        isLoading: false,\n        lastRenderedPath,\n      },\n    ]\n    formState[path].value = 1\n    formState[path].initialValue = 1\n    formState[path].disableFormData = true\n\n    for (const fieldPath in formState) {\n      if (\n        fieldPath !== path &&\n        !fieldPath.startsWith(lastRenderedPath) &&\n        fieldPath.startsWith(path)\n      ) {\n        delete formState[fieldPath]\n      }\n    }\n  }\n\n  for (const clipboardPath in dataFromClipboard) {\n    // Pasting a row id, skip overwriting\n    if (\n      (!pasteIntoField && clipboardPath.endsWith('.id')) ||\n      !clipboardPath.startsWith(pathToReplace)\n    ) {\n      continue\n    }\n\n    const newPath = clipboardPath.replace(pathToReplace, targetSegment)\n\n    const customComponents = isArray ? formState[newPath]?.customComponents : undefined\n    const validate = isArray ? formState[newPath]?.validate : undefined\n\n    formState[newPath] = {\n      customComponents,\n      validate,\n      ...dataFromClipboard[clipboardPath],\n    }\n  }\n\n  return formState\n}\n"],"mappings":"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","ignoreList":[]}