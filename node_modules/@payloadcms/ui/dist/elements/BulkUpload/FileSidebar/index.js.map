{"version":3,"file":"index.js","names":["c","_c","useModal","useWindowInfo","isImage","React","SelectInput","ChevronIcon","XIcon","useConfig","useTranslation","AnimateHeight","Button","Drawer","ErrorPill","Pill","ShimmerEffect","createThumbnail","Thumbnail","Actions","AddFilesView","useFormsManager","useBulkUpload","addMoreFilesDrawerSlug","baseClass","FileSidebar","$","activeIndex","addFiles","forms","isInitializing","removeFile","setActiveIndex","totalErrorCount","initialFiles","initialForms","maxFiles","i18n","t","closeModal","openModal","showFiles","setShowFiles","useState","breakpoints","t0","indexToRemove","handleRemoveFile","t1","filelist","handleAddFiles","getFileSize","_temp","totalFileCount","length","collectionSlug","bulkUploadCollectionSlug","selectableCollections","setCollectionSlug","getEntityConfig","t2","t3","filter","Boolean","t4","join","t5","m","t6","Symbol","for","_temp2","t7","t8","t9","index_0","errorCount","formID","formState","currentFile","file","value","_jsxs","className","index","children","onClick","type","_jsx","SidebarThumbnail","title","name","File","count","isClearable","onChange","e","val","options","map","coll","config","label","labels","singular","slug","path","required","withMessage","size","buttonStyle","direction","gutter","Header","onCancel","onDrop","height","Array","from","_temp3","file_0","animationDelay","prev","i","Math","floor","log","decimals","formattedSize","pow","toFixed","thumbnailURL","setThumbnailURL","isLoading","setIsLoading","useEffect","isCancelled","generateThumbnail","url","_","disableInlineStyles","fileSrc"],"sources":["../../../../src/elements/BulkUpload/FileSidebar/index.tsx"],"sourcesContent":["'use client'\n\nimport { useModal } from '@faceless-ui/modal'\nimport { useWindowInfo } from '@faceless-ui/window-info'\nimport { isImage } from 'payload/shared'\nimport React from 'react'\n\nimport { SelectInput } from '../../../fields/Select/Input.js'\nimport { ChevronIcon } from '../../../icons/Chevron/index.js'\nimport { XIcon } from '../../../icons/X/index.js'\nimport { useConfig } from '../../../providers/Config/index.js'\nimport { useTranslation } from '../../../providers/Translation/index.js'\nimport { AnimateHeight } from '../../AnimateHeight/index.js'\nimport { Button } from '../../Button/index.js'\nimport { Drawer } from '../../Drawer/index.js'\nimport { ErrorPill } from '../../ErrorPill/index.js'\nimport { Pill } from '../../Pill/index.js'\nimport { ShimmerEffect } from '../../ShimmerEffect/index.js'\nimport { createThumbnail } from '../../Thumbnail/createThumbnail.js'\nimport { Thumbnail } from '../../Thumbnail/index.js'\nimport { Actions } from '../ActionsBar/index.js'\nimport { AddFilesView } from '../AddFilesView/index.js'\nimport './index.scss'\nimport { useFormsManager } from '../FormsManager/index.js'\nimport { useBulkUpload } from '../index.js'\n\nconst addMoreFilesDrawerSlug = 'bulk-upload-drawer--add-more-files'\n\nconst baseClass = 'file-selections'\n\nexport function FileSidebar() {\n  const {\n    activeIndex,\n    addFiles,\n    forms,\n    isInitializing,\n    removeFile,\n    setActiveIndex,\n    totalErrorCount,\n  } = useFormsManager()\n  const { initialFiles, initialForms, maxFiles } = useBulkUpload()\n  const { i18n, t } = useTranslation()\n  const { closeModal, openModal } = useModal()\n  const [showFiles, setShowFiles] = React.useState(false)\n  const { breakpoints } = useWindowInfo()\n\n  const handleRemoveFile = React.useCallback(\n    (indexToRemove: number) => {\n      removeFile(indexToRemove)\n    },\n    [removeFile],\n  )\n\n  const handleAddFiles = React.useCallback(\n    (filelist: FileList) => {\n      void addFiles(filelist)\n      closeModal(addMoreFilesDrawerSlug)\n    },\n    [addFiles, closeModal],\n  )\n\n  const getFileSize = React.useCallback((file: File) => {\n    const size = file.size\n    const i = size === 0 ? 0 : Math.floor(Math.log(size) / Math.log(1024))\n    const decimals = i > 1 ? 1 : 0\n    const formattedSize =\n      (size / Math.pow(1024, i)).toFixed(decimals) + ' ' + ['B', 'kB', 'MB', 'GB', 'TB'][i]\n    return formattedSize\n  }, [])\n\n  const totalFileCount = isInitializing\n    ? (initialFiles?.length ?? initialForms?.length)\n    : forms.length\n\n  const {\n    collectionSlug: bulkUploadCollectionSlug,\n    selectableCollections,\n    setCollectionSlug,\n  } = useBulkUpload()\n\n  const { getEntityConfig } = useConfig()\n\n  return (\n    <div\n      className={[baseClass, showFiles && `${baseClass}__showingFiles`].filter(Boolean).join(' ')}\n    >\n      {breakpoints.m && showFiles ? <div className={`${baseClass}__mobileBlur`} /> : null}\n      <div className={`${baseClass}__header`}>\n        {selectableCollections?.length > 1 && (\n          <SelectInput\n            className={`${baseClass}__collectionSelect`}\n            isClearable={false}\n            name=\"groupBy\"\n            onChange={(e) => {\n              const val: string =\n                typeof e === 'object' && 'value' in e\n                  ? (e?.value as string)\n                  : (e as unknown as string)\n              setCollectionSlug(val)\n            }}\n            options={\n              selectableCollections?.map((coll) => {\n                const config = getEntityConfig({ collectionSlug: coll })\n                return { label: config.labels.singular, value: config.slug }\n              }) || []\n            }\n            path=\"groupBy\"\n            required\n            value={bulkUploadCollectionSlug}\n          />\n        )}\n        <div className={`${baseClass}__headerTopRow`}>\n          <div className={`${baseClass}__header__text`}>\n            <ErrorPill count={totalErrorCount} i18n={i18n} withMessage />\n            <p>\n              <strong\n                title={`${totalFileCount} ${t(totalFileCount > 1 ? 'upload:filesToUpload' : 'upload:fileToUpload')}`}\n              >\n                {totalFileCount}{' '}\n                {t(totalFileCount > 1 ? 'upload:filesToUpload' : 'upload:fileToUpload')}\n              </strong>\n            </p>\n          </div>\n\n          <div className={`${baseClass}__header__actions`}>\n            {(typeof maxFiles === 'number' ? totalFileCount < maxFiles : true) ? (\n              <Pill\n                className={`${baseClass}__header__addFile`}\n                onClick={() => openModal(addMoreFilesDrawerSlug)}\n                size=\"small\"\n              >\n                {t('upload:addFile')}\n              </Pill>\n            ) : null}\n            <Button\n              buttonStyle=\"transparent\"\n              className={`${baseClass}__toggler`}\n              onClick={() => setShowFiles((prev) => !prev)}\n            >\n              <span className={`${baseClass}__toggler__label`}>\n                <strong\n                  title={`${totalFileCount} ${t(totalFileCount > 1 ? 'upload:filesToUpload' : 'upload:fileToUpload')}`}\n                >\n                  {totalFileCount}{' '}\n                  {t(totalFileCount > 1 ? 'upload:filesToUpload' : 'upload:fileToUpload')}\n                </strong>\n              </span>\n              <ChevronIcon direction={showFiles ? 'down' : 'up'} />\n            </Button>\n\n            <Drawer gutter={false} Header={null} slug={addMoreFilesDrawerSlug}>\n              <AddFilesView\n                onCancel={() => closeModal(addMoreFilesDrawerSlug)}\n                onDrop={handleAddFiles}\n              />\n            </Drawer>\n          </div>\n        </div>\n\n        <div className={`${baseClass}__header__mobileDocActions`}>\n          <Actions />\n        </div>\n      </div>\n\n      <div className={`${baseClass}__animateWrapper`}>\n        <AnimateHeight height={!breakpoints.m || showFiles ? 'auto' : 0}>\n          <div className={`${baseClass}__filesContainer`}>\n            {isInitializing &&\n            forms.length === 0 &&\n            (initialFiles?.length > 0 || initialForms?.length > 0)\n              ? (initialFiles ? Array.from(initialFiles) : initialForms).map((file, index) => (\n                  <ShimmerEffect\n                    animationDelay={`calc(${index} * ${60}ms)`}\n                    height=\"35px\"\n                    key={index}\n                  />\n                ))\n              : null}\n            {forms.map(({ errorCount, formID, formState }, index) => {\n              const currentFile = (formState?.file?.value as File) || ({} as File)\n\n              return (\n                <div\n                  className={[\n                    `${baseClass}__fileRowContainer`,\n                    index === activeIndex && `${baseClass}__fileRowContainer--active`,\n                    errorCount && errorCount > 0 && `${baseClass}__fileRowContainer--error`,\n                  ]\n                    .filter(Boolean)\n                    .join(' ')}\n                  key={formID}\n                >\n                  <button\n                    className={`${baseClass}__fileRow`}\n                    onClick={() => setActiveIndex(index)}\n                    type=\"button\"\n                  >\n                    <SidebarThumbnail file={currentFile} formID={formID} />\n                    <div className={`${baseClass}__fileDetails`}>\n                      <p className={`${baseClass}__fileName`} title={currentFile.name}>\n                        {currentFile.name || t('upload:noFile')}\n                      </p>\n                    </div>\n                    {currentFile instanceof File ? (\n                      <p className={`${baseClass}__fileSize`}>{getFileSize(currentFile)}</p>\n                    ) : null}\n                    <div className={`${baseClass}__remove ${baseClass}__remove--underlay`}>\n                      <XIcon />\n                    </div>\n\n                    {errorCount ? (\n                      <ErrorPill\n                        className={`${baseClass}__errorCount`}\n                        count={errorCount}\n                        i18n={i18n}\n                      />\n                    ) : null}\n                  </button>\n\n                  <button\n                    aria-label={t('general:remove')}\n                    className={`${baseClass}__remove ${baseClass}__remove--overlay`}\n                    onClick={() => handleRemoveFile(index)}\n                    type=\"button\"\n                  >\n                    <XIcon />\n                  </button>\n                </div>\n              )\n            })}\n          </div>\n        </AnimateHeight>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarThumbnail({ file, formID }: { file: File; formID: string }) {\n  const [thumbnailURL, setThumbnailURL] = React.useState<null | string>(null)\n  const [isLoading, setIsLoading] = React.useState(true)\n\n  React.useEffect(() => {\n    let isCancelled = false\n\n    async function generateThumbnail() {\n      setIsLoading(true)\n      setThumbnailURL(null)\n\n      try {\n        if (isImage(file.type)) {\n          const url = await createThumbnail(file)\n          if (!isCancelled) {\n            setThumbnailURL(url)\n          }\n        } else {\n          setThumbnailURL(null)\n        }\n      } catch (_) {\n        if (!isCancelled) {\n          setThumbnailURL(null)\n        }\n      } finally {\n        if (!isCancelled) {\n          setIsLoading(false)\n        }\n      }\n    }\n\n    void generateThumbnail()\n\n    return () => {\n      isCancelled = true\n    }\n  }, [file])\n\n  if (isLoading) {\n    return <ShimmerEffect className={`${baseClass}__thumbnail-shimmer`} disableInlineStyles />\n  }\n\n  return (\n    <Thumbnail\n      className={`${baseClass}__thumbnail`}\n      fileSrc={thumbnailURL}\n      key={`${formID}-${thumbnailURL || 'placeholder'}`}\n    />\n  )\n}\n"],"mappings":"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","ignoreList":[]}