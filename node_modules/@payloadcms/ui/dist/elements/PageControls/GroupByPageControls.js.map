{"version":3,"file":"GroupByPageControls.js","names":["c","_c","React","useCallback","useListQuery","PageControlsComponent","GroupByPageControls","t0","$","AfterPageControls","collectionConfig","data","groupByValue","refineListData","t1","page","queryByGroup","handlePageChange","t2","limit","handlePerPageChange","t3","_jsx"],"sources":["../../../src/elements/PageControls/GroupByPageControls.tsx"],"sourcesContent":["'use client'\nimport type { ClientCollectionConfig, PaginatedDocs } from 'payload'\n\nimport React, { useCallback } from 'react'\n\nimport type { IListQueryContext } from '../../providers/ListQuery/types.js'\n\nimport { useListQuery } from '../../providers/ListQuery/context.js'\nimport { PageControlsComponent } from './index.js'\n\n/**\n * If `groupBy` is set in the query, multiple tables will render, one for each group.\n * In this case, each table needs its own `PageControls` to handle pagination.\n * These page controls, however, should not modify the global `ListQuery` state.\n * Instead, they should only handle the pagination for the current group.\n * To do this, build a wrapper around `PageControlsComponent` that handles the pagination logic for the current group.\n */\nexport const GroupByPageControls: React.FC<{\n  AfterPageControls?: React.ReactNode\n  collectionConfig: ClientCollectionConfig\n  data: PaginatedDocs\n  groupByValue?: number | string\n}> = ({ AfterPageControls, collectionConfig, data, groupByValue }) => {\n  const { refineListData } = useListQuery()\n\n  const handlePageChange: IListQueryContext['handlePageChange'] = useCallback(\n    async (page) => {\n      await refineListData({\n        queryByGroup: {\n          [groupByValue]: {\n            page,\n          },\n        },\n      })\n    },\n    [refineListData, groupByValue],\n  )\n\n  const handlePerPageChange: IListQueryContext['handlePerPageChange'] = useCallback(\n    async (limit) => {\n      await refineListData({\n        queryByGroup: {\n          [groupByValue]: {\n            limit,\n            page: 1,\n          },\n        },\n      })\n    },\n    [refineListData, groupByValue],\n  )\n\n  return (\n    <PageControlsComponent\n      AfterPageControls={AfterPageControls}\n      collectionConfig={collectionConfig}\n      data={data}\n      handlePageChange={handlePageChange}\n      handlePerPageChange={handlePerPageChange}\n    />\n  )\n}\n"],"mappings":"AAAA;;AAAA,SAAAA,CAAA,IAAAC,EAAA;;AAGA,OAAOC,KAAA,IAASC,WAAW,QAAQ;AAInC,SAASC,YAAY,QAAQ;AAC7B,SAASC,qBAAqB,QAAQ;AAEtC;;;;;;;AAOA,OAAO,MAAMC,mBAAA,GAKRC,EAAA;EAAA,MAAAC,CAAA,GAAAP,EAAA;EAAC;IAAAQ,iBAAA;IAAAC,gBAAA;IAAAC,IAAA;IAAAC;EAAA,IAAAL,EAA2D;EAC/D;IAAAM;EAAA,IAA2BT,YAAA;EAAA,IAAAU,EAAA;EAAA,IAAAN,CAAA,QAAAI,YAAA,IAAAJ,CAAA,QAAAK,cAAA;IAGzBC,EAAA,SAAAC,IAAA;MAAA,MACQF,cAAA;QAAAG,YAAA;UAAA,CAEDJ,YAAA;YAAAG;UAAA;QAAA;MAAA,CAIL;IAAA;IACFP,CAAA,MAAAI,YAAA;IAAAJ,CAAA,MAAAK,cAAA;IAAAL,CAAA,MAAAM,EAAA;EAAA;IAAAA,EAAA,GAAAN,CAAA;EAAA;EATF,MAAAS,gBAAA,GAAgEH,EAUhC;EAAA,IAAAI,EAAA;EAAA,IAAAV,CAAA,QAAAI,YAAA,IAAAJ,CAAA,QAAAK,cAAA;IAI9BK,EAAA,SAAAC,KAAA;MAAA,MACQN,cAAA;QAAAG,YAAA;UAAA,CAEDJ,YAAA;YAAAO,KAAA;YAAAJ,IAAA;UAAA;QAAA;MAAA,CAKL;IAAA;IACFP,CAAA,MAAAI,YAAA;IAAAJ,CAAA,MAAAK,cAAA;IAAAL,CAAA,MAAAU,EAAA;EAAA;IAAAA,EAAA,GAAAV,CAAA;EAAA;EAVF,MAAAY,mBAAA,GAAsEF,EAWtC;EAAA,IAAAG,EAAA;EAAA,IAAAb,CAAA,QAAAC,iBAAA,IAAAD,CAAA,QAAAE,gBAAA,IAAAF,CAAA,QAAAG,IAAA,IAAAH,CAAA,QAAAS,gBAAA,IAAAT,CAAA,SAAAY,mBAAA;IAI9BC,EAAA,GAAAC,IAAA,CAAAjB,qBAAA;MAAAI,iBAAA;MAAAC,gBAAA;MAAAC,IAAA;MAAAM,gBAAA;MAAAG;IAAA,C;;;;;;;;;;SAAAC,E;CAQJ","ignoreList":[]}