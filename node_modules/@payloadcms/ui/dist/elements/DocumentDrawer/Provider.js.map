{"version":3,"file":"Provider.js","names":["createContext","use","DocumentDrawerCallbacksContext","DocumentDrawerContextProvider","children","rest","_jsx","value","useDocumentDrawerContext","context","Error"],"sources":["../../../src/elements/DocumentDrawer/Provider.tsx"],"sourcesContent":["import type { ClientCollectionConfig, Data, FormState, TypeWithID } from 'payload'\n\nimport { createContext, use } from 'react'\n\nexport type DocumentDrawerContextProps = {\n  readonly clearDoc?: () => void\n  readonly drawerSlug: string\n  readonly onDelete?: (args: {\n    collectionConfig?: ClientCollectionConfig\n    id: string\n  }) => Promise<void> | void\n  /* only available if `redirectAfterDuplicate` is `false` */\n  readonly onDuplicate?: (args: {\n    collectionConfig?: ClientCollectionConfig\n    doc: TypeWithID\n  }) => Promise<void> | void\n  readonly onRestore?: (args: {\n    collectionConfig?: ClientCollectionConfig\n    id: string\n  }) => Promise<void> | void\n  readonly onSave?: (args: {\n    collectionConfig?: ClientCollectionConfig\n    /**\n     * If you want to pass additional data to the onSuccess callback, you can use this context object.\n     *\n     * @experimental This property is experimental and may change in the future. Use at your own risk.\n     */\n    context?: Record<string, unknown>\n    doc: TypeWithID\n    operation: 'create' | 'update'\n    result: Data\n  }) => Promise<FormState | void> | void\n}\n\nexport type DocumentDrawerContextType = {} & DocumentDrawerContextProps\n\nexport const DocumentDrawerCallbacksContext = createContext({} as DocumentDrawerContextType)\n\nexport const DocumentDrawerContextProvider: React.FC<\n  {\n    children: React.ReactNode\n  } & DocumentDrawerContextProps\n> = ({ children, ...rest }) => {\n  return <DocumentDrawerCallbacksContext value={rest}>{children}</DocumentDrawerCallbacksContext>\n}\n\nexport const useDocumentDrawerContext = (): DocumentDrawerContextType => {\n  const context = use(DocumentDrawerCallbacksContext)\n\n  if (!context) {\n    throw new Error('useDocumentDrawerContext must be used within a DocumentDrawerProvider')\n  }\n\n  return context\n}\n"],"mappings":";AAEA,SAASA,aAAa,EAAEC,GAAG,QAAQ;AAkCnC,OAAO,MAAMC,8BAAA,gBAAiCF,aAAA,CAAc,CAAC;AAE7D,OAAO,MAAMG,6BAAA,GAITA,CAAC;EAAEC,QAAQ;EAAE,GAAGC;AAAA,CAAM;EACxB,oBAAOC,IAAA,CAACJ,8BAAA;IAA+BK,KAAA,EAAOF,IAAA;cAAOD;;AACvD;AAEA,OAAO,MAAMI,wBAAA,GAA2BA,CAAA;EACtC,MAAMC,OAAA,GAAUR,GAAA,CAAIC,8BAAA;EAEpB,IAAI,CAACO,OAAA,EAAS;IACZ,MAAM,IAAIC,KAAA,CAAM;EAClB;EAEA,OAAOD,OAAA;AACT","ignoreList":[]}