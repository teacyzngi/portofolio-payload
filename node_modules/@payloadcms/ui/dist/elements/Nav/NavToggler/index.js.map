{"version":3,"file":"index.js","names":["c","_c","useWindowInfo","React","usePreferences","useTranslation","useNav","baseClass","NavToggler","props","$","id","children","className","tabIndex","t0","undefined","t","setPreference","navOpen","setNavOpen","breakpoints","t1","l","largeBreak","t2","t3","t4","filter","Boolean","t5","join","t6","open","t7","_jsx","onClick","type"],"sources":["../../../../src/elements/Nav/NavToggler/index.tsx"],"sourcesContent":["'use client'\nimport { useWindowInfo } from '@faceless-ui/window-info'\nimport React from 'react'\n\nimport { usePreferences } from '../../../providers/Preferences/index.js'\nimport { useTranslation } from '../../../providers/Translation/index.js'\nimport { useNav } from '../context.js'\nimport './index.scss'\n\nconst baseClass = 'nav-toggler'\n\nexport const NavToggler: React.FC<{\n  children?: React.ReactNode\n  className?: string\n  id?: string\n  tabIndex?: number\n}> = (props) => {\n  const { id, children, className, tabIndex = 0 } = props\n\n  const { t } = useTranslation()\n\n  const { setPreference } = usePreferences()\n\n  const { navOpen, setNavOpen } = useNav()\n\n  const {\n    breakpoints: { l: largeBreak },\n  } = useWindowInfo()\n\n  return (\n    <button\n      aria-label={`${navOpen ? t('general:close') : t('general:open')} ${t('general:menu')}`}\n      className={[baseClass, navOpen && `${baseClass}--is-open`, className]\n        .filter(Boolean)\n        .join(' ')}\n      id={id}\n      onClick={async () => {\n        setNavOpen(!navOpen)\n\n        // only when the user explicitly toggles the nav on desktop do we want to set the preference\n        // this is because the js may open or close the nav based on the window size, routing, etc\n        if (!largeBreak) {\n          await setPreference(\n            'nav',\n            {\n              open: !navOpen,\n            },\n            true,\n          )\n        }\n      }}\n      tabIndex={tabIndex}\n      type=\"button\"\n    >\n      {children}\n    </button>\n  )\n}\n"],"mappings":"AAAA;;AAAA,SAAAA,CAAA,IAAAC,EAAA;;AACA,SAASC,aAAa,QAAQ;AAC9B,OAAOC,KAAA,MAAW;AAElB,SAASC,cAAc,QAAQ;AAC/B,SAASC,cAAc,QAAQ;AAC/B,SAASC,MAAM,QAAQ;AACvB,OAAO;AAEP,MAAMC,SAAA,GAAY;AAElB,OAAO,MAAMC,UAAA,GAKRC,KAAA;EAAA,MAAAC,CAAA,GAAAT,EAAA;EACH;IAAAU,EAAA;IAAAC,QAAA;IAAAC,SAAA;IAAAC,QAAA,EAAAC;EAAA,IAAkDN,KAAA;EAAjB,MAAAK,QAAA,GAAAC,EAAY,KAAAC,SAAA,OAAZD,EAAY;EAE7C;IAAAE;EAAA,IAAcZ,cAAA;EAEd;IAAAa;EAAA,IAA0Bd,cAAA;EAE1B;IAAAe,OAAA;IAAAC;EAAA,IAAgCd,MAAA;EAEhC;IAAAe,WAAA,EAAAC;EAAA,IAEIpB,aAAA;EADW;IAAAqB,CAAA,EAAAC;EAAA,IAAAF,EAAiB;EAKhB,MAAAG,EAAA,MAAGN,OAAA,GAAUF,CAAA,CAAE,mBAAmBA,CAAA,CAAE,mBAAmBA,CAAA,CAAE,iBAAiB;EAC/D,MAAAS,EAAA,GAAAP,OAAA,IAAW,GAAAZ,SAAA,WAAuB;EAAA,IAAAoB,EAAA;EAAA,IAAAjB,CAAA,QAAAG,SAAA,IAAAH,CAAA,QAAAgB,EAAA;IAA9CC,EAAA,IAAApB,SAAA,EAAYmB,EAAkC,EAAEb,SAAA,EAAAe,MAAA,CAAAC,OACjD;IAAAnB,CAAA,MAAAG,SAAA;IAAAH,CAAA,MAAAgB,EAAA;IAAAhB,CAAA,MAAAiB,EAAA;EAAA;IAAAA,EAAA,GAAAjB,CAAA;EAAA;EADC,MAAAoB,EAAA,GAAAH,EACD,CAAAI,IAAA,CACF;EAAA,IAAAC,EAAA;EAAA,IAAAtB,CAAA,QAAAc,UAAA,IAAAd,CAAA,QAAAS,OAAA,IAAAT,CAAA,QAAAU,UAAA,IAAAV,CAAA,QAAAQ,aAAA;IAECc,EAAA,SAAAA,CAAA;MACPZ,UAAA,EAAYD,OAAA;MAAA,KAIPK,UAAA;QAAA,MACGN,aAAA,CACJ;UAAAe,IAAA,GAESd;QAAA,OAET;MAAA;IAAA;IAGNT,CAAA,MAAAc,UAAA;IAAAd,CAAA,MAAAS,OAAA;IAAAT,CAAA,MAAAU,UAAA;IAAAV,CAAA,MAAAQ,aAAA;IAAAR,CAAA,MAAAsB,EAAA;EAAA;IAAAA,EAAA,GAAAtB,CAAA;EAAA;EAAA,IAAAwB,EAAA;EAAA,IAAAxB,CAAA,QAAAE,QAAA,IAAAF,CAAA,QAAAC,EAAA,IAAAD,CAAA,SAAAe,EAAA,IAAAf,CAAA,SAAAoB,EAAA,IAAApB,CAAA,SAAAsB,EAAA,IAAAtB,CAAA,SAAAI,QAAA;IApBFoB,EAAA,GAAAC,IAAA,CAAC;MAAA,cACaV,EAA0E;MAAAZ,SAAA,EAC3EiB,EAEH;MAAAnB,EAAA;MAAAyB,OAAA,EAECJ,EAcT;MAAAlB,QAAA;MAAAuB,IAAA,EAEK;MAAAzB;IAAA,C;;;;;;;;;;;SAtBPsB,E;CA2BJ","ignoreList":[]}