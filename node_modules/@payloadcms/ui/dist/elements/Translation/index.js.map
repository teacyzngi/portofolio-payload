{"version":3,"file":"index.js","names":["React","RecursiveTranslation","elements","translationString","regex","sections","split","_jsx","map","section","index","startsWith","endsWith","elementKey","Element","RegExp","children","replace","_","group","Translation","i18nKey","t","variables","stringWithVariables"],"sources":["../../../src/elements/Translation/index.tsx"],"sourcesContent":["import type { ClientTranslationKeys, TFunction } from '@payloadcms/translations'\n\nimport * as React from 'react'\n\nconst RecursiveTranslation: React.FC<{\n  elements?: Record<string, React.FC<{ children: React.ReactNode }>>\n  translationString: string\n}> = ({ elements, translationString }) => {\n  const regex = /(<[^>]+>.*?<\\/[^>]+>)/g\n  const sections = translationString.split(regex)\n\n  return (\n    <span>\n      {sections.map((section, index) => {\n        if (elements && section.startsWith('<') && section.endsWith('>')) {\n          const elementKey = section[1]\n          const Element = elements[elementKey]\n\n          if (Element) {\n            const regex = new RegExp(`<${elementKey}>(.*?)<\\/${elementKey}>`, 'g')\n            const children = section.replace(regex, (_, group) => group)\n\n            return (\n              <Element key={index}>\n                <RecursiveTranslation translationString={children} />\n              </Element>\n            )\n          }\n        }\n\n        return section\n      })}\n    </span>\n  )\n}\n\nexport type TranslationProps = {\n  elements?: Record<string, React.FC<{ children: React.ReactNode }>>\n  i18nKey: ClientTranslationKeys\n  t: TFunction\n  variables?: Record<string, unknown>\n}\n\nexport const Translation: React.FC<TranslationProps> = ({ elements, i18nKey, t, variables }) => {\n  const stringWithVariables = t(i18nKey, variables || {})\n\n  if (!elements) {\n    return stringWithVariables\n  }\n\n  return <RecursiveTranslation elements={elements} translationString={stringWithVariables} />\n}\n"],"mappings":";AAEA,YAAYA,KAAA,MAAW;AAEvB,MAAMC,oBAAA,GAGDA,CAAC;EAAEC,QAAQ;EAAEC;AAAiB,CAAE;EACnC,MAAMC,KAAA,GAAQ;EACd,MAAMC,QAAA,GAAWF,iBAAA,CAAkBG,KAAK,CAACF,KAAA;EAEzC,oBACEG,IAAA,CAAC;cACEF,QAAA,CAASG,GAAG,CAAC,CAACC,OAAA,EAASC,KAAA;MACtB,IAAIR,QAAA,IAAYO,OAAA,CAAQE,UAAU,CAAC,QAAQF,OAAA,CAAQG,QAAQ,CAAC,MAAM;QAChE,MAAMC,UAAA,GAAaJ,OAAO,CAAC,EAAE;QAC7B,MAAMK,OAAA,GAAUZ,QAAQ,CAACW,UAAA,CAAW;QAEpC,IAAIC,OAAA,EAAS;UACX,MAAMV,KAAA,GAAQ,IAAIW,MAAA,CAAO,IAAIF,UAAA,YAAsBA,UAAA,GAAa,EAAE;UAClE,MAAMG,QAAA,GAAWP,OAAA,CAAQQ,OAAO,CAACb,KAAA,EAAO,CAACc,CAAA,EAAGC,KAAA,KAAUA,KAAA;UAEtD,oBACEZ,IAAA,CAACO,OAAA;sBACC,aAAAP,IAAA,CAACN,oBAAA;cAAqBE,iBAAA,EAAmBa;;aAD7BN,KAAA;QAIlB;MACF;MAEA,OAAOD,OAAA;IACT;;AAGN;AASA,OAAO,MAAMW,WAAA,GAA0CA,CAAC;EAAElB,QAAQ;EAAEmB,OAAO;EAAEC,CAAC;EAAEC;AAAS,CAAE;EACzF,MAAMC,mBAAA,GAAsBF,CAAA,CAAED,OAAA,EAASE,SAAA,IAAa,CAAC;EAErD,IAAI,CAACrB,QAAA,EAAU;IACb,OAAOsB,mBAAA;EACT;EAEA,oBAAOjB,IAAA,CAACN,oBAAA;IAAqBC,QAAA,EAAUA,QAAA;IAAUC,iBAAA,EAAmBqB;;AACtE","ignoreList":[]}