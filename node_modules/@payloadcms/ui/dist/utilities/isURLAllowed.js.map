{"version":3,"file":"isURLAllowed.js","names":["isURLAllowed","url","allowList","parsedUrl","URL","some","allowItem","Object","entries","every","key","value","protocol","regexPattern","replace","regex","RegExp","test","pathname"],"sources":["../../src/utilities/isURLAllowed.ts"],"sourcesContent":["import type { AllowList } from 'payload'\n\nexport const isURLAllowed = (url: string, allowList: AllowList): boolean => {\n  try {\n    const parsedUrl = new URL(url)\n\n    return allowList.some((allowItem) => {\n      return Object.entries(allowItem).every(([key, value]) => {\n        // Skip undefined or null values\n        if (!value) {\n          return true\n        }\n        // Compare protocol with colon\n        if (key === 'protocol') {\n          return typeof value === 'string' && parsedUrl.protocol === `${value}:`\n        }\n\n        if (key === 'pathname') {\n          // Convert wildcards to a regex\n          const regexPattern = value\n            .replace(/\\*\\*/g, '.*') // Match any path\n            .replace(/\\*/g, '[^/]*') // Match any part of a path segment\n          const regex = new RegExp(`^${regexPattern}$`)\n          return regex.test(parsedUrl.pathname)\n        }\n\n        // Default comparison for all other properties (hostname, port, search)\n        return parsedUrl[key as keyof URL] === value\n      })\n    })\n  } catch {\n    return false // If the URL is invalid, deny by default\n  }\n}\n"],"mappings":"AAEA,OAAO,MAAMA,YAAA,GAAeA,CAACC,GAAA,EAAaC,SAAA;EACxC,IAAI;IACF,MAAMC,SAAA,GAAY,IAAIC,GAAA,CAAIH,GAAA;IAE1B,OAAOC,SAAA,CAAUG,IAAI,CAAEC,SAAA;MACrB,OAAOC,MAAA,CAAOC,OAAO,CAACF,SAAA,EAAWG,KAAK,CAAC,CAAC,CAACC,GAAA,EAAKC,KAAA,CAAM;QAClD;QACA,IAAI,CAACA,KAAA,EAAO;UACV,OAAO;QACT;QACA;QACA,IAAID,GAAA,KAAQ,YAAY;UACtB,OAAO,OAAOC,KAAA,KAAU,YAAYR,SAAA,CAAUS,QAAQ,KAAK,GAAGD,KAAA,GAAQ;QACxE;QAEA,IAAID,GAAA,KAAQ,YAAY;UACtB;UACA,MAAMG,YAAA,GAAeF,KAAA,CAClBG,OAAO,CAAC,SAAS,MAAM;UAAA,CACvBA,OAAO,CAAC,OAAO,SAAS;UAAA;UAC3B,MAAMC,KAAA,GAAQ,IAAIC,MAAA,CAAO,IAAIH,YAAA,GAAe;UAC5C,OAAOE,KAAA,CAAME,IAAI,CAACd,SAAA,CAAUe,QAAQ;QACtC;QAEA;QACA,OAAOf,SAAS,CAACO,GAAA,CAAiB,KAAKC,KAAA;MACzC;IACF;EACF,EAAE,MAAM;IACN,OAAO,MAAM;IAAA;EACf;AACF","ignoreList":[]}