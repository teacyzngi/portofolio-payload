{"version":3,"file":"resolveFilterOptions.js","names":["resolveFilterOptions","filterOptions","options","relationTo","relations","Array","isArray","query","Promise","all","map","relation","id","exists"],"sources":["../../src/utilities/resolveFilterOptions.ts"],"sourcesContent":["import type { FilterOptions, FilterOptionsProps, ResolvedFilterOptions } from 'payload'\n\nexport const resolveFilterOptions = async (\n  filterOptions: FilterOptions,\n  options: { relationTo: string | string[] } & Omit<FilterOptionsProps, 'relationTo'>,\n): Promise<ResolvedFilterOptions> => {\n  const { relationTo } = options\n\n  const relations = Array.isArray(relationTo) ? relationTo : [relationTo]\n\n  const query = {}\n\n  if (typeof filterOptions !== 'undefined') {\n    await Promise.all(\n      relations.map(async (relation) => {\n        query[relation] =\n          typeof filterOptions === 'function'\n            ? await filterOptions({ ...options, relationTo: relation })\n            : filterOptions\n\n        if (query[relation] === true) {\n          query[relation] = {}\n        }\n\n        // this is an ugly way to prevent results from being returned\n        if (query[relation] === false) {\n          query[relation] = { id: { exists: false } }\n        }\n      }),\n    )\n  }\n\n  return query\n}\n"],"mappings":"AAEA,OAAO,MAAMA,oBAAA,GAAuB,MAAAA,CAClCC,aAAA,EACAC,OAAA;EAEA,MAAM;IAAEC;EAAU,CAAE,GAAGD,OAAA;EAEvB,MAAME,SAAA,GAAYC,KAAA,CAAMC,OAAO,CAACH,UAAA,IAAcA,UAAA,GAAa,CAACA,UAAA,CAAW;EAEvE,MAAMI,KAAA,GAAQ,CAAC;EAEf,IAAI,OAAON,aAAA,KAAkB,aAAa;IACxC,MAAMO,OAAA,CAAQC,GAAG,CACfL,SAAA,CAAUM,GAAG,CAAC,MAAOC,QAAA;MACnBJ,KAAK,CAACI,QAAA,CAAS,GACb,OAAOV,aAAA,KAAkB,aACrB,MAAMA,aAAA,CAAc;QAAE,GAAGC,OAAO;QAAEC,UAAA,EAAYQ;MAAS,KACvDV,aAAA;MAEN,IAAIM,KAAK,CAACI,QAAA,CAAS,KAAK,MAAM;QAC5BJ,KAAK,CAACI,QAAA,CAAS,GAAG,CAAC;MACrB;MAEA;MACA,IAAIJ,KAAK,CAACI,QAAA,CAAS,KAAK,OAAO;QAC7BJ,KAAK,CAACI,QAAA,CAAS,GAAG;UAAEC,EAAA,EAAI;YAAEC,MAAA,EAAQ;UAAM;QAAE;MAC5C;IACF;EAEJ;EAEA,OAAON,KAAA;AACT","ignoreList":[]}