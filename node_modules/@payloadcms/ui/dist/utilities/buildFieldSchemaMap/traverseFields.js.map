{"version":3,"file":"traverseFields.js","names":["MissingEditorProp","fieldAffectsData","getFieldPaths","tabHasName","traverseFields","config","fields","i18n","parentIndexPath","parentSchemaPath","schemaMap","index","field","entries","indexPath","schemaPath","parentPath","set","type","blockReferences","blocks","map","_block","block","find","b","slug","blockSchemaPath","editor","Error","generateSchemaMap","tabs","tab","tabIndex","isNamedTab","tabIndexPath","tabSchemaPath"],"sources":["../../../src/utilities/buildFieldSchemaMap/traverseFields.ts"],"sourcesContent":["import type { I18n } from '@payloadcms/translations'\nimport type { Field, FieldSchemaMap, SanitizedConfig } from 'payload'\n\nimport { MissingEditorProp } from 'payload'\nimport { fieldAffectsData, getFieldPaths, tabHasName } from 'payload/shared'\n\ntype Args = {\n  config: SanitizedConfig\n  fields: Field[]\n  i18n: I18n<any, any>\n  parentIndexPath: string\n  parentSchemaPath: string\n  schemaMap: FieldSchemaMap\n}\n\nexport const traverseFields = ({\n  config,\n  fields,\n  i18n,\n  parentIndexPath,\n  parentSchemaPath,\n  schemaMap,\n}: Args) => {\n  for (const [index, field] of fields.entries()) {\n    const { indexPath, schemaPath } = getFieldPaths({\n      field,\n      index,\n      parentIndexPath: 'name' in field ? '' : parentIndexPath,\n      parentPath: '',\n      parentSchemaPath,\n    })\n\n    schemaMap.set(schemaPath, field)\n\n    switch (field.type) {\n      case 'array':\n        traverseFields({\n          config,\n          fields: field.fields,\n          i18n,\n          parentIndexPath: '',\n          parentSchemaPath: schemaPath,\n          schemaMap,\n        })\n\n        break\n\n      case 'blocks':\n        ;(field.blockReferences ?? field.blocks).map((_block) => {\n          // TODO: iterate over blocks mapped to block slug in v4, or pass through payload.blocks\n          const block =\n            typeof _block === 'string' ? config.blocks.find((b) => b.slug === _block) : _block\n\n          const blockSchemaPath = `${schemaPath}.${block.slug}`\n\n          schemaMap.set(blockSchemaPath, block)\n          traverseFields({\n            config,\n            fields: block.fields,\n            i18n,\n            parentIndexPath: '',\n            parentSchemaPath: blockSchemaPath,\n            schemaMap,\n          })\n        })\n\n        break\n\n      case 'collapsible':\n      case 'row':\n        traverseFields({\n          config,\n          fields: field.fields,\n          i18n,\n          parentIndexPath: indexPath,\n          parentSchemaPath,\n          schemaMap,\n        })\n\n        break\n\n      case 'group':\n        if (fieldAffectsData(field)) {\n          traverseFields({\n            config,\n            fields: field.fields,\n            i18n,\n            parentIndexPath: '',\n            parentSchemaPath: schemaPath,\n            schemaMap,\n          })\n        } else {\n          traverseFields({\n            config,\n            fields: field.fields,\n            i18n,\n            parentIndexPath: indexPath,\n            parentSchemaPath,\n            schemaMap,\n          })\n        }\n\n        break\n\n      case 'richText':\n        if (!field?.editor) {\n          throw new MissingEditorProp(field) // while we allow disabling editor functionality, you should not have any richText fields defined if you do not have an editor\n        }\n\n        if (typeof field.editor === 'function') {\n          throw new Error('Attempted to access unsanitized rich text editor.')\n        }\n\n        if (typeof field.editor.generateSchemaMap === 'function') {\n          field.editor.generateSchemaMap({\n            config,\n            field,\n            i18n,\n            schemaMap,\n            schemaPath,\n          })\n        }\n\n        break\n\n      case 'tabs':\n        field.tabs.map((tab, tabIndex) => {\n          const isNamedTab = tabHasName(tab)\n\n          const { indexPath: tabIndexPath, schemaPath: tabSchemaPath } = getFieldPaths({\n            field: {\n              ...tab,\n              type: 'tab',\n            },\n            index: tabIndex,\n            parentIndexPath: indexPath,\n            parentPath: '',\n            parentSchemaPath,\n          })\n\n          schemaMap.set(tabSchemaPath, tab)\n\n          traverseFields({\n            config,\n            fields: tab.fields,\n            i18n,\n            parentIndexPath: isNamedTab ? '' : tabIndexPath,\n            parentSchemaPath: isNamedTab ? tabSchemaPath : parentSchemaPath,\n            schemaMap,\n          })\n        })\n\n        break\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}