{"version":3,"file":"index.js","names":["confirmPassword","password","traverseFields","baseAuthFields","name","type","required","validate","buildFieldSchemaMap","args","collectionSlug","config","globalSlug","i18n","schemaMap","Map","matchedCollection","collections","find","collection","slug","fieldsToSet","fields","auth","disableLocalStrategy","label","t","concat","set","parentIndexPath","parentSchemaPath","matchedGlobal","globals","global","fieldSchemaMap"],"sources":["../../../src/utilities/buildFieldSchemaMap/index.ts"],"sourcesContent":["import type { I18n } from '@payloadcms/translations'\nimport type { Field, FieldSchemaMap, SanitizedConfig, TextField } from 'payload'\n\nimport { confirmPassword, password } from 'payload/shared'\n\nimport { traverseFields } from './traverseFields.js'\n\nconst baseAuthFields: Field[] = [\n  {\n    name: 'password',\n    type: 'text',\n    required: true,\n    validate: password,\n  },\n  {\n    name: 'confirm-password',\n    type: 'text',\n    required: true,\n    validate: confirmPassword,\n  },\n]\n\n/**\n * Flattens the config fields into a map of field schemas\n */\nexport const buildFieldSchemaMap = (args: {\n  collectionSlug?: string\n  config: SanitizedConfig\n  globalSlug?: string\n  i18n: I18n\n}): { fieldSchemaMap: FieldSchemaMap } => {\n  const { collectionSlug, config, globalSlug, i18n } = args\n\n  const schemaMap: FieldSchemaMap = new Map()\n\n  if (collectionSlug) {\n    const matchedCollection = config.collections.find(\n      (collection) => collection.slug === collectionSlug,\n    )\n\n    if (matchedCollection) {\n      let fieldsToSet = matchedCollection?.fields || []\n\n      if (matchedCollection.auth && !matchedCollection.auth.disableLocalStrategy) {\n        ;(baseAuthFields[0] as TextField).label = i18n.t('general:password')\n        ;(baseAuthFields[1] as TextField).label = i18n.t('authentication:confirmPassword')\n        // Place these fields _last_ to ensure they do not disrupt field paths in the field schema map\n        fieldsToSet = fieldsToSet.concat(baseAuthFields)\n      }\n\n      schemaMap.set(collectionSlug, {\n        fields: fieldsToSet,\n      })\n\n      traverseFields({\n        config,\n        fields: fieldsToSet,\n        i18n,\n        parentIndexPath: '',\n        parentSchemaPath: collectionSlug,\n        schemaMap,\n      })\n    }\n  } else if (globalSlug) {\n    const matchedGlobal = config.globals.find((global) => global.slug === globalSlug)\n\n    if (matchedGlobal) {\n      schemaMap.set(globalSlug, {\n        fields: matchedGlobal.fields,\n      })\n\n      traverseFields({\n        config,\n        fields: matchedGlobal.fields,\n        i18n,\n        parentIndexPath: '',\n        parentSchemaPath: globalSlug,\n        schemaMap,\n      })\n    }\n  }\n\n  return { fieldSchemaMap: schemaMap }\n}\n"],"mappings":"AAGA,SAASA,eAAe,EAAEC,QAAQ,QAAQ;AAE1C,SAASC,cAAc,QAAQ;AAE/B,MAAMC,cAAA,GAA0B,CAC9B;EACEC,IAAA,EAAM;EACNC,IAAA,EAAM;EACNC,QAAA,EAAU;EACVC,QAAA,EAAUN;AACZ,GACA;EACEG,IAAA,EAAM;EACNC,IAAA,EAAM;EACNC,QAAA,EAAU;EACVC,QAAA,EAAUP;AACZ,EACD;AAED;;;AAGA,OAAO,MAAMQ,mBAAA,GAAuBC,IAAA;EAMlC,MAAM;IAAEC,cAAc;IAAEC,MAAM;IAAEC,UAAU;IAAEC;EAAI,CAAE,GAAGJ,IAAA;EAErD,MAAMK,SAAA,GAA4B,IAAIC,GAAA;EAEtC,IAAIL,cAAA,EAAgB;IAClB,MAAMM,iBAAA,GAAoBL,MAAA,CAAOM,WAAW,CAACC,IAAI,CAC9CC,UAAA,IAAeA,UAAA,CAAWC,IAAI,KAAKV,cAAA;IAGtC,IAAIM,iBAAA,EAAmB;MACrB,IAAIK,WAAA,GAAcL,iBAAA,EAAmBM,MAAA,IAAU,EAAE;MAEjD,IAAIN,iBAAA,CAAkBO,IAAI,IAAI,CAACP,iBAAA,CAAkBO,IAAI,CAACC,oBAAoB,EAAE;;QACxErB,cAAc,CAAC,EAAE,CAAesB,KAAK,GAAGZ,IAAA,CAAKa,CAAC,CAAC;QAC/CvB,cAAc,CAAC,EAAE,CAAesB,KAAK,GAAGZ,IAAA,CAAKa,CAAC,CAAC;QACjD;QACAL,WAAA,GAAcA,WAAA,CAAYM,MAAM,CAACxB,cAAA;MACnC;MAEAW,SAAA,CAAUc,GAAG,CAAClB,cAAA,EAAgB;QAC5BY,MAAA,EAAQD;MACV;MAEAnB,cAAA,CAAe;QACbS,MAAA;QACAW,MAAA,EAAQD,WAAA;QACRR,IAAA;QACAgB,eAAA,EAAiB;QACjBC,gBAAA,EAAkBpB,cAAA;QAClBI;MACF;IACF;EACF,OAAO,IAAIF,UAAA,EAAY;IACrB,MAAMmB,aAAA,GAAgBpB,MAAA,CAAOqB,OAAO,CAACd,IAAI,CAAEe,MAAA,IAAWA,MAAA,CAAOb,IAAI,KAAKR,UAAA;IAEtE,IAAImB,aAAA,EAAe;MACjBjB,SAAA,CAAUc,GAAG,CAAChB,UAAA,EAAY;QACxBU,MAAA,EAAQS,aAAA,CAAcT;MACxB;MAEApB,cAAA,CAAe;QACbS,MAAA;QACAW,MAAA,EAAQS,aAAA,CAAcT,MAAM;QAC5BT,IAAA;QACAgB,eAAA,EAAiB;QACjBC,gBAAA,EAAkBlB,UAAA;QAClBE;MACF;IACF;EACF;EAEA,OAAO;IAAEoB,cAAA,EAAgBpB;EAAU;AACrC","ignoreList":[]}