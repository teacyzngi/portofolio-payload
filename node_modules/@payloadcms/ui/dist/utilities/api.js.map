{"version":3,"file":"api.js","names":["qs","requests","delete","url","options","headers","formattedOptions","credentials","method","fetch","get","query","params","stringify","addQueryPrefix","patch","post","put"],"sources":["../../src/utilities/api.ts"],"sourcesContent":["import * as qs from 'qs-esm'\n\ntype GetOptions = {\n  params?: Record<string, unknown>\n} & RequestInit\n\nexport const requests = {\n  delete: (url: string, options: RequestInit = { headers: {} }): Promise<Response> => {\n    const headers = options && options.headers ? { ...options.headers } : {}\n\n    const formattedOptions: RequestInit = {\n      ...options,\n      credentials: 'include',\n      headers: {\n        ...headers,\n      },\n      method: 'delete',\n    }\n\n    return fetch(url, formattedOptions)\n  },\n\n  get: (url: string, options: GetOptions = { headers: {} }): Promise<Response> => {\n    let query = ''\n    if (options.params) {\n      query = qs.stringify(options.params, { addQueryPrefix: true })\n    }\n    return fetch(`${url}${query}`, {\n      credentials: 'include',\n      ...options,\n    })\n  },\n\n  patch: (url: string, options: RequestInit = { headers: {} }): Promise<Response> => {\n    const headers = options && options.headers ? { ...options.headers } : {}\n\n    const formattedOptions: RequestInit = {\n      ...options,\n      credentials: 'include',\n      headers: {\n        ...headers,\n      },\n      method: 'PATCH',\n    }\n\n    return fetch(url, formattedOptions)\n  },\n\n  post: (url: string, options: RequestInit = { headers: {} }): Promise<Response> => {\n    const headers = options && options.headers ? { ...options.headers } : {}\n\n    const formattedOptions: RequestInit = {\n      ...options,\n      credentials: 'include',\n      headers: {\n        ...headers,\n      },\n      method: 'post',\n    }\n\n    return fetch(`${url}`, formattedOptions)\n  },\n\n  put: (url: string, options: RequestInit = { headers: {} }): Promise<Response> => {\n    const headers = options && options.headers ? { ...options.headers } : {}\n\n    const formattedOptions: RequestInit = {\n      ...options,\n      credentials: 'include',\n      headers: {\n        ...headers,\n      },\n      method: 'put',\n    }\n\n    return fetch(url, formattedOptions)\n  },\n}\n"],"mappings":"AAAA,YAAYA,EAAA,MAAQ;AAMpB,OAAO,MAAMC,QAAA,GAAW;EACtBC,MAAA,EAAQA,CAACC,GAAA,EAAaC,OAAA,GAAuB;IAAEC,OAAA,EAAS,CAAC;EAAE,CAAC;IAC1D,MAAMA,OAAA,GAAUD,OAAA,IAAWA,OAAA,CAAQC,OAAO,GAAG;MAAE,GAAGD,OAAA,CAAQC;IAAQ,IAAI,CAAC;IAEvE,MAAMC,gBAAA,GAAgC;MACpC,GAAGF,OAAO;MACVG,WAAA,EAAa;MACbF,OAAA,EAAS;QACP,GAAGA;MACL;MACAG,MAAA,EAAQ;IACV;IAEA,OAAOC,KAAA,CAAMN,GAAA,EAAKG,gBAAA;EACpB;EAEAI,GAAA,EAAKA,CAACP,GAAA,EAAaC,OAAA,GAAsB;IAAEC,OAAA,EAAS,CAAC;EAAE,CAAC;IACtD,IAAIM,KAAA,GAAQ;IACZ,IAAIP,OAAA,CAAQQ,MAAM,EAAE;MAClBD,KAAA,GAAQX,EAAA,CAAGa,SAAS,CAACT,OAAA,CAAQQ,MAAM,EAAE;QAAEE,cAAA,EAAgB;MAAK;IAC9D;IACA,OAAOL,KAAA,CAAM,GAAGN,GAAA,GAAMQ,KAAA,EAAO,EAAE;MAC7BJ,WAAA,EAAa;MACb,GAAGH;IACL;EACF;EAEAW,KAAA,EAAOA,CAACZ,GAAA,EAAaC,OAAA,GAAuB;IAAEC,OAAA,EAAS,CAAC;EAAE,CAAC;IACzD,MAAMA,OAAA,GAAUD,OAAA,IAAWA,OAAA,CAAQC,OAAO,GAAG;MAAE,GAAGD,OAAA,CAAQC;IAAQ,IAAI,CAAC;IAEvE,MAAMC,gBAAA,GAAgC;MACpC,GAAGF,OAAO;MACVG,WAAA,EAAa;MACbF,OAAA,EAAS;QACP,GAAGA;MACL;MACAG,MAAA,EAAQ;IACV;IAEA,OAAOC,KAAA,CAAMN,GAAA,EAAKG,gBAAA;EACpB;EAEAU,IAAA,EAAMA,CAACb,GAAA,EAAaC,OAAA,GAAuB;IAAEC,OAAA,EAAS,CAAC;EAAE,CAAC;IACxD,MAAMA,OAAA,GAAUD,OAAA,IAAWA,OAAA,CAAQC,OAAO,GAAG;MAAE,GAAGD,OAAA,CAAQC;IAAQ,IAAI,CAAC;IAEvE,MAAMC,gBAAA,GAAgC;MACpC,GAAGF,OAAO;MACVG,WAAA,EAAa;MACbF,OAAA,EAAS;QACP,GAAGA;MACL;MACAG,MAAA,EAAQ;IACV;IAEA,OAAOC,KAAA,CAAM,GAAGN,GAAA,EAAK,EAAEG,gBAAA;EACzB;EAEAW,GAAA,EAAKA,CAACd,GAAA,EAAaC,OAAA,GAAuB;IAAEC,OAAA,EAAS,CAAC;EAAE,CAAC;IACvD,MAAMA,OAAA,GAAUD,OAAA,IAAWA,OAAA,CAAQC,OAAO,GAAG;MAAE,GAAGD,OAAA,CAAQC;IAAQ,IAAI,CAAC;IAEvE,MAAMC,gBAAA,GAAgC;MACpC,GAAGF,OAAO;MACVG,WAAA,EAAa;MACbF,OAAA,EAAS;QACP,GAAGA;MACL;MACAG,MAAA,EAAQ;IACV;IAEA,OAAOC,KAAA,CAAMN,GAAA,EAAKG,gBAAA;EACpB;AACF","ignoreList":[]}