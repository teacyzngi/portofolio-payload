{"version":3,"file":"useHotkey.js","names":["c","_c","useModal","setsAreEqual","useCallback","useEffect","pressedKeys","Map","map","altleft","altright","controlleft","controlright","ctrlleft","ctrlright","escape","metaleft","metaright","osleft","osright","shiftleft","shiftright","stripKey","key","toLowerCase","trim","replace","pushToKeys","code","forEach","time","pressedKey","delete","set","Date","now","removeFromKeys","clear","useHotkey","options","func","$","cmdCtrlKey","editDepth","keyCodes","modalState","t0","event","e","detail","undefined","_temp","hasCmd","window","navigator","userAgent","includes","pressedWithoutModifier","keys","filter","_temp2","Set","has","ctrlKey","maxEditDepth","Object","key_1","isOpen","length","keydown","keyup","_temp3","t1","t2","document","addEventListener","removeEventListener","key_0","e_0"],"sources":["../../src/hooks/useHotkey.ts"],"sourcesContent":["'use client'\n\nimport { useModal } from '@faceless-ui/modal'\nimport { setsAreEqual } from 'payload/shared'\nimport { useCallback, useEffect } from 'react'\n\n// Required to be outside of hook, else debounce would be necessary\n// and then one could not prevent the default behaviour.\n\n// It maps the pressed keys with the time they were pressed, in order to implement a maximum time\n// for the user to press the next key in the sequence\n\n// This is necessary to prevent a bug where the keyup event, which unsets the key as pressed\n// is not fired when the window is not focused.\n// When the user then comes back to the window, the key is still registered as pressed, even though it's not.\nconst pressedKeys = new Map<string, number>([])\n\nconst map = {\n  altleft: 'alt',\n  altright: 'alt',\n  controlleft: 'ctrl',\n  controlright: 'ctrl',\n  ctrlleft: 'ctrl',\n  ctrlright: 'ctrl',\n  escape: 'esc',\n  metaleft: 'meta',\n  metaright: 'meta',\n  osleft: 'meta',\n  osright: 'meta',\n  shiftleft: 'shift',\n  shiftright: 'shift',\n}\n\nconst stripKey = (key: string) => {\n  return (map[key.toLowerCase()] || key).trim().toLowerCase().replace('key', '')\n}\n\nconst pushToKeys = (code: string) => {\n  const key = stripKey(code)\n\n  // There is a weird bug with macos that if the keys are not cleared they remain in the\n  // pressed keys set.\n  if (key === 'meta') {\n    pressedKeys.forEach(\n      (time, pressedKey) => pressedKey !== 'meta' && pressedKeys.delete(pressedKey),\n    )\n  }\n\n  pressedKeys.set(key, Date.now())\n}\n\nconst removeFromKeys = (code: string) => {\n  const key = stripKey(code)\n  // There is a weird bug with macos that if the keys are not cleared they remain in the\n  // pressed keys set.\n  if (key === 'meta') {\n    pressedKeys.clear()\n  }\n  pressedKeys.delete(key)\n}\n\n/**\n * Hook function to work with hotkeys.\n * @param param0.keyCode {string[]} The keys to listen for (`Event.code` without `'Key'` and lowercased)\n * @param param0.cmdCtrlKey {boolean} Whether Ctrl on windows or Cmd on mac must be pressed\n * @param param0.editDepth {boolean} This ensures that the hotkey is only triggered for the most top-level drawer in case there are nested drawers\n * @param func The callback function\n */\nexport const useHotkey = (\n  options: {\n    cmdCtrlKey: boolean\n    editDepth: number\n    keyCodes: string[]\n  },\n  func: (e: KeyboardEvent) => void,\n): void => {\n  const { cmdCtrlKey, editDepth, keyCodes } = options\n\n  const { modalState } = useModal()\n\n  const keydown = useCallback(\n    (event: CustomEvent | KeyboardEvent) => {\n      const e: KeyboardEvent = event.detail?.key ? event.detail : event\n      if (e.key === undefined) {\n        // Autofill events, or other synthetic events, can be ignored\n        return\n      }\n\n      // Filter out pressed keys which have been pressed > 3 seconds ago\n      pressedKeys.forEach((time, key) => {\n        if (Date.now() - time > 3000) {\n          pressedKeys.delete(key)\n        }\n      })\n\n      if (e.code) {\n        pushToKeys(e.code)\n      }\n\n      // Check for Mac and iPad\n      const hasCmd = window.navigator.userAgent.includes('Mac OS X')\n      const pressedWithoutModifier = [...pressedKeys.keys()].filter(\n        (key) => !['alt', 'ctrl', 'meta', 'shift'].includes(key),\n      )\n\n      // Check whether arrays contain the same values (regardless of number of occurrences)\n      if (\n        setsAreEqual(new Set(pressedWithoutModifier), new Set(keyCodes)) &&\n        (!cmdCtrlKey || (hasCmd && pressedKeys.has('meta')) || (!hasCmd && e.ctrlKey))\n      ) {\n        // get the maximum edit depth by counting the number of open drawers. modalState is and object which contains the state of all drawers.\n        const maxEditDepth =\n          Object.keys(modalState).filter((key) => modalState[key]?.isOpen)?.length + 1 || 1\n\n        if (maxEditDepth !== editDepth) {\n          // We only want to execute the hotkey from the most top-level drawer / edit depth.\n          return\n        }\n        // execute the function associated with the maximum edit depth\n        func(e)\n      }\n    },\n    [keyCodes, cmdCtrlKey, editDepth, modalState, func],\n  )\n\n  const keyup = useCallback((e: KeyboardEvent) => {\n    if (e.code) {\n      removeFromKeys(e.code)\n    }\n  }, [])\n\n  useEffect(() => {\n    document.addEventListener('keydown', keydown, false)\n    document.addEventListener('bypassKeyDown', keydown, false) // this is called if the keydown event's propagation is stopped by react-select\n    document.addEventListener('keyup', keyup, false)\n\n    return () => {\n      document.removeEventListener('keydown', keydown)\n      document.removeEventListener('bypassKeyDown', keydown)\n      document.removeEventListener('keyup', keyup)\n    }\n  }, [keydown, keyup])\n}\n"],"mappings":"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","ignoreList":[]}