'use client';

import { c as _c } from "react/compiler-runtime";
import { useCallback, useEffect, useRef, useState } from 'react';
/**
 * A hook for managing state that can be controlled by props but also overridden locally.
 * Props always take precedence if they change, but local state can override them temporarily.
 *
 * @internal - may change or be removed without a major version bump
 */
export function useControllableState(propValue, defaultValue) {
  const $ = _c(6);
  const [localValue, setLocalValue] = useState(propValue ?? defaultValue);
  const initialRenderRef = useRef(true);
  let t0;
  let t1;
  if ($[0] !== propValue) {
    t0 = () => {
      if (initialRenderRef.current) {
        initialRenderRef.current = false;
        return;
      }
      setLocalValue(propValue);
    };
    t1 = [propValue];
    $[0] = propValue;
    $[1] = t0;
    $[2] = t1;
  } else {
    t0 = $[1];
    t1 = $[2];
  }
  useEffect(t0, t1);
  let t2;
  if ($[3] === Symbol.for("react.memo_cache_sentinel")) {
    t2 = value => {
      setLocalValue(value);
    };
    $[3] = t2;
  } else {
    t2 = $[3];
  }
  const setValue = t2;
  let t3;
  if ($[4] !== localValue) {
    t3 = [localValue, setValue];
    $[4] = localValue;
    $[5] = t3;
  } else {
    t3 = $[5];
  }
  return t3;
}
//# sourceMappingURL=useControllableState.js.map