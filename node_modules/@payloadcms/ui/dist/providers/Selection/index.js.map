{"version":3,"file":"index.js","names":["useSearchParams","qs","React","createContext","use","useCallback","useEffect","useMemo","useRef","useState","parseSearchParams","useAuth","useListQuery","useLocale","SelectAllStatus","Context","count","undefined","getQueryParams","additionalParams","getSelectedIds","selectAll","selected","Map","selectedIDs","setSelection","id","toggleAll","totalDocs","reduceActiveSelections","ids","key","value","push","SelectionProvider","children","docs","contextRef","user","code","locale","setSelected","rows","forEach","set","setSelectAll","setCount","searchParams","query","allAvailable","_isLocked","_userEditing","doc","find","existingValue","get","isSelected","newMap","additionalWhereParams","where","params","not_equals","in","and","stringify","addQueryPrefix","some","all","size","_","length","newCount","current","_jsx","useSelection"],"sources":["../../../src/providers/Selection/index.tsx"],"sourcesContent":["'use client'\nimport type { Where } from 'payload'\n\nimport { useSearchParams } from 'next/navigation.js'\nimport * as qs from 'qs-esm'\nimport React, { createContext, use, useCallback, useEffect, useMemo, useRef, useState } from 'react'\n\nimport { parseSearchParams } from '../../utilities/parseSearchParams.js'\nimport { useAuth } from '../Auth/index.js'\nimport { useListQuery } from '../ListQuery/index.js'\nimport { useLocale } from '../Locale/index.js'\n\nexport enum SelectAllStatus {\n  AllAvailable = 'allAvailable',\n  AllInPage = 'allInPage',\n  None = 'none',\n  Some = 'some',\n}\n\ntype SelectionContext = {\n  count: number\n  disableBulkDelete?: boolean\n  disableBulkEdit?: boolean\n  getQueryParams: (additionalParams?: Where) => string\n  getSelectedIds: () => (number | string)[]\n  selectAll: SelectAllStatus\n  selected: Map<number | string, boolean>\n  selectedIDs: (number | string)[]\n  setSelection: (id: number | string) => void\n  /**\n   * Selects all rows on the current page within the current query.\n   * If `allAvailable` is true, does not select specific IDs so that the query itself affects all rows across all pages.\n   */\n  toggleAll: (allAvailable?: boolean) => void\n  totalDocs: number\n}\n\nconst Context = createContext({\n  count: undefined,\n  getQueryParams: (additionalParams?: Where) => '',\n  getSelectedIds: () => [],\n  selectAll: undefined,\n  selected: new Map(),\n  selectedIDs: [],\n  setSelection: (id: number | string) => {},\n  toggleAll: (toggleAll: boolean) => {},\n  totalDocs: undefined,\n} satisfies SelectionContext)\n\ntype Props = {\n  readonly children: React.ReactNode\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  readonly docs: any[]\n  readonly totalDocs: number\n}\n\nconst reduceActiveSelections = (selected: Map<number | string, boolean>): (number | string)[] => {\n  const ids = []\n\n  for (const [key, value] of selected) {\n    if (value) {\n      ids.push(key)\n    }\n  }\n\n  return ids\n}\n\nexport const SelectionProvider: React.FC<Props> = ({ children, docs = [], totalDocs }) => {\n  const contextRef = useRef({} as SelectionContext)\n  const { user } = useAuth()\n\n  const { code: locale } = useLocale()\n\n  const [selected, setSelected] = useState<SelectionContext['selected']>(() => {\n    const rows = new Map()\n\n    docs.forEach(({ id }) => {\n      rows.set(id, false)\n    })\n\n    return rows\n  })\n\n  const [selectAll, setSelectAll] = useState<SelectAllStatus>(SelectAllStatus.None)\n  const [count, setCount] = useState(0)\n  const searchParams = useSearchParams()\n  const { query } = useListQuery()\n\n  const toggleAll: SelectionContext['toggleAll'] = useCallback(\n    (allAvailable = false) => {\n      const rows = new Map()\n      if (allAvailable) {\n        setSelectAll(SelectAllStatus.AllAvailable)\n\n        docs.forEach(({ id, _isLocked, _userEditing }) => {\n          if (!_isLocked || _userEditing?.id === user?.id) {\n            rows.set(id, true)\n          }\n        })\n      } else if (\n        // Reset back to `None` if we previously had any type of selection\n        selectAll === SelectAllStatus.AllAvailable ||\n        selectAll === SelectAllStatus.AllInPage\n      ) {\n        setSelectAll(SelectAllStatus.None)\n      } else {\n        docs.forEach(({ id, _isLocked, _userEditing }) => {\n          if (!_isLocked || _userEditing?.id === user?.id) {\n            rows.set(id, selectAll !== SelectAllStatus.Some)\n          }\n        })\n      }\n\n      setSelected(rows)\n    },\n    [docs, selectAll, user?.id],\n  )\n\n  const setSelection: SelectionContext['setSelection'] = useCallback(\n    (id) => {\n      const doc = docs.find((doc) => doc.id === id)\n\n      if (doc?._isLocked && user?.id !== doc?._userEditing.id) {\n        return // Prevent selection if the document is locked\n      }\n\n      const existingValue = selected.get(id)\n      const isSelected = typeof existingValue === 'boolean' ? !existingValue : true\n\n      const newMap = new Map(selected.set(id, isSelected))\n\n      // If previously selected all and now deselecting, adjust status\n      if (selectAll === SelectAllStatus.AllAvailable && !isSelected) {\n        setSelectAll(SelectAllStatus.Some)\n      }\n\n      setSelected(newMap)\n    },\n    [selected, docs, selectAll, user?.id],\n  )\n\n  const getQueryParams = useCallback(\n    (additionalWhereParams?: Where): string => {\n      let where: Where\n\n      if (selectAll === SelectAllStatus.AllAvailable) {\n        const params = parseSearchParams(searchParams)?.where as Where\n\n        where = params || {\n          id: {\n            not_equals: '',\n          },\n        }\n      } else {\n        const ids = []\n\n        for (const [key, value] of selected) {\n          if (value) {\n            ids.push(key)\n          }\n        }\n\n        where = {\n          id: {\n            in: ids,\n          },\n        }\n      }\n\n      if (additionalWhereParams) {\n        where = {\n          and: [{ ...additionalWhereParams }, where],\n        }\n      }\n\n      return qs.stringify(\n        {\n          locale,\n          where,\n        },\n        { addQueryPrefix: true },\n      )\n    },\n    [selectAll, selected, locale, searchParams],\n  )\n\n  const getSelectedIds = useCallback(() => reduceActiveSelections(selected), [selected])\n\n  useEffect(() => {\n    if (selectAll === SelectAllStatus.AllAvailable) {\n      return\n    }\n    let some = false\n    let all = true\n\n    if (!selected.size) {\n      all = false\n      some = false\n    } else {\n      for (const [_, value] of selected) {\n        all = all && value\n        some = some || value\n      }\n    }\n\n    if (all && selected.size === docs.length) {\n      setSelectAll(SelectAllStatus.AllInPage)\n    } else if (some) {\n      setSelectAll(SelectAllStatus.Some)\n    } else {\n      setSelectAll(SelectAllStatus.None)\n    }\n  }, [selectAll, selected, totalDocs, docs])\n\n  useEffect(() => {\n    let newCount = 0\n\n    if (selectAll === SelectAllStatus.AllAvailable) {\n      newCount = totalDocs\n    } else {\n      for (const [_, value] of selected) {\n        if (value) {\n          newCount++\n        }\n      }\n    }\n\n    setCount(newCount)\n  }, [selectAll, selected, totalDocs])\n\n  useEffect(() => {\n    setSelectAll(SelectAllStatus.None)\n    setSelected(new Map())\n  }, [query])\n\n  const selectedIDs = useMemo(() => reduceActiveSelections(selected), [selected])\n\n  contextRef.current = {\n    count,\n    getQueryParams,\n    getSelectedIds,\n    selectAll,\n    selected,\n    selectedIDs,\n    setSelection,\n    toggleAll,\n    totalDocs,\n  }\n\n  return <Context value={contextRef.current}>{children}</Context>\n}\n\nexport const useSelection = (): SelectionContext => use(Context)\n"],"mappings":"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","ignoreList":[]}