{"version":3,"file":"index.js","names":["dequal","React","createContext","use","useCallback","useEffect","useRef","useTranslation","requests","deepMergeSimple","useAuth","useConfig","Context","requestOptions","value","language","body","JSON","stringify","headers","PreferencesProvider","children","contextRef","preferencesRef","pendingUpdate","config","user","i18n","routes","api","serverURL","current","getPreference","key","prefs","promise","Promise","resolve","request","get","credentials","status","preference","json","setPreference","merge","post","newValue","currentPreference","updatePreference","setTimeout","_jsx","usePreferences"],"sources":["../../../src/providers/Preferences/index.tsx"],"sourcesContent":["'use client'\nimport { dequal } from 'dequal/lite' // lite: no need for Map and Set support\nimport React, { createContext, use, useCallback, useEffect, useRef } from 'react'\n\nimport type { Preferences } from '../../forms/Form/types.js'\n\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { requests } from '../../utilities/api.js'\nimport { deepMergeSimple } from '../../utilities/deepMerge.js'\nimport { useAuth } from '../Auth/index.js'\nimport { useConfig } from '../Config/index.js'\n\ntype PreferencesContext = {\n  getPreference: <T = Preferences>(key: string) => Promise<T>\n  /**\n   * @param key - a string identifier for the property being set\n   * @param value - preference data to store\n   * @param merge - when true will combine the existing preference object batch the change into one request for objects, default = false\n   */\n  setPreference: <T = Preferences>(key: string, value: T, merge?: boolean) => Promise<void>\n}\n\nconst Context = createContext({} as PreferencesContext)\n\nconst requestOptions = (value, language) => ({\n  body: JSON.stringify({ value }),\n  headers: {\n    'Accept-Language': language,\n    'Content-Type': 'application/json',\n  },\n})\n\nexport const PreferencesProvider: React.FC<{ children?: React.ReactNode }> = ({ children }) => {\n  const contextRef = useRef({} as PreferencesContext)\n  const preferencesRef = useRef({})\n  const pendingUpdate = useRef({})\n  const { config } = useConfig()\n  const { user } = useAuth()\n  const { i18n } = useTranslation()\n\n  const {\n    routes: { api },\n    serverURL,\n  } = config\n\n  useEffect(() => {\n    if (!user) {\n      // clear preferences between users\n      preferencesRef.current = {}\n    }\n  }, [user])\n\n  const getPreference = useCallback(\n    async <T = unknown,>(key: string): Promise<T> => {\n      const prefs = preferencesRef.current\n\n      if (typeof prefs[key] !== 'undefined') {\n        return prefs[key]\n      }\n\n      const promise = new Promise((resolve: (value: T) => void) => {\n        void (async () => {\n          const request = await requests.get(`${serverURL}${api}/payload-preferences/${key}`, {\n            credentials: 'include',\n            headers: {\n              'Accept-Language': i18n.language,\n            },\n          })\n\n          let value = null\n\n          if (request.status === 200) {\n            const preference = await request.json()\n            value = preference.value\n          }\n\n          preferencesRef.current[key] = value\n\n          resolve(value)\n        })()\n      })\n\n      prefs[key] = promise\n\n      return promise\n    },\n    [i18n.language, api, preferencesRef, serverURL],\n  )\n\n  const setPreference = useCallback(\n    async (key: string, value: unknown, merge = false): Promise<void> => {\n      if (merge === false) {\n        preferencesRef.current[key] = value\n\n        await requests.post(\n          `${serverURL}${api}/payload-preferences/${key}`,\n          requestOptions(value, i18n.language),\n        )\n\n        return\n      }\n\n      let newValue = value\n      const currentPreference = await getPreference(key)\n\n      // handle value objects where multiple values can be set under one key\n      if (\n        typeof value === 'object' &&\n        typeof currentPreference === 'object' &&\n        typeof newValue === 'object'\n      ) {\n        // merge the value with any existing preference for the key\n        if (currentPreference) {\n          newValue = deepMergeSimple(currentPreference, newValue)\n        }\n\n        if (dequal(newValue, currentPreference)) {\n          return\n        }\n\n        // add the requested changes to a pendingUpdate batch for the key\n        pendingUpdate.current[key] = {\n          ...pendingUpdate.current[key],\n          ...(newValue as Record<string, unknown>),\n        }\n      } else {\n        if (newValue === currentPreference) {\n          return\n        }\n\n        pendingUpdate.current[key] = newValue\n      }\n\n      const updatePreference = async () => {\n        // compare the value stored in context before sending to eliminate duplicate requests\n        if (dequal(pendingUpdate.current[key], preferencesRef.current[key])) {\n          return\n        }\n\n        // preference set in context here to prevent other updatePreference at the same time\n        preferencesRef.current[key] = pendingUpdate.current[key]\n\n        await requests.post(\n          `${serverURL}${api}/payload-preferences/${key}`,\n          requestOptions(preferencesRef.current[key], i18n.language),\n        )\n\n        // reset any changes for this key after sending the request\n        delete pendingUpdate.current[key]\n      }\n\n      // use timeout to allow multiple changes of different values using the same key in one request\n      setTimeout(() => {\n        void updatePreference()\n      })\n    },\n    [api, getPreference, i18n.language, pendingUpdate, serverURL],\n  )\n\n  contextRef.current.getPreference = getPreference\n  contextRef.current.setPreference = setPreference\n  return <Context value={contextRef.current}>{children}</Context>\n}\n\nexport const usePreferences = (): PreferencesContext => use(Context)\n"],"mappings":"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","ignoreList":[]}