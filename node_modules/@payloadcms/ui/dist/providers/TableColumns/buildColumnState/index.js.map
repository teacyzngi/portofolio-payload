{"version":3,"file":"index.js","names":["fieldIsHiddenOrDisabled","fieldIsID","fieldIsPresentationalOnly","flattenTopLevelFields","React","RenderServerComponent","SortColumn","filterFieldsWithPermissions","isColumnActive","renderCell","sortFieldMap","buildColumnState","args","beforeRows","clientFields","collectionSlug","columns","customCellProps","dataType","docs","enableLinkedCell","enableRowSelections","fieldPermissions","i18n","payload","req","serverFields","sortColumnProps","useAsTitle","viewType","sortedFieldMap","fields","keepPresentationalFields","moveSubFieldsToTop","_sortedFieldMap","idFieldIndex","findIndex","field","idField","splice","unshift","useAsTitleFieldIndex","name","useAsTitleField","sortTo","activeColumnsIndices","sorted","reduce","acc","clientField","colIndex","accessor","undefined","serverField","find","f","fAccessor","hasCustomCell","admin","components","Cell","type","columnPref","preference","isActive","column","includes","push","CustomLabel","CustomLabelToRender","Label","clientProps","customLabelServerProps","Component","importMap","serverProps","fieldAffectsDataSubFields","label","labelWithPrefix","dotAccessor","replace","Heading","_jsx","disable","active","renderedCells","map","doc","rowIndex","relationTo","columnIndex","value","isLinkedColumn"],"sources":["../../../../src/providers/TableColumns/buildColumnState/index.tsx"],"sourcesContent":["import type { I18nClient } from '@payloadcms/translations'\nimport type {\n  ClientComponentProps,\n  ClientField,\n  CollectionPreferences,\n  CollectionSlug,\n  Column,\n  DefaultCellComponentProps,\n  Document,\n  Field,\n  PaginatedDocs,\n  Payload,\n  PayloadRequest,\n  SanitizedCollectionConfig,\n  SanitizedFieldsPermissions,\n  ServerComponentProps,\n  StaticLabel,\n  ViewTypes,\n} from 'payload'\n\nimport {\n  fieldIsHiddenOrDisabled,\n  fieldIsID,\n  fieldIsPresentationalOnly,\n  flattenTopLevelFields,\n} from 'payload/shared'\nimport React from 'react'\n\nimport type { SortColumnProps } from '../../../elements/SortColumn/index.js'\n\nimport { RenderServerComponent } from '../../../elements/RenderServerComponent/index.js'\nimport {\n  SortColumn,\n  // eslint-disable-next-line payload/no-imports-from-exports-dir -- MUST reference the exports dir: https://github.com/payloadcms/payload/issues/12002#issuecomment-2791493587\n} from '../../../exports/client/index.js'\nimport { filterFieldsWithPermissions } from './filterFieldsWithPermissions.js'\nimport { isColumnActive } from './isColumnActive.js'\nimport { renderCell } from './renderCell.js'\nimport { sortFieldMap } from './sortFieldMap.js'\n\nexport type BuildColumnStateArgs = {\n  beforeRows?: Column[]\n  clientFields: ClientField[]\n  columns?: CollectionPreferences['columns']\n  customCellProps: DefaultCellComponentProps['customCellProps']\n  enableLinkedCell?: boolean\n  enableRowSelections: boolean\n  enableRowTypes?: boolean\n  fieldPermissions?: SanitizedFieldsPermissions\n  i18n: I18nClient\n  payload: Payload\n  req?: PayloadRequest\n  serverFields: Field[]\n  sortColumnProps?: Partial<SortColumnProps>\n  useAsTitle: SanitizedCollectionConfig['admin']['useAsTitle']\n  viewType?: ViewTypes\n} & (\n  | {\n      collectionSlug: CollectionSlug\n      dataType: 'monomorphic'\n      docs: PaginatedDocs['docs']\n    }\n  | {\n      collectionSlug?: undefined\n      dataType: 'polymorphic'\n      docs: {\n        relationTo: CollectionSlug\n        value: Document\n      }[]\n    }\n)\n\nexport const buildColumnState = (args: BuildColumnStateArgs): Column[] => {\n  const {\n    beforeRows,\n    clientFields,\n    collectionSlug,\n    columns,\n    customCellProps,\n    dataType,\n    docs,\n    enableLinkedCell = true,\n    enableRowSelections,\n    fieldPermissions,\n    i18n,\n    payload,\n    req,\n    serverFields,\n    sortColumnProps,\n    useAsTitle,\n    viewType,\n  } = args\n\n  // clientFields contains the fake `id` column\n  let sortedFieldMap = flattenTopLevelFields(\n    filterFieldsWithPermissions({ fieldPermissions, fields: clientFields }),\n    {\n      i18n,\n      keepPresentationalFields: true,\n      moveSubFieldsToTop: true,\n    },\n  ) as ClientField[]\n\n  let _sortedFieldMap = flattenTopLevelFields(\n    filterFieldsWithPermissions({\n      fieldPermissions,\n      fields: serverFields,\n    }),\n    {\n      i18n,\n      keepPresentationalFields: true,\n      moveSubFieldsToTop: true,\n    },\n  ) as Field[] // TODO: think of a way to avoid this additional flatten\n\n  // place the `ID` field first, if it exists\n  // do the same for the `useAsTitle` field with precedence over the `ID` field\n  // then sort the rest of the fields based on the `defaultColumns` or `columns`\n  const idFieldIndex = sortedFieldMap?.findIndex((field) => fieldIsID(field))\n\n  if (idFieldIndex > -1) {\n    const idField = sortedFieldMap.splice(idFieldIndex, 1)[0]\n    sortedFieldMap.unshift(idField)\n  }\n\n  const useAsTitleFieldIndex = useAsTitle\n    ? sortedFieldMap.findIndex((field) => 'name' in field && field.name === useAsTitle)\n    : -1\n\n  if (useAsTitleFieldIndex > -1) {\n    const useAsTitleField = sortedFieldMap.splice(useAsTitleFieldIndex, 1)[0]\n    sortedFieldMap.unshift(useAsTitleField)\n  }\n\n  const sortTo = columns\n\n  if (sortTo) {\n    // sort the fields to the order of `defaultColumns` or `columns`\n    sortedFieldMap = sortFieldMap<ClientField>(sortedFieldMap, sortTo)\n    _sortedFieldMap = sortFieldMap<Field>(_sortedFieldMap, sortTo) // TODO: think of a way to avoid this additional sort\n  }\n\n  const activeColumnsIndices = []\n\n  const sorted: Column[] = sortedFieldMap?.reduce((acc, clientField, colIndex) => {\n    if (fieldIsHiddenOrDisabled(clientField) && !fieldIsID(clientField)) {\n      return acc\n    }\n\n    const accessor =\n      (clientField as any).accessor ?? ('name' in clientField ? clientField.name : undefined)\n\n    const serverField = _sortedFieldMap.find((f) => {\n      const fAccessor = (f as any).accessor ?? ('name' in f ? f.name : undefined)\n      return fAccessor === accessor\n    })\n\n    const hasCustomCell =\n      serverField?.admin &&\n      'components' in serverField.admin &&\n      serverField.admin.components &&\n      'Cell' in serverField.admin.components &&\n      serverField.admin.components.Cell\n\n    if (serverField && serverField.type === 'group' && !hasCustomCell) {\n      return acc // skip any group without a custom cell\n    }\n\n    const columnPref = columns?.find(\n      (preference) => clientField && 'name' in clientField && preference.accessor === accessor,\n    )\n\n    const isActive = isColumnActive({\n      accessor,\n      activeColumnsIndices,\n      column: columnPref,\n      columns,\n    })\n\n    if (isActive && !activeColumnsIndices.includes(colIndex)) {\n      activeColumnsIndices.push(colIndex)\n    }\n\n    let CustomLabel = undefined\n\n    if (dataType === 'monomorphic') {\n      const CustomLabelToRender =\n        serverField &&\n        'admin' in serverField &&\n        'components' in serverField.admin &&\n        'Label' in serverField.admin.components &&\n        serverField.admin.components.Label !== undefined // let it return `null`\n          ? serverField.admin.components.Label\n          : undefined\n\n      // TODO: customComponent will be optional in v4\n      const clientProps: Omit<ClientComponentProps, 'customComponents'> = {\n        field: clientField,\n      }\n\n      const customLabelServerProps: Pick<\n        ServerComponentProps,\n        'clientField' | 'collectionSlug' | 'field' | 'i18n' | 'payload'\n      > = {\n        clientField,\n        collectionSlug,\n        field: serverField,\n        i18n,\n        payload,\n      }\n\n      CustomLabel = CustomLabelToRender\n        ? RenderServerComponent({\n            clientProps,\n            Component: CustomLabelToRender,\n            importMap: payload.importMap,\n            serverProps: customLabelServerProps,\n          })\n        : undefined\n    }\n\n    const fieldAffectsDataSubFields =\n      clientField &&\n      clientField.type &&\n      (clientField.type === 'array' ||\n        clientField.type === 'group' ||\n        clientField.type === 'blocks')\n\n    const label =\n      clientField && 'labelWithPrefix' in clientField && clientField.labelWithPrefix !== undefined\n        ? clientField.labelWithPrefix\n        : 'label' in clientField\n          ? clientField.label\n          : undefined\n\n    // Convert accessor to dot notation specifically for SortColumn sorting behavior\n    const dotAccessor = accessor?.replace(/-/g, '.')\n\n    const Heading = (\n      <SortColumn\n        disable={fieldAffectsDataSubFields || fieldIsPresentationalOnly(clientField) || undefined}\n        Label={CustomLabel}\n        label={label as StaticLabel}\n        name={dotAccessor}\n        {...(sortColumnProps || {})}\n      />\n    )\n\n    const column: Column = {\n      accessor,\n      active: isActive,\n      CustomLabel,\n      field: clientField,\n      Heading,\n      renderedCells: isActive\n        ? docs.map((doc, rowIndex) => {\n            return renderCell({\n              clientField,\n              collectionSlug: dataType === 'monomorphic' ? collectionSlug : doc.relationTo,\n              columnIndex: colIndex,\n              customCellProps,\n              doc: dataType === 'monomorphic' ? doc : doc.value,\n              enableRowSelections,\n              i18n,\n              isLinkedColumn: enableLinkedCell && colIndex === activeColumnsIndices[0],\n              payload,\n              req,\n              rowIndex,\n              serverField,\n              viewType,\n            })\n          })\n        : [],\n    }\n\n    acc.push(column)\n\n    return acc\n  }, [])\n\n  if (beforeRows) {\n    sorted.unshift(...beforeRows)\n  }\n\n  return sorted\n}\n"],"mappings":"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","ignoreList":[]}