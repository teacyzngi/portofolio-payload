{"version":3,"file":"getInitialColumns.js","names":["fieldAffectsData","getRemainingColumns","fields","useAsTitle","reduce","remaining","field","name","type","tabs","tabFieldColumns","tab","getInitialColumns","defaultColumns","initialColumns","Array","isArray","length","push","remainingColumns","concat","slice","map","column","accessor","active"],"sources":["../../../src/providers/TableColumns/getInitialColumns.ts"],"sourcesContent":["import type { ClientField, CollectionConfig, CollectionPreferences, Field } from 'payload'\n\nimport { fieldAffectsData } from 'payload/shared'\n\nconst getRemainingColumns = <T extends ClientField[] | Field[]>(\n  fields: T,\n  useAsTitle: string,\n): CollectionPreferences['columns'] =>\n  fields?.reduce((remaining, field) => {\n    if (fieldAffectsData(field) && field.name === useAsTitle) {\n      return remaining\n    }\n\n    if (!fieldAffectsData(field) && 'fields' in field) {\n      return [...remaining, ...getRemainingColumns(field.fields, useAsTitle)]\n    }\n\n    if (field.type === 'tabs' && 'tabs' in field) {\n      return [\n        ...remaining,\n        ...field.tabs.reduce(\n          (tabFieldColumns, tab) => [\n            ...tabFieldColumns,\n            ...('name' in tab ? [tab.name] : getRemainingColumns(tab.fields, useAsTitle)),\n          ],\n          [],\n        ),\n      ]\n    }\n\n    return [...remaining, field.name]\n  }, [])\n\n/**\n * Returns the initial columns to display in the table based on the following criteria:\n * 1. If `defaultColumns` is set in the collection config, use those columns\n * 2. Otherwise take `useAtTitle, if set, and the next 3 fields that are not hidden or disabled\n */\nexport const getInitialColumns = <T extends ClientField[] | Field[]>(\n  fields: T,\n  useAsTitle: CollectionConfig['admin']['useAsTitle'],\n  defaultColumns: CollectionConfig['admin']['defaultColumns'],\n): CollectionPreferences['columns'] => {\n  let initialColumns = []\n\n  if (Array.isArray(defaultColumns) && defaultColumns.length >= 1) {\n    initialColumns = defaultColumns\n  } else {\n    if (useAsTitle) {\n      initialColumns.push(useAsTitle)\n    }\n\n    const remainingColumns = getRemainingColumns(fields, useAsTitle)\n\n    initialColumns = initialColumns.concat(remainingColumns)\n    initialColumns = initialColumns.slice(0, 4)\n  }\n\n  return initialColumns.map((column) => ({\n    accessor: column,\n    active: true,\n  }))\n}\n"],"mappings":"AAEA,SAASA,gBAAgB,QAAQ;AAEjC,MAAMC,mBAAA,GAAsBA,CAC1BC,MAAA,EACAC,UAAA,KAEAD,MAAA,EAAQE,MAAA,CAAO,CAACC,SAAA,EAAWC,KAAA;EACzB,IAAIN,gBAAA,CAAiBM,KAAA,KAAUA,KAAA,CAAMC,IAAI,KAAKJ,UAAA,EAAY;IACxD,OAAOE,SAAA;EACT;EAEA,IAAI,CAACL,gBAAA,CAAiBM,KAAA,KAAU,YAAYA,KAAA,EAAO;IACjD,OAAO,C,GAAID,SAAA,E,GAAcJ,mBAAA,CAAoBK,KAAA,CAAMJ,MAAM,EAAEC,UAAA,EAAY;EACzE;EAEA,IAAIG,KAAA,CAAME,IAAI,KAAK,UAAU,UAAUF,KAAA,EAAO;IAC5C,OAAO,C,GACFD,SAAA,E,GACAC,KAAA,CAAMG,IAAI,CAACL,MAAM,CAClB,CAACM,eAAA,EAAiBC,GAAA,KAAQ,C,GACrBD,eAAA,E,IACC,UAAUC,GAAA,GAAM,CAACA,GAAA,CAAIJ,IAAI,CAAC,GAAGN,mBAAA,CAAoBU,GAAA,CAAIT,MAAM,EAAEC,UAAA,GAClE,EACD,EAAE,EAEL;EACH;EAEA,OAAO,C,GAAIE,SAAA,EAAWC,KAAA,CAAMC,IAAI,CAAC;AACnC,GAAG,EAAE;AAEP;;;;;AAKA,OAAO,MAAMK,iBAAA,GAAoBA,CAC/BV,MAAA,EACAC,UAAA,EACAU,cAAA;EAEA,IAAIC,cAAA,GAAiB,EAAE;EAEvB,IAAIC,KAAA,CAAMC,OAAO,CAACH,cAAA,KAAmBA,cAAA,CAAeI,MAAM,IAAI,GAAG;IAC/DH,cAAA,GAAiBD,cAAA;EACnB,OAAO;IACL,IAAIV,UAAA,EAAY;MACdW,cAAA,CAAeI,IAAI,CAACf,UAAA;IACtB;IAEA,MAAMgB,gBAAA,GAAmBlB,mBAAA,CAAoBC,MAAA,EAAQC,UAAA;IAErDW,cAAA,GAAiBA,cAAA,CAAeM,MAAM,CAACD,gBAAA;IACvCL,cAAA,GAAiBA,cAAA,CAAeO,KAAK,CAAC,GAAG;EAC3C;EAEA,OAAOP,cAAA,CAAeQ,GAAG,CAAEC,MAAA,KAAY;IACrCC,QAAA,EAAUD,MAAA;IACVE,MAAA,EAAQ;EACV;AACF","ignoreList":[]}