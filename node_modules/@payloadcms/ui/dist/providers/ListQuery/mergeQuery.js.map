{"version":3,"file":"mergeQuery.js","names":["mergeQuery","currentQuery","newQuery","options","page","shouldResetPage","some","key","includes","shouldResetQueryByGroup","mergedQueryByGroup","undefined","queryByGroup","Object","fromEntries","entries","map","value","mergedQuery","columns","groupBy","defaults","limit","preset","search","sort","where"],"sources":["../../../src/providers/ListQuery/mergeQuery.ts"],"sourcesContent":["import type { ListQuery } from 'payload'\n\nexport const mergeQuery = (\n  currentQuery: ListQuery,\n  newQuery: ListQuery,\n  options?: {\n    defaults?: ListQuery\n  },\n): ListQuery => {\n  let page = 'page' in newQuery ? newQuery.page : currentQuery?.page\n\n  const shouldResetPage = ['where', 'search', 'groupBy']?.some(\n    (key) => key in newQuery && !['limit', 'page'].includes(key),\n  )\n\n  if (shouldResetPage) {\n    page = 1\n  }\n\n  const shouldResetQueryByGroup = ['where', 'search', 'page', 'limit', 'groupBy', 'sort'].some(\n    (key) => key in newQuery,\n  )\n\n  let mergedQueryByGroup = undefined\n\n  if (!shouldResetQueryByGroup) {\n    // Deeply merge queryByGroup so we can send a partial update for a specific group\n    mergedQueryByGroup = {\n      ...(currentQuery?.queryByGroup || {}),\n      ...(newQuery.queryByGroup\n        ? Object.fromEntries(\n            Object.entries(newQuery.queryByGroup).map(([key, value]) => [\n              key,\n              {\n                ...(currentQuery?.queryByGroup?.[key] || {}),\n                ...value,\n              },\n            ]),\n          )\n        : {}),\n    }\n  }\n\n  const mergedQuery: ListQuery = {\n    ...currentQuery,\n    ...newQuery,\n    columns: 'columns' in newQuery ? newQuery.columns : currentQuery.columns,\n    groupBy:\n      'groupBy' in newQuery\n        ? newQuery.groupBy\n        : (currentQuery?.groupBy ?? options?.defaults?.groupBy),\n    limit: 'limit' in newQuery ? newQuery.limit : (currentQuery?.limit ?? options?.defaults?.limit),\n    page,\n    preset: 'preset' in newQuery ? newQuery.preset : currentQuery?.preset,\n    queryByGroup: mergedQueryByGroup,\n    search: 'search' in newQuery ? newQuery.search : currentQuery?.search,\n    sort:\n      'sort' in newQuery\n        ? newQuery.sort\n        : ((currentQuery?.sort as string) ?? options?.defaults?.sort),\n    where: 'where' in newQuery ? newQuery.where : currentQuery?.where,\n  }\n\n  return mergedQuery\n}\n"],"mappings":"AAEA,OAAO,MAAMA,UAAA,GAAaA,CACxBC,YAAA,EACAC,QAAA,EACAC,OAAA;EAIA,IAAIC,IAAA,GAAO,UAAUF,QAAA,GAAWA,QAAA,CAASE,IAAI,GAAGH,YAAA,EAAcG,IAAA;EAE9D,MAAMC,eAAA,GAAkB,CAAC,SAAS,UAAU,UAAU,EAAEC,IAAA,CACrDC,GAAA,IAAQA,GAAA,IAAOL,QAAA,IAAY,CAAC,CAAC,SAAS,OAAO,CAACM,QAAQ,CAACD,GAAA;EAG1D,IAAIF,eAAA,EAAiB;IACnBD,IAAA,GAAO;EACT;EAEA,MAAMK,uBAAA,GAA0B,CAAC,SAAS,UAAU,QAAQ,SAAS,WAAW,OAAO,CAACH,IAAI,CACzFC,GAAA,IAAQA,GAAA,IAAOL,QAAA;EAGlB,IAAIQ,kBAAA,GAAqBC,SAAA;EAEzB,IAAI,CAACF,uBAAA,EAAyB;IAC5B;IACAC,kBAAA,GAAqB;MACnB,IAAIT,YAAA,EAAcW,YAAA,IAAgB,CAAC,CAAC;MACpC,IAAIV,QAAA,CAASU,YAAY,GACrBC,MAAA,CAAOC,WAAW,CAChBD,MAAA,CAAOE,OAAO,CAACb,QAAA,CAASU,YAAY,EAAEI,GAAG,CAAC,CAAC,CAACT,GAAA,EAAKU,KAAA,CAAM,KAAK,CAC1DV,GAAA,EACA;QACE,IAAIN,YAAA,EAAcW,YAAA,GAAeL,GAAA,CAAI,IAAI,CAAC,CAAC;QAC3C,GAAGU;MACL,EACD,KAEH,CAAC,CAAC;IACR;EACF;EAEA,MAAMC,WAAA,GAAyB;IAC7B,GAAGjB,YAAY;IACf,GAAGC,QAAQ;IACXiB,OAAA,EAAS,aAAajB,QAAA,GAAWA,QAAA,CAASiB,OAAO,GAAGlB,YAAA,CAAakB,OAAO;IACxEC,OAAA,EACE,aAAalB,QAAA,GACTA,QAAA,CAASkB,OAAO,GACfnB,YAAA,EAAcmB,OAAA,IAAWjB,OAAA,EAASkB,QAAA,EAAUD,OAAA;IACnDE,KAAA,EAAO,WAAWpB,QAAA,GAAWA,QAAA,CAASoB,KAAK,GAAIrB,YAAA,EAAcqB,KAAA,IAASnB,OAAA,EAASkB,QAAA,EAAUC,KAAA;IACzFlB,IAAA;IACAmB,MAAA,EAAQ,YAAYrB,QAAA,GAAWA,QAAA,CAASqB,MAAM,GAAGtB,YAAA,EAAcsB,MAAA;IAC/DX,YAAA,EAAcF,kBAAA;IACdc,MAAA,EAAQ,YAAYtB,QAAA,GAAWA,QAAA,CAASsB,MAAM,GAAGvB,YAAA,EAAcuB,MAAA;IAC/DC,IAAA,EACE,UAAUvB,QAAA,GACNA,QAAA,CAASuB,IAAI,GACZxB,YAAC,EAAcwB,IAAA,IAAmBtB,OAAA,EAASkB,QAAA,EAAUI,IAAA;IAC5DC,KAAA,EAAO,WAAWxB,QAAA,GAAWA,QAAA,CAASwB,KAAK,GAAGzB,YAAA,EAAcyB;EAC9D;EAEA,OAAOR,WAAA;AACT","ignoreList":[]}