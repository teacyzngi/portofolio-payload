{"version":3,"file":"types.js","names":[],"sources":["../../../src/providers/ListQuery/types.ts"],"sourcesContent":["import type {\n  ClientCollectionConfig,\n  ListQuery,\n  PaginatedDistinctDocs,\n  PaginatedDocs,\n  Sort,\n  Where,\n} from 'payload'\n\ntype ContextHandlers = {\n  handlePageChange?: (page: number) => Promise<void>\n  handlePerPageChange?: (limit: number) => Promise<void>\n  handleSearchChange?: (search: string) => Promise<void>\n  handleSortChange?: (sort: string) => Promise<void>\n  handleWhereChange?: (where: Where) => Promise<void>\n}\n\nexport type OnListQueryChange = (query: ListQuery) => void\n\nexport type ListQueryProps = {\n  readonly children: React.ReactNode\n  readonly collectionSlug?: ClientCollectionConfig['slug']\n  readonly data: PaginatedDocs | undefined\n  readonly modifySearchParams?: boolean\n  readonly onQueryChange?: OnListQueryChange\n  readonly orderableFieldName?: string\n  /**\n   * @deprecated\n   */\n  readonly preferenceKey?: string\n  readonly query?: ListQuery\n}\n\nexport type IListQueryContext = {\n  collectionSlug: ClientCollectionConfig['slug']\n  data: ListQueryProps['data']\n  defaultLimit?: number\n  defaultSort?: Sort\n  /**\n   * @experimental This prop is subject to change. Use at your own risk.\n   */\n  isGroupingBy: boolean\n  modified: boolean\n  orderableFieldName?: string\n  query: ListQuery\n  refineListData: (args: ListQuery, setModified?: boolean) => Promise<void>\n  setModified: (modified: boolean) => void\n} & ContextHandlers\n"],"mappings":"AAiCA","ignoreList":[]}