import type { ArrayField, ClientComponentProps, ClientField, Row, SanitizedFieldPermissions } from 'payload';
import React from 'react';
import type { UseDraggableSortableReturn } from '../../elements/DraggableSortable/useDraggableSortable/types.js';
import './index.scss';
type ArrayRowProps = {
    readonly addRow: (rowIndex: number) => Promise<void> | void;
    readonly copyRow: (rowIndex: number) => void;
    readonly CustomRowLabel?: React.ReactNode;
    readonly duplicateRow: (rowIndex: number) => void;
    readonly errorCount: number;
    readonly fields: ClientField[];
    readonly hasMaxRows?: boolean;
    readonly isLoading?: boolean;
    readonly isSortable?: boolean;
    readonly labels: Partial<ArrayField['labels']>;
    readonly moveRow: (fromIndex: number, toIndex: number) => void;
    readonly parentPath: string;
    readonly pasteRow: (rowIndex: number) => void;
    readonly path: string;
    readonly permissions: SanitizedFieldPermissions;
    readonly readOnly?: boolean;
    readonly removeRow: (rowIndex: number) => void;
    readonly row: Row;
    readonly rowCount: number;
    readonly rowIndex: number;
    readonly schemaPath: string;
    readonly setCollapse: (rowID: string, collapsed: boolean) => void;
} & Pick<ClientComponentProps, 'forceRender'> & UseDraggableSortableReturn;
export declare const ArrayRow: React.FC<ArrayRowProps>;
export {};
//# sourceMappingURL=ArrayRow.d.ts.map