import type { ClientBlock, ClientField, Labels, Row, SanitizedFieldPermissions } from 'payload';
import React from 'react';
import type { UseDraggableSortableReturn } from '../../elements/DraggableSortable/useDraggableSortable/types.js';
type BlocksFieldProps = {
    addRow: (rowIndex: number, blockType: string) => Promise<void> | void;
    block: ClientBlock;
    blocks: (ClientBlock | string)[] | ClientBlock[];
    copyRow: (rowIndex: number) => void;
    duplicateRow: (rowIndex: number) => void;
    errorCount: number;
    fields: ClientField[];
    hasMaxRows?: boolean;
    isLoading?: boolean;
    isSortable?: boolean;
    Label?: React.ReactNode;
    labels: Labels;
    moveRow: (fromIndex: number, toIndex: number) => void;
    parentPath: string;
    pasteRow: (rowIndex: number) => void;
    path: string;
    permissions: SanitizedFieldPermissions;
    readOnly: boolean;
    removeRow: (rowIndex: number) => void;
    row: Row;
    rowCount: number;
    rowIndex: number;
    schemaPath: string;
    setCollapse: (id: string, collapsed: boolean) => void;
} & UseDraggableSortableReturn;
export declare const BlockRow: React.FC<BlocksFieldProps>;
export {};
//# sourceMappingURL=BlockRow.d.ts.map