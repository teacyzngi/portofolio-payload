{"version":3,"file":"types.js","names":[],"sources":["../../../src/fields/Password/types.ts"],"sourcesContent":["import type {\n  FieldBaseClient,\n  PasswordFieldValidation,\n  StaticDescription,\n  TextFieldClient,\n} from 'payload'\nimport type { ChangeEvent, CSSProperties } from 'react'\nimport type React from 'react'\nimport type { MarkOptional } from 'ts-essentials'\n\nexport type PasswordFieldProps = {\n  readonly autoComplete?: string\n  readonly field: MarkOptional<TextFieldClient, 'type'>\n  /**\n   * @default ''\n   */\n  readonly indexPath?: string\n  readonly inputRef?: React.RefObject<HTMLInputElement>\n  /**\n   * @default ''\n   */\n  readonly parentPath?: string\n  /**\n   * @default ''\n   */\n  readonly parentSchemaPath?: string\n  /**\n   * @default field.name\n   */\n  readonly path: string\n  /**\n   * @default field.name\n   */\n  readonly schemaPath?: string\n  readonly validate?: PasswordFieldValidation\n}\n\nexport type PasswordInputProps = {\n  readonly AfterInput?: React.ReactNode\n  readonly autoComplete?: string\n  readonly BeforeInput?: React.ReactNode\n  readonly className?: string\n  readonly description?: StaticDescription\n  readonly Description?: React.ReactNode\n  readonly Error?: React.ReactNode\n  readonly field?: MarkOptional<TextFieldClient, 'type'>\n  readonly inputRef?: React.RefObject<HTMLInputElement>\n  readonly Label?: React.ReactNode\n  readonly label: FieldBaseClient['label']\n  readonly localized?: boolean\n  readonly onChange?: (e: ChangeEvent<HTMLInputElement>) => void\n  readonly onKeyDown?: React.KeyboardEventHandler<HTMLInputElement>\n  readonly path: string\n  readonly placeholder?: Record<string, string> | string\n  readonly readOnly?: boolean\n  readonly required?: boolean\n  readonly rtl?: boolean\n  readonly showError?: boolean\n  readonly style?: React.CSSProperties\n  readonly value?: string\n  readonly width?: CSSProperties['width']\n}\n"],"mappings":"AAqCA","ignoreList":[]}