'use client';

import { c as _c } from "react/compiler-runtime";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { formatFilesize } from 'payload/shared';
import React from 'react';
import { Button } from '../../../elements/Button/index.js';
import { useDocumentDrawer } from '../../../elements/DocumentDrawer/index.js';
import { ThumbnailComponent } from '../../../elements/Thumbnail/index.js';
import { useConfig } from '../../../providers/Config/index.js';
import './index.scss';
const baseClass = 'upload-relationship-details';
export function RelationshipContent(props) {
  const $ = _c(11);
  const {
    id,
    allowEdit,
    allowRemove,
    alt,
    byteSize,
    className,
    collectionSlug,
    displayPreview,
    filename,
    mimeType,
    onRemove,
    reloadDoc,
    src,
    thumbnailSrc,
    withMeta: t0,
    x,
    y
  } = props;
  const withMeta = t0 === undefined ? true : t0;
  const {
    config
  } = useConfig();
  const collectionConfig = "collections" in config ? config.collections.find(collection => collection.slug === collectionSlug) : undefined;
  const t1 = src ? id : undefined;
  let t2;
  if ($[0] !== collectionSlug || $[1] !== t1) {
    t2 = {
      id: t1,
      collectionSlug
    };
    $[0] = collectionSlug;
    $[1] = t1;
    $[2] = t2;
  } else {
    t2 = $[2];
  }
  const [DocumentDrawer,, t3] = useDocumentDrawer(t2);
  const {
    openDrawer
  } = t3;
  let t4;
  if ($[3] !== collectionSlug || $[4] !== reloadDoc) {
    t4 = async t5 => {
      const {
        doc
      } = t5;
      return reloadDoc(doc.id, collectionSlug);
    };
    $[3] = collectionSlug;
    $[4] = reloadDoc;
    $[5] = t4;
  } else {
    t4 = $[5];
  }
  const onSave = t4;
  let t5;
  if ($[6] !== x || $[7] !== y) {
    t5 = function generateMetaText(mimeType_0, size) {
      const sections = [];
      if (size) {
        sections.push(formatFilesize(size));
      }
      if (x && y) {
        sections.push(`${x}x${y}`);
      }
      if (mimeType_0) {
        sections.push(mimeType_0);
      }
      return sections.join(" \u2014 ");
    };
    $[6] = x;
    $[7] = y;
    $[8] = t5;
  } else {
    t5 = $[8];
  }
  const generateMetaText = t5;
  const metaText = withMeta ? generateMetaText(mimeType, byteSize) : "";
  const previewAllowed = displayPreview ?? collectionConfig?.upload?.displayPreview ?? true;
  let t6;
  if ($[9] !== className) {
    t6 = [baseClass, className].filter(Boolean);
    $[9] = className;
    $[10] = t6;
  } else {
    t6 = $[10];
  }
  return _jsxs("div", {
    className: t6.join(" "),
    children: [_jsxs("div", {
      className: `${baseClass}__imageAndDetails`,
      children: [previewAllowed && _jsx(ThumbnailComponent, {
        alt,
        className: `${baseClass}__thumbnail`,
        filename,
        fileSrc: thumbnailSrc,
        size: "small"
      }), _jsxs("div", {
        className: `${baseClass}__details`,
        children: [_jsx("p", {
          className: `${baseClass}__filename`,
          children: src ? _jsx("a", {
            href: src,
            target: "_blank",
            children: filename
          }) : filename
        }), withMeta ? _jsx("p", {
          className: `${baseClass}__meta`,
          children: metaText
        }) : null]
      })]
    }), allowEdit !== false || allowRemove !== false ? _jsxs("div", {
      className: `${baseClass}__actions`,
      children: [allowEdit !== false ? _jsx(Button, {
        buttonStyle: "icon-label",
        className: `${baseClass}__edit`,
        icon: "edit",
        iconStyle: "none",
        onClick: openDrawer
      }) : null, allowRemove !== false ? _jsx(Button, {
        buttonStyle: "icon-label",
        className: `${baseClass}__remove`,
        icon: "x",
        iconStyle: "none",
        onClick: () => onRemove()
      }) : null, _jsx(DocumentDrawer, {
        onSave
      })]
    }) : null]
  });
}
//# sourceMappingURL=index.js.map