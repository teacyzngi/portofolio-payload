{"version":3,"file":"Input.js","names":["useModal","qs","React","useCallback","useEffect","useMemo","useBulkUpload","Button","useDocumentDrawer","Dropzone","useListDrawer","RenderCustomComponent","ShimmerEffect","FieldDescription","FieldError","FieldLabel","useAuth","useLocale","useTranslation","fieldBaseClass","UploadComponentHasMany","UploadComponentHasOne","baseClass","UploadInput","props","AfterInput","allowCreate","api","BeforeInput","className","Description","description","displayPreview","Error","filterOptions","filterOptionsFromProps","hasMany","isSortable","Label","label","localized","maxRows","onChange","onChangeFromProps","path","readOnly","relationTo","required","serverURL","showError","style","value","populatedDocs","setPopulatedDocs","useState","activeRelationTo","setActiveRelationTo","Array","isArray","openModal","drawerSlug","setCollectionSlug","setInitialFiles","setMaxFiles","setOnSuccess","permissions","code","i18n","t","id","not_in","concat","ListDrawer","closeDrawer","closeListDrawer","openDrawer","openListDrawer","collectionSlugs","CreateDocDrawer","closeCreateDocDrawer","openCreateDocDrawer","collectionSlug","loadedValueDocsRef","useRef","canCreate","collections","create","newValue","populateDocs","ids","relatedCollectionSlug","length","query","depth","draft","limit","locale","where","and","in","response","fetch","body","stringify","credentials","headers","language","method","ok","json","sortedDocs","map","docs","find","doc","String","includes","undefined","index","filename","isPlaceholder","onUploadSuccess","uploadedForms","mergedValue","form","currentDocs","firstDoc","onLocalFileSelection","fileList","fileListToUse","dataTransfer","DataTransfer","items","add","files","onListBulkSelect","selectedDocIDs","isSelected","push","loadedDocs","onDocCreate","data","onListSelect","selectedDoc","reloadDoc","docID","updatedDocsToPropogate","existingDocIndex","findIndex","hasExisting","updatedDocs","onReorder","newValueIDs","onRemove","loadInitialDocs","current","showDropzone","_jsxs","filter","Boolean","join","replace","_jsx","CustomComponent","Fallback","_Fragment","fileDocs","readonly","height","fileDoc","disabled","multipleFiles","buttonStyle","onClick","size","onSave","enableRowSelections","onBulkSelect","onSelect"],"sources":["../../../src/fields/Upload/Input.tsx"],"sourcesContent":["'use client'\n\nimport type {\n  ClientCollectionConfig,\n  FieldLabelClientProps,\n  FilterOptionsResult,\n  JsonObject,\n  StaticDescription,\n  StaticLabel,\n  UploadFieldClient,\n  UploadField as UploadFieldType,\n  Where,\n} from 'payload'\nimport type { MarkOptional } from 'ts-essentials'\n\nimport { useModal } from '@faceless-ui/modal'\nimport * as qs from 'qs-esm'\nimport React, { useCallback, useEffect, useMemo } from 'react'\n\nimport type { ListDrawerProps } from '../../elements/ListDrawer/types.js'\nimport type { PopulateDocs, ReloadDoc } from './types.js'\n\nimport { type BulkUploadContext, useBulkUpload } from '../../elements/BulkUpload/index.js'\nimport { Button } from '../../elements/Button/index.js'\nimport { useDocumentDrawer } from '../../elements/DocumentDrawer/index.js'\nimport { Dropzone } from '../../elements/Dropzone/index.js'\nimport { useListDrawer } from '../../elements/ListDrawer/index.js'\nimport { RenderCustomComponent } from '../../elements/RenderCustomComponent/index.js'\nimport { ShimmerEffect } from '../../elements/ShimmerEffect/index.js'\nimport { FieldDescription } from '../../fields/FieldDescription/index.js'\nimport { FieldError } from '../../fields/FieldError/index.js'\nimport { FieldLabel } from '../../fields/FieldLabel/index.js'\nimport { useAuth } from '../../providers/Auth/index.js'\nimport { useLocale } from '../../providers/Locale/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { fieldBaseClass } from '../shared/index.js'\nimport { UploadComponentHasMany } from './HasMany/index.js'\nimport { UploadComponentHasOne } from './HasOne/index.js'\nimport './index.scss'\n\nexport const baseClass = 'upload'\n\ntype PopulatedDocs = { relationTo: string; value: JsonObject }[]\n\nexport type UploadInputProps = {\n  readonly AfterInput?: React.ReactNode\n  readonly allowCreate?: boolean\n  /**\n   * Controls the visibility of the \"Create new collection\" button\n   */\n  readonly api?: string\n  readonly BeforeInput?: React.ReactNode\n  readonly className?: string\n  readonly collection?: ClientCollectionConfig\n  readonly customUploadActions?: React.ReactNode[]\n  readonly Description?: React.ReactNode\n  readonly description?: StaticDescription\n  readonly displayPreview?: boolean\n  readonly Error?: React.ReactNode\n  readonly filterOptions?: FilterOptionsResult\n  readonly hasMany?: boolean\n  readonly hideRemoveFile?: boolean\n  readonly isSortable?: boolean\n  readonly Label?: React.ReactNode\n  readonly label?: StaticLabel\n  readonly labelProps?: FieldLabelClientProps<MarkOptional<UploadFieldClient, 'type'>>\n  readonly localized?: boolean\n  readonly maxRows?: number\n  readonly onChange?: (e) => void\n  readonly path: string\n  readonly readOnly?: boolean\n  readonly relationTo: UploadFieldType['relationTo']\n  readonly required?: boolean\n  readonly serverURL?: string\n  readonly showError?: boolean\n  readonly style?: React.CSSProperties\n  readonly value?: (number | string)[] | (number | string)\n}\n\nexport function UploadInput(props: UploadInputProps) {\n  const {\n    AfterInput,\n    allowCreate,\n    api,\n    BeforeInput,\n    className,\n    Description,\n    description,\n    displayPreview,\n    Error,\n    filterOptions: filterOptionsFromProps,\n    hasMany,\n    isSortable,\n    Label,\n    label,\n    localized,\n    maxRows,\n    onChange: onChangeFromProps,\n    path,\n    readOnly,\n    relationTo,\n    required,\n    serverURL,\n    showError,\n    style,\n    value,\n  } = props\n\n  const [populatedDocs, setPopulatedDocs] = React.useState<\n    {\n      relationTo: string\n      value: JsonObject\n    }[]\n  >()\n\n  const [activeRelationTo, setActiveRelationTo] = React.useState<string>(\n    Array.isArray(relationTo) ? relationTo[0] : relationTo,\n  )\n\n  const { openModal } = useModal()\n  const { drawerSlug, setCollectionSlug, setInitialFiles, setMaxFiles, setOnSuccess } =\n    useBulkUpload()\n  const { permissions } = useAuth()\n  const { code } = useLocale()\n  const { i18n, t } = useTranslation()\n\n  const filterOptions: FilterOptionsResult = useMemo(() => {\n    return {\n      ...filterOptionsFromProps,\n      [activeRelationTo]: {\n        ...((filterOptionsFromProps?.[activeRelationTo] as any) || {}),\n        id: {\n          ...((filterOptionsFromProps?.[activeRelationTo] as any)?.id || {}),\n          not_in: ((filterOptionsFromProps?.[activeRelationTo] as any)?.id?.not_in || []).concat(\n            ...(Array.isArray(value) || value ? [value] : []),\n          ),\n        },\n      },\n    }\n  }, [value, activeRelationTo, filterOptionsFromProps])\n\n  const [ListDrawer, , { closeDrawer: closeListDrawer, openDrawer: openListDrawer }] =\n    useListDrawer({\n      collectionSlugs: typeof relationTo === 'string' ? [relationTo] : relationTo,\n      filterOptions,\n    })\n\n  const [\n    CreateDocDrawer,\n    ,\n    { closeDrawer: closeCreateDocDrawer, openDrawer: openCreateDocDrawer },\n  ] = useDocumentDrawer({\n    collectionSlug: activeRelationTo,\n  })\n\n  /**\n   * Prevent initial retrieval of documents from running more than once\n   */\n  const loadedValueDocsRef = React.useRef<boolean>(false)\n\n  const canCreate = useMemo(() => {\n    if (!allowCreate) {\n      return false\n    }\n\n    if (typeof activeRelationTo === 'string') {\n      if (permissions?.collections && permissions.collections?.[activeRelationTo]?.create) {\n        return true\n      }\n    }\n\n    return false\n  }, [activeRelationTo, permissions, allowCreate])\n\n  const onChange = React.useCallback(\n    (newValue) => {\n      if (typeof onChangeFromProps === 'function') {\n        onChangeFromProps(newValue)\n      }\n    },\n    [onChangeFromProps],\n  )\n\n  const populateDocs = React.useCallback<PopulateDocs>(\n    async (ids, relatedCollectionSlug) => {\n      if (!ids.length) {\n        return\n      }\n\n      const query: {\n        [key: string]: unknown\n        where: Where\n      } = {\n        depth: 0,\n        draft: true,\n        limit: ids.length,\n        locale: code,\n        where: {\n          and: [\n            {\n              id: {\n                in: ids,\n              },\n            },\n          ],\n        },\n      }\n\n      const response = await fetch(`${serverURL}${api}/${relatedCollectionSlug}`, {\n        body: qs.stringify(query),\n        credentials: 'include',\n        headers: {\n          'Accept-Language': i18n.language,\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'X-Payload-HTTP-Method-Override': 'GET',\n        },\n        method: 'POST',\n      })\n      if (response.ok) {\n        const json = await response.json()\n        let sortedDocs = ids.map((id) =>\n          json.docs.find((doc) => {\n            return String(doc.id) === String(id)\n          }),\n        )\n\n        if (sortedDocs.includes(undefined) && hasMany) {\n          sortedDocs = sortedDocs.map((doc, index) =>\n            doc\n              ? doc\n              : {\n                  id: ids[index],\n                  filename: `${t('general:untitled')} - ID: ${ids[index]}`,\n                  isPlaceholder: true,\n                },\n          )\n        }\n\n        return { ...json, docs: sortedDocs }\n      }\n\n      return null\n    },\n    [code, serverURL, api, i18n.language, t, hasMany],\n  )\n\n  const onUploadSuccess: BulkUploadContext['onSuccess'] = useCallback(\n    (uploadedForms) => {\n      if (hasMany) {\n        const mergedValue = [\n          ...(Array.isArray(value) ? value : []),\n          ...uploadedForms.map((form) => form.doc.id),\n        ]\n        onChange(mergedValue)\n        setPopulatedDocs((currentDocs) => [\n          ...(currentDocs || []),\n          ...uploadedForms.map((form) => ({\n            relationTo: form.collectionSlug,\n            value: form.doc,\n          })),\n        ])\n      } else {\n        const firstDoc = uploadedForms[0].doc\n        onChange(firstDoc.id)\n        setPopulatedDocs([\n          {\n            relationTo: firstDoc.collectionSlug,\n            value: firstDoc,\n          },\n        ])\n      }\n    },\n    [value, onChange, hasMany],\n  )\n\n  const onLocalFileSelection = React.useCallback(\n    (fileList?: FileList) => {\n      let fileListToUse = fileList\n      if (!hasMany && fileList && fileList.length > 1) {\n        const dataTransfer = new DataTransfer()\n        dataTransfer.items.add(fileList[0])\n        fileListToUse = dataTransfer.files\n      }\n      if (fileListToUse) {\n        setInitialFiles(fileListToUse)\n      }\n      setCollectionSlug(relationTo)\n      if (typeof maxRows === 'number') {\n        setMaxFiles(maxRows)\n      }\n      openModal(drawerSlug)\n    },\n    [\n      drawerSlug,\n      hasMany,\n      openModal,\n      relationTo,\n      setCollectionSlug,\n      setInitialFiles,\n      maxRows,\n      setMaxFiles,\n    ],\n  )\n\n  // only hasMany can bulk select\n  const onListBulkSelect = React.useCallback<NonNullable<ListDrawerProps['onBulkSelect']>>(\n    async (docs) => {\n      const selectedDocIDs = []\n\n      for (const [id, isSelected] of docs) {\n        if (isSelected) {\n          selectedDocIDs.push(id)\n        }\n      }\n\n      const loadedDocs = await populateDocs(selectedDocIDs, activeRelationTo)\n      if (loadedDocs) {\n        setPopulatedDocs((currentDocs) => [\n          ...(currentDocs || []),\n          ...loadedDocs.docs.map((doc) => ({\n            relationTo: activeRelationTo,\n            value: doc,\n          })),\n        ])\n      }\n      onChange([...(Array.isArray(value) ? value : []), ...selectedDocIDs])\n      closeListDrawer()\n    },\n    [activeRelationTo, closeListDrawer, onChange, populateDocs, value],\n  )\n\n  const onDocCreate = React.useCallback(\n    (data) => {\n      if (data.doc) {\n        setPopulatedDocs((currentDocs) => [\n          ...(currentDocs || []),\n          {\n            relationTo: activeRelationTo,\n            value: data.doc,\n          },\n        ])\n\n        onChange(data.doc.id)\n      }\n      closeCreateDocDrawer()\n    },\n    [closeCreateDocDrawer, activeRelationTo, onChange],\n  )\n\n  const onListSelect = useCallback<NonNullable<ListDrawerProps['onSelect']>>(\n    async ({ collectionSlug, doc }) => {\n      const loadedDocs = await populateDocs([doc.id], collectionSlug)\n      const selectedDoc = loadedDocs ? loadedDocs.docs?.[0] : null\n      setPopulatedDocs((currentDocs) => {\n        if (selectedDoc) {\n          if (hasMany) {\n            return [\n              ...(currentDocs || []),\n              {\n                relationTo: activeRelationTo,\n                value: selectedDoc,\n              },\n            ]\n          }\n          return [\n            {\n              relationTo: activeRelationTo,\n              value: selectedDoc,\n            },\n          ]\n        }\n        return currentDocs\n      })\n      if (hasMany) {\n        onChange([...(Array.isArray(value) ? value : []), doc.id])\n      } else {\n        onChange(doc.id)\n      }\n      closeListDrawer()\n    },\n    [closeListDrawer, hasMany, populateDocs, onChange, value, activeRelationTo],\n  )\n\n  const reloadDoc = React.useCallback<ReloadDoc>(\n    async (docID, collectionSlug) => {\n      const { docs } = await populateDocs([docID], collectionSlug)\n\n      if (docs[0]) {\n        let updatedDocsToPropogate = []\n        setPopulatedDocs((currentDocs) => {\n          const existingDocIndex = currentDocs?.findIndex((doc) => {\n            const hasExisting = doc.value?.id === docs[0].id || doc.value?.isPlaceholder\n            return hasExisting && doc.relationTo === collectionSlug\n          })\n          if (existingDocIndex > -1) {\n            const updatedDocs = [...currentDocs]\n            updatedDocs[existingDocIndex] = {\n              relationTo: collectionSlug,\n              value: docs[0],\n            }\n            updatedDocsToPropogate = updatedDocs\n            return updatedDocs\n          }\n        })\n\n        if (updatedDocsToPropogate.length && hasMany) {\n          onChange(updatedDocsToPropogate.map((doc) => doc.value?.id))\n        }\n      }\n    },\n    [populateDocs, onChange, hasMany],\n  )\n\n  // only hasMany can reorder\n  const onReorder = React.useCallback(\n    (newValue) => {\n      const newValueIDs = newValue.map(({ value }) => value.id)\n      onChange(newValueIDs)\n      setPopulatedDocs(newValue)\n    },\n    [onChange],\n  )\n\n  const onRemove = React.useCallback(\n    (newValue?: PopulatedDocs) => {\n      const newValueIDs = newValue ? newValue.map(({ value }) => value.id) : null\n      onChange(hasMany ? newValueIDs : newValueIDs ? newValueIDs[0] : null)\n      setPopulatedDocs(newValue ? newValue : [])\n    },\n    [onChange, hasMany],\n  )\n\n  useEffect(() => {\n    async function loadInitialDocs() {\n      if (value) {\n        loadedValueDocsRef.current = true\n        const loadedDocs = await populateDocs(\n          Array.isArray(value) ? value : [value],\n          activeRelationTo,\n        )\n        if (loadedDocs) {\n          setPopulatedDocs(\n            loadedDocs.docs.map((doc) => ({ relationTo: activeRelationTo, value: doc })),\n          )\n        }\n      }\n    }\n\n    if (!loadedValueDocsRef.current) {\n      void loadInitialDocs()\n    }\n  }, [populateDocs, activeRelationTo, value])\n\n  useEffect(() => {\n    setOnSuccess(onUploadSuccess)\n  }, [value, path, onUploadSuccess, setOnSuccess])\n\n  const showDropzone =\n    !value ||\n    (hasMany && Array.isArray(value) && (typeof maxRows !== 'number' || value.length < maxRows)) ||\n    (!hasMany && populatedDocs?.[0] && typeof populatedDocs[0].value === 'undefined')\n\n  return (\n    <div\n      className={[\n        fieldBaseClass,\n        baseClass,\n        className,\n        showError && 'error',\n        readOnly && 'read-only',\n      ]\n        .filter(Boolean)\n        .join(' ')}\n      id={`field-${path?.replace(/\\./g, '__')}`}\n      style={style}\n    >\n      <RenderCustomComponent\n        CustomComponent={Label}\n        Fallback={\n          <FieldLabel label={label} localized={localized} path={path} required={required} />\n        }\n      />\n      <div className={`${baseClass}__wrap`}>\n        <RenderCustomComponent\n          CustomComponent={Error}\n          Fallback={<FieldError path={path} showError={showError} />}\n        />\n      </div>\n      {BeforeInput}\n      <div className={`${baseClass}__dropzoneAndUpload`}>\n        {hasMany && Array.isArray(value) && value.length > 0 ? (\n          <>\n            {populatedDocs && populatedDocs?.length > 0 ? (\n              <UploadComponentHasMany\n                displayPreview={displayPreview}\n                fileDocs={populatedDocs}\n                isSortable={isSortable && !readOnly}\n                onRemove={onRemove}\n                onReorder={onReorder}\n                readonly={readOnly}\n                reloadDoc={reloadDoc}\n                serverURL={serverURL}\n              />\n            ) : (\n              <div className={`${baseClass}__loadingRows`}>\n                {value.map((id) => (\n                  <ShimmerEffect height=\"40px\" key={id} />\n                ))}\n              </div>\n            )}\n          </>\n        ) : null}\n        {!hasMany && value ? (\n          <>\n            {populatedDocs && populatedDocs?.length > 0 && populatedDocs[0].value ? (\n              <UploadComponentHasOne\n                displayPreview={displayPreview}\n                fileDoc={populatedDocs[0]}\n                onRemove={onRemove}\n                readonly={readOnly}\n                reloadDoc={reloadDoc}\n                serverURL={serverURL}\n              />\n            ) : populatedDocs && value && !populatedDocs?.[0]?.value ? (\n              <>\n                {t('general:untitled')} - ID: {value}\n              </>\n            ) : (\n              <ShimmerEffect height=\"62px\" />\n            )}\n          </>\n        ) : null}\n        {showDropzone ? (\n          <Dropzone\n            disabled={readOnly || !canCreate}\n            multipleFiles={hasMany}\n            onChange={onLocalFileSelection}\n          >\n            <div className={`${baseClass}__dropzoneContent`}>\n              <div className={`${baseClass}__dropzoneContent__buttons`}>\n                {canCreate && (\n                  <>\n                    <Button\n                      buttonStyle=\"pill\"\n                      className={`${baseClass}__createNewToggler`}\n                      disabled={readOnly || !canCreate}\n                      onClick={() => {\n                        if (!readOnly) {\n                          if (hasMany) {\n                            onLocalFileSelection()\n                          } else {\n                            openCreateDocDrawer()\n                          }\n                        }\n                      }}\n                      size=\"small\"\n                    >\n                      {t('general:createNew')}\n                    </Button>\n                    <span className={`${baseClass}__dropzoneContent__orText`}>\n                      {t('general:or')}\n                    </span>\n                  </>\n                )}\n                <Button\n                  buttonStyle=\"pill\"\n                  className={`${baseClass}__listToggler`}\n                  disabled={readOnly}\n                  onClick={openListDrawer}\n                  size=\"small\"\n                >\n                  {t('fields:chooseFromExisting')}\n                </Button>\n                <CreateDocDrawer onSave={onDocCreate} />\n                <ListDrawer\n                  allowCreate={canCreate}\n                  enableRowSelections={hasMany}\n                  onBulkSelect={onListBulkSelect}\n                  onSelect={onListSelect}\n                />\n              </div>\n\n              {canCreate && !readOnly && (\n                <p className={`${baseClass}__dragAndDropText`}>\n                  {t('general:or')} {t('upload:dragAndDrop')}\n                </p>\n              )}\n            </div>\n          </Dropzone>\n        ) : (\n          <>\n            {!readOnly &&\n            !populatedDocs &&\n            (!value ||\n              typeof maxRows !== 'number' ||\n              (Array.isArray(value) && value.length < maxRows)) ? (\n              <ShimmerEffect height=\"40px\" />\n            ) : null}\n          </>\n        )}\n      </div>\n      {AfterInput}\n      <RenderCustomComponent\n        CustomComponent={Description}\n        Fallback={<FieldDescription description={description} path={path} />}\n      />\n    </div>\n  )\n}\n"],"mappings":"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","ignoreList":[]}