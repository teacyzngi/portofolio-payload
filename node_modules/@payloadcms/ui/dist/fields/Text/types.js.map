{"version":3,"file":"types.js","names":[],"sources":["../../../src/fields/Text/types.ts"],"sourcesContent":["import type { StaticDescription, StaticLabel } from 'payload'\nimport type { ChangeEvent, JSX } from 'react'\nimport type React from 'react'\n\nimport type { Option, ReactSelectAdapterProps } from '../../elements/ReactSelect/types.js'\n\nexport type SharedTextFieldProps =\n  | {\n      readonly hasMany?: false\n      readonly onChange?: (e: ChangeEvent<HTMLInputElement>) => void\n    }\n  | {\n      readonly hasMany?: true\n      readonly onChange?: ReactSelectAdapterProps['onChange']\n    }\n\nexport type TextInputProps = {\n  readonly AfterInput?: React.ReactNode\n  readonly BeforeInput?: React.ReactNode\n  readonly className?: string\n  readonly Description?: React.ReactNode\n  readonly description?: StaticDescription\n  readonly Error?: React.ReactNode\n  readonly htmlAttributes?: {\n    autoComplete?: JSX.IntrinsicElements['input']['autoComplete']\n  }\n  readonly inputRef?: React.RefObject<HTMLInputElement>\n  readonly Label?: React.ReactNode\n  readonly label?: StaticLabel\n  readonly localized?: boolean\n  readonly maxRows?: number\n  readonly minRows?: number\n  readonly onKeyDown?: React.KeyboardEventHandler<HTMLInputElement>\n  readonly path: string\n  readonly placeholder?: Record<string, string> | string\n  readonly readOnly?: boolean\n  readonly required?: boolean\n  readonly rtl?: boolean\n  readonly showError?: boolean\n  readonly style?: React.CSSProperties\n  readonly value?: string\n  readonly valueToRender?: Option[]\n} & SharedTextFieldProps\n"],"mappings":"AAgBA","ignoreList":[]}