{"version":3,"file":"index.js","names":["c","_c","fieldIsHiddenOrDisabled","getFieldPaths","getFieldPermissions","React","RenderIfInViewport","useOperation","FieldPathContext","RenderField","baseClass","RenderFields","props","$","className","fields","forceRender","margins","parentIndexPath","parentPath","parentSchemaPath","permissions","readOnly","readOnlyFromParent","operation","length","t0","t1","t2","filter","Boolean","t3","join","t4","t5","field","i","hasOperationPermission","fieldPermissions","read","hasReadPermission","parentName","includes","split","isReadOnly","admin","indexPath","path","schemaPath","index","_jsx","value","children","clientFieldConfig","map"],"sources":["../../../src/forms/RenderFields/index.tsx"],"sourcesContent":["'use client'\n\nimport type { SanitizedFieldPermissions } from 'payload'\n\nimport { fieldIsHiddenOrDisabled, getFieldPaths, getFieldPermissions } from 'payload/shared'\nimport React from 'react'\n\nimport type { RenderFieldsProps } from './types.js'\n\nimport { RenderIfInViewport } from '../../elements/RenderIfInViewport/index.js'\nimport { useOperation } from '../../providers/Operation/index.js'\nimport './index.scss'\nimport { FieldPathContext } from './context.js'\nimport { RenderField } from './RenderField.js'\n\nconst baseClass = 'render-fields'\n\nexport { RenderFieldsProps as Props }\n\nexport const RenderFields: React.FC<RenderFieldsProps> = (props) => {\n  const {\n    className,\n    fields,\n    forceRender,\n    margins,\n    parentIndexPath,\n    parentPath,\n    parentSchemaPath,\n    permissions,\n    readOnly: readOnlyFromParent,\n  } = props\n\n  const operation = useOperation()\n\n  if (fields && fields.length > 0) {\n    return (\n      <RenderIfInViewport\n        className={[\n          baseClass,\n          className,\n          margins && `${baseClass}--margins-${margins}`,\n          margins === false && `${baseClass}--margins-none`,\n        ]\n          .filter(Boolean)\n          .join(' ')}\n        forceRender={forceRender}\n      >\n        {fields.map((field, i) => {\n          // For sidebar fields in the main fields array, `field` will be `null`, and visa versa\n          // This is to keep the order of the fields consistent and maintain the correct index paths for the main fields (i)\n          if (!field || fieldIsHiddenOrDisabled(field)) {\n            return null\n          }\n\n          const {\n            operation: hasOperationPermission,\n            permissions: fieldPermissions,\n            read: hasReadPermission,\n          } = getFieldPermissions({\n            field,\n            operation,\n            parentName: parentPath?.includes('.')\n              ? parentPath.split('.')[parentPath.split('.').length - 1]\n              : parentPath,\n            permissions,\n          })\n\n          // If the user cannot read the field, then filter it out\n          // This is different from `admin.readOnly` which is executed based on `operation`\n          if ('name' in field && !hasReadPermission) {\n            return null\n          }\n\n          // `admin.readOnly` displays the value but prevents the field from being edited\n          let isReadOnly = readOnlyFromParent || field?.admin?.readOnly\n\n          // If parent field is `readOnly: true`, but this field is `readOnly: false`, the field should still be editable\n          if (isReadOnly && field.admin?.readOnly === false) {\n            isReadOnly = false\n          }\n\n          // If the user does not have access at the operation level, to begin with, force it to be read-only\n          if ('name' in field && !hasOperationPermission) {\n            isReadOnly = true\n          }\n\n          const { indexPath, path, schemaPath } = getFieldPaths({\n            field,\n            index: i,\n            parentIndexPath,\n            parentPath,\n            parentSchemaPath,\n          })\n\n          return (\n            <FieldPathContext key={`${path}-${i}`} value={path}>\n              <RenderField\n                clientFieldConfig={field}\n                forceRender={forceRender}\n                indexPath={indexPath}\n                parentPath={parentPath}\n                parentSchemaPath={parentSchemaPath}\n                path={path}\n                permissions={fieldPermissions as SanitizedFieldPermissions}\n                readOnly={isReadOnly}\n                schemaPath={schemaPath}\n              />\n            </FieldPathContext>\n          )\n        })}\n      </RenderIfInViewport>\n    )\n  }\n\n  return null\n}\n"],"mappings":"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","ignoreList":[]}