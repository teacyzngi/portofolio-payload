{"version":3,"file":"promise.js","names":["getBlockSelect","getDefaultValue","stripUnselectedFields","fieldAffectsData","tabHasName","iterateFields","defaultValuePromise","id","data","field","locale","req","select","selectMode","siblingData","user","shouldContinue","siblingDoc","name","defaultValue","value","err","payload","logger","error","msg","type","rows","Array","isArray","promises","arraySelect","forEach","row","push","fields","undefined","Promise","all","blockTypeToMatch","blockType","block","blocks","blockReferences","find","slug","blockSelect","blockSelectMode","groupData","groupSelect","tabSiblingData","isNamedTab","tabSelect","tabs","map","tab"],"sources":["../../../../src/forms/fieldSchemasToFormState/calculateDefaultValues/promise.ts"],"sourcesContent":["import type {\n  Data,\n  Field,\n  FlattenedBlock,\n  PayloadRequest,\n  SelectMode,\n  SelectType,\n  TabAsField,\n  TypedUser,\n} from 'payload'\n\nimport { getBlockSelect, getDefaultValue, stripUnselectedFields } from 'payload'\nimport { fieldAffectsData, tabHasName } from 'payload/shared'\n\nimport { iterateFields } from './iterateFields.js'\n\ntype Args<T> = {\n  data: T\n  field: Field | TabAsField\n  id?: number | string\n  locale: string | undefined\n  req: PayloadRequest\n  select?: SelectType\n  selectMode?: SelectMode\n  siblingData: Data\n  user: TypedUser\n}\n\n// TODO: Make this works for rich text subfields\nexport const defaultValuePromise = async <T>({\n  id,\n  data,\n  field,\n  locale,\n  req,\n  select,\n  selectMode,\n  siblingData,\n  user,\n}: Args<T>): Promise<void> => {\n  const shouldContinue = stripUnselectedFields({\n    field,\n    select,\n    selectMode,\n    siblingDoc: siblingData,\n  })\n\n  if (!shouldContinue) {\n    return\n  }\n\n  if (fieldAffectsData(field)) {\n    if (\n      typeof siblingData[field.name] === 'undefined' &&\n      typeof field.defaultValue !== 'undefined'\n    ) {\n      try {\n        siblingData[field.name] = await getDefaultValue({\n          defaultValue: field.defaultValue,\n          locale,\n          req,\n          user,\n          value: siblingData[field.name],\n        })\n      } catch (err) {\n        req.payload.logger.error({\n          err,\n          msg: `Error calculating default value for field: ${field.name}`,\n        })\n      }\n    }\n  }\n\n  // Traverse subfields\n  switch (field.type) {\n    case 'array': {\n      const rows = siblingData[field.name]\n\n      if (Array.isArray(rows)) {\n        const promises = []\n        const arraySelect = select?.[field.name]\n\n        rows.forEach((row) => {\n          promises.push(\n            iterateFields({\n              id,\n              data,\n              fields: field.fields,\n              locale,\n              req,\n              select: typeof arraySelect === 'object' ? arraySelect : undefined,\n              selectMode,\n              siblingData: row,\n              user,\n            }),\n          )\n        })\n\n        await Promise.all(promises)\n      }\n      break\n    }\n\n    case 'blocks': {\n      const rows = siblingData[field.name]\n\n      if (Array.isArray(rows)) {\n        const promises = []\n\n        rows.forEach((row) => {\n          const blockTypeToMatch: string = row.blockType\n\n          const block =\n            req.payload.blocks[blockTypeToMatch] ??\n            ((field.blockReferences ?? field.blocks).find(\n              (blockType) => typeof blockType !== 'string' && blockType.slug === blockTypeToMatch,\n            ) as FlattenedBlock | undefined)\n\n          const { blockSelect, blockSelectMode } = getBlockSelect({\n            block,\n            select: select?.[field.name],\n            selectMode,\n          })\n\n          if (block) {\n            row.blockType = blockTypeToMatch\n\n            promises.push(\n              iterateFields({\n                id,\n                data,\n                fields: block.fields,\n                locale,\n                req,\n                select: typeof blockSelect === 'object' ? blockSelect : undefined,\n                selectMode: blockSelectMode,\n                siblingData: row,\n                user,\n              }),\n            )\n          }\n        })\n        await Promise.all(promises)\n      }\n\n      break\n    }\n\n    case 'collapsible':\n    case 'row': {\n      await iterateFields({\n        id,\n        data,\n        fields: field.fields,\n        locale,\n        req,\n        select,\n        selectMode,\n        siblingData,\n        user,\n      })\n\n      break\n    }\n    case 'group': {\n      if (fieldAffectsData(field)) {\n        if (typeof siblingData[field.name] !== 'object') {\n          siblingData[field.name] = {}\n        }\n\n        const groupData = siblingData[field.name] as Record<string, unknown>\n\n        const groupSelect = select?.[field.name]\n\n        await iterateFields({\n          id,\n          data,\n          fields: field.fields,\n          locale,\n          req,\n          select: typeof groupSelect === 'object' ? groupSelect : undefined,\n          selectMode,\n          siblingData: groupData,\n          user,\n        })\n      } else {\n        await iterateFields({\n          id,\n          data,\n          fields: field.fields,\n          locale,\n          req,\n          select,\n          selectMode,\n          siblingData,\n          user,\n        })\n      }\n\n      break\n    }\n\n    case 'tab': {\n      let tabSiblingData\n\n      const isNamedTab = tabHasName(field)\n\n      let tabSelect: SelectType | undefined\n\n      if (isNamedTab) {\n        if (typeof siblingData[field.name] !== 'object') {\n          siblingData[field.name] = {}\n        }\n\n        tabSiblingData = siblingData[field.name] as Record<string, unknown>\n\n        if (typeof select?.[field.name] === 'object') {\n          tabSelect = select?.[field.name] as SelectType\n        }\n      } else {\n        tabSiblingData = siblingData\n        tabSelect = select\n      }\n\n      await iterateFields({\n        id,\n        data,\n        fields: field.fields,\n        locale,\n        req,\n        select: tabSelect,\n        selectMode,\n        siblingData: tabSiblingData,\n        user,\n      })\n\n      break\n    }\n\n    case 'tabs': {\n      await iterateFields({\n        id,\n        data,\n        fields: field.tabs.map((tab) => ({ ...tab, type: 'tab' })),\n        locale,\n        req,\n        select,\n        selectMode,\n        siblingData,\n        user,\n      })\n\n      break\n    }\n\n    default: {\n      break\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}