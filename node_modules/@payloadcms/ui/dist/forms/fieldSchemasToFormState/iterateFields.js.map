{"version":3,"file":"iterateFields.js","names":["stripUnselectedFields","getFieldPaths","addFieldStatePromise","iterateFields","id","addErrorPathToParent","addErrorPathToParentArg","anyParentLocalized","blockData","clientFieldSchemaMap","collectionSlug","data","fields","fieldSchemaMap","filter","forceFullValue","fullData","includeSchema","mockRSCs","omitParents","operation","parentIndexPath","parentPassesCondition","parentPath","parentSchemaPath","permissions","preferences","previousFormState","readOnly","renderAllFields","renderFieldFn","req","select","selectMode","skipConditionChecks","skipValidation","state","promises","forEach","field","fieldIndex","passesCondition","indexPath","path","schemaPath","index","shouldContinue","siblingDoc","pathSegments","split","Boolean","admin","condition","user","err","payload","logger","error","msg","push","parentPermissions","Promise","all"],"sources":["../../../src/forms/fieldSchemasToFormState/iterateFields.ts"],"sourcesContent":["import type {\n  BuildFormStateArgs,\n  ClientFieldSchemaMap,\n  Data,\n  DocumentPreferences,\n  Field as FieldSchema,\n  FieldSchemaMap,\n  FormState,\n  FormStateWithoutComponents,\n  PayloadRequest,\n  SanitizedFieldsPermissions,\n  SelectMode,\n  SelectType,\n} from 'payload'\n\nimport { stripUnselectedFields } from 'payload'\nimport { getFieldPaths } from 'payload/shared'\n\nimport type { AddFieldStatePromiseArgs } from './addFieldStatePromise.js'\nimport type { RenderFieldMethod } from './types.js'\n\nimport { addFieldStatePromise } from './addFieldStatePromise.js'\n\ntype Args = {\n  addErrorPathToParent: (fieldPath: string) => void\n  /**\n   * if any parents is localized, then the field is localized. @default false\n   */\n  anyParentLocalized?: boolean\n  /**\n   * Data of the nearest parent block, or undefined\n   */\n  blockData: Data | undefined\n  clientFieldSchemaMap?: ClientFieldSchemaMap\n  collectionSlug?: string\n  data: Data\n  fields: FieldSchema[]\n  fieldSchemaMap: FieldSchemaMap\n  filter?: (args: AddFieldStatePromiseArgs) => boolean\n  /**\n   * Force the value of fields like arrays or blocks to be the full value instead of the length @default false\n   */\n  forceFullValue?: boolean\n  fullData: Data\n  id?: number | string\n  /**\n   * Whether the field schema should be included in the state. @default false\n   */\n  includeSchema?: boolean\n  mockRSCs?: BuildFormStateArgs['mockRSCs']\n  /**\n   * Whether to omit parent fields in the state. @default false\n   */\n  omitParents?: boolean\n  /**\n   * operation is only needed for validation\n   */\n  operation: 'create' | 'update'\n  parentIndexPath: string\n  parentPassesCondition?: boolean\n  parentPath: string\n  parentSchemaPath: string\n  permissions: SanitizedFieldsPermissions\n  preferences?: DocumentPreferences\n  previousFormState: FormState\n  readOnly?: boolean\n  renderAllFields: boolean\n  renderFieldFn: RenderFieldMethod\n  req: PayloadRequest\n  select?: SelectType\n  selectMode?: SelectMode\n  /**\n   * Whether to skip checking the field's condition. @default false\n   */\n  skipConditionChecks?: boolean\n  /**\n   * Whether to skip validating the field. @default false\n   */\n  skipValidation?: boolean\n  state?: FormStateWithoutComponents\n}\n\n/**\n * Flattens the fields schema and fields data\n */\nexport const iterateFields = async ({\n  id,\n  addErrorPathToParent: addErrorPathToParentArg,\n  anyParentLocalized = false,\n  blockData,\n  clientFieldSchemaMap,\n  collectionSlug,\n  data,\n  fields,\n  fieldSchemaMap,\n  filter,\n  forceFullValue = false,\n  fullData,\n  includeSchema = false,\n  mockRSCs,\n  omitParents = false,\n  operation,\n  parentIndexPath,\n  parentPassesCondition = true,\n  parentPath,\n  parentSchemaPath,\n  permissions,\n  preferences,\n  previousFormState,\n  readOnly,\n  renderAllFields,\n  renderFieldFn: renderFieldFn,\n  req,\n  select,\n  selectMode,\n  skipConditionChecks = false,\n  skipValidation = false,\n  state = {},\n}: Args): Promise<void> => {\n  const promises = []\n\n  fields.forEach((field, fieldIndex) => {\n    let passesCondition = true\n\n    const { indexPath, path, schemaPath } = getFieldPaths({\n      field,\n      index: fieldIndex,\n      parentIndexPath: 'name' in field ? '' : parentIndexPath,\n      parentPath,\n      parentSchemaPath,\n    })\n\n    if (path !== 'id') {\n      const shouldContinue = stripUnselectedFields({\n        field,\n        select,\n        selectMode,\n        siblingDoc: data,\n      })\n\n      if (!shouldContinue) {\n        return\n      }\n    }\n\n    const pathSegments = path ? path.split('.') : []\n\n    if (!skipConditionChecks) {\n      try {\n        passesCondition = Boolean(\n          (field?.admin?.condition\n            ? Boolean(\n                field.admin.condition(fullData || {}, data || {}, {\n                  blockData,\n                  operation,\n                  path: pathSegments,\n                  user: req.user,\n                }),\n              )\n            : true) && parentPassesCondition,\n        )\n      } catch (err) {\n        passesCondition = false\n\n        req.payload.logger.error({\n          err,\n          msg: `Error evaluating field condition at path: ${path}`,\n        })\n      }\n    }\n\n    promises.push(\n      addFieldStatePromise({\n        id,\n        addErrorPathToParent: addErrorPathToParentArg,\n        anyParentLocalized,\n        blockData,\n        clientFieldSchemaMap,\n        collectionSlug,\n        data,\n        field,\n        fieldIndex,\n        fieldSchemaMap,\n        filter,\n        forceFullValue,\n        fullData,\n        includeSchema,\n        indexPath,\n        mockRSCs,\n        omitParents,\n        operation,\n        parentIndexPath,\n        parentPath,\n        parentPermissions: permissions,\n        parentSchemaPath,\n        passesCondition,\n        path,\n        preferences,\n        previousFormState,\n        readOnly,\n        renderAllFields,\n        renderFieldFn,\n        req,\n        schemaPath,\n        select,\n        selectMode,\n        skipConditionChecks,\n        skipValidation,\n        state,\n      }),\n    )\n  })\n\n  await Promise.all(promises)\n}\n"],"mappings":"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","ignoreList":[]}