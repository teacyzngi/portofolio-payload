{"version":3,"file":"renderFieldServerFn.js","names":["deepMerge","getClientConfig","getClientSchemaMap","getSchemaMap","renderField","_internal_renderFieldHandler","field","fieldArg","initialValue","path","req","schemaPath","user","Error","entityType","entitySlug","fieldPath","split","schemaMap","collectionSlug","undefined","config","payload","globalSlug","i18n","clientSchemaMap","importMap","targetField","get","join","clone","data","name","fieldState","clientFieldSchemaMap","fieldConfig","fieldSchemaMap","formState","indexPath","lastRenderedPath","operation","parentPath","parentSchemaPath","permissions","preferences","fields","forceCreateClientField","previousFieldState","renderAllFields","siblingData","customComponents"],"sources":["../../../../src/forms/fieldSchemasToFormState/serverFunctions/renderFieldServerFn.ts"],"sourcesContent":["import { deepMerge, type Field, type FieldState, type ServerFunction } from 'payload'\n\nimport { getClientConfig } from '../../../utilities/getClientConfig.js'\nimport { getClientSchemaMap } from '../../../utilities/getClientSchemaMap.js'\nimport { getSchemaMap } from '../../../utilities/getSchemaMap.js'\nimport { renderField } from '../renderField.js'\n\nexport type RenderFieldServerFnArgs<TField = Field> = {\n  /**\n   * Override field config pulled from schemaPath lookup\n   */\n  field?: Partial<TField>\n  /**\n   * Pass the value this field will receive when rendering it on the server.\n   * For richText, this helps provide initial state for sub-fields that are immediately rendered (like blocks)\n   * so that we can avoid multiple waterfall requests for each block that renders on the client.\n   */\n  initialValue?: unknown\n  /**\n   * Path to the field to render\n   * @default field name\n   */\n  path?: string\n  /**\n   * Dot schema path to a richText field declared in your config.\n   * Format:\n   *   \"collection.<collectionSlug>.<fieldPath>\"\n   *   \"global.<globalSlug>.<fieldPath>\"\n   *\n   * Examples:\n   *   \"collection.posts.richText\"\n   *   \"global.siteSettings.content\"\n   */\n  schemaPath: string\n}\nexport type RenderFieldServerFnReturnType = {} & FieldState['customComponents']\n\n/**\n * @experimental - may break in minor releases\n */\nexport const _internal_renderFieldHandler: ServerFunction<\n  RenderFieldServerFnArgs,\n  Promise<RenderFieldServerFnReturnType>\n  // eslint-disable-next-line @typescript-eslint/require-await\n> = async ({ field: fieldArg, initialValue, path, req, schemaPath }) => {\n  if (!req.user) {\n    throw new Error('Unauthorized')\n  }\n\n  const [entityType, entitySlug, ...fieldPath] = schemaPath.split('.')\n\n  const schemaMap = getSchemaMap({\n    collectionSlug: entityType === 'collection' ? entitySlug : undefined,\n    config: req.payload.config,\n    globalSlug: entityType === 'global' ? entitySlug : undefined,\n    i18n: req.i18n,\n  })\n\n  // Provide client schema map as it would have been provided if the target editor field would have been rendered.\n  // For lexical, only then will it contain all the lexical-internal entries\n  const clientSchemaMap = getClientSchemaMap({\n    collectionSlug: entityType === 'collection' ? entitySlug : undefined,\n    config: getClientConfig({\n      config: req.payload.config,\n      i18n: req.i18n,\n      importMap: req.payload.importMap,\n      user: req.user,\n    }),\n    globalSlug: entityType === 'global' ? entitySlug : undefined,\n    i18n: req.i18n,\n    payload: req.payload,\n    schemaMap,\n  })\n\n  const targetField = schemaMap.get(`${entitySlug}.${fieldPath.join('.')}`) as Field | undefined\n\n  if (!targetField) {\n    throw new Error(`Could not find target field at schemaPath: ${schemaPath}`)\n  }\n\n  const field: Field = fieldArg ? deepMerge(targetField, fieldArg, { clone: false }) : targetField\n\n  let data = {}\n  if (typeof initialValue !== 'undefined') {\n    if ('name' in field) {\n      data[field.name] = initialValue\n    } else {\n      data = initialValue\n    }\n  }\n\n  const fieldState: FieldState = {}\n  renderField({\n    clientFieldSchemaMap: clientSchemaMap,\n    collectionSlug: entityType === 'collection' && entitySlug ? entitySlug : '-',\n    data,\n    fieldConfig: field,\n    fieldSchemaMap: schemaMap,\n    fieldState, // TODO,\n    formState: {}, // TODO,\n    indexPath: '',\n    lastRenderedPath: '',\n    operation: 'create',\n    parentPath: '',\n    parentSchemaPath: '',\n    path: path ?? ('name' in field ? field.name : ''),\n    permissions: true,\n    preferences: {\n      fields: {},\n    },\n    // If we are passed a field override, we want to ensure we create a new client field based on that override\n    forceCreateClientField: fieldArg ? true : false,\n    previousFieldState: undefined,\n    renderAllFields: true,\n    req,\n    schemaPath: `${entitySlug}.${fieldPath.join('.')}`,\n    siblingData: data,\n  })\n\n  return fieldState.customComponents ?? {}\n}\n"],"mappings":"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","ignoreList":[]}