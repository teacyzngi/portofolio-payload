{"version":3,"file":"index.js","names":["DefaultListView","HydrateAuthProvider","ListQueryProvider","RenderServerComponent","getColumns","renderFilters","renderTable","upsertPreferences","notFound","appendUploadSelectFields","combineWhereConstraints","formatAdminURL","isNumber","mergeListSearchAndWhere","transformColumnsToPreferences","transformColumnsToSearchParams","React","Fragment","getDocumentPermissions","handleGroupBy","renderListViewSlots","resolveAllFilterOptions","transformColumnsToSelect","renderListView","args","clientConfig","ComponentOverride","customCellProps","disableBulkDelete","disableBulkEdit","disableQueryPresets","drawerSlug","enableRowSelections","initPageResult","overrideEntityVisibility","params","query","queryFromArgs","searchParams","trash","viewType","collectionConfig","slug","collectionSlug","locale","fullLocale","permissions","req","i18n","payload","config","queryFromReq","user","visibleEntities","collections","read","Error","columnsFromQuery","columns","queryByGroup","JSON","parse","collectionPreferences","key","value","groupBy","limit","Number","undefined","preset","sort","page","admin","pagination","defaultLimit","defaultSort","routes","adminRoute","includes","baseFilterConstraint","baseFilter","baseListFilter","queryPreset","queryPresetPermissions","whereWithMergedSearch","search","where","and","deletedAt","exists","findByID","id","collection","depth","overrideAccess","find","c","data","then","docPermissions","err","logger","error","Table","columnState","docs","hasNextPage","hasPrevPage","nextPage","pagingCounter","prevPage","totalDocs","totalPages","clientCollectionConfig","select","enableListViewSelectAPI","fieldPermissions","fields","draft","fallbackLocale","includeLockStatus","orderableFieldName","orderable","useAsTitle","name","msg","renderedFilters","importMap","resolvedFilterOptions","staticDescription","description","t","newDocumentURL","path","hasCreatePermission","create","hasDeletePermission","delete","notFoundDocId","serverProps","listPreferences","listSearchableFields","listViewSlots","clientProps","isInDrawer","Boolean","stringify","List","_jsxs","_jsx","modifySearchParams","Component","components","views","list","Fallback","ListView","RenderedList","message","console"],"sources":["../../../src/views/List/index.tsx"],"sourcesContent":["import type {\n  AdminViewServerProps,\n  CollectionPreferences,\n  Column,\n  ColumnPreference,\n  ListQuery,\n  ListViewClientProps,\n  ListViewServerPropsOnly,\n  PaginatedDocs,\n  PayloadComponent,\n  QueryPreset,\n  SanitizedCollectionPermission,\n} from 'payload'\n\nimport { DefaultListView, HydrateAuthProvider, ListQueryProvider } from '@payloadcms/ui'\nimport { RenderServerComponent } from '@payloadcms/ui/elements/RenderServerComponent'\nimport { getColumns, renderFilters, renderTable, upsertPreferences } from '@payloadcms/ui/rsc'\nimport { notFound } from 'next/navigation.js'\nimport {\n  appendUploadSelectFields,\n  combineWhereConstraints,\n  formatAdminURL,\n  isNumber,\n  mergeListSearchAndWhere,\n  transformColumnsToPreferences,\n  transformColumnsToSearchParams,\n} from 'payload/shared'\nimport React, { Fragment } from 'react'\n\nimport { getDocumentPermissions } from '../Document/getDocumentPermissions.js'\nimport { handleGroupBy } from './handleGroupBy.js'\nimport { renderListViewSlots } from './renderListViewSlots.js'\nimport { resolveAllFilterOptions } from './resolveAllFilterOptions.js'\nimport { transformColumnsToSelect } from './transformColumnsToSelect.js'\n\n/**\n * @internal\n */\nexport type RenderListViewArgs = {\n  /**\n   * Allows providing your own list view component. This will override the default list view component and\n   * the collection's configured list view component (if any).\n   */\n  ComponentOverride?:\n    | PayloadComponent\n    | React.ComponentType<ListViewClientProps | (ListViewClientProps & ListViewServerPropsOnly)>\n  customCellProps?: Record<string, any>\n  disableBulkDelete?: boolean\n  disableBulkEdit?: boolean\n  disableQueryPresets?: boolean\n  drawerSlug?: string\n  enableRowSelections: boolean\n  overrideEntityVisibility?: boolean\n  /**\n   * If not ListQuery is provided, `req.query` will be used.\n   */\n  query?: ListQuery\n  redirectAfterDelete?: boolean\n  redirectAfterDuplicate?: boolean\n  /**\n   * @experimental This prop is subject to change in future releases.\n   */\n  trash?: boolean\n} & AdminViewServerProps\n\n/**\n * This function is responsible for rendering\n * the list view on the server for both:\n *  - default list view\n *  - list view within drawers\n *\n * @internal\n */\nexport const renderListView = async (\n  args: RenderListViewArgs,\n): Promise<{\n  List: React.ReactNode\n}> => {\n  const {\n    clientConfig,\n    ComponentOverride,\n    customCellProps,\n    disableBulkDelete,\n    disableBulkEdit,\n    disableQueryPresets,\n    drawerSlug,\n    enableRowSelections,\n    initPageResult,\n    overrideEntityVisibility,\n    params,\n    query: queryFromArgs,\n    searchParams,\n    trash,\n    viewType,\n  } = args\n\n  const {\n    collectionConfig,\n    collectionConfig: { slug: collectionSlug },\n    locale: fullLocale,\n    permissions,\n    req,\n    req: {\n      i18n,\n      payload,\n      payload: { config },\n      query: queryFromReq,\n      user,\n    },\n    visibleEntities,\n  } = initPageResult\n\n  if (!permissions?.collections?.[collectionSlug]?.read) {\n    throw new Error('not-found')\n  }\n\n  const query: ListQuery = queryFromArgs || queryFromReq\n\n  const columnsFromQuery: ColumnPreference[] = transformColumnsToPreferences(query?.columns)\n\n  query.queryByGroup =\n    query?.queryByGroup && typeof query.queryByGroup === 'string'\n      ? JSON.parse(query.queryByGroup)\n      : query?.queryByGroup\n\n  const collectionPreferences = await upsertPreferences<CollectionPreferences>({\n    key: `collection-${collectionSlug}`,\n    req,\n    value: {\n      columns: columnsFromQuery,\n      groupBy: query?.groupBy,\n      limit: isNumber(query?.limit) ? Number(query.limit) : undefined,\n      preset: query?.preset,\n      sort: query?.sort as string,\n    },\n  })\n\n  query.preset = collectionPreferences?.preset\n\n  query.page = isNumber(query?.page) ? Number(query.page) : 0\n\n  query.limit = collectionPreferences?.limit || collectionConfig.admin.pagination.defaultLimit\n\n  query.sort =\n    collectionPreferences?.sort ||\n    (typeof collectionConfig.defaultSort === 'string' ? collectionConfig.defaultSort : undefined)\n\n  query.groupBy = collectionPreferences?.groupBy\n\n  query.columns = transformColumnsToSearchParams(collectionPreferences?.columns || [])\n\n  const {\n    routes: { admin: adminRoute },\n  } = config\n\n  if (collectionConfig) {\n    if (!visibleEntities.collections.includes(collectionSlug) && !overrideEntityVisibility) {\n      throw new Error('not-found')\n    }\n\n    const baseFilterConstraint = await (\n      collectionConfig.admin?.baseFilter ?? collectionConfig.admin?.baseListFilter\n    )?.({\n      limit: query.limit,\n      page: query.page,\n      req,\n      sort: query.sort,\n    })\n\n    let queryPreset: QueryPreset | undefined\n    let queryPresetPermissions: SanitizedCollectionPermission | undefined\n\n    let whereWithMergedSearch = mergeListSearchAndWhere({\n      collectionConfig,\n      search: typeof query?.search === 'string' ? query.search : undefined,\n      where: combineWhereConstraints([query?.where, baseFilterConstraint]),\n    })\n\n    if (trash === true) {\n      whereWithMergedSearch = {\n        and: [\n          whereWithMergedSearch,\n          {\n            deletedAt: {\n              exists: true,\n            },\n          },\n        ],\n      }\n    }\n\n    if (collectionPreferences?.preset) {\n      try {\n        queryPreset = (await payload.findByID({\n          id: collectionPreferences?.preset,\n          collection: 'payload-query-presets',\n          depth: 0,\n          overrideAccess: false,\n          user,\n        })) as QueryPreset\n\n        if (queryPreset) {\n          queryPresetPermissions = await getDocumentPermissions({\n            id: queryPreset.id,\n            collectionConfig: config.collections.find((c) => c.slug === 'payload-query-presets'),\n            data: queryPreset,\n            req,\n          })?.then(({ docPermissions }) => docPermissions)\n        }\n      } catch (err) {\n        req.payload.logger.error(`Error fetching query preset or preset permissions: ${err}`)\n      }\n    }\n\n    let Table: React.ReactNode | React.ReactNode[] = null\n    let columnState: Column[] = []\n    let data: PaginatedDocs = {\n      // no results default\n      docs: [],\n      hasNextPage: false,\n      hasPrevPage: false,\n      limit: query.limit,\n      nextPage: null,\n      page: 1,\n      pagingCounter: 0,\n      prevPage: null,\n      totalDocs: 0,\n      totalPages: 0,\n    }\n\n    const clientCollectionConfig = clientConfig.collections.find((c) => c.slug === collectionSlug)\n\n    const columns = getColumns({\n      clientConfig,\n      collectionConfig: clientCollectionConfig,\n      collectionSlug,\n      columns: collectionPreferences?.columns,\n      i18n,\n      permissions,\n    })\n\n    const select = collectionConfig.admin.enableListViewSelectAPI\n      ? transformColumnsToSelect(columns)\n      : undefined\n\n    /** Force select image fields for list view thumbnails */\n    appendUploadSelectFields({\n      collectionConfig,\n      select,\n    })\n\n    try {\n      if (collectionConfig.admin.groupBy && query.groupBy) {\n        ;({ columnState, data, Table } = await handleGroupBy({\n          clientCollectionConfig,\n          clientConfig,\n          collectionConfig,\n          collectionSlug,\n          columns,\n          customCellProps,\n          drawerSlug,\n          enableRowSelections,\n          fieldPermissions: permissions?.collections?.[collectionSlug]?.fields,\n          query,\n          req,\n          select,\n          trash,\n          user,\n          viewType,\n          where: whereWithMergedSearch,\n        }))\n      } else {\n        data = await req.payload.find({\n          collection: collectionSlug,\n          depth: 0,\n          draft: true,\n          fallbackLocale: false,\n          includeLockStatus: true,\n          limit: query?.limit ? Number(query.limit) : undefined,\n          locale: req.locale,\n          overrideAccess: false,\n          page: query?.page ? Number(query.page) : undefined,\n          req,\n          select,\n          sort: query?.sort,\n          trash,\n          user,\n          where: whereWithMergedSearch,\n        })\n        ;({ columnState, Table } = renderTable({\n          clientCollectionConfig,\n          collectionConfig,\n          columns,\n          customCellProps,\n          data,\n          drawerSlug,\n          enableRowSelections,\n          fieldPermissions: permissions?.collections?.[collectionSlug]?.fields,\n          i18n: req.i18n,\n          orderableFieldName: collectionConfig.orderable === true ? '_order' : undefined,\n          payload: req.payload,\n          query,\n          req,\n          useAsTitle: collectionConfig.admin.useAsTitle,\n          viewType,\n        }))\n      }\n    } catch (err) {\n      if (err.name !== 'QueryError') {\n        // QueryErrors are expected when a user filters by a field they do not have access to\n        req.payload.logger.error({\n          err,\n          msg: `There was an error fetching the list view data for collection ${collectionSlug}`,\n        })\n        throw err\n      }\n    }\n\n    const renderedFilters = renderFilters(collectionConfig.fields, req.payload.importMap)\n\n    const resolvedFilterOptions = await resolveAllFilterOptions({\n      fields: collectionConfig.fields,\n      req,\n    })\n\n    const staticDescription =\n      typeof collectionConfig.admin.description === 'function'\n        ? collectionConfig.admin.description({ t: i18n.t })\n        : collectionConfig.admin.description\n\n    const newDocumentURL = formatAdminURL({\n      adminRoute,\n      path: `/collections/${collectionSlug}/create`,\n    })\n\n    const hasCreatePermission = permissions?.collections?.[collectionSlug]?.create\n    const hasDeletePermission = permissions?.collections?.[collectionSlug]?.delete\n\n    // Check if there's a notFound query parameter (document ID that wasn't found)\n    const notFoundDocId = typeof searchParams?.notFound === 'string' ? searchParams.notFound : null\n\n    const serverProps: ListViewServerPropsOnly = {\n      collectionConfig,\n      data,\n      i18n,\n      limit: query.limit,\n      listPreferences: collectionPreferences,\n      listSearchableFields: collectionConfig.admin.listSearchableFields,\n      locale: fullLocale,\n      params,\n      payload,\n      permissions,\n      searchParams,\n      user,\n    }\n\n    const listViewSlots = renderListViewSlots({\n      clientProps: {\n        collectionSlug,\n        hasCreatePermission,\n        hasDeletePermission,\n        newDocumentURL,\n      },\n      collectionConfig,\n      description: staticDescription,\n      notFoundDocId,\n      payload,\n      serverProps,\n    })\n\n    const isInDrawer = Boolean(drawerSlug)\n\n    // Needed to prevent: Only plain objects can be passed to Client Components from Server Components. Objects with toJSON methods are not supported. Convert it manually to a simple value before passing it to props.\n    // Is there a way to avoid this? The `where` object is already seemingly plain, but is not bc it originates from the params.\n    query.where = query?.where ? JSON.parse(JSON.stringify(query?.where || {})) : undefined\n\n    return {\n      List: (\n        <Fragment>\n          <HydrateAuthProvider permissions={permissions} />\n          <ListQueryProvider\n            collectionSlug={collectionSlug}\n            data={data}\n            modifySearchParams={!isInDrawer}\n            orderableFieldName={collectionConfig.orderable === true ? '_order' : undefined}\n            query={query}\n          >\n            {RenderServerComponent({\n              clientProps: {\n                ...listViewSlots,\n                collectionSlug,\n                columnState,\n                disableBulkDelete,\n                disableBulkEdit: collectionConfig.disableBulkEdit ?? disableBulkEdit,\n                disableQueryPresets,\n                enableRowSelections,\n                hasCreatePermission,\n                hasDeletePermission,\n                listPreferences: collectionPreferences,\n                newDocumentURL,\n                queryPreset,\n                queryPresetPermissions,\n                renderedFilters,\n                resolvedFilterOptions,\n                Table,\n                viewType,\n              } satisfies ListViewClientProps,\n              Component:\n                ComponentOverride ?? collectionConfig?.admin?.components?.views?.list?.Component,\n              Fallback: DefaultListView,\n              importMap: payload.importMap,\n              serverProps,\n            })}\n          </ListQueryProvider>\n        </Fragment>\n      ),\n    }\n  }\n\n  throw new Error('not-found')\n}\n\nexport const ListView: React.FC<RenderListViewArgs> = async (args) => {\n  try {\n    const { List: RenderedList } = await renderListView({ ...args, enableRowSelections: true })\n    return RenderedList\n  } catch (error) {\n    if (error.message === 'not-found') {\n      notFound()\n    } else {\n      console.error(error) // eslint-disable-line no-console\n    }\n  }\n}\n"],"mappings":";AAcA,SAASA,eAAe,EAAEC,mBAAmB,EAAEC,iBAAiB,QAAQ;AACxE,SAASC,qBAAqB,QAAQ;AACtC,SAASC,UAAU,EAAEC,aAAa,EAAEC,WAAW,EAAEC,iBAAiB,QAAQ;AAC1E,SAASC,QAAQ,QAAQ;AACzB,SACEC,wBAAwB,EACxBC,uBAAuB,EACvBC,cAAc,EACdC,QAAQ,EACRC,uBAAuB,EACvBC,6BAA6B,EAC7BC,8BAA8B,QACzB;AACP,OAAOC,KAAA,IAASC,QAAQ,QAAQ;AAEhC,SAASC,sBAAsB,QAAQ;AACvC,SAASC,aAAa,QAAQ;AAC9B,SAASC,mBAAmB,QAAQ;AACpC,SAASC,uBAAuB,QAAQ;AACxC,SAASC,wBAAwB,QAAQ;AAgCzC;;;;;;;;AAQA,OAAO,MAAMC,cAAA,GAAiB,MAC5BC,IAAA;EAIA,MAAM;IACJC,YAAY;IACZC,iBAAiB;IACjBC,eAAe;IACfC,iBAAiB;IACjBC,eAAe;IACfC,mBAAmB;IACnBC,UAAU;IACVC,mBAAmB;IACnBC,cAAc;IACdC,wBAAwB;IACxBC,MAAM;IACNC,KAAA,EAAOC,aAAa;IACpBC,YAAY;IACZC,KAAK;IACLC;EAAQ,CACT,GAAGhB,IAAA;EAEJ,MAAM;IACJiB,gBAAgB;IAChBA,gBAAA,EAAkB;MAAEC,IAAA,EAAMC;IAAc,CAAE;IAC1CC,MAAA,EAAQC,UAAU;IAClBC,WAAW;IACXC,GAAG;IACHA,GAAA,EAAK;MACHC,IAAI;MACJC,OAAO;MACPA,OAAA,EAAS;QAAEC;MAAM,CAAE;MACnBd,KAAA,EAAOe,YAAY;MACnBC;IAAI,CACL;IACDC;EAAe,CAChB,GAAGpB,cAAA;EAEJ,IAAI,CAACa,WAAA,EAAaQ,WAAA,GAAcX,cAAA,CAAe,EAAEY,IAAA,EAAM;IACrD,MAAM,IAAIC,KAAA,CAAM;EAClB;EAEA,MAAMpB,KAAA,GAAmBC,aAAA,IAAiBc,YAAA;EAE1C,MAAMM,gBAAA,GAAuC3C,6BAAA,CAA8BsB,KAAA,EAAOsB,OAAA;EAElFtB,KAAA,CAAMuB,YAAY,GAChBvB,KAAA,EAAOuB,YAAA,IAAgB,OAAOvB,KAAA,CAAMuB,YAAY,KAAK,WACjDC,IAAA,CAAKC,KAAK,CAACzB,KAAA,CAAMuB,YAAY,IAC7BvB,KAAA,EAAOuB,YAAA;EAEb,MAAMG,qBAAA,GAAwB,MAAMvD,iBAAA,CAAyC;IAC3EwD,GAAA,EAAK,cAAcpB,cAAA,EAAgB;IACnCI,GAAA;IACAiB,KAAA,EAAO;MACLN,OAAA,EAASD,gBAAA;MACTQ,OAAA,EAAS7B,KAAA,EAAO6B,OAAA;MAChBC,KAAA,EAAOtD,QAAA,CAASwB,KAAA,EAAO8B,KAAA,IAASC,MAAA,CAAO/B,KAAA,CAAM8B,KAAK,IAAIE,SAAA;MACtDC,MAAA,EAAQjC,KAAA,EAAOiC,MAAA;MACfC,IAAA,EAAMlC,KAAA,EAAOkC;IACf;EACF;EAEAlC,KAAA,CAAMiC,MAAM,GAAGP,qBAAA,EAAuBO,MAAA;EAEtCjC,KAAA,CAAMmC,IAAI,GAAG3D,QAAA,CAASwB,KAAA,EAAOmC,IAAA,IAAQJ,MAAA,CAAO/B,KAAA,CAAMmC,IAAI,IAAI;EAE1DnC,KAAA,CAAM8B,KAAK,GAAGJ,qBAAA,EAAuBI,KAAA,IAASzB,gBAAA,CAAiB+B,KAAK,CAACC,UAAU,CAACC,YAAY;EAE5FtC,KAAA,CAAMkC,IAAI,GACRR,qBAAA,EAAuBQ,IAAA,KACtB,OAAO7B,gBAAA,CAAiBkC,WAAW,KAAK,WAAWlC,gBAAA,CAAiBkC,WAAW,GAAGP,SAAQ;EAE7FhC,KAAA,CAAM6B,OAAO,GAAGH,qBAAA,EAAuBG,OAAA;EAEvC7B,KAAA,CAAMsB,OAAO,GAAG3C,8BAAA,CAA+B+C,qBAAA,EAAuBJ,OAAA,IAAW,EAAE;EAEnF,MAAM;IACJkB,MAAA,EAAQ;MAAEJ,KAAA,EAAOK;IAAU;EAAE,CAC9B,GAAG3B,MAAA;EAEJ,IAAIT,gBAAA,EAAkB;IACpB,IAAI,CAACY,eAAA,CAAgBC,WAAW,CAACwB,QAAQ,CAACnC,cAAA,KAAmB,CAACT,wBAAA,EAA0B;MACtF,MAAM,IAAIsB,KAAA,CAAM;IAClB;IAEA,MAAMuB,oBAAA,GAAuB,MAC3B,CAAAtC,gBAAA,CAAiB+B,KAAK,EAAEQ,UAAA,IAAcvC,gBAAA,CAAiB+B,KAAK,EAAES,cAAa,IACzE;MACFf,KAAA,EAAO9B,KAAA,CAAM8B,KAAK;MAClBK,IAAA,EAAMnC,KAAA,CAAMmC,IAAI;MAChBxB,GAAA;MACAuB,IAAA,EAAMlC,KAAA,CAAMkC;IACd;IAEA,IAAIY,WAAA;IACJ,IAAIC,sBAAA;IAEJ,IAAIC,qBAAA,GAAwBvE,uBAAA,CAAwB;MAClD4B,gBAAA;MACA4C,MAAA,EAAQ,OAAOjD,KAAA,EAAOiD,MAAA,KAAW,WAAWjD,KAAA,CAAMiD,MAAM,GAAGjB,SAAA;MAC3DkB,KAAA,EAAO5E,uBAAA,CAAwB,CAAC0B,KAAA,EAAOkD,KAAA,EAAOP,oBAAA,CAAqB;IACrE;IAEA,IAAIxC,KAAA,KAAU,MAAM;MAClB6C,qBAAA,GAAwB;QACtBG,GAAA,EAAK,CACHH,qBAAA,EACA;UACEI,SAAA,EAAW;YACTC,MAAA,EAAQ;UACV;QACF;MAEJ;IACF;IAEA,IAAI3B,qBAAA,EAAuBO,MAAA,EAAQ;MACjC,IAAI;QACFa,WAAA,GAAe,MAAMjC,OAAA,CAAQyC,QAAQ,CAAC;UACpCC,EAAA,EAAI7B,qBAAA,EAAuBO,MAAA;UAC3BuB,UAAA,EAAY;UACZC,KAAA,EAAO;UACPC,cAAA,EAAgB;UAChB1C;QACF;QAEA,IAAI8B,WAAA,EAAa;UACfC,sBAAA,GAAyB,MAAMjE,sBAAA,CAAuB;YACpDyE,EAAA,EAAIT,WAAA,CAAYS,EAAE;YAClBlD,gBAAA,EAAkBS,MAAA,CAAOI,WAAW,CAACyC,IAAI,CAAEC,CAAA,IAAMA,CAAA,CAAEtD,IAAI,KAAK;YAC5DuD,IAAA,EAAMf,WAAA;YACNnC;UACF,IAAImD,IAAA,CAAK,CAAC;YAAEC;UAAc,CAAE,KAAKA,cAAA;QACnC;MACF,EAAE,OAAOC,GAAA,EAAK;QACZrD,GAAA,CAAIE,OAAO,CAACoD,MAAM,CAACC,KAAK,CAAC,sDAAsDF,GAAA,EAAK;MACtF;IACF;IAEA,IAAIG,KAAA,GAA6C;IACjD,IAAIC,WAAA,GAAwB,EAAE;IAC9B,IAAIP,IAAA,GAAsB;MACxB;MACAQ,IAAA,EAAM,EAAE;MACRC,WAAA,EAAa;MACbC,WAAA,EAAa;MACbzC,KAAA,EAAO9B,KAAA,CAAM8B,KAAK;MAClB0C,QAAA,EAAU;MACVrC,IAAA,EAAM;MACNsC,aAAA,EAAe;MACfC,QAAA,EAAU;MACVC,SAAA,EAAW;MACXC,UAAA,EAAY;IACd;IAEA,MAAMC,sBAAA,GAAyBxF,YAAA,CAAa6B,WAAW,CAACyC,IAAI,CAAEC,CAAA,IAAMA,CAAA,CAAEtD,IAAI,KAAKC,cAAA;IAE/E,MAAMe,OAAA,GAAUtD,UAAA,CAAW;MACzBqB,YAAA;MACAgB,gBAAA,EAAkBwE,sBAAA;MAClBtE,cAAA;MACAe,OAAA,EAASI,qBAAA,EAAuBJ,OAAA;MAChCV,IAAA;MACAF;IACF;IAEA,MAAMoE,MAAA,GAASzE,gBAAA,CAAiB+B,KAAK,CAAC2C,uBAAuB,GACzD7F,wBAAA,CAAyBoC,OAAA,IACzBU,SAAA;IAEJ;IACA3D,wBAAA,CAAyB;MACvBgC,gBAAA;MACAyE;IACF;IAEA,IAAI;MACF,IAAIzE,gBAAA,CAAiB+B,KAAK,CAACP,OAAO,IAAI7B,KAAA,CAAM6B,OAAO,EAAE;QACjD;UAAEuC,WAAW;UAAEP,IAAI;UAAEM;QAAK,CAAE,GAAG,MAAMpF,aAAA,CAAc;UACnD8F,sBAAA;UACAxF,YAAA;UACAgB,gBAAA;UACAE,cAAA;UACAe,OAAA;UACA/B,eAAA;UACAI,UAAA;UACAC,mBAAA;UACAoF,gBAAA,EAAkBtE,WAAA,EAAaQ,WAAA,GAAcX,cAAA,CAAe,EAAE0E,MAAA;UAC9DjF,KAAA;UACAW,GAAA;UACAmE,MAAA;UACA3E,KAAA;UACAa,IAAA;UACAZ,QAAA;UACA8C,KAAA,EAAOF;QACT,EAAC;MACH,OAAO;QACLa,IAAA,GAAO,MAAMlD,GAAA,CAAIE,OAAO,CAAC8C,IAAI,CAAC;UAC5BH,UAAA,EAAYjD,cAAA;UACZkD,KAAA,EAAO;UACPyB,KAAA,EAAO;UACPC,cAAA,EAAgB;UAChBC,iBAAA,EAAmB;UACnBtD,KAAA,EAAO9B,KAAA,EAAO8B,KAAA,GAAQC,MAAA,CAAO/B,KAAA,CAAM8B,KAAK,IAAIE,SAAA;UAC5CxB,MAAA,EAAQG,GAAA,CAAIH,MAAM;UAClBkD,cAAA,EAAgB;UAChBvB,IAAA,EAAMnC,KAAA,EAAOmC,IAAA,GAAOJ,MAAA,CAAO/B,KAAA,CAAMmC,IAAI,IAAIH,SAAA;UACzCrB,GAAA;UACAmE,MAAA;UACA5C,IAAA,EAAMlC,KAAA,EAAOkC,IAAA;UACb/B,KAAA;UACAa,IAAA;UACAkC,KAAA,EAAOF;QACT;QACE;UAAEoB,WAAW;UAAED;QAAK,CAAE,GAAGjG,WAAA,CAAY;UACrC2G,sBAAA;UACAxE,gBAAA;UACAiB,OAAA;UACA/B,eAAA;UACAsE,IAAA;UACAlE,UAAA;UACAC,mBAAA;UACAoF,gBAAA,EAAkBtE,WAAA,EAAaQ,WAAA,GAAcX,cAAA,CAAe,EAAE0E,MAAA;UAC9DrE,IAAA,EAAMD,GAAA,CAAIC,IAAI;UACdyE,kBAAA,EAAoBhF,gBAAA,CAAiBiF,SAAS,KAAK,OAAO,WAAWtD,SAAA;UACrEnB,OAAA,EAASF,GAAA,CAAIE,OAAO;UACpBb,KAAA;UACAW,GAAA;UACA4E,UAAA,EAAYlF,gBAAA,CAAiB+B,KAAK,CAACmD,UAAU;UAC7CnF;QACF,EAAC;MACH;IACF,EAAE,OAAO4D,GAAA,EAAK;MACZ,IAAIA,GAAA,CAAIwB,IAAI,KAAK,cAAc;QAC7B;QACA7E,GAAA,CAAIE,OAAO,CAACoD,MAAM,CAACC,KAAK,CAAC;UACvBF,GAAA;UACAyB,GAAA,EAAK,iEAAiElF,cAAA;QACxE;QACA,MAAMyD,GAAA;MACR;IACF;IAEA,MAAM0B,eAAA,GAAkBzH,aAAA,CAAcoC,gBAAA,CAAiB4E,MAAM,EAAEtE,GAAA,CAAIE,OAAO,CAAC8E,SAAS;IAEpF,MAAMC,qBAAA,GAAwB,MAAM3G,uBAAA,CAAwB;MAC1DgG,MAAA,EAAQ5E,gBAAA,CAAiB4E,MAAM;MAC/BtE;IACF;IAEA,MAAMkF,iBAAA,GACJ,OAAOxF,gBAAA,CAAiB+B,KAAK,CAAC0D,WAAW,KAAK,aAC1CzF,gBAAA,CAAiB+B,KAAK,CAAC0D,WAAW,CAAC;MAAEC,CAAA,EAAGnF,IAAA,CAAKmF;IAAE,KAC/C1F,gBAAA,CAAiB+B,KAAK,CAAC0D,WAAW;IAExC,MAAME,cAAA,GAAiBzH,cAAA,CAAe;MACpCkE,UAAA;MACAwD,IAAA,EAAM,gBAAgB1F,cAAA;IACxB;IAEA,MAAM2F,mBAAA,GAAsBxF,WAAA,EAAaQ,WAAA,GAAcX,cAAA,CAAe,EAAE4F,MAAA;IACxE,MAAMC,mBAAA,GAAsB1F,WAAA,EAAaQ,WAAA,GAAcX,cAAA,CAAe,EAAE8F,MAAA;IAExE;IACA,MAAMC,aAAA,GAAgB,OAAOpG,YAAA,EAAc9B,QAAA,KAAa,WAAW8B,YAAA,CAAa9B,QAAQ,GAAG;IAE3F,MAAMmI,WAAA,GAAuC;MAC3ClG,gBAAA;MACAwD,IAAA;MACAjD,IAAA;MACAkB,KAAA,EAAO9B,KAAA,CAAM8B,KAAK;MAClB0E,eAAA,EAAiB9E,qBAAA;MACjB+E,oBAAA,EAAsBpG,gBAAA,CAAiB+B,KAAK,CAACqE,oBAAoB;MACjEjG,MAAA,EAAQC,UAAA;MACRV,MAAA;MACAc,OAAA;MACAH,WAAA;MACAR,YAAA;MACAc;IACF;IAEA,MAAM0F,aAAA,GAAgB1H,mBAAA,CAAoB;MACxC2H,WAAA,EAAa;QACXpG,cAAA;QACA2F,mBAAA;QACAE,mBAAA;QACAJ;MACF;MACA3F,gBAAA;MACAyF,WAAA,EAAaD,iBAAA;MACbS,aAAA;MACAzF,OAAA;MACA0F;IACF;IAEA,MAAMK,UAAA,GAAaC,OAAA,CAAQlH,UAAA;IAE3B;IACA;IACAK,KAAA,CAAMkD,KAAK,GAAGlD,KAAA,EAAOkD,KAAA,GAAQ1B,IAAA,CAAKC,KAAK,CAACD,IAAA,CAAKsF,SAAS,CAAC9G,KAAA,EAAOkD,KAAA,IAAS,CAAC,MAAMlB,SAAA;IAE9E,OAAO;MACL+E,IAAA,eACEC,KAAA,CAACnI,QAAA;gCACCoI,IAAA,CAACpJ,mBAAA;UAAoB6C,WAAA,EAAaA;yBAClCuG,IAAA,CAACnJ,iBAAA;UACCyC,cAAA,EAAgBA,cAAA;UAChBsD,IAAA,EAAMA,IAAA;UACNqD,kBAAA,EAAoB,CAACN,UAAA;UACrBvB,kBAAA,EAAoBhF,gBAAA,CAAiBiF,SAAS,KAAK,OAAO,WAAWtD,SAAA;UACrEhC,KAAA,EAAOA,KAAA;oBAENjC,qBAAA,CAAsB;YACrB4I,WAAA,EAAa;cACX,GAAGD,aAAa;cAChBnG,cAAA;cACA6D,WAAA;cACA5E,iBAAA;cACAC,eAAA,EAAiBY,gBAAA,CAAiBZ,eAAe,IAAIA,eAAA;cACrDC,mBAAA;cACAE,mBAAA;cACAsG,mBAAA;cACAE,mBAAA;cACAI,eAAA,EAAiB9E,qBAAA;cACjBsE,cAAA;cACAlD,WAAA;cACAC,sBAAA;cACA2C,eAAA;cACAE,qBAAA;cACAzB,KAAA;cACA/D;YACF;YACA+G,SAAA,EACE7H,iBAAA,IAAqBe,gBAAA,EAAkB+B,KAAA,EAAOgF,UAAA,EAAYC,KAAA,EAAOC,IAAA,EAAMH,SAAA;YACzEI,QAAA,EAAU3J,eAAA;YACV+H,SAAA,EAAW9E,OAAA,CAAQ8E,SAAS;YAC5BY;UACF;;;IAIR;EACF;EAEA,MAAM,IAAInF,KAAA,CAAM;AAClB;AAEA,OAAO,MAAMoG,QAAA,GAAyC,MAAOpI,IAAA;EAC3D,IAAI;IACF,MAAM;MAAE2H,IAAA,EAAMU;IAAY,CAAE,GAAG,MAAMtI,cAAA,CAAe;MAAE,GAAGC,IAAI;MAAEQ,mBAAA,EAAqB;IAAK;IACzF,OAAO6H,YAAA;EACT,EAAE,OAAOvD,KAAA,EAAO;IACd,IAAIA,KAAA,CAAMwD,OAAO,KAAK,aAAa;MACjCtJ,QAAA;IACF,OAAO;MACLuJ,OAAA,CAAQzD,KAAK,CAACA,KAAA,EAAO;MAAA;IACvB;EACF;AACF","ignoreList":[]}