{"version":3,"file":"handleGroupBy.js","names":["renderTable","formatDate","flattenAllFields","createSerializableValue","extractRelationshipDisplayValue","extractValueOrRelationshipID","handleGroupBy","clientCollectionConfig","clientConfig","collectionConfig","collectionSlug","columns","customCellProps","drawerSlug","enableRowSelections","fieldPermissions","query","req","select","trash","user","viewType","where","whereWithMergedSearch","Table","columnState","dataByGroup","flattenedFields","fields","groupByFieldPath","groupBy","replace","groupByField","find","f","name","populate","type","relationTo","Array","isArray","forEach","rel","config","collections","c","slug","admin","useAsTitle","distinct","payload","findDistinct","collection","depth","field","limit","Number","undefined","locale","overrideAccess","page","sort","data","docs","values","map","Promise","all","distinctValue","i","potentiallyPopulatedRelationship","valueOrRelationshipID","groupData","draft","fallbackLocale","includeLockStatus","queryByGroup","equals","heading","i18n","t","relationshipConfig","date","String","pattern","dateFormat","serializableValue","length","newColumnState","NewTable","groupByValue","key","orderableFieldName","orderable"],"sources":["../../../src/views/List/handleGroupBy.ts"],"sourcesContent":["import type {\n  ClientCollectionConfig,\n  ClientConfig,\n  Column,\n  ListQuery,\n  PaginatedDocs,\n  PayloadRequest,\n  SanitizedCollectionConfig,\n  SanitizedFieldsPermissions,\n  SelectType,\n  ViewTypes,\n  Where,\n} from 'payload'\n\nimport { renderTable } from '@payloadcms/ui/rsc'\nimport { formatDate } from '@payloadcms/ui/shared'\nimport { flattenAllFields } from 'payload'\n\nimport { createSerializableValue } from './createSerializableValue.js'\nimport { extractRelationshipDisplayValue } from './extractRelationshipDisplayValue.js'\nimport { extractValueOrRelationshipID } from './extractValueOrRelationshipID.js'\n\nexport const handleGroupBy = async ({\n  clientCollectionConfig,\n  clientConfig,\n  collectionConfig,\n  collectionSlug,\n  columns,\n  customCellProps,\n  drawerSlug,\n  enableRowSelections,\n  fieldPermissions,\n  query,\n  req,\n  select,\n  trash = false,\n  user,\n  viewType,\n  where: whereWithMergedSearch,\n}: {\n  clientCollectionConfig: ClientCollectionConfig\n  clientConfig: ClientConfig\n  collectionConfig: SanitizedCollectionConfig\n  collectionSlug: string\n  columns: any[]\n  customCellProps?: Record<string, any>\n  drawerSlug?: string\n  enableRowSelections?: boolean\n  fieldPermissions?: SanitizedFieldsPermissions\n  query?: ListQuery\n  req: PayloadRequest\n  select?: SelectType\n  trash?: boolean\n  user: any\n  viewType?: ViewTypes\n  where: Where\n}): Promise<{\n  columnState: Column[]\n  data: PaginatedDocs\n  Table: null | React.ReactNode | React.ReactNode[]\n}> => {\n  let Table: React.ReactNode | React.ReactNode[] = null\n  let columnState: Column[]\n\n  const dataByGroup: Record<string, PaginatedDocs> = {}\n\n  // NOTE: is there a faster/better way to do this?\n  const flattenedFields = flattenAllFields({ fields: collectionConfig.fields })\n\n  const groupByFieldPath = query.groupBy.replace(/^-/, '')\n\n  const groupByField = flattenedFields.find((f) => f.name === groupByFieldPath)\n\n  // Set up population for relationships\n  let populate\n\n  if (groupByField?.type === 'relationship' && groupByField.relationTo) {\n    const relationTo = Array.isArray(groupByField.relationTo)\n      ? groupByField.relationTo\n      : [groupByField.relationTo]\n\n    populate = {}\n    relationTo.forEach((rel) => {\n      const config = clientConfig.collections.find((c) => c.slug === rel)\n      populate[rel] = { [config?.admin?.useAsTitle || 'id']: true }\n    })\n  }\n\n  const distinct = await req.payload.findDistinct({\n    collection: collectionSlug,\n    depth: 1,\n    field: groupByFieldPath,\n    limit: query?.limit ? Number(query.limit) : undefined,\n    locale: req.locale,\n    overrideAccess: false,\n    page: query?.page ? Number(query.page) : undefined,\n    populate,\n    req,\n    sort: query?.groupBy,\n    trash,\n    where: whereWithMergedSearch,\n  })\n\n  const data = {\n    ...distinct,\n    docs: distinct.values?.map(() => ({})) || [],\n    values: undefined,\n  }\n\n  await Promise.all(\n    (distinct.values || []).map(async (distinctValue, i) => {\n      const potentiallyPopulatedRelationship = distinctValue[groupByFieldPath]\n\n      // Extract value or relationship ID for database query\n      const valueOrRelationshipID = extractValueOrRelationshipID(potentiallyPopulatedRelationship)\n\n      const groupData = await req.payload.find({\n        collection: collectionSlug,\n        depth: 0,\n        draft: true,\n        fallbackLocale: false,\n        includeLockStatus: true,\n        limit: query?.queryByGroup?.[valueOrRelationshipID]?.limit\n          ? Number(query.queryByGroup[valueOrRelationshipID].limit)\n          : undefined,\n        locale: req.locale,\n        overrideAccess: false,\n        page: query?.queryByGroup?.[valueOrRelationshipID]?.page\n          ? Number(query.queryByGroup[valueOrRelationshipID].page)\n          : undefined,\n        req,\n        // Note: if we wanted to enable table-by-table sorting, we could use this:\n        // sort: query?.queryByGroup?.[valueOrRelationshipID]?.sort,\n        select,\n        sort: query?.sort,\n        trash,\n        user,\n        where: {\n          ...(whereWithMergedSearch || {}),\n          [groupByFieldPath]: {\n            equals: valueOrRelationshipID,\n          },\n        },\n      })\n\n      // Extract heading\n      let heading: string\n\n      if (potentiallyPopulatedRelationship === null) {\n        heading = req.i18n.t('general:noValue')\n      } else if (groupByField?.type === 'relationship') {\n        const relationshipConfig = Array.isArray(groupByField.relationTo)\n          ? undefined\n          : clientConfig.collections.find((c) => c.slug === groupByField.relationTo)\n        heading = extractRelationshipDisplayValue(\n          potentiallyPopulatedRelationship,\n          clientConfig,\n          relationshipConfig,\n        )\n      } else if (groupByField?.type === 'date') {\n        heading = formatDate({\n          date: String(valueOrRelationshipID),\n          i18n: req.i18n,\n          pattern: clientConfig.admin.dateFormat,\n        })\n      } else if (groupByField?.type === 'checkbox') {\n        if (valueOrRelationshipID === true) {\n          heading = req.i18n.t('general:true')\n        }\n        if (valueOrRelationshipID === false) {\n          heading = req.i18n.t('general:false')\n        }\n      } else {\n        heading = String(valueOrRelationshipID)\n      }\n\n      // Create serializable value for client\n      const serializableValue = createSerializableValue(valueOrRelationshipID)\n\n      if (groupData.docs && groupData.docs.length > 0) {\n        const { columnState: newColumnState, Table: NewTable } = renderTable({\n          clientCollectionConfig,\n          collectionConfig,\n          columns,\n          customCellProps,\n          data: groupData,\n          drawerSlug,\n          enableRowSelections,\n          fieldPermissions,\n          groupByFieldPath,\n          groupByValue: serializableValue,\n          heading: heading || req.i18n.t('general:noValue'),\n          i18n: req.i18n,\n          key: `table-${serializableValue}`,\n          orderableFieldName: collectionConfig.orderable === true ? '_order' : undefined,\n          payload: req.payload,\n          query,\n          useAsTitle: collectionConfig.admin.useAsTitle,\n          viewType,\n        })\n\n        // Only need to set `columnState` once, using the first table's column state\n        // This will avoid needing to generate column state explicitly for root context that wraps all tables\n        if (!columnState) {\n          columnState = newColumnState\n        }\n\n        if (!Table) {\n          Table = []\n        }\n\n        dataByGroup[serializableValue] = groupData\n        ;(Table as Array<React.ReactNode>)[i] = NewTable\n      }\n    }),\n  )\n\n  return {\n    columnState,\n    data,\n    Table,\n  }\n}\n"],"mappings":"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","ignoreList":[]}