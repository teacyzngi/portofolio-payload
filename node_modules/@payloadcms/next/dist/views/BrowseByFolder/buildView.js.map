{"version":3,"file":"buildView.js","names":["DefaultBrowseByFolderView","HydrateAuthProvider","RenderServerComponent","getFolderResultsComponentAndData","upsertPreferences","formatAdminURL","redirect","React","buildBrowseByFolderView","args","browseByFolderSlugs","browseByFolderSlugsFromArgs","disableBulkDelete","disableBulkEdit","enableRowSelections","folderID","initPageResult","isInDrawer","params","query","queryFromArgs","searchParams","locale","fullLocale","permissions","req","i18n","payload","config","queryFromReq","user","visibleEntities","folders","browseByFolder","Error","foldersSlug","slug","allowReadCollectionSlugs","filter","collectionSlug","collections","read","includes","relationTo","JSON","parse","undefined","collectionsToDisplay","Array","isArray","routes","admin","adminRoute","browseByFolderPreferences","key","value","sort","sortPreference","viewPreference","breadcrumbs","documents","folderAssignedCollections","FolderResultsComponent","subfolders","displayAs","resolvedFolderID","length","id","path","serverURL","serverProps","allAvailableCollectionSlugs","availableActiveCollectionFolderSlugs","allowCreateCollectionSlugs","create","View","_jsxs","_Fragment","_jsx","clientProps","activeCollectionFolderSlugs","allCollectionFolderSlugs","baseFolderPath","folderFieldName","fieldName","Fallback","importMap"],"sources":["../../../src/views/BrowseByFolder/buildView.tsx"],"sourcesContent":["import type {\n  AdminViewServerProps,\n  BuildCollectionFolderViewResult,\n  FolderListViewClientProps,\n  FolderListViewServerPropsOnly,\n  FolderSortKeys,\n  ListQuery,\n} from 'payload'\n\nimport { DefaultBrowseByFolderView, HydrateAuthProvider } from '@payloadcms/ui'\nimport { RenderServerComponent } from '@payloadcms/ui/elements/RenderServerComponent'\nimport { getFolderResultsComponentAndData, upsertPreferences } from '@payloadcms/ui/rsc'\nimport { formatAdminURL } from '@payloadcms/ui/shared'\nimport { redirect } from 'next/navigation.js'\nimport React from 'react'\n\nexport type BuildFolderViewArgs = {\n  customCellProps?: Record<string, any>\n  disableBulkDelete?: boolean\n  disableBulkEdit?: boolean\n  enableRowSelections: boolean\n  folderID?: number | string\n  isInDrawer?: boolean\n  overrideEntityVisibility?: boolean\n  query: ListQuery\n} & AdminViewServerProps\n\nexport const buildBrowseByFolderView = async (\n  args: BuildFolderViewArgs,\n): Promise<BuildCollectionFolderViewResult> => {\n  const {\n    browseByFolderSlugs: browseByFolderSlugsFromArgs = [],\n    disableBulkDelete,\n    disableBulkEdit,\n    enableRowSelections,\n    folderID,\n    initPageResult,\n    isInDrawer,\n    params,\n    query: queryFromArgs,\n    searchParams,\n  } = args\n\n  const {\n    locale: fullLocale,\n    permissions,\n    req: {\n      i18n,\n      payload,\n      payload: { config },\n      query: queryFromReq,\n      user,\n    },\n    visibleEntities,\n  } = initPageResult\n\n  if (config.folders === false || config.folders.browseByFolder === false) {\n    throw new Error('not-found')\n  }\n\n  const foldersSlug = config.folders.slug\n\n  /**\n   * All visiible folder enabled collection slugs that the user has read permissions for.\n   */\n  const allowReadCollectionSlugs = browseByFolderSlugsFromArgs.filter(\n    (collectionSlug) =>\n      permissions?.collections?.[collectionSlug]?.read &&\n      visibleEntities.collections.includes(collectionSlug),\n  )\n\n  const query =\n    queryFromArgs ||\n    ((queryFromReq\n      ? {\n          ...queryFromReq,\n          relationTo:\n            typeof queryFromReq?.relationTo === 'string'\n              ? JSON.parse(queryFromReq.relationTo)\n              : undefined,\n        }\n      : {}) as ListQuery)\n\n  /**\n   * If a folderID is provided and the relationTo query param exists,\n   * we filter the collection slugs to only those that are allowed to be read.\n   *\n   * If no folderID is provided, only folders should be active and displayed (the root view).\n   */\n  let collectionsToDisplay: string[] = []\n  if (folderID && Array.isArray(query?.relationTo)) {\n    collectionsToDisplay = query.relationTo.filter(\n      (slug) => allowReadCollectionSlugs.includes(slug) || slug === foldersSlug,\n    )\n  } else if (folderID) {\n    collectionsToDisplay = [...allowReadCollectionSlugs, foldersSlug]\n  } else {\n    collectionsToDisplay = [foldersSlug]\n  }\n\n  const {\n    routes: { admin: adminRoute },\n  } = config\n\n  /**\n   * @todo: find a pattern to avoid setting preferences on hard navigation, i.e. direct links, page refresh, etc.\n   * This will ensure that prefs are only updated when explicitly set by the user\n   * This could potentially be done by injecting a `sessionID` into the params and comparing it against a session cookie\n   */\n  const browseByFolderPreferences = await upsertPreferences<{\n    sort?: FolderSortKeys\n    viewPreference?: 'grid' | 'list'\n  }>({\n    key: 'browse-by-folder',\n    req: initPageResult.req,\n    value: {\n      sort: query?.sort as FolderSortKeys,\n    },\n  })\n\n  const sortPreference: FolderSortKeys = browseByFolderPreferences?.sort || 'name'\n  const viewPreference = browseByFolderPreferences?.viewPreference || 'grid'\n\n  const { breadcrumbs, documents, folderAssignedCollections, FolderResultsComponent, subfolders } =\n    await getFolderResultsComponentAndData({\n      browseByFolder: true,\n      collectionsToDisplay,\n      displayAs: viewPreference,\n      folderAssignedCollections: collectionsToDisplay.filter((slug) => slug !== foldersSlug) || [],\n      folderID,\n      req: initPageResult.req,\n      sort: sortPreference,\n    })\n\n  const resolvedFolderID = breadcrumbs[breadcrumbs.length - 1]?.id\n\n  if (\n    !isInDrawer &&\n    ((resolvedFolderID && folderID && folderID !== resolvedFolderID) ||\n      (folderID && !resolvedFolderID))\n  ) {\n    redirect(\n      formatAdminURL({\n        adminRoute,\n        path: config.admin.routes.browseByFolder,\n        serverURL: config.serverURL,\n      }),\n    )\n  }\n\n  const serverProps: Omit<FolderListViewServerPropsOnly, 'collectionConfig' | 'listPreferences'> = {\n    documents,\n    i18n,\n    locale: fullLocale,\n    params,\n    payload,\n    permissions,\n    searchParams,\n    subfolders,\n    user,\n  }\n\n  // const folderViewSlots = renderFolderViewSlots({\n  //   clientProps: {\n  //   },\n  //   description: staticDescription,\n  //   payload,\n  //   serverProps,\n  // })\n\n  // Filter down allCollectionFolderSlugs by the ones the current folder is assingned to\n  const allAvailableCollectionSlugs =\n    folderID && Array.isArray(folderAssignedCollections) && folderAssignedCollections.length\n      ? allowReadCollectionSlugs.filter((slug) => folderAssignedCollections.includes(slug))\n      : allowReadCollectionSlugs\n\n  // Filter down activeCollectionFolderSlugs by the ones the current folder is assingned to\n  const availableActiveCollectionFolderSlugs = collectionsToDisplay.filter((slug) => {\n    if (slug === foldersSlug) {\n      return permissions?.collections?.[foldersSlug]?.read\n    } else {\n      return !folderAssignedCollections || folderAssignedCollections.includes(slug)\n    }\n  })\n\n  // Documents cannot be created without a parent folder in this view\n  const allowCreateCollectionSlugs = (\n    resolvedFolderID ? [foldersSlug, ...allAvailableCollectionSlugs] : [foldersSlug]\n  ).filter((collectionSlug) => {\n    if (collectionSlug === foldersSlug) {\n      return permissions?.collections?.[foldersSlug]?.create\n    }\n    return (\n      permissions?.collections?.[collectionSlug]?.create &&\n      visibleEntities.collections.includes(collectionSlug)\n    )\n  })\n\n  return {\n    View: (\n      <>\n        <HydrateAuthProvider permissions={permissions} />\n        {RenderServerComponent({\n          clientProps: {\n            // ...folderViewSlots,\n            activeCollectionFolderSlugs: availableActiveCollectionFolderSlugs,\n            allCollectionFolderSlugs: allAvailableCollectionSlugs,\n            allowCreateCollectionSlugs,\n            baseFolderPath: `/browse-by-folder`,\n            breadcrumbs,\n            disableBulkDelete,\n            disableBulkEdit,\n            documents,\n            enableRowSelections,\n            folderAssignedCollections,\n            folderFieldName: config.folders.fieldName,\n            folderID: resolvedFolderID || null,\n            FolderResultsComponent,\n            sort: sortPreference,\n            subfolders,\n            viewPreference,\n          } satisfies FolderListViewClientProps,\n          // Component:config.folders?.components?.views?.BrowseByFolders?.Component,\n          Fallback: DefaultBrowseByFolderView,\n          importMap: payload.importMap,\n          serverProps,\n        })}\n      </>\n    ),\n  }\n}\n"],"mappings":";AASA,SAASA,yBAAyB,EAAEC,mBAAmB,QAAQ;AAC/D,SAASC,qBAAqB,QAAQ;AACtC,SAASC,gCAAgC,EAAEC,iBAAiB,QAAQ;AACpE,SAASC,cAAc,QAAQ;AAC/B,SAASC,QAAQ,QAAQ;AACzB,OAAOC,KAAA,MAAW;AAalB,OAAO,MAAMC,uBAAA,GAA0B,MACrCC,IAAA;EAEA,MAAM;IACJC,mBAAA,EAAqBC,2BAAA,GAA8B,EAAE;IACrDC,iBAAiB;IACjBC,eAAe;IACfC,mBAAmB;IACnBC,QAAQ;IACRC,cAAc;IACdC,UAAU;IACVC,MAAM;IACNC,KAAA,EAAOC,aAAa;IACpBC;EAAY,CACb,GAAGZ,IAAA;EAEJ,MAAM;IACJa,MAAA,EAAQC,UAAU;IAClBC,WAAW;IACXC,GAAA,EAAK;MACHC,IAAI;MACJC,OAAO;MACPA,OAAA,EAAS;QAAEC;MAAM,CAAE;MACnBT,KAAA,EAAOU,YAAY;MACnBC;IAAI,CACL;IACDC;EAAe,CAChB,GAAGf,cAAA;EAEJ,IAAIY,MAAA,CAAOI,OAAO,KAAK,SAASJ,MAAA,CAAOI,OAAO,CAACC,cAAc,KAAK,OAAO;IACvE,MAAM,IAAIC,KAAA,CAAM;EAClB;EAEA,MAAMC,WAAA,GAAcP,MAAA,CAAOI,OAAO,CAACI,IAAI;EAEvC;;;EAGA,MAAMC,wBAAA,GAA2B1B,2BAAA,CAA4B2B,MAAM,CAChEC,cAAA,IACCf,WAAA,EAAagB,WAAA,GAAcD,cAAA,CAAe,EAAEE,IAAA,IAC5CV,eAAA,CAAgBS,WAAW,CAACE,QAAQ,CAACH,cAAA;EAGzC,MAAMpB,KAAA,GACJC,aAAA,KACES,YAAA,GACE;IACE,GAAGA,YAAY;IACfc,UAAA,EACE,OAAOd,YAAA,EAAcc,UAAA,KAAe,WAChCC,IAAA,CAAKC,KAAK,CAAChB,YAAA,CAAac,UAAU,IAClCG;EACR,IACA,CAAC;EAEP;;;;;;EAMA,IAAIC,oBAAA,GAAiC,EAAE;EACvC,IAAIhC,QAAA,IAAYiC,KAAA,CAAMC,OAAO,CAAC9B,KAAA,EAAOwB,UAAA,GAAa;IAChDI,oBAAA,GAAuB5B,KAAA,CAAMwB,UAAU,CAACL,MAAM,CAC3CF,IAAA,IAASC,wBAAA,CAAyBK,QAAQ,CAACN,IAAA,KAASA,IAAA,KAASD,WAAA;EAElE,OAAO,IAAIpB,QAAA,EAAU;IACnBgC,oBAAA,GAAuB,C,GAAIV,wBAAA,EAA0BF,WAAA,CAAY;EACnE,OAAO;IACLY,oBAAA,GAAuB,CAACZ,WAAA,CAAY;EACtC;EAEA,MAAM;IACJe,MAAA,EAAQ;MAAEC,KAAA,EAAOC;IAAU;EAAE,CAC9B,GAAGxB,MAAA;EAEJ;;;;;EAKA,MAAMyB,yBAAA,GAA4B,MAAMjD,iBAAA,CAGrC;IACDkD,GAAA,EAAK;IACL7B,GAAA,EAAKT,cAAA,CAAeS,GAAG;IACvB8B,KAAA,EAAO;MACLC,IAAA,EAAMrC,KAAA,EAAOqC;IACf;EACF;EAEA,MAAMC,cAAA,GAAiCJ,yBAAA,EAA2BG,IAAA,IAAQ;EAC1E,MAAME,cAAA,GAAiBL,yBAAA,EAA2BK,cAAA,IAAkB;EAEpE,MAAM;IAAEC,WAAW;IAAEC,SAAS;IAAEC,yBAAyB;IAAEC,sBAAsB;IAAEC;EAAU,CAAE,GAC7F,MAAM5D,gCAAA,CAAiC;IACrC8B,cAAA,EAAgB;IAChBc,oBAAA;IACAiB,SAAA,EAAWN,cAAA;IACXG,yBAAA,EAA2Bd,oBAAA,CAAqBT,MAAM,CAAEF,IAAA,IAASA,IAAA,KAASD,WAAA,KAAgB,EAAE;IAC5FpB,QAAA;IACAU,GAAA,EAAKT,cAAA,CAAeS,GAAG;IACvB+B,IAAA,EAAMC;EACR;EAEF,MAAMQ,gBAAA,GAAmBN,WAAW,CAACA,WAAA,CAAYO,MAAM,GAAG,EAAE,EAAEC,EAAA;EAE9D,IACE,CAAClD,UAAA,KACAgD,gBAAC,IAAoBlD,QAAA,IAAYA,QAAA,KAAakD,gBAAA,IAC5ClD,QAAA,IAAY,CAACkD,gBAAgB,GAChC;IACA3D,QAAA,CACED,cAAA,CAAe;MACb+C,UAAA;MACAgB,IAAA,EAAMxC,MAAA,CAAOuB,KAAK,CAACD,MAAM,CAACjB,cAAc;MACxCoC,SAAA,EAAWzC,MAAA,CAAOyC;IACpB;EAEJ;EAEA,MAAMC,WAAA,GAA2F;IAC/FV,SAAA;IACAlC,IAAA;IACAJ,MAAA,EAAQC,UAAA;IACRL,MAAA;IACAS,OAAA;IACAH,WAAA;IACAH,YAAA;IACA0C,UAAA;IACAjC;EACF;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA,MAAMyC,2BAAA,GACJxD,QAAA,IAAYiC,KAAA,CAAMC,OAAO,CAACY,yBAAA,KAA8BA,yBAAA,CAA0BK,MAAM,GACpF7B,wBAAA,CAAyBC,MAAM,CAAEF,IAAA,IAASyB,yBAAA,CAA0BnB,QAAQ,CAACN,IAAA,KAC7EC,wBAAA;EAEN;EACA,MAAMmC,oCAAA,GAAuCzB,oBAAA,CAAqBT,MAAM,CAAEF,IAAA;IACxE,IAAIA,IAAA,KAASD,WAAA,EAAa;MACxB,OAAOX,WAAA,EAAagB,WAAA,GAAcL,WAAA,CAAY,EAAEM,IAAA;IAClD,OAAO;MACL,OAAO,CAACoB,yBAAA,IAA6BA,yBAAA,CAA0BnB,QAAQ,CAACN,IAAA;IAC1E;EACF;EAEA;EACA,MAAMqC,0BAAA,GAA6B,CACjCR,gBAAA,GAAmB,CAAC9B,WAAA,E,GAAgBoC,2BAAA,CAA4B,GAAG,CAACpC,WAAA,CAAY,EAChFG,MAAM,CAAEC,cAAA;IACR,IAAIA,cAAA,KAAmBJ,WAAA,EAAa;MAClC,OAAOX,WAAA,EAAagB,WAAA,GAAcL,WAAA,CAAY,EAAEuC,MAAA;IAClD;IACA,OACElD,WAAA,EAAagB,WAAA,GAAcD,cAAA,CAAe,EAAEmC,MAAA,IAC5C3C,eAAA,CAAgBS,WAAW,CAACE,QAAQ,CAACH,cAAA;EAEzC;EAEA,OAAO;IACLoC,IAAA,eACEC,KAAA,CAAAC,SAAA;8BACEC,IAAA,CAAC7E,mBAAA;QAAoBuB,WAAA,EAAaA;UACjCtB,qBAAA,CAAsB;QACrB6E,WAAA,EAAa;UACX;UACAC,2BAAA,EAA6BR,oCAAA;UAC7BS,wBAAA,EAA0BV,2BAAA;UAC1BE,0BAAA;UACAS,cAAA,EAAgB,mBAAmB;UACnCvB,WAAA;UACA/C,iBAAA;UACAC,eAAA;UACA+C,SAAA;UACA9C,mBAAA;UACA+C,yBAAA;UACAsB,eAAA,EAAiBvD,MAAA,CAAOI,OAAO,CAACoD,SAAS;UACzCrE,QAAA,EAAUkD,gBAAA,IAAoB;UAC9BH,sBAAA;UACAN,IAAA,EAAMC,cAAA;UACNM,UAAA;UACAL;QACF;QACA;QACA2B,QAAA,EAAUrF,yBAAA;QACVsF,SAAA,EAAW3D,OAAA,CAAQ2D,SAAS;QAC5BhB;MACF;;EAGN;AACF","ignoreList":[]}