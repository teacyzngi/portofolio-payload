{"version":3,"file":"index.js","names":["c","_c","ConfirmPasswordField","Form","FormSubmit","HiddenField","PasswordField","useAuth","useConfig","useTranslation","useRouter","formatAdminURL","React","ResetPasswordForm","t0","$","token","i18n","config","t1","admin","t2","routes","t3","serverURL","t4","user","userSlug","login","loginRoute","adminRoute","api","apiRoute","history","fetchFullUser","t5","push","path","onSuccess","t6","initialState","initialValue","valid","value","password","_jsxs","action","method","children","className","_jsx","field","name","label","t","required","schemaPath","size"],"sources":["../../../../src/views/ResetPassword/ResetPasswordForm/index.tsx"],"sourcesContent":["'use client'\nimport {\n  ConfirmPasswordField,\n  Form,\n  FormSubmit,\n  HiddenField,\n  PasswordField,\n  useAuth,\n  useConfig,\n  useTranslation,\n} from '@payloadcms/ui'\nimport { useRouter } from 'next/navigation.js'\nimport { type FormState } from 'payload'\nimport { formatAdminURL } from 'payload/shared'\nimport React from 'react'\n\ntype Args = {\n  readonly token: string\n}\n\nexport const ResetPasswordForm: React.FC<Args> = ({ token }) => {\n  const i18n = useTranslation()\n  const {\n    config: {\n      admin: {\n        routes: { login: loginRoute },\n        user: userSlug,\n      },\n      routes: { admin: adminRoute, api: apiRoute },\n      serverURL,\n    },\n  } = useConfig()\n\n  const history = useRouter()\n  const { fetchFullUser } = useAuth()\n\n  const onSuccess = React.useCallback(async () => {\n    const user = await fetchFullUser()\n    if (user) {\n      history.push(adminRoute)\n    } else {\n      history.push(\n        formatAdminURL({\n          adminRoute,\n          path: loginRoute,\n        }),\n      )\n    }\n  }, [adminRoute, fetchFullUser, history, loginRoute])\n\n  const initialState: FormState = {\n    'confirm-password': {\n      initialValue: '',\n      valid: false,\n      value: '',\n    },\n    password: {\n      initialValue: '',\n      valid: false,\n      value: '',\n    },\n    token: {\n      initialValue: token,\n      valid: true,\n      value: token,\n    },\n  }\n\n  return (\n    <Form\n      action={`${serverURL}${apiRoute}/${userSlug}/reset-password`}\n      initialState={initialState}\n      method=\"POST\"\n      onSuccess={onSuccess}\n    >\n      <div className=\"inputWrap\">\n        <PasswordField\n          field={{\n            name: 'password',\n            label: i18n.t('authentication:newPassword'),\n            required: true,\n          }}\n          path=\"password\"\n          schemaPath={`${userSlug}.password`}\n        />\n        <ConfirmPasswordField />\n        <HiddenField path=\"token\" schemaPath={`${userSlug}.token`} value={token} />\n      </div>\n      <FormSubmit size=\"large\">{i18n.t('authentication:resetPassword')}</FormSubmit>\n    </Form>\n  )\n}\n"],"mappings":"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","ignoreList":[]}