{"version":3,"file":"index.js","names":["c","_c","EmailField","Form","FormSubmit","TextField","useConfig","useTranslation","email","text","React","useState","FormHeader","ForgotPasswordForm","$","config","getEntityConfig","admin","t0","routes","t1","user","userSlug","api","t","hasSubmitted","setHasSubmitted","t2","collectionSlug","collectionConfig","loginWithUsername","auth","t3","res","successToast","errorToast","json","then","catch","handleResponse","t4","t5","Symbol","for","initialState","username","initialValue","valid","value","undefined","t6","_jsx","description","heading","_jsxs","action","method","children","field","name","label","required","path","validate","type","blockData","data","event","preferences","fields","req","payload","siblingData","autoComplete","value_0","size"],"sources":["../../../../src/views/ForgotPassword/ForgotPasswordForm/index.tsx"],"sourcesContent":["'use client'\n\nimport type { FormProps } from '@payloadcms/ui'\nimport type { FormState, PayloadRequest } from 'payload'\n\nimport { EmailField, Form, FormSubmit, TextField, useConfig, useTranslation } from '@payloadcms/ui'\nimport { email, text } from 'payload/shared'\nimport React, { useState } from 'react'\n\nimport { FormHeader } from '../../../elements/FormHeader/index.js'\n\nexport const ForgotPasswordForm: React.FC = () => {\n  const { config, getEntityConfig } = useConfig()\n\n  const {\n    admin: { user: userSlug },\n    routes: { api },\n  } = config\n\n  const { t } = useTranslation()\n  const [hasSubmitted, setHasSubmitted] = useState(false)\n  const collectionConfig = getEntityConfig({ collectionSlug: userSlug })\n  const loginWithUsername = collectionConfig?.auth?.loginWithUsername\n\n  const handleResponse: FormProps['handleResponse'] = (res, successToast, errorToast) => {\n    res\n      .json()\n      .then(() => {\n        setHasSubmitted(true)\n        successToast(t('general:submissionSuccessful'))\n      })\n      .catch(() => {\n        errorToast(\n          loginWithUsername\n            ? t('authentication:usernameNotValid')\n            : t('authentication:emailNotValid'),\n        )\n      })\n  }\n\n  const initialState: FormState = loginWithUsername\n    ? {\n        username: {\n          initialValue: '',\n          valid: true,\n          value: undefined,\n        },\n      }\n    : {\n        email: {\n          initialValue: '',\n          valid: true,\n          value: undefined,\n        },\n      }\n\n  if (hasSubmitted) {\n    return (\n      <FormHeader\n        description={t('authentication:checkYourEmailForPasswordReset')}\n        heading={t('authentication:emailSent')}\n      />\n    )\n  }\n\n  return (\n    <Form\n      action={`${api}/${userSlug}/forgot-password`}\n      handleResponse={handleResponse}\n      initialState={initialState}\n      method=\"POST\"\n    >\n      <FormHeader\n        description={\n          loginWithUsername\n            ? t('authentication:forgotPasswordUsernameInstructions')\n            : t('authentication:forgotPasswordEmailInstructions')\n        }\n        heading={t('authentication:forgotPassword')}\n      />\n\n      {loginWithUsername ? (\n        <TextField\n          field={{\n            name: 'username',\n            label: t('authentication:username'),\n            required: true,\n          }}\n          path=\"username\"\n          validate={(value) =>\n            text(value, {\n              name: 'username',\n              type: 'text',\n              blockData: {},\n              data: {},\n              event: 'onChange',\n              path: ['username'],\n              preferences: { fields: {} },\n              req: {\n                payload: {\n                  config,\n                },\n                t,\n              } as unknown as PayloadRequest,\n              required: true,\n              siblingData: {},\n            })\n          }\n        />\n      ) : (\n        <EmailField\n          field={{\n            name: 'email',\n            admin: {\n              autoComplete: 'email',\n            },\n            label: t('general:email'),\n            required: true,\n          }}\n          path=\"email\"\n          validate={(value) =>\n            email(value, {\n              name: 'email',\n              type: 'email',\n              blockData: {},\n              data: {},\n              event: 'onChange',\n              path: ['email'],\n              preferences: { fields: {} },\n              req: { payload: { config }, t } as unknown as PayloadRequest,\n              required: true,\n              siblingData: {},\n            })\n          }\n        />\n      )}\n      <FormSubmit size=\"large\">{t('general:submit')}</FormSubmit>\n    </Form>\n  )\n}\n"],"mappings":"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","ignoreList":[]}