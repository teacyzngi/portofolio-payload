{"version":3,"file":"metadata.js","names":["getNextRequestI18n","generateAccountViewMetadata","generateBrowseByFolderMetadata","generateCollectionFolderMetadata","generateCollectionTrashMetadata","generateCreateFirstUserViewMetadata","generateDashboardViewMetadata","generateDocumentViewMetadata","generateForgotPasswordViewMetadata","generateListViewMetadata","generateLoginViewMetadata","generateNotFoundViewMetadata","generateResetPasswordViewMetadata","generateUnauthorizedViewMetadata","generateVerifyViewMetadata","generateCustomViewMetadata","getCustomViewByRoute","oneSegmentMeta","folders","forgot","login","logout","unauthorized","generatePageMetadata","config","configPromise","params","paramsPromise","folderCollectionSlugs","collections","reduce","acc","slug","segments","Array","isArray","currentRoute","join","segmentOne","segmentTwo","segmentThree","isGlobal","isCollection","i18n","meta","collectionConfig","length","find","collection","globalConfig","globals","global","admin","routes","browseByFolder","reset","includes","viewConfig","viewKey"],"sources":["../../../src/views/Root/metadata.ts"],"sourcesContent":["import type { Metadata } from 'next'\nimport type { SanitizedConfig } from 'payload'\n\nimport { getNextRequestI18n } from '../../utilities/getNextRequestI18n.js'\nimport { generateAccountViewMetadata } from '../Account/metadata.js'\nimport { generateBrowseByFolderMetadata } from '../BrowseByFolder/metadata.js'\nimport { generateCollectionFolderMetadata } from '../CollectionFolders/metadata.js'\nimport { generateCollectionTrashMetadata } from '../CollectionTrash/metadata.js'\nimport { generateCreateFirstUserViewMetadata } from '../CreateFirstUser/metadata.js'\nimport { generateDashboardViewMetadata } from '../Dashboard/metadata.js'\nimport { generateDocumentViewMetadata } from '../Document/metadata.js'\nimport { generateForgotPasswordViewMetadata } from '../ForgotPassword/metadata.js'\nimport { generateListViewMetadata } from '../List/metadata.js'\nimport { generateLoginViewMetadata } from '../Login/metadata.js'\nimport { generateNotFoundViewMetadata } from '../NotFound/metadata.js'\nimport { generateResetPasswordViewMetadata } from '../ResetPassword/metadata.js'\nimport { generateUnauthorizedViewMetadata } from '../Unauthorized/metadata.js'\nimport { generateVerifyViewMetadata } from '../Verify/metadata.js'\nimport { generateCustomViewMetadata } from './generateCustomViewMetadata.js'\nimport { getCustomViewByRoute } from './getCustomViewByRoute.js'\n\nconst oneSegmentMeta = {\n  'create-first-user': generateCreateFirstUserViewMetadata,\n  folders: generateBrowseByFolderMetadata,\n  forgot: generateForgotPasswordViewMetadata,\n  login: generateLoginViewMetadata,\n  logout: generateUnauthorizedViewMetadata,\n  'logout-inactivity': generateUnauthorizedViewMetadata,\n  unauthorized: generateUnauthorizedViewMetadata,\n}\n\ntype Args = {\n  config: Promise<SanitizedConfig>\n  params: Promise<{\n    [key: string]: string | string[]\n  }>\n  searchParams: Promise<{\n    [key: string]: string | string[]\n  }>\n}\n\nexport const generatePageMetadata = async ({\n  config: configPromise,\n  params: paramsPromise,\n}: Args) => {\n  const config = await configPromise\n  const params = await paramsPromise\n\n  const folderCollectionSlugs = config.collections.reduce((acc, { slug, folders }) => {\n    if (folders) {\n      return [...acc, slug]\n    }\n    return acc\n  }, [])\n  const segments = Array.isArray(params.segments) ? params.segments : []\n\n  const currentRoute = `/${segments.join('/')}`\n  const [segmentOne, segmentTwo, segmentThree] = segments\n\n  const isGlobal = segmentOne === 'globals'\n  const isCollection = segmentOne === 'collections'\n\n  const i18n = await getNextRequestI18n({\n    config,\n  })\n\n  let meta: Metadata\n\n  // TODO: handle custom routes\n\n  const collectionConfig =\n    isCollection &&\n    segments.length > 1 &&\n    config?.collections?.find((collection) => collection.slug === segmentTwo)\n\n  const globalConfig =\n    isGlobal && segments.length > 1 && config?.globals?.find((global) => global.slug === segmentTwo)\n\n  switch (segments.length) {\n    case 0: {\n      meta = await generateDashboardViewMetadata({ config, i18n })\n      break\n    }\n    case 1: {\n      if (folderCollectionSlugs.length && `/${segmentOne}` === config.admin.routes.browseByFolder) {\n        // --> /:folderCollectionSlug\n        meta = await oneSegmentMeta.folders({ config, i18n })\n      } else if (segmentOne === 'account') {\n        // --> /account\n        meta = await generateAccountViewMetadata({ config, i18n })\n        break\n      } else if (oneSegmentMeta[segmentOne]) {\n        // --> /create-first-user\n        // --> /forgot\n        // --> /login\n        // --> /logout\n        // --> /logout-inactivity\n        // --> /unauthorized\n        meta = await oneSegmentMeta[segmentOne]({ config, i18n })\n        break\n      }\n      break\n    }\n    case 2: {\n      if (`/${segmentOne}` === config.admin.routes.reset) {\n        // --> /reset/:token\n        meta = await generateResetPasswordViewMetadata({ config, i18n })\n      } else if (\n        folderCollectionSlugs.length &&\n        `/${segmentOne}` === config.admin.routes.browseByFolder\n      ) {\n        // --> /browse-by-folder/:folderID\n        meta = await generateBrowseByFolderMetadata({ config, i18n })\n      } else if (isCollection) {\n        // --> /collections/:collectionSlug\n        meta = await generateListViewMetadata({ collectionConfig, config, i18n })\n      } else if (isGlobal) {\n        // --> /globals/:globalSlug\n        meta = await generateDocumentViewMetadata({\n          config,\n          globalConfig,\n          i18n,\n          params,\n        })\n      }\n      break\n    }\n    default: {\n      if (segmentTwo === 'verify') {\n        // --> /:collectionSlug/verify/:token\n        meta = await generateVerifyViewMetadata({ config, i18n })\n      } else if (isCollection) {\n        if (segmentThree === 'trash' && segments.length === 3 && collectionConfig) {\n          // Collection Trash Views\n          // --> /collections/:collectionSlug/trash\n          meta = await generateCollectionTrashMetadata({\n            collectionConfig,\n            config,\n            i18n,\n            params,\n          })\n        } else if (config.folders && segmentThree === config.folders.slug) {\n          if (folderCollectionSlugs.includes(collectionConfig.slug)) {\n            // Collection Folder Views\n            // --> /collections/:collectionSlug/:folderCollectionSlug\n            // --> /collections/:collectionSlug/:folderCollectionSlug/:id\n            meta = await generateCollectionFolderMetadata({\n              collectionConfig,\n              config,\n              i18n,\n              params,\n            })\n          }\n        } else {\n          // Collection Document Views\n          // --> /collections/:collectionSlug/:id\n          // --> /collections/:collectionSlug/:id/versions\n          // --> /collections/:collectionSlug/:id/versions/:version\n          // --> /collections/:collectionSlug/:id/api\n          // --> /collections/:collectionSlug/trash/:id\n          meta = await generateDocumentViewMetadata({ collectionConfig, config, i18n, params })\n        }\n      } else if (isGlobal) {\n        // Global Document Views\n        // --> /globals/:globalSlug/versions\n        // --> /globals/:globalSlug/versions/:version\n        // --> /globals/:globalSlug/api\n        meta = await generateDocumentViewMetadata({\n          config,\n          globalConfig,\n          i18n,\n          params,\n        })\n      }\n      break\n    }\n  }\n\n  if (!meta) {\n    const { viewConfig, viewKey } = getCustomViewByRoute({\n      config,\n      currentRoute,\n    })\n\n    if (viewKey) {\n      // Custom Views\n      // --> /:path\n      meta = await generateCustomViewMetadata({\n        config,\n        i18n,\n        viewConfig,\n      })\n    } else {\n      meta = await generateNotFoundViewMetadata({ config, i18n })\n    }\n  }\n\n  return meta\n}\n"],"mappings":"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","ignoreList":[]}