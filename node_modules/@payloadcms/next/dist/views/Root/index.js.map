{"version":3,"file":"index.js","names":["PageConfigProvider","RenderServerComponent","getClientConfig","notFound","redirect","formatAdminURL","qs","React","DefaultTemplate","MinimalTemplate","getPreferences","getVisibleEntities","handleAuthRedirect","initReq","isCustomAdminView","isPublicAdminRoute","getCustomViewByRoute","getRouteData","RootPage","config","configPromise","importMap","params","paramsPromise","searchParams","searchParamsPromise","admin","routes","createFirstUser","_createFirstUserRoute","user","userSlug","adminRoute","currentRoute","path","Array","isArray","segments","join","isCollectionRoute","isGlobalRoute","collectionConfig","undefined","globalConfig","length","viewKey","collections","find","slug","globals","queryString","stringify","addQueryPrefix","cookies","locale","permissions","req","payload","key","overrides","fallbackLocale","query","parse","depth","ignoreQueryPrefix","urlSuffix","canAccessAdmin","route","collectionPreferences","folders","id","then","res","value","browseByFolderSlugs","DefaultView","documentSubViewType","routeParams","templateClassName","templateType","viewActions","viewType","dbHasUser","db","findOne","collection","doc","Component","payloadComponent","createFirstUserRoute","usersCollection","disableLocalStrategy","auth","clientConfig","i18n","visibleEntities","folderID","RenderedView","clientProps","Fallback","serverProps","docID","initPageResult","languageOptions","Object","entries","supportedLanguages","reduce","acc","language","languageConfig","keys","includes","push","label","translations","general","thisLanguage","_jsxs","_jsx","Fragment","className","collectionSlug","globalSlug"],"sources":["../../../src/views/Root/index.tsx"],"sourcesContent":["import type { I18nClient } from '@payloadcms/translations'\nimport type { Metadata } from 'next'\nimport type {\n  AdminViewClientProps,\n  AdminViewServerPropsOnly,\n  CollectionPreferences,\n  ImportMap,\n  SanitizedCollectionConfig,\n  SanitizedConfig,\n  SanitizedGlobalConfig,\n} from 'payload'\n\nimport { PageConfigProvider } from '@payloadcms/ui'\nimport { RenderServerComponent } from '@payloadcms/ui/elements/RenderServerComponent'\nimport { getClientConfig } from '@payloadcms/ui/utilities/getClientConfig'\nimport { notFound, redirect } from 'next/navigation.js'\nimport { formatAdminURL } from 'payload/shared'\nimport * as qs from 'qs-esm'\nimport React from 'react'\n\nimport { DefaultTemplate } from '../../templates/Default/index.js'\nimport { MinimalTemplate } from '../../templates/Minimal/index.js'\nimport { getPreferences } from '../../utilities/getPreferences.js'\nimport { getVisibleEntities } from '../../utilities/getVisibleEntities.js'\nimport { handleAuthRedirect } from '../../utilities/handleAuthRedirect.js'\nimport { initReq } from '../../utilities/initReq.js'\nimport { isCustomAdminView } from '../../utilities/isCustomAdminView.js'\nimport { isPublicAdminRoute } from '../../utilities/isPublicAdminRoute.js'\nimport { getCustomViewByRoute } from './getCustomViewByRoute.js'\nimport { getRouteData } from './getRouteData.js'\n\nexport type GenerateViewMetadata = (args: {\n  config: SanitizedConfig\n  i18n: I18nClient\n  isEditing?: boolean\n  params?: { [key: string]: string | string[] }\n}) => Promise<Metadata>\n\nexport const RootPage = async ({\n  config: configPromise,\n  importMap,\n  params: paramsPromise,\n  searchParams: searchParamsPromise,\n}: {\n  readonly config: Promise<SanitizedConfig>\n  readonly importMap: ImportMap\n  readonly params: Promise<{\n    segments: string[]\n  }>\n  readonly searchParams: Promise<{\n    [key: string]: string | string[]\n  }>\n}) => {\n  const config = await configPromise\n\n  const {\n    admin: {\n      routes: { createFirstUser: _createFirstUserRoute },\n      user: userSlug,\n    },\n    routes: { admin: adminRoute },\n  } = config\n\n  const params = await paramsPromise\n\n  const currentRoute = formatAdminURL({\n    adminRoute,\n    path: Array.isArray(params.segments) ? `/${params.segments.join('/')}` : null,\n  })\n\n  const segments = Array.isArray(params.segments) ? params.segments : []\n  const isCollectionRoute = segments[0] === 'collections'\n  const isGlobalRoute = segments[0] === 'globals'\n  let collectionConfig: SanitizedCollectionConfig = undefined\n  let globalConfig: SanitizedGlobalConfig = undefined\n\n  const searchParams = await searchParamsPromise\n\n  // Redirect `${adminRoute}/collections` to `${adminRoute}`\n  if (isCollectionRoute) {\n    if (segments.length === 1) {\n      const { viewKey } = getCustomViewByRoute({\n        config,\n        currentRoute: '/collections',\n      })\n\n      // Only redirect if there's NO custom view configured for /collections\n      if (!viewKey) {\n        redirect(adminRoute)\n      }\n    }\n\n    if (segments[1]) {\n      collectionConfig = config.collections.find(({ slug }) => slug === segments[1])\n    }\n  }\n\n  // Redirect `${adminRoute}/globals` to `${adminRoute}`\n  if (isGlobalRoute) {\n    if (segments.length === 1) {\n      const { viewKey } = getCustomViewByRoute({\n        config,\n        currentRoute: '/globals',\n      })\n\n      // Only redirect if there's NO custom view configured for /globals\n      if (!viewKey) {\n        redirect(adminRoute)\n      }\n    }\n\n    if (segments[1]) {\n      globalConfig = config.globals.find(({ slug }) => slug === segments[1])\n    }\n  }\n\n  if ((isCollectionRoute && !collectionConfig) || (isGlobalRoute && !globalConfig)) {\n    return notFound()\n  }\n\n  const queryString = `${qs.stringify(searchParams ?? {}, { addQueryPrefix: true })}`\n  const {\n    cookies,\n    locale,\n    permissions,\n    req,\n    req: { payload },\n  } = await initReq({\n    configPromise: config,\n    importMap,\n    key: 'initPage',\n    overrides: {\n      fallbackLocale: false,\n      req: {\n        query: qs.parse(queryString, {\n          depth: 10,\n          ignoreQueryPrefix: true,\n        }),\n      },\n      urlSuffix: `${currentRoute}${searchParams ? queryString : ''}`,\n    },\n  })\n\n  if (\n    !permissions.canAccessAdmin &&\n    !isPublicAdminRoute({ adminRoute, config: payload.config, route: currentRoute }) &&\n    !isCustomAdminView({ adminRoute, config: payload.config, route: currentRoute })\n  ) {\n    redirect(\n      handleAuthRedirect({\n        config: payload.config,\n        route: currentRoute,\n        searchParams,\n        user: req.user,\n      }),\n    )\n  }\n\n  let collectionPreferences: CollectionPreferences = undefined\n\n  if (collectionConfig && segments.length === 2) {\n    if (config.folders && collectionConfig.folders && segments[1] !== config.folders.slug) {\n      await getPreferences<CollectionPreferences>(\n        `collection-${collectionConfig.slug}`,\n        req.payload,\n        req.user.id,\n        config.admin.user,\n      ).then((res) => {\n        if (res && res.value) {\n          collectionPreferences = res.value\n        }\n      })\n    }\n  }\n\n  const {\n    browseByFolderSlugs,\n    DefaultView,\n    documentSubViewType,\n    routeParams,\n    templateClassName,\n    templateType,\n    viewActions,\n    viewType,\n  } = getRouteData({\n    adminRoute,\n    collectionConfig,\n    collectionPreferences,\n    currentRoute,\n    globalConfig,\n    payload,\n    searchParams,\n    segments,\n  })\n\n  req.routeParams = routeParams\n\n  const dbHasUser =\n    req.user ||\n    (await req.payload.db\n      .findOne({\n        collection: userSlug,\n        req,\n      })\n      ?.then((doc) => !!doc))\n\n  /**\n   * This function is responsible for handling the case where the view is not found.\n   * The current route did not match any default views or custom route views.\n   */\n  if (!DefaultView?.Component && !DefaultView?.payloadComponent) {\n    if (req?.user) {\n      notFound()\n    }\n\n    if (dbHasUser) {\n      redirect(adminRoute)\n    }\n  }\n\n  const createFirstUserRoute = formatAdminURL({ adminRoute, path: _createFirstUserRoute })\n\n  const usersCollection = config.collections.find(({ slug }) => slug === userSlug)\n  const disableLocalStrategy = usersCollection?.auth?.disableLocalStrategy\n\n  if (disableLocalStrategy && currentRoute === createFirstUserRoute) {\n    redirect(adminRoute)\n  }\n\n  if (!dbHasUser && currentRoute !== createFirstUserRoute && !disableLocalStrategy) {\n    redirect(createFirstUserRoute)\n  }\n\n  if (dbHasUser && currentRoute === createFirstUserRoute) {\n    redirect(adminRoute)\n  }\n\n  if (!DefaultView?.Component && !DefaultView?.payloadComponent && !dbHasUser) {\n    redirect(adminRoute)\n  }\n\n  const clientConfig = getClientConfig({\n    config,\n    i18n: req.i18n,\n    importMap,\n    user: viewType === 'createFirstUser' ? true : req.user,\n  })\n\n  const visibleEntities = getVisibleEntities({ req })\n\n  const folderID = routeParams.folderID\n\n  const RenderedView = RenderServerComponent({\n    clientProps: {\n      browseByFolderSlugs,\n      clientConfig,\n      documentSubViewType,\n      viewType,\n    } satisfies AdminViewClientProps,\n    Component: DefaultView.payloadComponent,\n    Fallback: DefaultView.Component,\n    importMap,\n    serverProps: {\n      clientConfig,\n      collectionConfig,\n      docID: routeParams.id,\n      folderID,\n      globalConfig,\n      i18n: req.i18n,\n      importMap,\n      initPageResult: {\n        collectionConfig,\n        cookies,\n        docID: routeParams.id,\n        globalConfig,\n        languageOptions: Object.entries(req.payload.config.i18n.supportedLanguages || {}).reduce(\n          (acc, [language, languageConfig]) => {\n            if (Object.keys(req.payload.config.i18n.supportedLanguages).includes(language)) {\n              acc.push({\n                label: languageConfig.translations.general.thisLanguage,\n                value: language,\n              })\n            }\n\n            return acc\n          },\n          [],\n        ),\n        locale,\n        permissions,\n        req,\n        translations: req.i18n.translations,\n        visibleEntities,\n      },\n      params,\n      payload: req.payload,\n      searchParams,\n      viewActions,\n    } satisfies AdminViewServerPropsOnly,\n  })\n\n  return (\n    <PageConfigProvider config={clientConfig}>\n      {!templateType && <React.Fragment>{RenderedView}</React.Fragment>}\n      {templateType === 'minimal' && (\n        <MinimalTemplate className={templateClassName}>{RenderedView}</MinimalTemplate>\n      )}\n      {templateType === 'default' && (\n        <DefaultTemplate\n          collectionSlug={collectionConfig?.slug}\n          docID={routeParams.id}\n          documentSubViewType={documentSubViewType}\n          globalSlug={globalConfig?.slug}\n          i18n={req.i18n}\n          locale={locale}\n          params={params}\n          payload={req.payload}\n          permissions={permissions}\n          req={req}\n          searchParams={searchParams}\n          user={req.user}\n          viewActions={viewActions}\n          viewType={viewType}\n          visibleEntities={{\n            // The reason we are not passing in initPageResult.visibleEntities directly is due to a \"Cannot assign to read only property of object '#<Object>\" error introduced in React 19\n            // which this caused as soon as initPageResult.visibleEntities is passed in\n            collections: visibleEntities?.collections,\n            globals: visibleEntities?.globals,\n          }}\n        >\n          {RenderedView}\n        </DefaultTemplate>\n      )}\n    </PageConfigProvider>\n  )\n}\n"],"mappings":"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","ignoreList":[]}