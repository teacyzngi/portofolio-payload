{"version":3,"file":"getFieldsForRowComparison.spec.js","names":["getFieldsForRowComparison","describe","it","arrayFields","name","type","field","fields","valueToRow","valueFromRow","row","baseVersionField","path","schemaPath","config","expect","toEqual","blockAFields","blocks","slug","blockType"],"sources":["../../../../../src/views/Version/RenderFieldsToDiff/utilities/getFieldsForRowComparison.spec.ts"],"sourcesContent":["import { getFieldsForRowComparison } from './getFieldsForRowComparison'\nimport type { ArrayFieldClient, BlocksFieldClient, ClientField } from 'payload'\n\ndescribe('getFieldsForRowComparison', () => {\n  describe('array fields', () => {\n    it('should return fields from array field', () => {\n      const arrayFields: ClientField[] = [\n        { name: 'title', type: 'text' },\n        { name: 'description', type: 'textarea' },\n      ]\n\n      const field: ArrayFieldClient = {\n        type: 'array',\n        name: 'items',\n        fields: arrayFields,\n      }\n\n      const { fields } = getFieldsForRowComparison({\n        field,\n        valueToRow: {},\n        valueFromRow: {},\n        row: 0,\n        baseVersionField: { fields: [], path: 'items', schemaPath: 'items', type: 'array' },\n        config: {} as any,\n      })\n\n      expect(fields).toEqual(arrayFields)\n    })\n  })\n\n  describe('blocks fields', () => {\n    it('should return combined fields when block types match', () => {\n      const blockAFields: ClientField[] = [\n        { name: 'a', type: 'text' },\n        { name: 'b', type: 'text' },\n      ]\n\n      const field: BlocksFieldClient = {\n        type: 'blocks',\n        name: 'myBlocks',\n        blocks: [\n          {\n            slug: 'blockA',\n            fields: blockAFields,\n          },\n        ],\n      }\n\n      const valueToRow = { blockType: 'blockA' }\n      const valueFromRow = { blockType: 'blockA' }\n\n      const { fields } = getFieldsForRowComparison({\n        field,\n        valueToRow,\n        valueFromRow,\n        row: 0,\n        baseVersionField: { fields: [], path: 'myBlocks', schemaPath: 'myBlocks', type: 'blocks' },\n        config: {} as any,\n      })\n\n      expect(fields).toEqual(blockAFields)\n    })\n\n    it('should return unique combined fields when block types differ', () => {\n      const field: BlocksFieldClient = {\n        type: 'blocks',\n        name: 'myBlocks',\n        blocks: [\n          {\n            slug: 'blockA',\n            fields: [\n              { name: 'a', type: 'text' },\n              { name: 'b', type: 'text' },\n            ],\n          },\n          {\n            slug: 'blockB',\n            fields: [\n              { name: 'b', type: 'text' },\n              { name: 'c', type: 'text' },\n            ],\n          },\n        ],\n      }\n\n      const valueToRow = { blockType: 'blockA' }\n      const valueFromRow = { blockType: 'blockB' }\n\n      const { fields } = getFieldsForRowComparison({\n        field,\n        valueToRow,\n        valueFromRow,\n        row: 0,\n        baseVersionField: { fields: [], path: 'myBlocks', schemaPath: 'myBlocks', type: 'blocks' },\n        config: {} as any,\n      })\n\n      // Should contain all unique fields from both blocks\n      expect(fields).toEqual([\n        { name: 'a', type: 'text' },\n        { name: 'b', type: 'text' },\n        { name: 'c', type: 'text' },\n      ])\n    })\n  })\n})\n"],"mappings":"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","ignoreList":[]}