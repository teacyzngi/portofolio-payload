{"version":3,"file":"getFieldsForRowComparison.js","names":["getUniqueListBy","getFieldsForRowComparison","baseVersionField","config","field","row","valueFromRow","valueToRow","fields","versionFields","type","rows","length","blockType","matchedBlock","blocksMap","blockReferences","blocks","find","block","slug","matchedVersionBlock","matchedComparisonBlock"],"sources":["../../../../../src/views/Version/RenderFieldsToDiff/utilities/getFieldsForRowComparison.ts"],"sourcesContent":["import type {\n  ArrayFieldClient,\n  BaseVersionField,\n  BlocksFieldClient,\n  ClientBlock,\n  ClientConfig,\n  ClientField,\n  VersionField,\n} from 'payload'\n\nimport { getUniqueListBy } from 'payload/shared'\n\n/**\n * Get the fields for a row in an iterable field for comparison.\n * - Array fields: the fields of the array field, because the fields are the same for each row.\n * - Blocks fields: the union of fields from the comparison and version row,\n *   because the fields from the version and comparison rows may differ.\n */\nexport function getFieldsForRowComparison({\n  baseVersionField,\n  config,\n  field,\n  row,\n  valueFromRow,\n  valueToRow,\n}: {\n  baseVersionField: BaseVersionField\n  config: ClientConfig\n  field: ArrayFieldClient | BlocksFieldClient\n  row: number\n  valueFromRow: any\n  valueToRow: any\n}): { fields: ClientField[]; versionFields: VersionField[] } {\n  let fields: ClientField[] = []\n  let versionFields: VersionField[] = []\n\n  if (field.type === 'array' && 'fields' in field) {\n    fields = field.fields\n    versionFields = baseVersionField.rows?.length\n      ? baseVersionField.rows[row]\n      : baseVersionField.fields\n  } else if (field.type === 'blocks') {\n    if (valueToRow?.blockType === valueFromRow?.blockType) {\n      const matchedBlock: ClientBlock =\n        config?.blocksMap?.[valueToRow?.blockType] ??\n        (((('blocks' in field || 'blockReferences' in field) &&\n          (field.blockReferences ?? field.blocks)?.find(\n            (block) => typeof block !== 'string' && block.slug === valueToRow?.blockType,\n          )) || {\n          fields: [],\n        }) as ClientBlock)\n\n      fields = matchedBlock.fields\n      versionFields = baseVersionField.rows?.length\n        ? baseVersionField.rows[row]\n        : baseVersionField.fields\n    } else {\n      const matchedVersionBlock =\n        config?.blocksMap?.[valueToRow?.blockType] ??\n        (((('blocks' in field || 'blockReferences' in field) &&\n          (field.blockReferences ?? field.blocks)?.find(\n            (block) => typeof block !== 'string' && block.slug === valueToRow?.blockType,\n          )) || {\n          fields: [],\n        }) as ClientBlock)\n\n      const matchedComparisonBlock =\n        config?.blocksMap?.[valueFromRow?.blockType] ??\n        (((('blocks' in field || 'blockReferences' in field) &&\n          (field.blockReferences ?? field.blocks)?.find(\n            (block) => typeof block !== 'string' && block.slug === valueFromRow?.blockType,\n          )) || {\n          fields: [],\n        }) as ClientBlock)\n\n      fields = getUniqueListBy<ClientField>(\n        [...matchedVersionBlock.fields, ...matchedComparisonBlock.fields],\n        'name',\n      )\n\n      // buildVersionFields already merged the fields of the version and comparison rows together\n      versionFields = baseVersionField.rows?.length\n        ? baseVersionField.rows[row]\n        : baseVersionField.fields\n    }\n  }\n\n  return { fields, versionFields }\n}\n"],"mappings":"AAUA,SAASA,eAAe,QAAQ;AAEhC;;;;;;AAMA,OAAO,SAASC,0BAA0B;EACxCC,gBAAgB;EAChBC,MAAM;EACNC,KAAK;EACLC,GAAG;EACHC,YAAY;EACZC;AAAU,CAQX;EACC,IAAIC,MAAA,GAAwB,EAAE;EAC9B,IAAIC,aAAA,GAAgC,EAAE;EAEtC,IAAIL,KAAA,CAAMM,IAAI,KAAK,WAAW,YAAYN,KAAA,EAAO;IAC/CI,MAAA,GAASJ,KAAA,CAAMI,MAAM;IACrBC,aAAA,GAAgBP,gBAAA,CAAiBS,IAAI,EAAEC,MAAA,GACnCV,gBAAA,CAAiBS,IAAI,CAACN,GAAA,CAAI,GAC1BH,gBAAA,CAAiBM,MAAM;EAC7B,OAAO,IAAIJ,KAAA,CAAMM,IAAI,KAAK,UAAU;IAClC,IAAIH,UAAA,EAAYM,SAAA,KAAcP,YAAA,EAAcO,SAAA,EAAW;MACrD,MAAMC,YAAA,GACJX,MAAA,EAAQY,SAAA,GAAYR,UAAA,EAAYM,SAAA,CAAU,KACxC,CAAE,YAAYT,KAAA,IAAS,qBAAqBA,KAAI,KAC/C,CAAAA,KAAA,CAAMY,eAAe,IAAIZ,KAAA,CAAMa,MAAM,GAAGC,IAAA,CACtCC,KAAA,IAAU,OAAOA,KAAA,KAAU,YAAYA,KAAA,CAAMC,IAAI,KAAKb,UAAA,EAAYM,SAAA,KAC/D;QACNL,MAAA,EAAQ;MACV;MAEFA,MAAA,GAASM,YAAA,CAAaN,MAAM;MAC5BC,aAAA,GAAgBP,gBAAA,CAAiBS,IAAI,EAAEC,MAAA,GACnCV,gBAAA,CAAiBS,IAAI,CAACN,GAAA,CAAI,GAC1BH,gBAAA,CAAiBM,MAAM;IAC7B,OAAO;MACL,MAAMa,mBAAA,GACJlB,MAAA,EAAQY,SAAA,GAAYR,UAAA,EAAYM,SAAA,CAAU,KACxC,CAAE,YAAYT,KAAA,IAAS,qBAAqBA,KAAI,KAC/C,CAAAA,KAAA,CAAMY,eAAe,IAAIZ,KAAA,CAAMa,MAAM,GAAGC,IAAA,CACtCC,KAAA,IAAU,OAAOA,KAAA,KAAU,YAAYA,KAAA,CAAMC,IAAI,KAAKb,UAAA,EAAYM,SAAA,KAC/D;QACNL,MAAA,EAAQ;MACV;MAEF,MAAMc,sBAAA,GACJnB,MAAA,EAAQY,SAAA,GAAYT,YAAA,EAAcO,SAAA,CAAU,KAC1C,CAAE,YAAYT,KAAA,IAAS,qBAAqBA,KAAI,KAC/C,CAAAA,KAAA,CAAMY,eAAe,IAAIZ,KAAA,CAAMa,MAAM,GAAGC,IAAA,CACtCC,KAAA,IAAU,OAAOA,KAAA,KAAU,YAAYA,KAAA,CAAMC,IAAI,KAAKd,YAAA,EAAcO,SAAA,KACjE;QACNL,MAAA,EAAQ;MACV;MAEFA,MAAA,GAASR,eAAA,CACP,C,GAAIqB,mBAAA,CAAoBb,MAAM,E,GAAKc,sBAAA,CAAuBd,MAAM,CAAC,EACjE;MAGF;MACAC,aAAA,GAAgBP,gBAAA,CAAiBS,IAAI,EAAEC,MAAA,GACnCV,gBAAA,CAAiBS,IAAI,CAACN,GAAA,CAAI,GAC1BH,gBAAA,CAAiBM,MAAM;IAC7B;EACF;EAEA,OAAO;IAAEA,MAAA;IAAQC;EAAc;AACjC","ignoreList":[]}