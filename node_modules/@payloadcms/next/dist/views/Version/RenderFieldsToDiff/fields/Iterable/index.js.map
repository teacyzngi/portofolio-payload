{"version":3,"file":"index.js","names":["c","_c","getTranslation","useConfig","useTranslation","fieldIsArrayType","fieldIsBlockType","React","useSelectedLocales","DiffCollapser","RenderVersionFieldsToDiff","getFieldsForRowComparison","baseClass","Iterable","t0","$","baseVersionField","comparisonValue","valueFrom","field","locale","parentIsLocalized","versionValue","valueTo","i18n","t","selectedLocales","config","Error","type","valueToRowCount","Array","isArray","length","valueFromRowCount","maxRows","Math","max","t1","_jsx","className","children","_jsxs","isIterable","Label","label","from","_","i","valueToRow","valueFromRow","fields","versionFields","row","rowNumber","String","padStart","rowLabel","hideGutter","localized","labels","plural"],"sources":["../../../../../../src/views/Version/RenderFieldsToDiff/fields/Iterable/index.tsx"],"sourcesContent":["'use client'\n\nimport type { FieldDiffClientProps } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport { useConfig, useTranslation } from '@payloadcms/ui'\n\nimport './index.scss'\n\nimport { fieldIsArrayType, fieldIsBlockType } from 'payload/shared'\nimport React from 'react'\n\nimport { useSelectedLocales } from '../../../Default/SelectedLocalesContext.js'\nimport { DiffCollapser } from '../../DiffCollapser/index.js'\nimport { RenderVersionFieldsToDiff } from '../../RenderVersionFieldsToDiff.js'\nimport { getFieldsForRowComparison } from '../../utilities/getFieldsForRowComparison.js'\n\nconst baseClass = 'iterable-diff'\n\nexport const Iterable: React.FC<FieldDiffClientProps> = ({\n  baseVersionField,\n  comparisonValue: valueFrom,\n  field,\n  locale,\n  parentIsLocalized,\n  versionValue: valueTo,\n}) => {\n  const { i18n, t } = useTranslation()\n  const { selectedLocales } = useSelectedLocales()\n  const { config } = useConfig()\n\n  if (!fieldIsArrayType(field) && !fieldIsBlockType(field)) {\n    throw new Error(`Expected field to be an array or blocks type but got: ${field.type}`)\n  }\n\n  const valueToRowCount = Array.isArray(valueTo) ? valueTo.length : 0\n  const valueFromRowCount = Array.isArray(valueFrom) ? valueFrom.length : 0\n  const maxRows = Math.max(valueToRowCount, valueFromRowCount)\n\n  return (\n    <div className={baseClass}>\n      <DiffCollapser\n        field={field}\n        isIterable\n        Label={\n          'label' in field &&\n          field.label &&\n          typeof field.label !== 'function' && (\n            <span>\n              {locale && <span className={`${baseClass}__locale-label`}>{locale}</span>}\n              {getTranslation(field.label, i18n)}\n            </span>\n          )\n        }\n        locales={selectedLocales}\n        parentIsLocalized={parentIsLocalized}\n        valueFrom={valueFrom}\n        valueTo={valueTo}\n      >\n        {maxRows > 0 && (\n          <div className={`${baseClass}__rows`}>\n            {Array.from({ length: maxRows }, (_, i) => {\n              const valueToRow = valueTo?.[i] || {}\n              const valueFromRow = valueFrom?.[i] || {}\n\n              const { fields, versionFields } = getFieldsForRowComparison({\n                baseVersionField,\n                config,\n                field,\n                row: i,\n                valueFromRow,\n                valueToRow,\n              })\n\n              if (!versionFields?.length) {\n                // Rows without a diff create \"holes\" in the baseVersionField.rows (=versionFields) array - this is to maintain the correct row indexes.\n                // It does mean that this row has no diff and should not be rendered => skip it.\n                return null\n              }\n\n              const rowNumber = String(i + 1).padStart(2, '0')\n              const rowLabel = fieldIsArrayType(field)\n                ? `${t('general:item')} ${rowNumber}`\n                : `${t('fields:block')} ${rowNumber}`\n\n              return (\n                <div className={`${baseClass}__row`} key={i}>\n                  <DiffCollapser\n                    fields={fields}\n                    hideGutter={true}\n                    Label={\n                      <div className={`${baseClass}-label-container`}>\n                        <div className={`${baseClass}-label-prefix`}></div>\n                        <span className={`${baseClass}__label`}>{rowLabel}</span>\n                      </div>\n                    }\n                    locales={selectedLocales}\n                    parentIsLocalized={parentIsLocalized || field.localized}\n                    valueFrom={valueFromRow}\n                    valueTo={valueToRow}\n                  >\n                    <RenderVersionFieldsToDiff versionFields={versionFields} />\n                  </DiffCollapser>\n                </div>\n              )\n            })}\n          </div>\n        )}\n        {maxRows === 0 && (\n          <div className={`${baseClass}__no-rows`}>\n            {i18n.t('version:noRowsFound', {\n              label:\n                'labels' in field && field.labels?.plural\n                  ? getTranslation(field.labels.plural, i18n)\n                  : i18n.t('general:rows'),\n            })}\n          </div>\n        )}\n      </DiffCollapser>\n    </div>\n  )\n}\n"],"mappings":"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","ignoreList":[]}