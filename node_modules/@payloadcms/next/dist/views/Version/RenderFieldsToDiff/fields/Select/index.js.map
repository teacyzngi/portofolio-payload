{"version":3,"file":"index.js","names":["c","_c","getTranslation","FieldDiffContainer","getHTMLDiffComponents","useTranslation","React","baseClass","getOptionsToRender","value","options","hasMany","Array","isArray","map","val","find","option","String","getTranslatedOptions","i18n","translatedLabel","label","join","Select","t0","$","comparisonValue","valueFrom","field","locale","nestingLevel","versionValue","valueTo","renderedValueFrom","JSON","stringify","renderedValueTo","t1","t2","t3","From","To","fromHTML","toHTML","tokenizeByCharacter","_jsx","className"],"sources":["../../../../../../src/views/Version/RenderFieldsToDiff/fields/Select/index.tsx"],"sourcesContent":["'use client'\nimport type { I18nClient } from '@payloadcms/translations'\nimport type { Option, SelectField, SelectFieldDiffClientComponent } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport { FieldDiffContainer, getHTMLDiffComponents, useTranslation } from '@payloadcms/ui'\nimport React from 'react'\n\nimport './index.scss'\n\nconst baseClass = 'select-diff'\n\nconst getOptionsToRender = (\n  value: string,\n  options: SelectField['options'],\n  hasMany: boolean,\n): Option | Option[] => {\n  if (hasMany && Array.isArray(value)) {\n    return value.map(\n      (val) =>\n        options.find((option) => (typeof option === 'string' ? option : option.value) === val) ||\n        String(val),\n    )\n  }\n  return (\n    options.find((option) => (typeof option === 'string' ? option : option.value) === value) ||\n    String(value)\n  )\n}\n\n/**\n * Translates option labels while ensuring they are strings.\n * If `options.label` is a JSX element, it falls back to `options.value` because `DiffViewer`\n * expects all values to be strings.\n */\nconst getTranslatedOptions = (options: Option | Option[], i18n: I18nClient): string => {\n  if (Array.isArray(options)) {\n    return options\n      .map((option) => {\n        if (typeof option === 'string') {\n          return option\n        }\n        const translatedLabel = getTranslation(option.label, i18n)\n\n        // Ensure the result is a string, otherwise use option.value\n        return typeof translatedLabel === 'string' ? translatedLabel : option.value\n      })\n      .join(', ')\n  }\n\n  if (typeof options === 'string') {\n    return options\n  }\n\n  const translatedLabel = getTranslation(options.label, i18n)\n\n  return typeof translatedLabel === 'string' ? translatedLabel : options.value\n}\n\nexport const Select: SelectFieldDiffClientComponent = ({\n  comparisonValue: valueFrom,\n  diffMethod,\n  field,\n  locale,\n  nestingLevel,\n  versionValue: valueTo,\n}) => {\n  const { i18n } = useTranslation()\n\n  const options = 'options' in field && field.options\n\n  const renderedValueFrom =\n    typeof valueFrom !== 'undefined'\n      ? getTranslatedOptions(\n          getOptionsToRender(\n            typeof valueFrom === 'string' ? valueFrom : JSON.stringify(valueFrom),\n            options,\n            field.hasMany,\n          ),\n          i18n,\n        )\n      : ''\n\n  const renderedValueTo =\n    typeof valueTo !== 'undefined'\n      ? getTranslatedOptions(\n          getOptionsToRender(\n            typeof valueTo === 'string' ? valueTo : JSON.stringify(valueTo),\n            options,\n            field.hasMany,\n          ),\n          i18n,\n        )\n      : ''\n\n  const { From, To } = getHTMLDiffComponents({\n    fromHTML: '<p>' + renderedValueFrom + '</p>',\n    toHTML: '<p>' + renderedValueTo + '</p>',\n    tokenizeByCharacter: true,\n  })\n\n  return (\n    <FieldDiffContainer\n      className={baseClass}\n      From={From}\n      i18n={i18n}\n      label={{\n        label: field.label,\n        locale,\n      }}\n      nestingLevel={nestingLevel}\n      To={To}\n    />\n  )\n}\n"],"mappings":"AAAA;;AAAA,SAAAA,CAAA,IAAAC,EAAA;;AAIA,SAASC,cAAc,QAAQ;AAC/B,SAASC,kBAAkB,EAAEC,qBAAqB,EAAEC,cAAc,QAAQ;AAC1E,OAAOC,KAAA,MAAW;AAIlB,MAAMC,SAAA,GAAY;AAElB,MAAMC,kBAAA,GAAqBA,CACzBC,KAAA,EACAC,OAAA,EACAC,OAAA;EAEA,IAAIA,OAAA,IAAWC,KAAA,CAAMC,OAAO,CAACJ,KAAA,GAAQ;IACnC,OAAOA,KAAA,CAAMK,GAAG,CACbC,GAAA,IACCL,OAAA,CAAQM,IAAI,CAAEC,MAAA,IAAW,CAAC,OAAOA,MAAA,KAAW,WAAWA,MAAA,GAASA,MAAA,CAAOR,KAAK,MAAMM,GAAA,KAClFG,MAAA,CAAOH,GAAA;EAEb;EACA,OACEL,OAAA,CAAQM,IAAI,CAAEC,MAAA,IAAW,CAAC,OAAOA,MAAA,KAAW,WAAWA,MAAA,GAASA,MAAA,CAAOR,KAAK,MAAMA,KAAA,KAClFS,MAAA,CAAOT,KAAA;AAEX;AAEA;;;;;AAKA,MAAMU,oBAAA,GAAuBA,CAACT,OAAA,EAA4BU,IAAA;EACxD,IAAIR,KAAA,CAAMC,OAAO,CAACH,OAAA,GAAU;IAC1B,OAAOA,OAAA,CACJI,GAAG,CAAEG,MAAA;MACJ,IAAI,OAAOA,MAAA,KAAW,UAAU;QAC9B,OAAOA,MAAA;MACT;MACA,MAAMI,eAAA,GAAkBnB,cAAA,CAAee,MAAA,CAAOK,KAAK,EAAEF,IAAA;MAErD;MACA,OAAO,OAAOC,eAAA,KAAoB,WAAWA,eAAA,GAAkBJ,MAAA,CAAOR,KAAK;IAC7E,GACCc,IAAI,CAAC;EACV;EAEA,IAAI,OAAOb,OAAA,KAAY,UAAU;IAC/B,OAAOA,OAAA;EACT;EAEA,MAAMW,eAAA,GAAkBnB,cAAA,CAAeQ,OAAA,CAAQY,KAAK,EAAEF,IAAA;EAEtD,OAAO,OAAOC,eAAA,KAAoB,WAAWA,eAAA,GAAkBX,OAAA,CAAQD,KAAK;AAC9E;AAEA,OAAO,MAAMe,MAAA,GAAyCC,EAAA;EAAA,MAAAC,CAAA,GAAAzB,EAAA;EAAC;IAAA0B,eAAA,EAAAC,SAAA;IAAAC,KAAA;IAAAC,MAAA;IAAAC,YAAA;IAAAC,YAAA,EAAAC;EAAA,IAAAR,EAOtD;EACC;IAAAL;EAAA,IAAiBf,cAAA;EAEjB,MAAAK,OAAA,GAAgB,aAAamB,KAAA,IAASA,KAAA,CAAAnB,OAAa;EAEnD,MAAAwB,iBAAA,GACE,OAAON,SAAA,KAAc,cACjBT,oBAAA,CACEX,kBAAA,CACE,OAAOoB,SAAA,KAAc,WAAWA,SAAA,GAAYO,IAAA,CAAAC,SAAA,CAAeR,SAAA,GAC3DlB,OAAA,EACAmB,KAAA,CAAAlB,OAAa,GAEfS,IAAA,IAEF;EAEN,MAAAiB,eAAA,GACE,OAAOJ,OAAA,KAAY,cACfd,oBAAA,CACEX,kBAAA,CACE,OAAOyB,OAAA,KAAY,WAAWA,OAAA,GAAUE,IAAA,CAAAC,SAAA,CAAeH,OAAA,GACvDvB,OAAA,EACAmB,KAAA,CAAAlB,OAAa,GAEfS,IAAA,IAEF;EAGM,MAAAkB,EAAA,WAAQJ,iBAAA,GAAoB;EAC9B,MAAAK,EAAA,WAAQF,eAAA,GAAkB;EAAA,IAAAG,EAAA;EAAA,IAAAd,CAAA,QAAAG,KAAA,CAAAP,KAAA,IAAAI,CAAA,QAAAN,IAAA,IAAAM,CAAA,QAAAI,MAAA,IAAAJ,CAAA,QAAAK,YAAA,IAAAL,CAAA,QAAAY,EAAA,IAAAZ,CAAA,QAAAa,EAAA;IAFpC;MAAAE,IAAA;MAAAC;IAAA,IAAqBtC,qBAAA;MAAAuC,QAAA,EACTL,EAA4B;MAAAM,MAAA,EAC9BL,EAA0B;MAAAM,mBAAA;IAAA,CAEpC;IAGEL,EAAA,GAAAM,IAAA,CAAA3C,kBAAA;MAAA4C,SAAA,EAAAxC,SAAA;MAAAkC,IAAA;MAAArB,IAAA;MAAAE,KAAA;QAAAA,KAAA,EAKWO,KAAA,CAAAP,KAAA;QAAAQ;MAAA;MAAAC,YAAA;MAAAW;IAAA,C;;;;;;;;;;;SALXF,E;CAYJ","ignoreList":[]}