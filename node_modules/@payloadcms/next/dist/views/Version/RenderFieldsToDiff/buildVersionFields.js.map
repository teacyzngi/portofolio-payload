{"version":3,"file":"buildVersionFields.js","names":["RenderServerComponent","dequal","MissingEditorProp","fieldIsID","fieldShouldBeLocalized","getFieldPaths","getUniqueListBy","tabHasName","diffComponents","buildVersionFields","clientSchemaMap","customDiffComponents","entitySlug","fields","fieldsPermissions","i18n","modifiedOnly","nestingLevel","parentIndexPath","parentIsLocalized","parentPath","parentSchemaPath","req","selectedLocales","versionFromSiblingData","versionToSiblingData","versionFields","fieldIndex","field","indexPath","path","schemaPath","index","clientField","get","payload","logger","error","clientFieldKey","clientSchemaMapKeys","Array","from","keys","msg","Error","versionField","isLocalized","fieldName","name","valueFrom","valueTo","fieldByLocale","locale","localizedVersionField","buildVersionField","parentFieldsPermissions","baseVersionField","localized","Object","length","push","hasReadPermission","fieldPermissions","undefined","read","CustomComponent","type","editor","CellComponent","DiffComponent","admin","components","Diff","DefaultComponent","tabs","tabIndex","tab","isNamedTab","tabAsField","tabIndexPath","tabPath","tabSchemaPath","tabFieldsPermissions","tabPermissions","tabVersion","label","t","subFieldsPermissions","maxLength","Math","max","isArray","rows","i","fromRow","toRow","blockSlugToMatch","blockType","toBlock","blocks","blockReferences","find","block","slug","fromBlockSlugToMatch","fromBlock","blockFieldsPermissions","permissionsBlockSpecific","clientDiffProps","comparisonValue","diffMethod","versionValue","serverDiffProps","clientProps","Component","Fallback","importMap","key","serverProps"],"sources":["../../../../src/views/Version/RenderFieldsToDiff/buildVersionFields.tsx"],"sourcesContent":["import type { I18nClient } from '@payloadcms/translations'\n\nimport { RenderServerComponent } from '@payloadcms/ui/elements/RenderServerComponent'\nimport { dequal } from 'dequal/lite'\nimport {\n  type BaseVersionField,\n  type ClientField,\n  type ClientFieldSchemaMap,\n  type Field,\n  type FieldDiffClientProps,\n  type FieldDiffServerProps,\n  type FieldTypes,\n  type FlattenedBlock,\n  MissingEditorProp,\n  type PayloadComponent,\n  type PayloadRequest,\n  type SanitizedFieldPermissions,\n  type SanitizedFieldsPermissions,\n  type VersionField,\n} from 'payload'\nimport {\n  fieldIsID,\n  fieldShouldBeLocalized,\n  getFieldPaths,\n  getUniqueListBy,\n  tabHasName,\n} from 'payload/shared'\n\nimport { diffComponents } from './fields/index.js'\n\nexport type BuildVersionFieldsArgs = {\n  clientSchemaMap: ClientFieldSchemaMap\n  customDiffComponents: Partial<\n    Record<FieldTypes, PayloadComponent<FieldDiffServerProps, FieldDiffClientProps>>\n  >\n  entitySlug: string\n  fields: Field[]\n  fieldsPermissions: SanitizedFieldsPermissions\n  i18n: I18nClient\n  modifiedOnly: boolean\n  nestingLevel?: number\n  parentIndexPath: string\n  parentIsLocalized: boolean\n  parentPath: string\n  parentSchemaPath: string\n  req: PayloadRequest\n  selectedLocales: string[]\n  versionFromSiblingData: object\n  versionToSiblingData: object\n}\n\n/**\n * Build up an object that contains rendered diff components for each field.\n * This is then sent to the client to be rendered.\n *\n * Here, the server is responsible for traversing through the document data and building up this\n * version state object.\n */\nexport const buildVersionFields = ({\n  clientSchemaMap,\n  customDiffComponents,\n  entitySlug,\n  fields,\n  fieldsPermissions,\n  i18n,\n  modifiedOnly,\n  nestingLevel = 0,\n  parentIndexPath,\n  parentIsLocalized,\n  parentPath,\n  parentSchemaPath,\n  req,\n  selectedLocales,\n  versionFromSiblingData,\n  versionToSiblingData,\n}: BuildVersionFieldsArgs): {\n  versionFields: VersionField[]\n} => {\n  const versionFields: VersionField[] = []\n  let fieldIndex = -1\n\n  for (const field of fields) {\n    fieldIndex++\n\n    if (fieldIsID(field)) {\n      continue\n    }\n\n    const { indexPath, path, schemaPath } = getFieldPaths({\n      field,\n      index: fieldIndex,\n      parentIndexPath,\n      parentPath,\n      parentSchemaPath,\n    })\n\n    const clientField = clientSchemaMap.get(entitySlug + '.' + schemaPath)\n\n    if (!clientField) {\n      req.payload.logger.error({\n        clientFieldKey: entitySlug + '.' + schemaPath,\n        clientSchemaMapKeys: Array.from(clientSchemaMap.keys()),\n        msg: 'No client field found for ' + entitySlug + '.' + schemaPath,\n        parentPath,\n        parentSchemaPath,\n        path,\n        schemaPath,\n      })\n      throw new Error('No client field found for ' + entitySlug + '.' + schemaPath)\n    }\n\n    const versionField: VersionField = {}\n    const isLocalized = fieldShouldBeLocalized({ field, parentIsLocalized })\n\n    const fieldName: null | string = 'name' in field ? field.name : null\n\n    const valueFrom = fieldName ? versionFromSiblingData?.[fieldName] : versionFromSiblingData\n    const valueTo = fieldName ? versionToSiblingData?.[fieldName] : versionToSiblingData\n\n    if (isLocalized) {\n      versionField.fieldByLocale = {}\n\n      for (const locale of selectedLocales) {\n        const localizedVersionField = buildVersionField({\n          clientField: clientField as ClientField,\n          clientSchemaMap,\n          customDiffComponents,\n          entitySlug,\n          field,\n          i18n,\n          indexPath,\n          locale,\n          modifiedOnly,\n          nestingLevel,\n          parentFieldsPermissions: fieldsPermissions,\n          parentIsLocalized: true,\n          parentPath,\n          parentSchemaPath,\n          path,\n          req,\n          schemaPath,\n          selectedLocales,\n          valueFrom: valueFrom?.[locale],\n          valueTo: valueTo?.[locale],\n        })\n        if (localizedVersionField) {\n          versionField.fieldByLocale[locale] = localizedVersionField\n        }\n      }\n    } else {\n      const baseVersionField = buildVersionField({\n        clientField: clientField as ClientField,\n        clientSchemaMap,\n        customDiffComponents,\n        entitySlug,\n        field,\n        i18n,\n        indexPath,\n        modifiedOnly,\n        nestingLevel,\n        parentFieldsPermissions: fieldsPermissions,\n        parentIsLocalized: parentIsLocalized || ('localized' in field && field.localized),\n        parentPath,\n        parentSchemaPath,\n        path,\n        req,\n        schemaPath,\n        selectedLocales,\n        valueFrom,\n        valueTo,\n      })\n\n      if (baseVersionField) {\n        versionField.field = baseVersionField\n      }\n    }\n\n    if (\n      versionField.field ||\n      (versionField.fieldByLocale && Object.keys(versionField.fieldByLocale).length)\n    ) {\n      versionFields.push(versionField)\n    }\n  }\n\n  return {\n    versionFields,\n  }\n}\n\nconst buildVersionField = ({\n  clientField,\n  clientSchemaMap,\n  customDiffComponents,\n  entitySlug,\n  field,\n  i18n,\n  indexPath,\n  locale,\n  modifiedOnly,\n  nestingLevel,\n  parentFieldsPermissions,\n  parentIsLocalized,\n  parentPath,\n  parentSchemaPath,\n  path,\n  req,\n  schemaPath,\n  selectedLocales,\n  valueFrom,\n  valueTo,\n}: {\n  clientField: ClientField\n  field: Field\n  indexPath: string\n  locale?: string\n  modifiedOnly?: boolean\n  nestingLevel: number\n  parentFieldsPermissions: SanitizedFieldsPermissions\n  parentIsLocalized: boolean\n  path: string\n  schemaPath: string\n  valueFrom: unknown\n  valueTo: unknown\n} & Omit<\n  BuildVersionFieldsArgs,\n  | 'fields'\n  | 'fieldsPermissions'\n  | 'parentIndexPath'\n  | 'versionFromSiblingData'\n  | 'versionToSiblingData'\n>): BaseVersionField | null => {\n  let hasReadPermission: boolean = false\n  let fieldPermissions: SanitizedFieldPermissions | undefined = undefined\n\n  if (typeof parentFieldsPermissions === 'boolean') {\n    hasReadPermission = parentFieldsPermissions\n    fieldPermissions = parentFieldsPermissions\n  } else {\n    if ('name' in field) {\n      fieldPermissions = parentFieldsPermissions?.[field.name]\n      if (typeof fieldPermissions === 'boolean') {\n        hasReadPermission = fieldPermissions\n      } else if (typeof fieldPermissions?.read === 'boolean') {\n        hasReadPermission = fieldPermissions.read\n      }\n    } else {\n      // If the field is unnamed and parentFieldsPermissions is an object, its sub-fields will decide their read permissions state.\n      // As far as this field is concerned, we are allowed to read it, as we need to reach its sub-fields to determine their read permissions.\n      hasReadPermission = true\n    }\n  }\n\n  if (!hasReadPermission) {\n    // HasReadPermission is only valid if the field has a name. E.g. for a tabs field it would incorrectly return `false`.\n    return null\n  }\n\n  if (modifiedOnly && dequal(valueFrom, valueTo)) {\n    return null\n  }\n\n  let CustomComponent = customDiffComponents?.[field.type]\n  if (field?.type === 'richText') {\n    if (!field?.editor) {\n      throw new MissingEditorProp(field) // while we allow disabling editor functionality, you should not have any richText fields defined if you do not have an editor\n    }\n\n    if (typeof field?.editor === 'function') {\n      throw new Error('Attempted to access unsanitized rich text editor.')\n    }\n\n    if (field.editor.CellComponent) {\n      CustomComponent = field.editor.DiffComponent\n    }\n  }\n  if (field?.admin?.components?.Diff) {\n    CustomComponent = field.admin.components.Diff\n  }\n\n  const DefaultComponent = diffComponents?.[field.type]\n\n  const baseVersionField: BaseVersionField = {\n    type: field.type,\n    fields: [],\n    path,\n    schemaPath,\n  }\n\n  if (field.type === 'tabs' && 'tabs' in field) {\n    baseVersionField.tabs = []\n    let tabIndex = -1\n    for (const tab of field.tabs) {\n      tabIndex++\n      const isNamedTab = tabHasName(tab)\n\n      const tabAsField = { ...tab, type: 'tab' }\n\n      const {\n        indexPath: tabIndexPath,\n        path: tabPath,\n        schemaPath: tabSchemaPath,\n      } = getFieldPaths({\n        field: tabAsField,\n        index: tabIndex,\n        parentIndexPath: indexPath,\n        parentPath,\n        parentSchemaPath,\n      })\n\n      let tabFieldsPermissions: SanitizedFieldsPermissions = undefined\n\n      // The tabs field does not have its own permissions as it's unnamed => use parentFieldsPermissions\n      if (typeof parentFieldsPermissions === 'boolean') {\n        tabFieldsPermissions = parentFieldsPermissions\n      } else {\n        if ('name' in tab) {\n          const tabPermissions = parentFieldsPermissions?.[tab.name]\n          if (typeof tabPermissions === 'boolean') {\n            tabFieldsPermissions = tabPermissions\n          } else {\n            tabFieldsPermissions = tabPermissions?.fields\n          }\n        } else {\n          tabFieldsPermissions = parentFieldsPermissions\n        }\n      }\n\n      const tabVersion = {\n        name: 'name' in tab ? tab.name : null,\n        fields: buildVersionFields({\n          clientSchemaMap,\n          customDiffComponents,\n          entitySlug,\n          fields: tab.fields,\n          fieldsPermissions: tabFieldsPermissions,\n          i18n,\n          modifiedOnly,\n          nestingLevel: nestingLevel + 1,\n          parentIndexPath: isNamedTab ? '' : tabIndexPath,\n          parentIsLocalized: parentIsLocalized || tab.localized,\n          parentPath: isNamedTab ? tabPath : 'name' in field ? path : parentPath,\n          parentSchemaPath: isNamedTab\n            ? tabSchemaPath\n            : 'name' in field\n              ? schemaPath\n              : parentSchemaPath,\n          req,\n          selectedLocales,\n          versionFromSiblingData: 'name' in tab ? valueFrom?.[tab.name] : valueFrom,\n          versionToSiblingData: 'name' in tab ? valueTo?.[tab.name] : valueTo,\n        }).versionFields,\n        label: typeof tab.label === 'function' ? tab.label({ i18n, t: i18n.t }) : tab.label,\n      }\n      if (tabVersion?.fields?.length) {\n        baseVersionField.tabs.push(tabVersion)\n      }\n    }\n\n    if (modifiedOnly && !baseVersionField.tabs.length) {\n      return null\n    }\n  } // At this point, we are dealing with a `row`, `collapsible`, array`, etc\n  else if ('fields' in field) {\n    let subFieldsPermissions: SanitizedFieldsPermissions = undefined\n\n    if ('name' in field && typeof fieldPermissions !== 'undefined') {\n      // Named fields like arrays\n      subFieldsPermissions =\n        typeof fieldPermissions === 'boolean' ? fieldPermissions : fieldPermissions.fields\n    } else {\n      // Unnamed fields like collapsible and row inherit directly from parent permissions\n      subFieldsPermissions = parentFieldsPermissions\n    }\n\n    if (field.type === 'array' && (valueTo || valueFrom)) {\n      const maxLength = Math.max(\n        Array.isArray(valueTo) ? valueTo.length : 0,\n        Array.isArray(valueFrom) ? valueFrom.length : 0,\n      )\n      baseVersionField.rows = []\n\n      for (let i = 0; i < maxLength; i++) {\n        const fromRow = (Array.isArray(valueFrom) && valueFrom?.[i]) || {}\n        const toRow = (Array.isArray(valueTo) && valueTo?.[i]) || {}\n\n        const versionFields = buildVersionFields({\n          clientSchemaMap,\n          customDiffComponents,\n          entitySlug,\n          fields: field.fields,\n          fieldsPermissions: subFieldsPermissions,\n          i18n,\n          modifiedOnly,\n          nestingLevel: nestingLevel + 1,\n          parentIndexPath: 'name' in field ? '' : indexPath,\n          parentIsLocalized: parentIsLocalized || field.localized,\n          parentPath: ('name' in field ? path : parentPath) + '.' + i,\n          parentSchemaPath: 'name' in field ? schemaPath : parentSchemaPath,\n          req,\n          selectedLocales,\n          versionFromSiblingData: fromRow,\n          versionToSiblingData: toRow,\n        }).versionFields\n\n        if (versionFields?.length) {\n          baseVersionField.rows[i] = versionFields\n        }\n      }\n\n      if (!baseVersionField.rows?.length && modifiedOnly) {\n        return null\n      }\n    } else {\n      baseVersionField.fields = buildVersionFields({\n        clientSchemaMap,\n        customDiffComponents,\n        entitySlug,\n        fields: field.fields,\n        fieldsPermissions: subFieldsPermissions,\n        i18n,\n        modifiedOnly,\n        nestingLevel: field.type !== 'row' ? nestingLevel + 1 : nestingLevel,\n        parentIndexPath: 'name' in field ? '' : indexPath,\n        parentIsLocalized: parentIsLocalized || ('localized' in field && field.localized),\n        parentPath: 'name' in field ? path : parentPath,\n        parentSchemaPath: 'name' in field ? schemaPath : parentSchemaPath,\n        req,\n        selectedLocales,\n        versionFromSiblingData: valueFrom as object,\n        versionToSiblingData: valueTo as object,\n      }).versionFields\n\n      if (modifiedOnly && !baseVersionField.fields?.length) {\n        return null\n      }\n    }\n  } else if (field.type === 'blocks') {\n    baseVersionField.rows = []\n\n    const maxLength = Math.max(\n      Array.isArray(valueTo) ? valueTo.length : 0,\n      Array.isArray(valueFrom) ? valueFrom.length : 0,\n    )\n\n    for (let i = 0; i < maxLength; i++) {\n      const fromRow = (Array.isArray(valueFrom) && valueFrom?.[i]) || {}\n      const toRow = (Array.isArray(valueTo) && valueTo?.[i]) || {}\n\n      const blockSlugToMatch: string = toRow?.blockType ?? fromRow?.blockType\n      const toBlock =\n        req.payload.blocks[blockSlugToMatch] ??\n        ((field.blockReferences ?? field.blocks).find(\n          (block) => typeof block !== 'string' && block.slug === blockSlugToMatch,\n        ) as FlattenedBlock | undefined)\n\n      let fields = []\n\n      if (toRow.blockType === fromRow.blockType) {\n        fields = toBlock.fields\n      } else {\n        const fromBlockSlugToMatch: string = toRow?.blockType ?? fromRow?.blockType\n\n        const fromBlock =\n          req.payload.blocks[fromBlockSlugToMatch] ??\n          ((field.blockReferences ?? field.blocks).find(\n            (block) => typeof block !== 'string' && block.slug === fromBlockSlugToMatch,\n          ) as FlattenedBlock | undefined)\n\n        if (fromBlock) {\n          fields = getUniqueListBy<Field>([...toBlock.fields, ...fromBlock.fields], 'name')\n        } else {\n          fields = toBlock.fields\n        }\n      }\n\n      let blockFieldsPermissions: SanitizedFieldsPermissions = undefined\n\n      // fieldPermissions will be set here, as the blocks field has a name\n      if (typeof fieldPermissions === 'boolean') {\n        blockFieldsPermissions = fieldPermissions\n      } else if (typeof fieldPermissions?.blocks === 'boolean') {\n        blockFieldsPermissions = fieldPermissions.blocks\n      } else {\n        const permissionsBlockSpecific = fieldPermissions?.blocks?.[blockSlugToMatch]\n        if (typeof permissionsBlockSpecific === 'boolean') {\n          blockFieldsPermissions = permissionsBlockSpecific\n        } else {\n          blockFieldsPermissions = permissionsBlockSpecific?.fields\n        }\n      }\n\n      const versionFields = buildVersionFields({\n        clientSchemaMap,\n        customDiffComponents,\n        entitySlug,\n        fields,\n        fieldsPermissions: blockFieldsPermissions,\n        i18n,\n        modifiedOnly,\n        nestingLevel: nestingLevel + 1,\n        parentIndexPath: 'name' in field ? '' : indexPath,\n        parentIsLocalized: parentIsLocalized || ('localized' in field && field.localized),\n        parentPath: ('name' in field ? path : parentPath) + '.' + i,\n        parentSchemaPath: ('name' in field ? schemaPath : parentSchemaPath) + '.' + toBlock.slug,\n        req,\n        selectedLocales,\n        versionFromSiblingData: fromRow,\n        versionToSiblingData: toRow,\n      }).versionFields\n\n      if (versionFields?.length) {\n        baseVersionField.rows[i] = versionFields\n      }\n    }\n\n    if (!baseVersionField.rows?.length && modifiedOnly) {\n      return null\n    }\n  }\n\n  const clientDiffProps: FieldDiffClientProps = {\n    baseVersionField: {\n      ...baseVersionField,\n      CustomComponent: undefined,\n    },\n    /**\n     * TODO: Change to valueFrom in 4.0\n     */\n    comparisonValue: valueFrom,\n    /**\n     * @deprecated remove in 4.0. Each field should handle its own diffing logic\n     */\n    diffMethod: 'diffWordsWithSpace',\n    field: clientField,\n    fieldPermissions:\n      typeof fieldPermissions === 'undefined' ? parentFieldsPermissions : fieldPermissions,\n    parentIsLocalized,\n\n    nestingLevel: nestingLevel ? nestingLevel : undefined,\n    /**\n     * TODO: Change to valueTo in 4.0\n     */\n    versionValue: valueTo,\n  }\n  if (locale) {\n    clientDiffProps.locale = locale\n  }\n\n  const serverDiffProps: FieldDiffServerProps = {\n    ...clientDiffProps,\n    clientField,\n    field,\n    i18n,\n    req,\n    selectedLocales,\n  }\n\n  baseVersionField.CustomComponent = RenderServerComponent({\n    clientProps: clientDiffProps,\n    Component: CustomComponent,\n    Fallback: DefaultComponent,\n    importMap: req.payload.importMap,\n    key: 'diff component',\n    serverProps: serverDiffProps,\n  })\n\n  return baseVersionField\n}\n"],"mappings":"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","ignoreList":[]}