{"version":3,"file":"fetchVersions.js","names":["logError","fetchVersion","id","collectionSlug","depth","globalSlug","locale","overrideAccess","req","select","user","payload","findVersionByID","String","collection","findGlobalVersionByID","slug","err","fetchVersions","draft","limit","page","parentID","sort","where","whereFromArgs","and","push","parent","equals","findVersions","findGlobalVersions","fetchLatestVersion","status","latest","docs","length"],"sources":["../../../src/views/Version/fetchVersions.ts"],"sourcesContent":["import {\n  logError,\n  type PaginatedDocs,\n  type PayloadRequest,\n  type SelectType,\n  type Sort,\n  type TypedUser,\n  type TypeWithVersion,\n  type Where,\n} from 'payload'\n\nexport const fetchVersion = async <TVersionData extends object = object>({\n  id,\n  collectionSlug,\n  depth,\n  globalSlug,\n  locale,\n  overrideAccess,\n  req,\n  select,\n  user,\n}: {\n  collectionSlug?: string\n  depth?: number\n  globalSlug?: string\n  id: number | string\n  locale?: 'all' | ({} & string)\n  overrideAccess?: boolean\n  req: PayloadRequest\n  select?: SelectType\n  user?: TypedUser\n}): Promise<null | TypeWithVersion<TVersionData>> => {\n  try {\n    if (collectionSlug) {\n      return (await req.payload.findVersionByID({\n        id: String(id),\n        collection: collectionSlug,\n        depth,\n        locale,\n        overrideAccess,\n        req,\n        select,\n        user,\n      })) as TypeWithVersion<TVersionData>\n    } else if (globalSlug) {\n      return (await req.payload.findGlobalVersionByID({\n        id: String(id),\n        slug: globalSlug,\n        depth,\n        locale,\n        overrideAccess,\n        req,\n        select,\n        user,\n      })) as TypeWithVersion<TVersionData>\n    }\n  } catch (err) {\n    logError({ err, payload: req.payload })\n    return null\n  }\n}\n\nexport const fetchVersions = async <TVersionData extends object = object>({\n  collectionSlug,\n  depth,\n  draft,\n  globalSlug,\n  limit,\n  locale,\n  overrideAccess,\n  page,\n  parentID,\n  req,\n  select,\n  sort,\n  user,\n  where: whereFromArgs,\n}: {\n  collectionSlug?: string\n  depth?: number\n  draft?: boolean\n  globalSlug?: string\n  limit?: number\n  locale?: 'all' | ({} & string)\n  overrideAccess?: boolean\n  page?: number\n  parentID?: number | string\n  req: PayloadRequest\n  select?: SelectType\n  sort?: Sort\n  user?: TypedUser\n  where?: Where\n}): Promise<null | PaginatedDocs<TypeWithVersion<TVersionData>>> => {\n  const where: Where = { and: [...(whereFromArgs ? [whereFromArgs] : [])] }\n\n  try {\n    if (collectionSlug) {\n      if (parentID) {\n        where.and.push({\n          parent: {\n            equals: parentID,\n          },\n        })\n      }\n      return (await req.payload.findVersions({\n        collection: collectionSlug,\n        depth,\n        draft,\n        limit,\n        locale,\n        overrideAccess,\n        page,\n        req,\n        select,\n        sort,\n        user,\n        where,\n      })) as PaginatedDocs<TypeWithVersion<TVersionData>>\n    } else if (globalSlug) {\n      return (await req.payload.findGlobalVersions({\n        slug: globalSlug,\n        depth,\n        limit,\n        locale,\n        overrideAccess,\n        page,\n        req,\n        select,\n        sort,\n        user,\n        where,\n      })) as PaginatedDocs<TypeWithVersion<TVersionData>>\n    }\n  } catch (err) {\n    logError({ err, payload: req.payload })\n\n    return null\n  }\n}\n\nexport const fetchLatestVersion = async <TVersionData extends object = object>({\n  collectionSlug,\n  depth,\n  globalSlug,\n  locale,\n  overrideAccess,\n  parentID,\n  req,\n  select,\n  status,\n  user,\n  where,\n}: {\n  collectionSlug?: string\n  depth?: number\n  globalSlug?: string\n  locale?: 'all' | ({} & string)\n  overrideAccess?: boolean\n  parentID?: number | string\n  req: PayloadRequest\n  select?: SelectType\n  status: 'draft' | 'published'\n  user?: TypedUser\n  where?: Where\n}): Promise<null | TypeWithVersion<TVersionData>> => {\n  const and: Where[] = [\n    {\n      'version._status': {\n        equals: status,\n      },\n    },\n    ...(where ? [where] : []),\n  ]\n\n  const latest = await fetchVersions({\n    collectionSlug,\n    depth,\n    draft: true,\n    globalSlug,\n    limit: 1,\n    locale,\n    overrideAccess,\n    parentID,\n    req,\n    select,\n    sort: '-updatedAt',\n    user,\n    where: { and },\n  })\n\n  return latest?.docs?.length ? (latest.docs[0] as TypeWithVersion<TVersionData>) : null\n}\n"],"mappings":"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","ignoreList":[]}