{"version":3,"file":"index.js","names":["formatDate","getClientConfig","getClientSchemaMap","getSchemaMap","notFound","React","DefaultVersionView","fetchLatestVersion","fetchVersion","fetchVersions","RenderDiff","getVersionLabel","VersionPillLabel","VersionView","props","hasPublishedDoc","i18n","initPageResult","routeSegments","searchParams","collectionConfig","docID","id","globalConfig","permissions","req","payload","config","localization","user","versionToID","length","collectionSlug","slug","globalSlug","draftsEnabled","versions","drafts","localeCodesFromParams","localeCodes","JSON","parse","versionFromIDFromParams","versionFrom","modifiedOnly","docPermissions","collections","globals","versionTo","depth","locale","overrideAccess","previousVersionResult","versionFromResult","currentlyPublishedVersion","latestDraftVersion","previousPublishedVersionResult","Promise","all","draft","limit","parentID","sort","where","and","updatedAt","less_than","resolve","status","equals","previousVersion","docs","previousPublishedVersion","selectedLocales","locales","code","find","push","filterAvailableLocales","map","schemaMap","clientSchemaMap","importMap","RenderedDiff","customDiffComponents","entitySlug","fields","fieldsPermissions","parentIndexPath","parentIsLocalized","parentPath","parentSchemaPath","versionFromSiblingData","version","versionToSiblingData","versionToCreatedAtFormatted","date","Date","pattern","admin","dateFormat","formatPill","doc","labelOverride","labelStyle","labelSuffix","_jsx","labelFirst","versionFromOptions","t","value","publishedNewerThanDraft","some","option","a","b","getTime","versionToIsVersionFrom","versionFromComparisonOptions","isVersionTo","alreadyAdded","existingOption","otherOptionsWithSameID","filter","_jsxs","optionWithSameID","index","label","Fragment","undefined","canUpdate","update","versionFromCreatedAt","createdAt","versionFromID","versionToCreatedAt","VersionToCreatedAtLabel","versionToStatus","_status"],"sources":["../../../src/views/Version/index.tsx"],"sourcesContent":["import type {\n  DocumentViewServerProps,\n  Locale,\n  SanitizedCollectionPermission,\n  SanitizedGlobalPermission,\n  TypeWithVersion,\n} from 'payload'\n\nimport { formatDate } from '@payloadcms/ui/shared'\nimport { getClientConfig } from '@payloadcms/ui/utilities/getClientConfig'\nimport { getClientSchemaMap } from '@payloadcms/ui/utilities/getClientSchemaMap'\nimport { getSchemaMap } from '@payloadcms/ui/utilities/getSchemaMap'\nimport { notFound } from 'next/navigation.js'\nimport React from 'react'\n\nimport type { CompareOption } from './Default/types.js'\n\nimport { DefaultVersionView } from './Default/index.js'\nimport { fetchLatestVersion, fetchVersion, fetchVersions } from './fetchVersions.js'\nimport { RenderDiff } from './RenderFieldsToDiff/index.js'\nimport { getVersionLabel } from './VersionPillLabel/getVersionLabel.js'\nimport { VersionPillLabel } from './VersionPillLabel/VersionPillLabel.js'\n\nexport async function VersionView(props: DocumentViewServerProps) {\n  const { hasPublishedDoc, i18n, initPageResult, routeSegments, searchParams } = props\n\n  const {\n    collectionConfig,\n    docID: id,\n    globalConfig,\n    permissions,\n    req,\n    req: { payload, payload: { config, config: { localization } } = {}, user } = {},\n  } = initPageResult\n\n  const versionToID = routeSegments[routeSegments.length - 1]\n\n  const collectionSlug = collectionConfig?.slug\n  const globalSlug = globalConfig?.slug\n\n  const draftsEnabled = (collectionConfig ?? globalConfig)?.versions?.drafts\n\n  const localeCodesFromParams = searchParams.localeCodes\n    ? JSON.parse(searchParams.localeCodes as string)\n    : null\n\n  const versionFromIDFromParams = searchParams.versionFrom as string\n\n  const modifiedOnly: boolean = searchParams.modifiedOnly === 'false' ? false : true\n\n  const docPermissions: SanitizedCollectionPermission | SanitizedGlobalPermission = collectionSlug\n    ? permissions.collections[collectionSlug]\n    : permissions.globals[globalSlug]\n\n  const versionTo = await fetchVersion<{\n    _status?: string\n  }>({\n    id: versionToID,\n    collectionSlug,\n    depth: 1,\n    globalSlug,\n    locale: 'all',\n    overrideAccess: false,\n    req,\n    user,\n  })\n\n  if (!versionTo) {\n    return notFound()\n  }\n\n  const [\n    previousVersionResult,\n    versionFromResult,\n    currentlyPublishedVersion,\n    latestDraftVersion,\n    previousPublishedVersionResult,\n  ] = await Promise.all([\n    // Previous version (the one before the versionTo)\n    fetchVersions({\n      collectionSlug,\n      // If versionFromIDFromParams is provided, the previous version is only used in the version comparison dropdown => depth 0 is enough.\n      // If it's not provided, this is used as `versionFrom` in the comparison, which expects populated data => depth 1 is needed.\n      depth: versionFromIDFromParams ? 0 : 1,\n      draft: true,\n      globalSlug,\n      limit: 1,\n      locale: 'all',\n      overrideAccess: false,\n      parentID: id,\n      req,\n      sort: '-updatedAt',\n      user,\n      where: {\n        and: [\n          {\n            updatedAt: {\n              less_than: versionTo.updatedAt,\n            },\n          },\n        ],\n      },\n    }),\n    // Version from ID from params\n    (versionFromIDFromParams\n      ? fetchVersion({\n          id: versionFromIDFromParams,\n          collectionSlug,\n          depth: 1,\n          globalSlug,\n          locale: 'all',\n          overrideAccess: false,\n          req,\n          user,\n        })\n      : Promise.resolve(null)) as Promise<null | TypeWithVersion<object>>,\n    // Currently published version - do note: currently published != latest published, as an unpublished version can be the latest published\n    hasPublishedDoc\n      ? fetchLatestVersion({\n          collectionSlug,\n          depth: 0,\n          globalSlug,\n          locale: 'all',\n          overrideAccess: false,\n          parentID: id,\n          req,\n          status: 'published',\n          user,\n        })\n      : Promise.resolve(null),\n    // Latest draft version\n    draftsEnabled\n      ? fetchLatestVersion({\n          collectionSlug,\n          depth: 0,\n          globalSlug,\n          locale: 'all',\n          overrideAccess: false,\n          parentID: id,\n          req,\n          status: 'draft',\n          user,\n        })\n      : Promise.resolve(null),\n    // Previous published version\n    fetchVersions({\n      collectionSlug,\n      depth: 0,\n      draft: true,\n      globalSlug,\n      limit: 1,\n      locale: 'all',\n      overrideAccess: false,\n      parentID: id,\n      req,\n      sort: '-updatedAt',\n      user,\n      where: {\n        and: [\n          {\n            updatedAt: {\n              less_than: versionTo.updatedAt,\n            },\n          },\n          {\n            'version._status': {\n              equals: 'published',\n            },\n          },\n        ],\n      },\n    }),\n  ])\n\n  const previousVersion: null | TypeWithVersion<object> = previousVersionResult?.docs?.[0] ?? null\n\n  const versionFrom =\n    versionFromResult ||\n    // By default, we'll compare the previous version. => versionFrom = version previous to versionTo\n    previousVersion\n\n  // Previous published version before the versionTo\n  const previousPublishedVersion = previousPublishedVersionResult?.docs?.[0] ?? null\n\n  let selectedLocales: string[] = []\n  if (localization) {\n    let locales: Locale[] = []\n    if (localeCodesFromParams) {\n      for (const code of localeCodesFromParams) {\n        const locale = localization.locales.find((locale) => locale.code === code)\n        if (!locale) {\n          continue\n        }\n        locales.push(locale)\n      }\n    } else {\n      locales = localization.locales\n    }\n\n    if (localization.filterAvailableLocales) {\n      locales = (await localization.filterAvailableLocales({ locales, req })) || []\n    }\n\n    selectedLocales = locales.map((locale) => locale.code)\n  }\n\n  const schemaMap = getSchemaMap({\n    collectionSlug,\n    config,\n    globalSlug,\n    i18n,\n  })\n\n  const clientSchemaMap = getClientSchemaMap({\n    collectionSlug,\n    config: getClientConfig({ config: payload.config, i18n, importMap: payload.importMap, user }),\n    globalSlug,\n    i18n,\n    payload,\n    schemaMap,\n  })\n  const RenderedDiff = RenderDiff({\n    clientSchemaMap,\n    customDiffComponents: {},\n    entitySlug: collectionSlug || globalSlug,\n    fields: (collectionConfig || globalConfig)?.fields,\n    fieldsPermissions: docPermissions?.fields,\n    i18n,\n    modifiedOnly,\n    parentIndexPath: '',\n    parentIsLocalized: false,\n    parentPath: '',\n    parentSchemaPath: '',\n    req,\n    selectedLocales,\n    versionFromSiblingData: {\n      ...versionFrom?.version,\n      updatedAt: versionFrom?.updatedAt,\n    },\n    versionToSiblingData: {\n      ...versionTo.version,\n      updatedAt: versionTo.updatedAt,\n    },\n  })\n\n  const versionToCreatedAtFormatted = versionTo.updatedAt\n    ? formatDate({\n        date:\n          typeof versionTo.updatedAt === 'string'\n            ? new Date(versionTo.updatedAt)\n            : (versionTo.updatedAt as Date),\n        i18n,\n        pattern: config.admin.dateFormat,\n      })\n    : ''\n\n  const formatPill = ({\n    doc,\n    labelOverride,\n    labelStyle,\n    labelSuffix,\n  }: {\n    doc: TypeWithVersion<any>\n    labelOverride?: string\n    labelStyle?: 'pill' | 'text'\n    labelSuffix?: React.ReactNode\n  }): React.ReactNode => {\n    return (\n      <VersionPillLabel\n        currentlyPublishedVersion={currentlyPublishedVersion}\n        doc={doc}\n        key={doc.id}\n        labelFirst={true}\n        labelOverride={labelOverride}\n        labelStyle={labelStyle ?? 'text'}\n        labelSuffix={labelSuffix}\n        latestDraftVersion={latestDraftVersion}\n      />\n    )\n  }\n\n  // SelectComparison Options:\n  //\n  // Previous version: always, unless doesn't exist. Can be the same as previously published\n  // Latest draft: only if no newer published exists (latestDraftVersion)\n  // Currently published: always, if exists\n  // Previously published: if there is a prior published version older than versionTo\n  // Specific Version: only if not already present under other label (= versionFrom)\n\n  let versionFromOptions: {\n    doc: TypeWithVersion<any>\n    labelOverride?: string\n    updatedAt: Date\n    value: string\n  }[] = []\n\n  // Previous version\n  if (previousVersion?.id) {\n    versionFromOptions.push({\n      doc: previousVersion,\n      labelOverride: i18n.t('version:previousVersion'),\n      updatedAt: new Date(previousVersion.updatedAt),\n      value: previousVersion.id,\n    })\n  }\n\n  // Latest Draft\n  const publishedNewerThanDraft =\n    currentlyPublishedVersion?.updatedAt > latestDraftVersion?.updatedAt\n  if (latestDraftVersion && !publishedNewerThanDraft) {\n    versionFromOptions.push({\n      doc: latestDraftVersion,\n      updatedAt: new Date(latestDraftVersion.updatedAt),\n      value: latestDraftVersion.id,\n    })\n  }\n\n  // Currently Published\n  if (currentlyPublishedVersion) {\n    versionFromOptions.push({\n      doc: currentlyPublishedVersion,\n      updatedAt: new Date(currentlyPublishedVersion.updatedAt),\n      value: currentlyPublishedVersion.id,\n    })\n  }\n\n  // Previous Published\n  if (previousPublishedVersion && currentlyPublishedVersion?.id !== previousPublishedVersion.id) {\n    versionFromOptions.push({\n      doc: previousPublishedVersion,\n      labelOverride: i18n.t('version:previouslyPublished'),\n      updatedAt: new Date(previousPublishedVersion.updatedAt),\n      value: previousPublishedVersion.id,\n    })\n  }\n\n  // Specific Version\n  if (versionFrom?.id && !versionFromOptions.some((option) => option.value === versionFrom.id)) {\n    // Only add \"specific version\" if it is not already in the options\n    versionFromOptions.push({\n      doc: versionFrom,\n      labelOverride: i18n.t('version:specificVersion'),\n      updatedAt: new Date(versionFrom.updatedAt),\n      value: versionFrom.id,\n    })\n  }\n\n  versionFromOptions = versionFromOptions.sort((a, b) => {\n    // Sort by updatedAt, newest first\n    if (a && b) {\n      return b.updatedAt.getTime() - a.updatedAt.getTime()\n    }\n    return 0\n  })\n\n  const versionToIsVersionFrom = versionFrom?.id === versionTo.id\n\n  const versionFromComparisonOptions: CompareOption[] = []\n\n  for (const option of versionFromOptions) {\n    const isVersionTo = option.value === versionTo.id\n\n    if (isVersionTo && !versionToIsVersionFrom) {\n      // Don't offer selecting a versionFrom that is the same as versionTo, unless it's already selected\n      continue\n    }\n\n    const alreadyAdded = versionFromComparisonOptions.some(\n      (existingOption) => existingOption.value === option.value,\n    )\n    if (alreadyAdded) {\n      continue\n    }\n\n    const otherOptionsWithSameID = versionFromOptions.filter(\n      (existingOption) => existingOption.value === option.value && existingOption !== option,\n    )\n\n    // Merge options with same ID to the same option\n    const labelSuffix = otherOptionsWithSameID?.length ? (\n      <span key={`${option.value}-suffix`}>\n        {' ('}\n        {otherOptionsWithSameID.map((optionWithSameID, index) => {\n          const label =\n            optionWithSameID.labelOverride ||\n            getVersionLabel({\n              currentlyPublishedVersion,\n              latestDraftVersion,\n              t: i18n.t,\n              version: optionWithSameID.doc,\n            }).label\n\n          return (\n            <React.Fragment key={`${optionWithSameID.value}-${index}`}>\n              {index > 0 ? ', ' : ''}\n              {label}\n            </React.Fragment>\n          )\n        })}\n        {')'}\n      </span>\n    ) : undefined\n\n    versionFromComparisonOptions.push({\n      label: formatPill({\n        doc: option.doc,\n        labelOverride: option.labelOverride,\n        labelSuffix,\n      }),\n      value: option.value,\n    })\n  }\n\n  return (\n    <DefaultVersionView\n      canUpdate={docPermissions?.update}\n      modifiedOnly={modifiedOnly}\n      RenderedDiff={RenderedDiff}\n      selectedLocales={selectedLocales}\n      versionFromCreatedAt={versionFrom?.createdAt}\n      versionFromID={versionFrom?.id}\n      versionFromOptions={versionFromComparisonOptions}\n      versionToCreatedAt={versionTo.createdAt}\n      versionToCreatedAtFormatted={versionToCreatedAtFormatted}\n      VersionToCreatedAtLabel={formatPill({ doc: versionTo, labelStyle: 'pill' })}\n      versionToID={versionTo.id}\n      versionToStatus={versionTo.version?._status}\n    />\n  )\n}\n"],"mappings":";AAQA,SAASA,UAAU,QAAQ;AAC3B,SAASC,eAAe,QAAQ;AAChC,SAASC,kBAAkB,QAAQ;AACnC,SAASC,YAAY,QAAQ;AAC7B,SAASC,QAAQ,QAAQ;AACzB,OAAOC,KAAA,MAAW;AAIlB,SAASC,kBAAkB,QAAQ;AACnC,SAASC,kBAAkB,EAAEC,YAAY,EAAEC,aAAa,QAAQ;AAChE,SAASC,UAAU,QAAQ;AAC3B,SAASC,eAAe,QAAQ;AAChC,SAASC,gBAAgB,QAAQ;AAEjC,OAAO,eAAeC,YAAYC,KAA8B;EAC9D,MAAM;IAAEC,eAAe;IAAEC,IAAI;IAAEC,cAAc;IAAEC,aAAa;IAAEC;EAAY,CAAE,GAAGL,KAAA;EAE/E,MAAM;IACJM,gBAAgB;IAChBC,KAAA,EAAOC,EAAE;IACTC,YAAY;IACZC,WAAW;IACXC,GAAG;IACHA,GAAA,EAAK;MAAEC,OAAO;MAAEA,OAAA,EAAS;QAAEC,MAAM;QAAEA,MAAA,EAAQ;UAAEC;QAAY;MAAE,CAAE,GAAG,CAAC,CAAC;MAAEC;IAAI,CAAE,GAAG,CAAC;EAAC,CAChF,GAAGZ,cAAA;EAEJ,MAAMa,WAAA,GAAcZ,aAAa,CAACA,aAAA,CAAca,MAAM,GAAG,EAAE;EAE3D,MAAMC,cAAA,GAAiBZ,gBAAA,EAAkBa,IAAA;EACzC,MAAMC,UAAA,GAAaX,YAAA,EAAcU,IAAA;EAEjC,MAAME,aAAA,GAAiB,CAAAf,gBAAA,IAAoBG,YAAW,GAAIa,QAAA,EAAUC,MAAA;EAEpE,MAAMC,qBAAA,GAAwBnB,YAAA,CAAaoB,WAAW,GAClDC,IAAA,CAAKC,KAAK,CAACtB,YAAA,CAAaoB,WAAW,IACnC;EAEJ,MAAMG,uBAAA,GAA0BvB,YAAA,CAAawB,WAAW;EAExD,MAAMC,YAAA,GAAwBzB,YAAA,CAAayB,YAAY,KAAK,UAAU,QAAQ;EAE9E,MAAMC,cAAA,GAA4Eb,cAAA,GAC9ER,WAAA,CAAYsB,WAAW,CAACd,cAAA,CAAe,GACvCR,WAAA,CAAYuB,OAAO,CAACb,UAAA,CAAW;EAEnC,MAAMc,SAAA,GAAY,MAAMxC,YAAA,CAErB;IACDc,EAAA,EAAIQ,WAAA;IACJE,cAAA;IACAiB,KAAA,EAAO;IACPf,UAAA;IACAgB,MAAA,EAAQ;IACRC,cAAA,EAAgB;IAChB1B,GAAA;IACAI;EACF;EAEA,IAAI,CAACmB,SAAA,EAAW;IACd,OAAO5C,QAAA;EACT;EAEA,MAAM,CACJgD,qBAAA,EACAC,iBAAA,EACAC,yBAAA,EACAC,kBAAA,EACAC,8BAAA,CACD,GAAG,MAAMC,OAAA,CAAQC,GAAG,CAAC;EACpB;EACAjD,aAAA,CAAc;IACZuB,cAAA;IACA;IACA;IACAiB,KAAA,EAAOP,uBAAA,GAA0B,IAAI;IACrCiB,KAAA,EAAO;IACPzB,UAAA;IACA0B,KAAA,EAAO;IACPV,MAAA,EAAQ;IACRC,cAAA,EAAgB;IAChBU,QAAA,EAAUvC,EAAA;IACVG,GAAA;IACAqC,IAAA,EAAM;IACNjC,IAAA;IACAkC,KAAA,EAAO;MACLC,GAAA,EAAK,CACH;QACEC,SAAA,EAAW;UACTC,SAAA,EAAWlB,SAAA,CAAUiB;QACvB;MACF;IAEJ;EACF;EACA;EACCvB,uBAAA,GACGlC,YAAA,CAAa;IACXc,EAAA,EAAIoB,uBAAA;IACJV,cAAA;IACAiB,KAAA,EAAO;IACPf,UAAA;IACAgB,MAAA,EAAQ;IACRC,cAAA,EAAgB;IAChB1B,GAAA;IACAI;EACF,KACA4B,OAAA,CAAQU,OAAO,CAAC;EACpB;EACApD,eAAA,GACIR,kBAAA,CAAmB;IACjByB,cAAA;IACAiB,KAAA,EAAO;IACPf,UAAA;IACAgB,MAAA,EAAQ;IACRC,cAAA,EAAgB;IAChBU,QAAA,EAAUvC,EAAA;IACVG,GAAA;IACA2C,MAAA,EAAQ;IACRvC;EACF,KACA4B,OAAA,CAAQU,OAAO,CAAC;EACpB;EACAhC,aAAA,GACI5B,kBAAA,CAAmB;IACjByB,cAAA;IACAiB,KAAA,EAAO;IACPf,UAAA;IACAgB,MAAA,EAAQ;IACRC,cAAA,EAAgB;IAChBU,QAAA,EAAUvC,EAAA;IACVG,GAAA;IACA2C,MAAA,EAAQ;IACRvC;EACF,KACA4B,OAAA,CAAQU,OAAO,CAAC;EACpB;EACA1D,aAAA,CAAc;IACZuB,cAAA;IACAiB,KAAA,EAAO;IACPU,KAAA,EAAO;IACPzB,UAAA;IACA0B,KAAA,EAAO;IACPV,MAAA,EAAQ;IACRC,cAAA,EAAgB;IAChBU,QAAA,EAAUvC,EAAA;IACVG,GAAA;IACAqC,IAAA,EAAM;IACNjC,IAAA;IACAkC,KAAA,EAAO;MACLC,GAAA,EAAK,CACH;QACEC,SAAA,EAAW;UACTC,SAAA,EAAWlB,SAAA,CAAUiB;QACvB;MACF,GACA;QACE,mBAAmB;UACjBI,MAAA,EAAQ;QACV;MACF;IAEJ;EACF,GACD;EAED,MAAMC,eAAA,GAAkDlB,qBAAA,EAAuBmB,IAAA,GAAO,EAAE,IAAI;EAE5F,MAAM5B,WAAA,GACJU,iBAAA;EACA;EACAiB,eAAA;EAEF;EACA,MAAME,wBAAA,GAA2BhB,8BAAA,EAAgCe,IAAA,GAAO,EAAE,IAAI;EAE9E,IAAIE,eAAA,GAA4B,EAAE;EAClC,IAAI7C,YAAA,EAAc;IAChB,IAAI8C,OAAA,GAAoB,EAAE;IAC1B,IAAIpC,qBAAA,EAAuB;MACzB,KAAK,MAAMqC,IAAA,IAAQrC,qBAAA,EAAuB;QACxC,MAAMY,MAAA,GAAStB,YAAA,CAAa8C,OAAO,CAACE,IAAI,CAAE1B,MAAA,IAAWA,MAAA,CAAOyB,IAAI,KAAKA,IAAA;QACrE,IAAI,CAACzB,MAAA,EAAQ;UACX;QACF;QACAwB,OAAA,CAAQG,IAAI,CAAC3B,MAAA;MACf;IACF,OAAO;MACLwB,OAAA,GAAU9C,YAAA,CAAa8C,OAAO;IAChC;IAEA,IAAI9C,YAAA,CAAakD,sBAAsB,EAAE;MACvCJ,OAAA,GAAU,OAAO9C,YAAA,CAAakD,sBAAsB,CAAC;QAAEJ,OAAA;QAASjD;MAAI,OAAO,EAAE;IAC/E;IAEAgD,eAAA,GAAkBC,OAAA,CAAQK,GAAG,CAAE7B,MAAA,IAAWA,MAAA,CAAOyB,IAAI;EACvD;EAEA,MAAMK,SAAA,GAAY7E,YAAA,CAAa;IAC7B6B,cAAA;IACAL,MAAA;IACAO,UAAA;IACAlB;EACF;EAEA,MAAMiE,eAAA,GAAkB/E,kBAAA,CAAmB;IACzC8B,cAAA;IACAL,MAAA,EAAQ1B,eAAA,CAAgB;MAAE0B,MAAA,EAAQD,OAAA,CAAQC,MAAM;MAAEX,IAAA;MAAMkE,SAAA,EAAWxD,OAAA,CAAQwD,SAAS;MAAErD;IAAK;IAC3FK,UAAA;IACAlB,IAAA;IACAU,OAAA;IACAsD;EACF;EACA,MAAMG,YAAA,GAAezE,UAAA,CAAW;IAC9BuE,eAAA;IACAG,oBAAA,EAAsB,CAAC;IACvBC,UAAA,EAAYrD,cAAA,IAAkBE,UAAA;IAC9BoD,MAAA,EAAS,CAAAlE,gBAAA,IAAoBG,YAAW,GAAI+D,MAAA;IAC5CC,iBAAA,EAAmB1C,cAAA,EAAgByC,MAAA;IACnCtE,IAAA;IACA4B,YAAA;IACA4C,eAAA,EAAiB;IACjBC,iBAAA,EAAmB;IACnBC,UAAA,EAAY;IACZC,gBAAA,EAAkB;IAClBlE,GAAA;IACAgD,eAAA;IACAmB,sBAAA,EAAwB;MACtB,GAAGjD,WAAA,EAAakD,OAAO;MACvB5B,SAAA,EAAWtB,WAAA,EAAasB;IAC1B;IACA6B,oBAAA,EAAsB;MACpB,GAAG9C,SAAA,CAAU6C,OAAO;MACpB5B,SAAA,EAAWjB,SAAA,CAAUiB;IACvB;EACF;EAEA,MAAM8B,2BAAA,GAA8B/C,SAAA,CAAUiB,SAAS,GACnDjE,UAAA,CAAW;IACTgG,IAAA,EACE,OAAOhD,SAAA,CAAUiB,SAAS,KAAK,WAC3B,IAAIgC,IAAA,CAAKjD,SAAA,CAAUiB,SAAS,IAC3BjB,SAAA,CAAUiB,SAAS;IAC1BjD,IAAA;IACAkF,OAAA,EAASvE,MAAA,CAAOwE,KAAK,CAACC;EACxB,KACA;EAEJ,MAAMC,UAAA,GAAaA,CAAC;IAClBC,GAAG;IACHC,aAAa;IACbC,UAAU;IACVC;EAAW,CAMZ;IACC,oBACEC,IAAA,CAAC9F,gBAAA;MACC0C,yBAAA,EAA2BA,yBAAA;MAC3BgD,GAAA,EAAKA,GAAA;MAELK,UAAA,EAAY;MACZJ,aAAA,EAAeA,aAAA;MACfC,UAAA,EAAYA,UAAA,IAAc;MAC1BC,WAAA,EAAaA,WAAA;MACblD,kBAAA,EAAoBA;OALf+C,GAAA,CAAIhF,EAAE;EAQjB;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA,IAAIsF,kBAAA,GAKE,EAAE;EAER;EACA,IAAItC,eAAA,EAAiBhD,EAAA,EAAI;IACvBsF,kBAAA,CAAmB/B,IAAI,CAAC;MACtByB,GAAA,EAAKhC,eAAA;MACLiC,aAAA,EAAevF,IAAA,CAAK6F,CAAC,CAAC;MACtB5C,SAAA,EAAW,IAAIgC,IAAA,CAAK3B,eAAA,CAAgBL,SAAS;MAC7C6C,KAAA,EAAOxC,eAAA,CAAgBhD;IACzB;EACF;EAEA;EACA,MAAMyF,uBAAA,GACJzD,yBAAA,EAA2BW,SAAA,GAAYV,kBAAA,EAAoBU,SAAA;EAC7D,IAAIV,kBAAA,IAAsB,CAACwD,uBAAA,EAAyB;IAClDH,kBAAA,CAAmB/B,IAAI,CAAC;MACtByB,GAAA,EAAK/C,kBAAA;MACLU,SAAA,EAAW,IAAIgC,IAAA,CAAK1C,kBAAA,CAAmBU,SAAS;MAChD6C,KAAA,EAAOvD,kBAAA,CAAmBjC;IAC5B;EACF;EAEA;EACA,IAAIgC,yBAAA,EAA2B;IAC7BsD,kBAAA,CAAmB/B,IAAI,CAAC;MACtByB,GAAA,EAAKhD,yBAAA;MACLW,SAAA,EAAW,IAAIgC,IAAA,CAAK3C,yBAAA,CAA0BW,SAAS;MACvD6C,KAAA,EAAOxD,yBAAA,CAA0BhC;IACnC;EACF;EAEA;EACA,IAAIkD,wBAAA,IAA4BlB,yBAAA,EAA2BhC,EAAA,KAAOkD,wBAAA,CAAyBlD,EAAE,EAAE;IAC7FsF,kBAAA,CAAmB/B,IAAI,CAAC;MACtByB,GAAA,EAAK9B,wBAAA;MACL+B,aAAA,EAAevF,IAAA,CAAK6F,CAAC,CAAC;MACtB5C,SAAA,EAAW,IAAIgC,IAAA,CAAKzB,wBAAA,CAAyBP,SAAS;MACtD6C,KAAA,EAAOtC,wBAAA,CAAyBlD;IAClC;EACF;EAEA;EACA,IAAIqB,WAAA,EAAarB,EAAA,IAAM,CAACsF,kBAAA,CAAmBI,IAAI,CAAEC,MAAA,IAAWA,MAAA,CAAOH,KAAK,KAAKnE,WAAA,CAAYrB,EAAE,GAAG;IAC5F;IACAsF,kBAAA,CAAmB/B,IAAI,CAAC;MACtByB,GAAA,EAAK3D,WAAA;MACL4D,aAAA,EAAevF,IAAA,CAAK6F,CAAC,CAAC;MACtB5C,SAAA,EAAW,IAAIgC,IAAA,CAAKtD,WAAA,CAAYsB,SAAS;MACzC6C,KAAA,EAAOnE,WAAA,CAAYrB;IACrB;EACF;EAEAsF,kBAAA,GAAqBA,kBAAA,CAAmB9C,IAAI,CAAC,CAACoD,CAAA,EAAGC,CAAA;IAC/C;IACA,IAAID,CAAA,IAAKC,CAAA,EAAG;MACV,OAAOA,CAAA,CAAElD,SAAS,CAACmD,OAAO,KAAKF,CAAA,CAAEjD,SAAS,CAACmD,OAAO;IACpD;IACA,OAAO;EACT;EAEA,MAAMC,sBAAA,GAAyB1E,WAAA,EAAarB,EAAA,KAAO0B,SAAA,CAAU1B,EAAE;EAE/D,MAAMgG,4BAAA,GAAgD,EAAE;EAExD,KAAK,MAAML,MAAA,IAAUL,kBAAA,EAAoB;IACvC,MAAMW,WAAA,GAAcN,MAAA,CAAOH,KAAK,KAAK9D,SAAA,CAAU1B,EAAE;IAEjD,IAAIiG,WAAA,IAAe,CAACF,sBAAA,EAAwB;MAE1C;IACF;IAEA,MAAMG,YAAA,GAAeF,4BAAA,CAA6BN,IAAI,CACnDS,cAAA,IAAmBA,cAAA,CAAeX,KAAK,KAAKG,MAAA,CAAOH,KAAK;IAE3D,IAAIU,YAAA,EAAc;MAChB;IACF;IAEA,MAAME,sBAAA,GAAyBd,kBAAA,CAAmBe,MAAM,CACrDF,cAAA,IAAmBA,cAAA,CAAeX,KAAK,KAAKG,MAAA,CAAOH,KAAK,IAAIW,cAAA,KAAmBR,MAAA;IAGlF;IACA,MAAMR,WAAA,GAAciB,sBAAA,EAAwB3F,MAAA,gBAC1C6F,KAAA,CAAC;iBACE,MACAF,sBAAA,CAAuB3C,GAAG,CAAC,CAAC8C,gBAAA,EAAkBC,KAAA;QAC7C,MAAMC,KAAA,GACJF,gBAAA,CAAiBtB,aAAa,IAC9B5F,eAAA,CAAgB;UACd2C,yBAAA;UACAC,kBAAA;UACAsD,CAAA,EAAG7F,IAAA,CAAK6F,CAAC;UACThB,OAAA,EAASgC,gBAAA,CAAiBvB;QAC5B,GAAGyB,KAAK;QAEV,oBACEH,KAAA,CAACvH,KAAA,CAAM2H,QAAQ;qBACZF,KAAA,GAAQ,IAAI,OAAO,IACnBC,KAAA;WAFkB,GAAGF,gBAAA,CAAiBf,KAAK,IAAIgB,KAAA,EAAO;MAK7D,IACC;OAnBQ,GAAGb,MAAA,CAAOH,KAAK,SAAS,IAqBjCmB,SAAA;IAEJX,4BAAA,CAA6BzC,IAAI,CAAC;MAChCkD,KAAA,EAAO1B,UAAA,CAAW;QAChBC,GAAA,EAAKW,MAAA,CAAOX,GAAG;QACfC,aAAA,EAAeU,MAAA,CAAOV,aAAa;QACnCE;MACF;MACAK,KAAA,EAAOG,MAAA,CAAOH;IAChB;EACF;EAEA,oBACEJ,IAAA,CAACpG,kBAAA;IACC4H,SAAA,EAAWrF,cAAA,EAAgBsF,MAAA;IAC3BvF,YAAA,EAAcA,YAAA;IACduC,YAAA,EAAcA,YAAA;IACdV,eAAA,EAAiBA,eAAA;IACjB2D,oBAAA,EAAsBzF,WAAA,EAAa0F,SAAA;IACnCC,aAAA,EAAe3F,WAAA,EAAarB,EAAA;IAC5BsF,kBAAA,EAAoBU,4BAAA;IACpBiB,kBAAA,EAAoBvF,SAAA,CAAUqF,SAAS;IACvCtC,2BAAA,EAA6BA,2BAAA;IAC7ByC,uBAAA,EAAyBnC,UAAA,CAAW;MAAEC,GAAA,EAAKtD,SAAA;MAAWwD,UAAA,EAAY;IAAO;IACzE1E,WAAA,EAAakB,SAAA,CAAU1B,EAAE;IACzBmH,eAAA,EAAiBzF,SAAA,CAAU6C,OAAO,EAAE6C;;AAG1C","ignoreList":[]}