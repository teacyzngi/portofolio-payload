{"version":3,"file":"index.js","names":["c","_c","Drawer","LoadingOverlay","toast","useDocumentInfo","useEditDepth","useModal","useServerFunctions","useTranslation","useSearchParams","React","useCallback","useEffect","useId","useMemo","useRef","useState","baseClass","formatVersionDrawerSlug","depth","uuid","VersionDrawerContent","props","collectionSlug","docID","drawerSlug","globalSlug","isTrashed","closeModal","searchParams","prevSearchParams","renderDocument","DocumentView","setDocumentView","undefined","isLoading","setIsLoading","hasRenderedDocument","t","getDocumentView","fetchDocumentView","isGlobal","Boolean","entitySlug","result","paramsOverride","segments","String","filter","redirectAfterDelete","redirectAfterDuplicate","Object","fromEntries","entries","versions","disableGutter","useVersionDrawerCreatedAtCell","Document","error","message","current","_jsx","VersionDrawer","$","t0","className","gutter","slug","title","children","useVersionDrawer","drawerDepth","modalState","openModal","toggleModal","isOpen","setIsOpen","t1","t2","t3","t4","toggleDrawer","t5","closeDrawer","t6","openDrawer","t7","MemoizedDrawer","t8","isDrawerOpen"],"sources":["../../../../../src/views/Version/SelectComparison/VersionDrawer/index.tsx"],"sourcesContent":["'use client'\nimport {\n  Drawer,\n  LoadingOverlay,\n  toast,\n  useDocumentInfo,\n  useEditDepth,\n  useModal,\n  useServerFunctions,\n  useTranslation,\n} from '@payloadcms/ui'\nimport { useSearchParams } from 'next/navigation.js'\n\nimport './index.scss'\n\nimport React, { useCallback, useEffect, useId, useMemo, useRef, useState } from 'react'\n\nexport const baseClass = 'version-drawer'\nexport const formatVersionDrawerSlug = ({\n  depth,\n  uuid,\n}: {\n  depth: number\n  uuid: string // supply when creating a new document and no id is available\n}) => `version-drawer_${depth}_${uuid}`\n\nexport const VersionDrawerContent: React.FC<{\n  collectionSlug?: string\n  docID?: number | string\n  drawerSlug: string\n  globalSlug?: string\n}> = (props) => {\n  const { collectionSlug, docID, drawerSlug, globalSlug } = props\n  const { isTrashed } = useDocumentInfo()\n  const { closeModal } = useModal()\n  const searchParams = useSearchParams()\n  const prevSearchParams = useRef(searchParams)\n\n  const { renderDocument } = useServerFunctions()\n\n  const [DocumentView, setDocumentView] = useState<React.ReactNode>(undefined)\n  const [isLoading, setIsLoading] = useState(true)\n  const hasRenderedDocument = useRef(false)\n  const { t } = useTranslation()\n\n  const getDocumentView = useCallback(\n    (docID?: number | string) => {\n      const fetchDocumentView = async () => {\n        setIsLoading(true)\n\n        try {\n          const isGlobal = Boolean(globalSlug)\n          const entitySlug = collectionSlug ?? globalSlug\n\n          const result = await renderDocument({\n            collectionSlug: entitySlug,\n            docID,\n            drawerSlug,\n            paramsOverride: {\n              segments: [\n                isGlobal ? 'globals' : 'collections',\n                entitySlug,\n                ...(isTrashed ? ['trash'] : []),\n                isGlobal ? undefined : String(docID),\n                'versions',\n              ].filter(Boolean),\n            },\n            redirectAfterDelete: false,\n            redirectAfterDuplicate: false,\n            searchParams: Object.fromEntries(searchParams.entries()),\n            versions: {\n              disableGutter: true,\n              useVersionDrawerCreatedAtCell: true,\n            },\n          })\n\n          if (result?.Document) {\n            setDocumentView(result.Document)\n            setIsLoading(false)\n          }\n        } catch (error) {\n          toast.error(error?.message || t('error:unspecific'))\n          closeModal(drawerSlug)\n          // toast.error(data?.errors?.[0].message || t('error:unspecific'))\n        }\n      }\n\n      void fetchDocumentView()\n    },\n    [\n      closeModal,\n      collectionSlug,\n      drawerSlug,\n      globalSlug,\n      isTrashed,\n      renderDocument,\n      searchParams,\n      t,\n    ],\n  )\n\n  useEffect(() => {\n    if (!hasRenderedDocument.current || prevSearchParams.current !== searchParams) {\n      prevSearchParams.current = searchParams\n      getDocumentView(docID)\n      hasRenderedDocument.current = true\n    }\n  }, [docID, getDocumentView, searchParams])\n\n  if (isLoading) {\n    return <LoadingOverlay />\n  }\n\n  return DocumentView\n}\nexport const VersionDrawer: React.FC<{\n  collectionSlug?: string\n  docID?: number | string\n  drawerSlug: string\n  globalSlug?: string\n}> = (props) => {\n  const { collectionSlug, docID, drawerSlug, globalSlug } = props\n  const { t } = useTranslation()\n\n  return (\n    <Drawer\n      className={baseClass}\n      gutter={true}\n      slug={drawerSlug}\n      title={t('version:selectVersionToCompare')}\n    >\n      <VersionDrawerContent\n        collectionSlug={collectionSlug}\n        docID={docID}\n        drawerSlug={drawerSlug}\n        globalSlug={globalSlug}\n      />\n    </Drawer>\n  )\n}\n\nexport const useVersionDrawer = ({\n  collectionSlug,\n  docID,\n  globalSlug,\n}: {\n  collectionSlug?: string\n  docID?: number | string\n  globalSlug?: string\n}) => {\n  const drawerDepth = useEditDepth()\n  const uuid = useId()\n  const { closeModal, modalState, openModal, toggleModal } = useModal()\n  const [isOpen, setIsOpen] = useState(false)\n\n  const drawerSlug = formatVersionDrawerSlug({\n    depth: drawerDepth,\n    uuid,\n  })\n\n  useEffect(() => {\n    setIsOpen(Boolean(modalState[drawerSlug]?.isOpen))\n  }, [modalState, drawerSlug])\n\n  const toggleDrawer = useCallback(() => {\n    toggleModal(drawerSlug)\n  }, [toggleModal, drawerSlug])\n\n  const closeDrawer = useCallback(() => {\n    closeModal(drawerSlug)\n  }, [drawerSlug, closeModal])\n\n  const openDrawer = useCallback(() => {\n    openModal(drawerSlug)\n  }, [drawerSlug, openModal])\n\n  const MemoizedDrawer = useMemo(() => {\n    return () => (\n      <VersionDrawer\n        collectionSlug={collectionSlug}\n        docID={docID}\n        drawerSlug={drawerSlug}\n        globalSlug={globalSlug}\n      />\n    )\n  }, [collectionSlug, docID, drawerSlug, globalSlug])\n\n  return useMemo(\n    () => ({\n      closeDrawer,\n      Drawer: MemoizedDrawer,\n      drawerDepth,\n      drawerSlug,\n      isDrawerOpen: isOpen,\n      openDrawer,\n      toggleDrawer,\n    }),\n    [MemoizedDrawer, closeDrawer, drawerDepth, drawerSlug, isOpen, openDrawer, toggleDrawer],\n  )\n}\n"],"mappings":"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","ignoreList":[]}