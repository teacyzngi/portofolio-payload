{"version":3,"file":"index.js","names":["c","_c","React","baseClass","Form","FormSubmit","Link","PasswordField","useAuth","useConfig","useTranslation","formatAdminURL","getLoginOptions","getSafeRedirect","LoginField","LoginForm","t0","$","prefillEmail","prefillPassword","prefillUsername","searchParams","config","getEntityConfig","admin","t1","routes","t2","t3","user","userSlug","forgot","forgotRoute","adminRoute","api","apiRoute","loginWithUsername","t4","collectionConfig","collectionSlug","auth","authOptions","canLoginWithEmail","canLoginWithUsername","t5","loginType","useState","t","setUser","t6","undefined","t7","t8","redirect","initialState","password","initialValue","valid","value","username","email","t9","data","handleLogin","_jsxs","action","className","disableSuccessStatus","method","onSuccess","fallbackTo","redirectTo","waitForAutocomplete","children","_jsx","type","field","name","label","required","path","href","prefetch","size"],"sources":["../../../../src/views/Login/LoginForm/index.tsx"],"sourcesContent":["'use client'\n\nimport React from 'react'\n\nconst baseClass = 'login__form'\n\nimport type { UserWithToken } from '@payloadcms/ui'\nimport type { FormState } from 'payload'\n\nimport {\n  Form,\n  FormSubmit,\n  Link,\n  PasswordField,\n  useAuth,\n  useConfig,\n  useTranslation,\n} from '@payloadcms/ui'\nimport { formatAdminURL, getLoginOptions, getSafeRedirect } from 'payload/shared'\n\nimport type { LoginFieldProps } from '../LoginField/index.js'\n\nimport { LoginField } from '../LoginField/index.js'\nimport './index.scss'\n\nexport const LoginForm: React.FC<{\n  prefillEmail?: string\n  prefillPassword?: string\n  prefillUsername?: string\n  searchParams: { [key: string]: string | string[] | undefined }\n}> = ({ prefillEmail, prefillPassword, prefillUsername, searchParams }) => {\n  const { config, getEntityConfig } = useConfig()\n\n  const {\n    admin: {\n      routes: { forgot: forgotRoute },\n      user: userSlug,\n    },\n    routes: { admin: adminRoute, api: apiRoute },\n  } = config\n\n  const collectionConfig = getEntityConfig({ collectionSlug: userSlug })\n  const { auth: authOptions } = collectionConfig\n  const loginWithUsername = authOptions.loginWithUsername\n  const { canLoginWithEmail, canLoginWithUsername } = getLoginOptions(loginWithUsername)\n\n  const [loginType] = React.useState<LoginFieldProps['type']>(() => {\n    if (canLoginWithEmail && canLoginWithUsername) {\n      return 'emailOrUsername'\n    }\n    if (canLoginWithUsername) {\n      return 'username'\n    }\n    return 'email'\n  })\n\n  const { t } = useTranslation()\n  const { setUser } = useAuth()\n\n  const initialState: FormState = {\n    password: {\n      initialValue: prefillPassword ?? undefined,\n      valid: true,\n      value: prefillPassword ?? undefined,\n    },\n  }\n\n  if (loginWithUsername) {\n    initialState.username = {\n      initialValue: prefillUsername ?? undefined,\n      valid: true,\n      value: prefillUsername ?? undefined,\n    }\n  } else {\n    initialState.email = {\n      initialValue: prefillEmail ?? undefined,\n      valid: true,\n      value: prefillEmail ?? undefined,\n    }\n  }\n\n  const handleLogin = (data: UserWithToken) => {\n    setUser(data)\n  }\n\n  return (\n    <Form\n      action={`${apiRoute}/${userSlug}/login`}\n      className={baseClass}\n      disableSuccessStatus\n      initialState={initialState}\n      method=\"POST\"\n      onSuccess={handleLogin}\n      redirect={getSafeRedirect({ fallbackTo: adminRoute, redirectTo: searchParams?.redirect })}\n      waitForAutocomplete\n    >\n      <div className={`${baseClass}__inputWrap`}>\n        <LoginField type={loginType} />\n        <PasswordField\n          field={{\n            name: 'password',\n            label: t('general:password'),\n            required: true,\n          }}\n          path=\"password\"\n        />\n      </div>\n      <Link\n        href={formatAdminURL({\n          adminRoute,\n          path: forgotRoute,\n        })}\n        prefetch={false}\n      >\n        {t('authentication:forgotPasswordQuestion')}\n      </Link>\n      <FormSubmit size=\"large\">{t('authentication:login')}</FormSubmit>\n    </Form>\n  )\n}\n"],"mappings":"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","ignoreList":[]}