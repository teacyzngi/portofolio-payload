{"version":3,"file":"index.js","names":["c","_c","EmailField","TextField","useTranslation","email","username","React","LoginField","t0","$","type","required","t1","undefined","t","t2","_jsx","field","name","admin","autoComplete","label","path","validate","t3","value","options","passesUsername","passesEmail"],"sources":["../../../../src/views/Login/LoginField/index.tsx"],"sourcesContent":["'use client'\nimport type { Validate, ValidateOptions } from 'payload'\n\nimport { EmailField, TextField, useTranslation } from '@payloadcms/ui'\nimport { email, username } from 'payload/shared'\nimport React from 'react'\n\nexport type LoginFieldProps = {\n  readonly required?: boolean\n  readonly type: 'email' | 'emailOrUsername' | 'username'\n  readonly validate?: Validate\n}\n\nexport const LoginField: React.FC<LoginFieldProps> = ({ type, required = true }) => {\n  const { t } = useTranslation()\n\n  if (type === 'email') {\n    return (\n      <EmailField\n        field={{\n          name: 'email',\n          admin: {\n            autoComplete: 'email',\n          },\n          label: t('general:email'),\n          required,\n        }}\n        path=\"email\"\n        validate={email}\n      />\n    )\n  }\n\n  if (type === 'username') {\n    return (\n      <TextField\n        field={{\n          name: 'username',\n          label: t('authentication:username'),\n          required,\n        }}\n        path=\"username\"\n        validate={username}\n      />\n    )\n  }\n\n  if (type === 'emailOrUsername') {\n    return (\n      <TextField\n        field={{\n          name: 'username',\n          label: t('authentication:emailOrUsername'),\n          required,\n        }}\n        path=\"username\"\n        validate={(value, options) => {\n          const passesUsername = username(value, options)\n          const passesEmail = email(\n            value,\n            options as ValidateOptions<any, { username?: string }, any, any>,\n          )\n\n          if (!passesEmail && !passesUsername) {\n            return `${t('general:email')}: ${passesEmail} ${t('general:username')}: ${passesUsername}`\n          }\n\n          return true\n        }}\n      />\n    )\n  }\n\n  return null\n}\n"],"mappings":"AAAA;;AAAA,SAAAA,CAAA,IAAAC,EAAA;;AAGA,SAASC,UAAU,EAAEC,SAAS,EAAEC,cAAc,QAAQ;AACtD,SAASC,KAAK,EAAEC,QAAQ,QAAQ;AAChC,OAAOC,KAAA,MAAW;AAQlB,OAAO,MAAMC,UAAA,GAAwCC,EAAA;EAAA,MAAAC,CAAA,GAAAT,EAAA;EAAC;IAAAU,IAAA;IAAAC,QAAA,EAAAC;EAAA,IAAAJ,EAAyB;EAAjB,MAAAG,QAAA,GAAAC,EAAe,KAAAC,SAAA,UAAfD,EAAe;EAC3E;IAAAE;EAAA,IAAcX,cAAA;EAAA,IAEVO,IAAA,KAAS;IAAA,IAAAK,EAAA;IAAA,IAAAN,CAAA,QAAAE,QAAA,IAAAF,CAAA,QAAAK,CAAA;MAETC,EAAA,GAAAC,IAAA,CAAAf,UAAA;QAAAgB,KAAA;UAAAC,IAAA,EAEU;UAAAC,KAAA;YAAAC,YAAA,EAEU;UAAA;UAAAC,KAAA,EAETP,CAAA,CAAE;UAAAH;QAAA;QAAAW,IAAA,EAGN;QAAAC,QAAA,EAAAnB;MAAA,C;;;;;;;WATPW,E;;MAeAL,IAAA,KAAS;IAAA,IAAAK,EAAA;IAAA,IAAAN,CAAA,QAAAE,QAAA,IAAAF,CAAA,QAAAK,CAAA;MAETC,EAAA,GAAAC,IAAA,CAAAd,SAAA;QAAAe,KAAA;UAAAC,IAAA,EAEU;UAAAG,KAAA,EACCP,CAAA,CAAE;UAAAH;QAAA;QAAAW,IAAA,EAGN;QAAAC,QAAA,EAAAlB;MAAA,C;;;;;;;WANPU,E;;MAYAL,IAAA,KAAS;IAAA,IAAAK,EAAA;IAAA,IAAAN,CAAA,QAAAE,QAAA,IAAAF,CAAA,QAAAK,CAAA;MAAA,IAAAU,EAAA;MAAA,IAAAf,CAAA,QAAAK,CAAA;QASGU,EAAA,GAAAA,CAAAC,KAAA,EAAAC,OAAA;UACR,MAAAC,cAAA,GAAuBtB,QAAA,CAASoB,KAAA,EAAOC,OAAA;UACvC,MAAAE,WAAA,GAAoBxB,KAAA,CAClBqB,KAAA,EACAC,OAAA;UAAA,IAGE,CAACE,WAAA,KAAgBD,cAAA;YAAA,OACZ,GAAGb,CAAA,CAAE,qBAAqBc,WAAA,IAAed,CAAA,CAAE,wBAAwBa,cAAA,EAAgB;UAAA;UAAA;QAAA;QAI9FlB,CAAA,MAAAK,CAAA;QAAAL,CAAA,OAAAe,EAAA;MAAA;QAAAA,EAAA,GAAAf,CAAA;MAAA;MAnBFM,EAAA,GAAAC,IAAA,CAAAd,SAAA;QAAAe,KAAA;UAAAC,IAAA,EAEU;UAAAG,KAAA,EACCP,CAAA,CAAE;UAAAH;QAAA;QAAAW,IAAA,EAGN;QAAAC,QAAA,EACKC;MAYV,C;;;;;;;WAnBFT,E;;;CAyBN","ignoreList":[]}