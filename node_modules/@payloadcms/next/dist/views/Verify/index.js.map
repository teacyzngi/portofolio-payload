{"version":3,"file":"index.js","names":["formatAdminURL","React","Logo","ToastAndRedirect","verifyBaseClass","Verify","initPageResult","params","searchParams","collectionSlug","verify","token","segments","locale","permissions","req","i18n","payload","config","user","routes","admin","adminRoute","textToRender","isVerified","verifyEmail","collection","t","e","_jsx","message","redirectTo","path","_jsxs","Fragment","className"],"sources":["../../../src/views/Verify/index.tsx"],"sourcesContent":["import type { AdminViewServerProps } from 'payload'\n\nimport { formatAdminURL } from 'payload/shared'\nimport React from 'react'\n\nimport { Logo } from '../../elements/Logo/index.js'\nimport { ToastAndRedirect } from './index.client.js'\nimport './index.scss'\n\nexport const verifyBaseClass = 'verify'\n\nexport async function Verify({ initPageResult, params, searchParams }: AdminViewServerProps) {\n  // /:collectionSlug/verify/:token\n\n  const [collectionSlug, verify, token] = params.segments\n  const { locale, permissions, req } = initPageResult\n\n  const {\n    i18n,\n    payload: { config },\n    payload,\n    user,\n  } = req\n\n  const {\n    routes: { admin: adminRoute },\n  } = config\n\n  let textToRender\n  let isVerified = false\n\n  try {\n    await req.payload.verifyEmail({\n      collection: collectionSlug,\n      token,\n    })\n\n    isVerified = true\n    textToRender = req.t('authentication:emailVerified')\n  } catch (e) {\n    textToRender = req.t('authentication:unableToVerify')\n  }\n\n  if (isVerified) {\n    return (\n      <ToastAndRedirect\n        message={req.t('authentication:emailVerified')}\n        redirectTo={formatAdminURL({ adminRoute, path: '/login' })}\n      />\n    )\n  }\n\n  return (\n    <React.Fragment>\n      <div className={`${verifyBaseClass}__brand`}>\n        <Logo\n          i18n={i18n}\n          locale={locale}\n          params={params}\n          payload={payload}\n          permissions={permissions}\n          searchParams={searchParams}\n          user={user}\n        />\n      </div>\n      <h2>{textToRender}</h2>\n    </React.Fragment>\n  )\n}\n"],"mappings":";AAEA,SAASA,cAAc,QAAQ;AAC/B,OAAOC,KAAA,MAAW;AAElB,SAASC,IAAI,QAAQ;AACrB,SAASC,gBAAgB,QAAQ;AAGjC,OAAO,MAAMC,eAAA,GAAkB;AAE/B,OAAO,eAAeC,OAAO;EAAEC,cAAc;EAAEC,MAAM;EAAEC;AAAY,CAAwB;EACzF;EAEA,MAAM,CAACC,cAAA,EAAgBC,MAAA,EAAQC,KAAA,CAAM,GAAGJ,MAAA,CAAOK,QAAQ;EACvD,MAAM;IAAEC,MAAM;IAAEC,WAAW;IAAEC;EAAG,CAAE,GAAGT,cAAA;EAErC,MAAM;IACJU,IAAI;IACJC,OAAA,EAAS;MAAEC;IAAM,CAAE;IACnBD,OAAO;IACPE;EAAI,CACL,GAAGJ,GAAA;EAEJ,MAAM;IACJK,MAAA,EAAQ;MAAEC,KAAA,EAAOC;IAAU;EAAE,CAC9B,GAAGJ,MAAA;EAEJ,IAAIK,YAAA;EACJ,IAAIC,UAAA,GAAa;EAEjB,IAAI;IACF,MAAMT,GAAA,CAAIE,OAAO,CAACQ,WAAW,CAAC;MAC5BC,UAAA,EAAYjB,cAAA;MACZE;IACF;IAEAa,UAAA,GAAa;IACbD,YAAA,GAAeR,GAAA,CAAIY,CAAC,CAAC;EACvB,EAAE,OAAOC,CAAA,EAAG;IACVL,YAAA,GAAeR,GAAA,CAAIY,CAAC,CAAC;EACvB;EAEA,IAAIH,UAAA,EAAY;IACd,oBACEK,IAAA,CAAC1B,gBAAA;MACC2B,OAAA,EAASf,GAAA,CAAIY,CAAC,CAAC;MACfI,UAAA,EAAY/B,cAAA,CAAe;QAAEsB,UAAA;QAAYU,IAAA,EAAM;MAAS;;EAG9D;EAEA,oBACEC,KAAA,CAAChC,KAAA,CAAMiC,QAAQ;4BACbL,IAAA,CAAC;MAAIM,SAAA,EAAW,GAAG/B,eAAA,SAAwB;gBACzC,aAAAyB,IAAA,CAAC3B,IAAA;QACCc,IAAA,EAAMA,IAAA;QACNH,MAAA,EAAQA,MAAA;QACRN,MAAA,EAAQA,MAAA;QACRU,OAAA,EAASA,OAAA;QACTH,WAAA,EAAaA,WAAA;QACbN,YAAA,EAAcA,YAAA;QACdW,IAAA,EAAMA;;qBAGVU,IAAA,CAAC;gBAAIN;;;AAGX","ignoreList":[]}