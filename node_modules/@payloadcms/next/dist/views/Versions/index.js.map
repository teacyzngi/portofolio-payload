{"version":3,"file":"index.js","names":["Gutter","ListQueryProvider","SetDocumentStepNav","notFound","isNumber","React","fetchLatestVersion","fetchVersions","VersionDrawerCreatedAtCell","buildVersionColumns","VersionsViewClient","baseClass","VersionsView","props","hasPublishedDoc","initPageResult","collectionConfig","docID","id","globalConfig","req","i18n","payload","config","t","user","routeSegments","segments","searchParams","limit","page","sort","versions","disableGutter","useVersionDrawerCreatedAtCell","draftsEnabled","drafts","collectionSlug","slug","globalSlug","isTrashed","localization","routes","api","apiRoute","serverURL","whereQuery","and","push","snapshot","not_equals","defaultLimit","admin","pagination","limitToUse","Number","versionsData","depth","overrideAccess","parseInt","toString","undefined","parentID","where","currentlyPublishedVersion","latestDraftVersion","Promise","all","select","updatedAt","status","resolve","fetchURL","columns","CreatedAtCellOverride","docs","pluralLabel","labels","plural","label","GutterComponent","Fragment","_jsxs","_jsx","useAsTitle","view","className","data","modifySearchParams","orderableFieldName","orderable","query","paginationLimits","limits"],"sources":["../../../src/views/Versions/index.tsx"],"sourcesContent":["import { Gutter, ListQueryProvider, SetDocumentStepNav } from '@payloadcms/ui'\nimport { notFound } from 'next/navigation.js'\nimport { type DocumentViewServerProps, type PaginatedDocs, type Where } from 'payload'\nimport { isNumber } from 'payload/shared'\nimport React from 'react'\n\nimport { fetchLatestVersion, fetchVersions } from '../Version/fetchVersions.js'\nimport { VersionDrawerCreatedAtCell } from '../Version/SelectComparison/VersionDrawer/CreatedAtCell.js'\nimport { buildVersionColumns } from './buildColumns.js'\nimport { VersionsViewClient } from './index.client.js'\nimport './index.scss'\n\nconst baseClass = 'versions'\n\nexport async function VersionsView(props: DocumentViewServerProps) {\n  const {\n    hasPublishedDoc,\n    initPageResult: {\n      collectionConfig,\n      docID: id,\n      globalConfig,\n      req,\n      req: {\n        i18n,\n        payload: { config },\n        t,\n        user,\n      },\n    },\n    routeSegments: segments,\n    searchParams: { limit, page, sort },\n    versions: { disableGutter = false, useVersionDrawerCreatedAtCell = false } = {},\n  } = props\n\n  const draftsEnabled = (collectionConfig ?? globalConfig)?.versions?.drafts\n\n  const collectionSlug = collectionConfig?.slug\n  const globalSlug = globalConfig?.slug\n\n  const isTrashed = segments[2] === 'trash'\n\n  const {\n    localization,\n    routes: { api: apiRoute },\n    serverURL,\n  } = config\n\n  const whereQuery: {\n    and: Array<{ parent?: { equals: number | string }; snapshot?: { not_equals: boolean } }>\n  } & Where = {\n    and: [],\n  }\n  if (localization && draftsEnabled) {\n    whereQuery.and.push({\n      snapshot: {\n        not_equals: true,\n      },\n    })\n  }\n\n  const defaultLimit = collectionSlug ? collectionConfig?.admin?.pagination?.defaultLimit : 10\n\n  const limitToUse = isNumber(limit) ? Number(limit) : defaultLimit\n\n  const versionsData: PaginatedDocs = await fetchVersions({\n    collectionSlug,\n    depth: 0,\n    globalSlug,\n    limit: limitToUse,\n    overrideAccess: false,\n    page: page ? parseInt(page.toString(), 10) : undefined,\n    parentID: id,\n    req,\n    sort: sort as string,\n    user,\n    where: whereQuery,\n  })\n\n  if (!versionsData) {\n    return notFound()\n  }\n\n  const [currentlyPublishedVersion, latestDraftVersion] = await Promise.all([\n    hasPublishedDoc\n      ? fetchLatestVersion({\n          collectionSlug,\n          depth: 0,\n          globalSlug,\n          overrideAccess: false,\n          parentID: id,\n          req,\n          select: {\n            id: true,\n            updatedAt: true,\n          },\n          status: 'published',\n          user,\n        })\n      : Promise.resolve(null),\n    draftsEnabled\n      ? fetchLatestVersion({\n          collectionSlug,\n          depth: 0,\n          globalSlug,\n          overrideAccess: false,\n          parentID: id,\n          req,\n          select: {\n            id: true,\n            updatedAt: true,\n          },\n          status: 'draft',\n          user,\n        })\n      : Promise.resolve(null),\n  ])\n\n  const fetchURL = collectionSlug\n    ? `${serverURL}${apiRoute}/${collectionSlug}/versions`\n    : `${serverURL}${apiRoute}/globals/${globalSlug}/versions`\n\n  const columns = buildVersionColumns({\n    collectionConfig,\n    CreatedAtCellOverride: useVersionDrawerCreatedAtCell ? VersionDrawerCreatedAtCell : undefined,\n    currentlyPublishedVersion,\n    docID: id,\n    docs: versionsData?.docs,\n    globalConfig,\n    i18n,\n    isTrashed,\n    latestDraftVersion,\n  })\n\n  const pluralLabel =\n    typeof collectionConfig?.labels?.plural === 'function'\n      ? collectionConfig.labels.plural({ i18n, t })\n      : (collectionConfig?.labels?.plural ?? globalConfig?.label)\n\n  const GutterComponent = disableGutter ? React.Fragment : Gutter\n\n  return (\n    <React.Fragment>\n      <SetDocumentStepNav\n        collectionSlug={collectionSlug}\n        globalSlug={globalSlug}\n        id={id}\n        isTrashed={isTrashed}\n        pluralLabel={pluralLabel}\n        useAsTitle={collectionConfig?.admin?.useAsTitle || globalSlug}\n        view={i18n.t('version:versions')}\n      />\n      <main className={baseClass}>\n        <GutterComponent className={`${baseClass}__wrap`}>\n          <ListQueryProvider\n            data={versionsData}\n            modifySearchParams\n            orderableFieldName={collectionConfig?.orderable === true ? '_order' : undefined}\n            query={{\n              limit: limitToUse,\n              sort: sort as string,\n            }}\n          >\n            <VersionsViewClient\n              baseClass={baseClass}\n              columns={columns}\n              fetchURL={fetchURL}\n              paginationLimits={collectionConfig?.admin?.pagination?.limits}\n            />\n          </ListQueryProvider>\n        </GutterComponent>\n      </main>\n    </React.Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]}