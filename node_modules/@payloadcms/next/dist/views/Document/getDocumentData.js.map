{"version":3,"file":"getDocumentData.js","names":["sanitizeID","logError","getDocumentData","id","idArg","collectionSlug","globalSlug","locale","payload","req","segments","user","resolvedData","transactionID","rest","isTrashedDoc","findByID","collection","depth","draft","fallbackLocale","code","overrideAccess","trash","findGlobal","slug","err"],"sources":["../../../src/views/Document/getDocumentData.ts"],"sourcesContent":["import { sanitizeID } from '@payloadcms/ui/shared'\nimport {\n  type Locale,\n  logError,\n  type Payload,\n  type PayloadRequest,\n  type TypedUser,\n  type TypeWithID,\n} from 'payload'\n\ntype Args = {\n  collectionSlug?: string\n  globalSlug?: string\n  id?: number | string\n  locale?: Locale\n  payload: Payload\n  req?: PayloadRequest\n  segments?: string[]\n  user?: TypedUser\n}\n\nexport const getDocumentData = async ({\n  id: idArg,\n  collectionSlug,\n  globalSlug,\n  locale,\n  payload,\n  req,\n  segments,\n  user,\n}: Args): Promise<null | Record<string, unknown> | TypeWithID> => {\n  const id = sanitizeID(idArg)\n  let resolvedData: Record<string, unknown> | TypeWithID = null\n  const { transactionID, ...rest } = req\n\n  const isTrashedDoc = segments?.[2] === 'trash' && typeof segments?.[3] === 'string' // id exists at segment 3\n\n  try {\n    if (collectionSlug && id) {\n      resolvedData = await payload.findByID({\n        id,\n        collection: collectionSlug,\n        depth: 0,\n        draft: true,\n        fallbackLocale: false,\n        locale: locale?.code,\n        overrideAccess: false,\n        req: {\n          ...rest,\n        },\n        trash: isTrashedDoc ? true : false,\n        user,\n      })\n    }\n\n    if (globalSlug) {\n      resolvedData = await payload.findGlobal({\n        slug: globalSlug,\n        depth: 0,\n        draft: true,\n        fallbackLocale: false,\n        locale: locale?.code,\n        overrideAccess: false,\n        req: {\n          ...rest,\n        },\n        user,\n      })\n    }\n  } catch (err) {\n    logError({ err, payload })\n  }\n\n  return resolvedData\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ;AAC3B,SAEEC,QAAQ,QAKH;AAaP,OAAO,MAAMC,eAAA,GAAkB,MAAAA,CAAO;EACpCC,EAAA,EAAIC,KAAK;EACTC,cAAc;EACdC,UAAU;EACVC,MAAM;EACNC,OAAO;EACPC,GAAG;EACHC,QAAQ;EACRC;AAAI,CACC;EACL,MAAMR,EAAA,GAAKH,UAAA,CAAWI,KAAA;EACtB,IAAIQ,YAAA,GAAqD;EACzD,MAAM;IAAEC,aAAa;IAAE,GAAGC;EAAA,CAAM,GAAGL,GAAA;EAEnC,MAAMM,YAAA,GAAeL,QAAA,GAAW,EAAE,KAAK,WAAW,OAAOA,QAAA,GAAW,EAAE,KAAK,SAAS;EAAA;EAEpF,IAAI;IACF,IAAIL,cAAA,IAAkBF,EAAA,EAAI;MACxBS,YAAA,GAAe,MAAMJ,OAAA,CAAQQ,QAAQ,CAAC;QACpCb,EAAA;QACAc,UAAA,EAAYZ,cAAA;QACZa,KAAA,EAAO;QACPC,KAAA,EAAO;QACPC,cAAA,EAAgB;QAChBb,MAAA,EAAQA,MAAA,EAAQc,IAAA;QAChBC,cAAA,EAAgB;QAChBb,GAAA,EAAK;UACH,GAAGK;QACL;QACAS,KAAA,EAAOR,YAAA,GAAe,OAAO;QAC7BJ;MACF;IACF;IAEA,IAAIL,UAAA,EAAY;MACdM,YAAA,GAAe,MAAMJ,OAAA,CAAQgB,UAAU,CAAC;QACtCC,IAAA,EAAMnB,UAAA;QACNY,KAAA,EAAO;QACPC,KAAA,EAAO;QACPC,cAAA,EAAgB;QAChBb,MAAA,EAAQA,MAAA,EAAQc,IAAA;QAChBC,cAAA,EAAgB;QAChBb,GAAA,EAAK;UACH,GAAGK;QACL;QACAH;MACF;IACF;EACF,EAAE,OAAOe,GAAA,EAAK;IACZzB,QAAA,CAAS;MAAEyB,GAAA;MAAKlB;IAAQ;EAC1B;EAEA,OAAOI,YAAA;AACT","ignoreList":[]}