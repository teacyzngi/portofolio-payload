{"version":3,"file":"getVersions.js","names":["sanitizeID","combineQueries","extractAccessFromPermission","getVersions","id","idArg","collectionConfig","doc","docPermissions","globalConfig","locale","payload","user","publishedDoc","hasPublishedDoc","mostRecentVersionIsAutosaved","unpublishedVersionCount","versionCount","entityConfig","versionsConfig","versions","shouldFetchVersions","Boolean","readVersions","drafts","_status","find","collection","slug","depth","limit","undefined","pagination","select","updatedAt","where","and","or","equals","exists","docs","autosave","mostRecentVersion","findVersions","parent","totalDocs","countVersions","greater_than","findGlobal","findGlobalVersions","countGlobalVersions","global"],"sources":["../../../src/views/Document/getVersions.ts"],"sourcesContent":["import { sanitizeID } from '@payloadcms/ui/shared'\nimport {\n  combineQueries,\n  extractAccessFromPermission,\n  type Payload,\n  type SanitizedCollectionConfig,\n  type SanitizedDocumentPermissions,\n  type SanitizedGlobalConfig,\n  type TypedUser,\n} from 'payload'\n\ntype Args = {\n  collectionConfig?: SanitizedCollectionConfig\n  /**\n   * Optional - performance optimization.\n   * If a document has been fetched before fetching versions, pass it here.\n   * If this document is set to published, we can skip the query to find out if a published document exists,\n   * as the passed in document is proof of its existence.\n   */\n  doc?: Record<string, any>\n  docPermissions: SanitizedDocumentPermissions\n  globalConfig?: SanitizedGlobalConfig\n  id?: number | string\n  locale?: string\n  payload: Payload\n  user: TypedUser\n}\n\ntype Result = Promise<{\n  hasPublishedDoc: boolean\n  mostRecentVersionIsAutosaved: boolean\n  unpublishedVersionCount: number\n  versionCount: number\n}>\n\n// TODO: in the future, we can parallelize some of these queries\n// this will speed up the API by ~30-100ms or so\n// Note from the future: I have attempted parallelizing these queries, but it made this function almost 2x slower.\nexport const getVersions = async ({\n  id: idArg,\n  collectionConfig,\n  doc,\n  docPermissions,\n  globalConfig,\n  locale,\n  payload,\n  user,\n}: Args): Result => {\n  const id = sanitizeID(idArg)\n  let publishedDoc\n  let hasPublishedDoc = false\n  let mostRecentVersionIsAutosaved = false\n  let unpublishedVersionCount = 0\n  let versionCount = 0\n\n  const entityConfig = collectionConfig || globalConfig\n  const versionsConfig = entityConfig?.versions\n\n  const shouldFetchVersions = Boolean(versionsConfig && docPermissions?.readVersions)\n\n  if (!shouldFetchVersions) {\n    const hasPublishedDoc = Boolean((collectionConfig && id) || globalConfig)\n\n    return {\n      hasPublishedDoc,\n      mostRecentVersionIsAutosaved,\n      unpublishedVersionCount,\n      versionCount,\n    }\n  }\n\n  if (collectionConfig) {\n    if (!id) {\n      return {\n        hasPublishedDoc,\n        mostRecentVersionIsAutosaved,\n        unpublishedVersionCount,\n        versionCount,\n      }\n    }\n\n    if (versionsConfig?.drafts) {\n      // Find out if a published document exists\n      if (doc?._status === 'published') {\n        publishedDoc = doc\n      } else {\n        publishedDoc = (\n          await payload.find({\n            collection: collectionConfig.slug,\n            depth: 0,\n            limit: 1,\n            locale: locale || undefined,\n            pagination: false,\n            select: {\n              updatedAt: true,\n            },\n            user,\n            where: {\n              and: [\n                {\n                  or: [\n                    {\n                      _status: {\n                        equals: 'published',\n                      },\n                    },\n                    {\n                      _status: {\n                        exists: false,\n                      },\n                    },\n                  ],\n                },\n                {\n                  id: {\n                    equals: id,\n                  },\n                },\n              ],\n            },\n          })\n        )?.docs?.[0]\n      }\n\n      if (publishedDoc) {\n        hasPublishedDoc = true\n      }\n\n      if (versionsConfig.drafts?.autosave) {\n        const mostRecentVersion = await payload.findVersions({\n          collection: collectionConfig.slug,\n          depth: 0,\n          limit: 1,\n          select: {\n            autosave: true,\n          },\n          user,\n          where: combineQueries(\n            {\n              and: [\n                {\n                  parent: {\n                    equals: id,\n                  },\n                },\n              ],\n            },\n            extractAccessFromPermission(docPermissions.readVersions),\n          ),\n        })\n\n        if (\n          mostRecentVersion.docs[0] &&\n          'autosave' in mostRecentVersion.docs[0] &&\n          mostRecentVersion.docs[0].autosave\n        ) {\n          mostRecentVersionIsAutosaved = true\n        }\n      }\n\n      if (publishedDoc?.updatedAt) {\n        ;({ totalDocs: unpublishedVersionCount } = await payload.countVersions({\n          collection: collectionConfig.slug,\n          user,\n          where: combineQueries(\n            {\n              and: [\n                {\n                  parent: {\n                    equals: id,\n                  },\n                },\n                {\n                  'version._status': {\n                    equals: 'draft',\n                  },\n                },\n                {\n                  updatedAt: {\n                    greater_than: publishedDoc.updatedAt,\n                  },\n                },\n              ],\n            },\n            extractAccessFromPermission(docPermissions.readVersions),\n          ),\n        }))\n      }\n    }\n\n    ;({ totalDocs: versionCount } = await payload.countVersions({\n      collection: collectionConfig.slug,\n      depth: 0,\n      user,\n      where: combineQueries(\n        {\n          and: [\n            {\n              parent: {\n                equals: id,\n              },\n            },\n          ],\n        },\n        extractAccessFromPermission(docPermissions.readVersions),\n      ),\n    }))\n  }\n\n  if (globalConfig) {\n    // Find out if a published document exists\n    if (versionsConfig?.drafts) {\n      if (doc?._status === 'published') {\n        publishedDoc = doc\n      } else {\n        publishedDoc = await payload.findGlobal({\n          slug: globalConfig.slug,\n          depth: 0,\n          locale,\n          select: {\n            updatedAt: true,\n          },\n          user,\n        })\n      }\n\n      if (publishedDoc?._status === 'published') {\n        hasPublishedDoc = true\n      }\n\n      if (versionsConfig.drafts?.autosave) {\n        const mostRecentVersion = await payload.findGlobalVersions({\n          slug: globalConfig.slug,\n          limit: 1,\n          select: {\n            autosave: true,\n          },\n          user,\n        })\n\n        if (\n          mostRecentVersion.docs[0] &&\n          'autosave' in mostRecentVersion.docs[0] &&\n          mostRecentVersion.docs[0].autosave\n        ) {\n          mostRecentVersionIsAutosaved = true\n        }\n      }\n\n      if (publishedDoc?.updatedAt) {\n        ;({ totalDocs: unpublishedVersionCount } = await payload.countGlobalVersions({\n          depth: 0,\n          global: globalConfig.slug,\n          user,\n          where: combineQueries(\n            {\n              and: [\n                {\n                  'version._status': {\n                    equals: 'draft',\n                  },\n                },\n                {\n                  updatedAt: {\n                    greater_than: publishedDoc.updatedAt,\n                  },\n                },\n              ],\n            },\n            extractAccessFromPermission(docPermissions.readVersions),\n          ),\n        }))\n      }\n    }\n\n    ;({ totalDocs: versionCount } = await payload.countGlobalVersions({\n      depth: 0,\n      global: globalConfig.slug,\n      user,\n    }))\n  }\n\n  return {\n    hasPublishedDoc,\n    mostRecentVersionIsAutosaved,\n    unpublishedVersionCount,\n    versionCount,\n  }\n}\n"],"mappings":"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","ignoreList":[]}