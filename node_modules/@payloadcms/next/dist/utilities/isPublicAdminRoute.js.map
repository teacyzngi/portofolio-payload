{"version":3,"file":"isPublicAdminRoute.js","names":["getRouteWithoutAdmin","publicAdminRoutes","isPublicAdminRoute","adminRoute","config","route","some","routeSegment","segment","admin","routes","routeWithoutAdmin","startsWith","includes"],"sources":["../../src/utilities/isPublicAdminRoute.ts"],"sourcesContent":["import type { SanitizedConfig } from 'payload'\n\nimport { getRouteWithoutAdmin } from './getRouteWithoutAdmin.js'\n\n// Routes that require admin authentication\nconst publicAdminRoutes: (keyof Pick<\n  SanitizedConfig['admin']['routes'],\n  'createFirstUser' | 'forgot' | 'inactivity' | 'login' | 'logout' | 'reset' | 'unauthorized'\n>)[] = [\n  'createFirstUser',\n  'forgot',\n  'login',\n  'logout',\n  'forgot',\n  'inactivity',\n  'unauthorized',\n  'reset',\n]\n\nexport const isPublicAdminRoute = ({\n  adminRoute,\n  config,\n  route,\n}: {\n  adminRoute: string\n  config: SanitizedConfig\n  route: string\n}): boolean => {\n  const isPublicAdminRoute = publicAdminRoutes.some((routeSegment) => {\n    const segment = config.admin?.routes?.[routeSegment] || routeSegment\n    const routeWithoutAdmin = getRouteWithoutAdmin({ adminRoute, route })\n\n    if (routeWithoutAdmin.startsWith(segment)) {\n      return true\n    } else if (routeWithoutAdmin.includes('/verify/')) {\n      return true\n    } else {\n      return false\n    }\n  })\n\n  return isPublicAdminRoute\n}\n"],"mappings":"AAEA,SAASA,oBAAoB,QAAQ;AAErC;AACA,MAAMC,iBAAA,GAGC,CACL,mBACA,UACA,SACA,UACA,UACA,cACA,gBACA,QACD;AAED,OAAO,MAAMC,kBAAA,GAAqBA,CAAC;EACjCC,UAAU;EACVC,MAAM;EACNC;AAAK,CAKN;EACC,MAAMH,kBAAA,GAAqBD,iBAAA,CAAkBK,IAAI,CAAEC,YAAA;IACjD,MAAMC,OAAA,GAAUJ,MAAA,CAAOK,KAAK,EAAEC,MAAA,GAASH,YAAA,CAAa,IAAIA,YAAA;IACxD,MAAMI,iBAAA,GAAoBX,oBAAA,CAAqB;MAAEG,UAAA;MAAYE;IAAM;IAEnE,IAAIM,iBAAA,CAAkBC,UAAU,CAACJ,OAAA,GAAU;MACzC,OAAO;IACT,OAAO,IAAIG,iBAAA,CAAkBE,QAAQ,CAAC,aAAa;MACjD,OAAO;IACT,OAAO;MACL,OAAO;IACT;EACF;EAEA,OAAOX,kBAAA;AACT","ignoreList":[]}