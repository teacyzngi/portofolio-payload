{"version":3,"sources":["../src/types.ts"],"sourcesContent":["import type {\n  CollectionConfig,\n  Field,\n  FileData,\n  ImageSize,\n  PayloadRequest,\n  TypeWithID,\n  UploadCollectionSlug,\n} from 'payload'\n\nexport interface File {\n  buffer: Buffer\n  clientUploadContext?: unknown\n  filename: string\n  filesize: number\n  mimeType: string\n  tempFilePath?: string\n}\n\nexport type ClientUploadsAccess = (args: {\n  collectionSlug: UploadCollectionSlug\n  req: PayloadRequest\n}) => boolean | Promise<boolean>\n\nexport type ClientUploadsConfig =\n  | {\n      access?: ClientUploadsAccess\n    }\n  | boolean\n\nexport type HandleUpload = (args: {\n  clientUploadContext: unknown\n  collection: CollectionConfig\n  data: any\n  file: File\n  req: PayloadRequest\n}) => Promise<void> | void\n\nexport interface TypeWithPrefix {\n  prefix?: string\n}\n\nexport type HandleDelete = (args: {\n  collection: CollectionConfig\n  doc: FileData & TypeWithID & TypeWithPrefix\n  filename: string\n  req: PayloadRequest\n}) => Promise<void> | void\n\nexport type GenerateURL = (args: {\n  collection: CollectionConfig\n  data: any\n  filename: string\n  prefix?: string\n}) => Promise<string> | string\n\nexport type StaticHandler = (\n  req: PayloadRequest,\n  args: {\n    doc?: TypeWithID\n    headers?: Headers\n    params: { clientUploadContext?: unknown; collection: string; filename: string }\n  },\n) => Promise<Response> | Response\n\nexport interface GeneratedAdapter {\n  clientUploads?: ClientUploadsConfig\n  /**\n   * Additional fields to be injected into the base collection and image sizes\n   */\n  fields?: Field[]\n  /**\n   * Generates the public URL for a file\n   */\n  generateURL?: GenerateURL\n  handleDelete: HandleDelete\n  handleUpload: HandleUpload\n  name: string\n  onInit?: () => void\n  staticHandler: StaticHandler\n}\n\nexport type Adapter = (args: { collection: CollectionConfig; prefix?: string }) => GeneratedAdapter\n\nexport type AllowList = Array<{\n  hostname: string\n  pathname?: string\n  port?: string\n  protocol?: 'http' | 'https'\n  search?: string\n}>\n\nexport type GenerateFileURL = (args: {\n  collection: CollectionConfig\n  filename: string\n  prefix?: string\n  size?: ImageSize\n}) => Promise<string> | string\n\nexport interface CollectionOptions {\n  adapter: Adapter | null\n  disableLocalStorage?: boolean\n  disablePayloadAccessControl?: true\n  generateFileURL?: GenerateFileURL\n  prefix?: string\n}\n\nexport interface PluginOptions {\n  collections: Partial<Record<UploadCollectionSlug, CollectionOptions>>\n  /**\n   * Whether or not to enable the plugin\n   *\n   * Default: true\n   */\n  enabled?: boolean\n}\n"],"names":[],"mappings":"AA2GA,WAQC"}