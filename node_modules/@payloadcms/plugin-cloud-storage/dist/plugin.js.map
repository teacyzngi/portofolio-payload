{"version":3,"sources":["../src/plugin.ts"],"sourcesContent":["import type { Config } from 'payload'\n\nimport type { AllowList, PluginOptions } from './types.js'\n\nimport { getFields } from './fields/getFields.js'\nimport { getAfterDeleteHook } from './hooks/afterDelete.js'\nimport { getBeforeChangeHook } from './hooks/beforeChange.js'\n\n// This plugin extends all targeted collections by offloading uploaded files\n// to cloud storage instead of solely storing files locally.\n\n// It is based on an adapter approach, where adapters can be written for any cloud provider.\n// Adapters are responsible for providing four actions that this plugin will use:\n// 1. handleUpload, 2. handleDelete, 3. generateURL, 4. staticHandler\n\n// Optionally, the adapter can specify any Webpack config overrides if they are necessary.\n\nexport const cloudStoragePlugin =\n  (pluginOptions: PluginOptions) =>\n  (incomingConfig: Config): Config => {\n    const { collections: allCollectionOptions, enabled } = pluginOptions\n    const config = { ...incomingConfig }\n\n    // Return early if disabled. Only webpack config mods are applied.\n    if (enabled === false) {\n      return config\n    }\n\n    const initFunctions: Array<() => void> = []\n\n    return {\n      ...config,\n      collections: (config.collections || []).map((existingCollection) => {\n        const options = allCollectionOptions[existingCollection.slug]\n\n        if (options?.adapter) {\n          const adapter = options.adapter({\n            collection: existingCollection,\n            prefix: options.prefix,\n          })\n\n          if (adapter.onInit) {\n            initFunctions.push(adapter.onInit)\n          }\n\n          const fields = getFields({\n            adapter,\n            collection: existingCollection,\n            disablePayloadAccessControl: options.disablePayloadAccessControl,\n            generateFileURL: options.generateFileURL,\n            prefix: options.prefix,\n          })\n\n          const handlers = [\n            ...(typeof existingCollection.upload === 'object' &&\n            Array.isArray(existingCollection.upload.handlers)\n              ? existingCollection.upload.handlers\n              : []),\n          ]\n\n          if (!options.disablePayloadAccessControl) {\n            handlers.push(adapter.staticHandler)\n            // Else if disablePayloadAccessControl: true and clientUploads is used\n            // Build the \"proxied\" handler that responses only when the file was requested by client upload in addDataAndFileToRequest\n          } else if (adapter.clientUploads) {\n            handlers.push((req, args) => {\n              if ('clientUploadContext' in args.params) {\n                return adapter.staticHandler(req, args)\n              }\n            })\n          }\n\n          const getSkipSafeFetchSetting = (): AllowList | boolean => {\n            if (options.disablePayloadAccessControl) {\n              return true\n            }\n            const isBooleanTrueSkipSafeFetch =\n              typeof existingCollection.upload === 'object' &&\n              existingCollection.upload.skipSafeFetch === true\n\n            const isAllowListSkipSafeFetch =\n              typeof existingCollection.upload === 'object' &&\n              Array.isArray(existingCollection.upload.skipSafeFetch)\n\n            if (isBooleanTrueSkipSafeFetch) {\n              return true\n            } else if (isAllowListSkipSafeFetch) {\n              const existingSkipSafeFetch =\n                typeof existingCollection.upload === 'object' &&\n                Array.isArray(existingCollection.upload.skipSafeFetch)\n                  ? existingCollection.upload.skipSafeFetch\n                  : []\n\n              const hasExactLocalhostMatch = existingSkipSafeFetch.some((entry) => {\n                const entryKeys = Object.keys(entry)\n                return entryKeys.length === 1 && entry.hostname === 'localhost'\n              })\n\n              const localhostEntry =\n                process.env.NODE_ENV !== 'production' && !hasExactLocalhostMatch\n                  ? [{ hostname: 'localhost' }]\n                  : []\n\n              return [...existingSkipSafeFetch, ...localhostEntry]\n            }\n\n            if (process.env.NODE_ENV !== 'production') {\n              return [{ hostname: 'localhost' }]\n            }\n\n            return false\n          }\n\n          return {\n            ...existingCollection,\n            fields,\n            hooks: {\n              ...(existingCollection.hooks || {}),\n              afterDelete: [\n                ...(existingCollection.hooks?.afterDelete || []),\n                getAfterDeleteHook({ adapter, collection: existingCollection }),\n              ],\n              beforeChange: [\n                ...(existingCollection.hooks?.beforeChange || []),\n                getBeforeChangeHook({ adapter, collection: existingCollection }),\n              ],\n            },\n            upload: {\n              ...(typeof existingCollection.upload === 'object' ? existingCollection.upload : {}),\n              adapter: adapter.name,\n              disableLocalStorage:\n                typeof options.disableLocalStorage === 'boolean'\n                  ? options.disableLocalStorage\n                  : true,\n              handlers,\n              skipSafeFetch: getSkipSafeFetchSetting(),\n            },\n          }\n        }\n\n        return existingCollection\n      }),\n      onInit: async (payload) => {\n        initFunctions.forEach((fn) => fn())\n        if (config.onInit) {\n          await config.onInit(payload)\n        }\n      },\n    }\n  }\n"],"names":["getFields","getAfterDeleteHook","getBeforeChangeHook","cloudStoragePlugin","pluginOptions","incomingConfig","collections","allCollectionOptions","enabled","config","initFunctions","map","existingCollection","options","slug","adapter","collection","prefix","onInit","push","fields","disablePayloadAccessControl","generateFileURL","handlers","upload","Array","isArray","staticHandler","clientUploads","req","args","params","getSkipSafeFetchSetting","isBooleanTrueSkipSafeFetch","skipSafeFetch","isAllowListSkipSafeFetch","existingSkipSafeFetch","hasExactLocalhostMatch","some","entry","entryKeys","Object","keys","length","hostname","localhostEntry","process","env","NODE_ENV","hooks","afterDelete","beforeChange","name","disableLocalStorage","payload","forEach","fn"],"mappings":"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"}