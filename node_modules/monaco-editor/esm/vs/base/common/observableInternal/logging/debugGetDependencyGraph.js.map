{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/base/common/observableInternal/logging/debugGetDependencyGraph.ts","vs/base/common/observableInternal/logging/debugGetDependencyGraph.ts"],"names":[],"mappings":"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","file":"debugGetDependencyGraph.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IObservable, IObserver } from '../base.js';\nimport { Derived } from '../observables/derivedImpl.js';\nimport { FromEventObservable } from '../observables/observableFromEvent.js';\nimport { ObservableValue } from '../observables/observableValue.js';\nimport { AutorunObserver } from '../reactions/autorunImpl.js';\nimport { formatValue } from './consoleObservableLogger.js';\n\nexport function debugGetDependencyGraph(obs: IObservable<any> | IObserver, options?: { debugNamePostProcessor?: (name: string) => string }): string {\n\tconst debugNamePostProcessor = options?.debugNamePostProcessor ?? ((str: string) => str);\n\tconst info = Info.from(obs, debugNamePostProcessor);\n\tif (!info) {\n\t\treturn '';\n\t}\n\n\tconst alreadyListed = new Set<IObservable<any> | IObserver>();\n\treturn formatObservableInfo(info, 0, alreadyListed).trim();\n}\n\nfunction formatObservableInfo(info: Info, indentLevel: number, alreadyListed: Set<IObservable<any> | IObserver>): string {\n\tconst indent = '\\t\\t'.repeat(indentLevel);\n\tconst lines: string[] = [];\n\n\tconst isAlreadyListed = alreadyListed.has(info.sourceObj);\n\tif (isAlreadyListed) {\n\t\tlines.push(`${indent}* ${info.type} ${info.name} (already listed)`);\n\t\treturn lines.join('\\n');\n\t}\n\n\talreadyListed.add(info.sourceObj);\n\n\tlines.push(`${indent}* ${info.type} ${info.name}:`);\n\tlines.push(`${indent}  value: ${formatValue(info.value, 50)}`);\n\tlines.push(`${indent}  state: ${info.state}`);\n\n\tif (info.dependencies.length > 0) {\n\t\tlines.push(`${indent}  dependencies:`);\n\t\tfor (const dep of info.dependencies) {\n\t\t\tlines.push(formatObservableInfo(dep, indentLevel + 1, alreadyListed));\n\t\t}\n\t}\n\n\treturn lines.join('\\n');\n}\n\nclass Info {\n\tpublic static from(obs: IObservable<any> | IObserver, debugNamePostProcessor: (name: string) => string): Info | undefined {\n\t\tif (obs instanceof AutorunObserver) {\n\t\t\tconst state = obs.debugGetState();\n\t\t\treturn new Info(\n\t\t\t\tobs,\n\t\t\t\tdebugNamePostProcessor(obs.debugName),\n\t\t\t\t'autorun',\n\t\t\t\tundefined,\n\t\t\t\tstate.stateStr,\n\t\t\t\tArray.from(state.dependencies).map(dep => Info.from(dep, debugNamePostProcessor) || Info.unknown(dep))\n\t\t\t);\n\t\t} else if (obs instanceof Derived) {\n\t\t\tconst state = obs.debugGetState();\n\t\t\treturn new Info(\n\t\t\t\tobs,\n\t\t\t\tdebugNamePostProcessor(obs.debugName),\n\t\t\t\t'derived',\n\t\t\t\tstate.value,\n\t\t\t\tstate.stateStr,\n\t\t\t\tArray.from(state.dependencies).map(dep => Info.from(dep, debugNamePostProcessor) || Info.unknown(dep))\n\t\t\t);\n\t\t} else if (obs instanceof ObservableValue) {\n\t\t\tconst state = obs.debugGetState();\n\t\t\treturn new Info(\n\t\t\t\tobs,\n\t\t\t\tdebugNamePostProcessor(obs.debugName),\n\t\t\t\t'observableValue',\n\t\t\t\tstate.value,\n\t\t\t\t'upToDate',\n\t\t\t\t[]\n\t\t\t);\n\t\t} else if (obs instanceof FromEventObservable) {\n\t\t\tconst state = obs.debugGetState();\n\t\t\treturn new Info(\n\t\t\t\tobs,\n\t\t\t\tdebugNamePostProcessor(obs.debugName),\n\t\t\t\t'fromEvent',\n\t\t\t\tstate.value,\n\t\t\t\tstate.hasValue ? 'upToDate' : 'initial',\n\t\t\t\t[]\n\t\t\t);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic static unknown(obs: IObservable<any> | IObserver): Info {\n\t\treturn new Info(\n\t\t\tobs,\n\t\t\t'(unknown)',\n\t\t\t'unknown',\n\t\t\tundefined,\n\t\t\t'unknown',\n\t\t\t[]\n\t\t);\n\t}\n\n\tconstructor(\n\t\tpublic readonly sourceObj: IObservable<any> | IObserver,\n\t\tpublic readonly name: string,\n\t\tpublic readonly type: string,\n\t\tpublic readonly value: any,\n\t\tpublic readonly state: string,\n\t\tpublic readonly dependencies: Info[]\n\t) { }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IObservable, IObserver } from '../base.js';\nimport { Derived } from '../observables/derivedImpl.js';\nimport { FromEventObservable } from '../observables/observableFromEvent.js';\nimport { ObservableValue } from '../observables/observableValue.js';\nimport { AutorunObserver } from '../reactions/autorunImpl.js';\nimport { formatValue } from './consoleObservableLogger.js';\n\nexport function debugGetDependencyGraph(obs: IObservable<any> | IObserver, options?: { debugNamePostProcessor?: (name: string) => string }): string {\n\tconst debugNamePostProcessor = options?.debugNamePostProcessor ?? ((str: string) => str);\n\tconst info = Info.from(obs, debugNamePostProcessor);\n\tif (!info) {\n\t\treturn '';\n\t}\n\n\tconst alreadyListed = new Set<IObservable<any> | IObserver>();\n\treturn formatObservableInfo(info, 0, alreadyListed).trim();\n}\n\nfunction formatObservableInfo(info: Info, indentLevel: number, alreadyListed: Set<IObservable<any> | IObserver>): string {\n\tconst indent = '\\t\\t'.repeat(indentLevel);\n\tconst lines: string[] = [];\n\n\tconst isAlreadyListed = alreadyListed.has(info.sourceObj);\n\tif (isAlreadyListed) {\n\t\tlines.push(`${indent}* ${info.type} ${info.name} (already listed)`);\n\t\treturn lines.join('\\n');\n\t}\n\n\talreadyListed.add(info.sourceObj);\n\n\tlines.push(`${indent}* ${info.type} ${info.name}:`);\n\tlines.push(`${indent}  value: ${formatValue(info.value, 50)}`);\n\tlines.push(`${indent}  state: ${info.state}`);\n\n\tif (info.dependencies.length > 0) {\n\t\tlines.push(`${indent}  dependencies:`);\n\t\tfor (const dep of info.dependencies) {\n\t\t\tlines.push(formatObservableInfo(dep, indentLevel + 1, alreadyListed));\n\t\t}\n\t}\n\n\treturn lines.join('\\n');\n}\n\nclass Info {\n\tpublic static from(obs: IObservable<any> | IObserver, debugNamePostProcessor: (name: string) => string): Info | undefined {\n\t\tif (obs instanceof AutorunObserver) {\n\t\t\tconst state = obs.debugGetState();\n\t\t\treturn new Info(\n\t\t\t\tobs,\n\t\t\t\tdebugNamePostProcessor(obs.debugName),\n\t\t\t\t'autorun',\n\t\t\t\tundefined,\n\t\t\t\tstate.stateStr,\n\t\t\t\tArray.from(state.dependencies).map(dep => Info.from(dep, debugNamePostProcessor) || Info.unknown(dep))\n\t\t\t);\n\t\t} else if (obs instanceof Derived) {\n\t\t\tconst state = obs.debugGetState();\n\t\t\treturn new Info(\n\t\t\t\tobs,\n\t\t\t\tdebugNamePostProcessor(obs.debugName),\n\t\t\t\t'derived',\n\t\t\t\tstate.value,\n\t\t\t\tstate.stateStr,\n\t\t\t\tArray.from(state.dependencies).map(dep => Info.from(dep, debugNamePostProcessor) || Info.unknown(dep))\n\t\t\t);\n\t\t} else if (obs instanceof ObservableValue) {\n\t\t\tconst state = obs.debugGetState();\n\t\t\treturn new Info(\n\t\t\t\tobs,\n\t\t\t\tdebugNamePostProcessor(obs.debugName),\n\t\t\t\t'observableValue',\n\t\t\t\tstate.value,\n\t\t\t\t'upToDate',\n\t\t\t\t[]\n\t\t\t);\n\t\t} else if (obs instanceof FromEventObservable) {\n\t\t\tconst state = obs.debugGetState();\n\t\t\treturn new Info(\n\t\t\t\tobs,\n\t\t\t\tdebugNamePostProcessor(obs.debugName),\n\t\t\t\t'fromEvent',\n\t\t\t\tstate.value,\n\t\t\t\tstate.hasValue ? 'upToDate' : 'initial',\n\t\t\t\t[]\n\t\t\t);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic static unknown(obs: IObservable<any> | IObserver): Info {\n\t\treturn new Info(\n\t\t\tobs,\n\t\t\t'(unknown)',\n\t\t\t'unknown',\n\t\t\tundefined,\n\t\t\t'unknown',\n\t\t\t[]\n\t\t);\n\t}\n\n\tconstructor(\n\t\tpublic readonly sourceObj: IObservable<any> | IObserver,\n\t\tpublic readonly name: string,\n\t\tpublic readonly type: string,\n\t\tpublic readonly value: any,\n\t\tpublic readonly state: string,\n\t\tpublic readonly dependencies: Info[]\n\t) { }\n}\n"]}