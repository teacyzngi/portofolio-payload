{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/platform/dataChannel/browser/forwardingTelemetryService.ts","vs/platform/dataChannel/browser/forwardingTelemetryService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;AAGhG,OAAO,EAAkB,iBAAiB,EAAE,MAAM,qCAAqC,CAAC;AACxF,OAAO,EAAE,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;AAE/D,MAAM,OAAO,4BAA4B;IAGxC,YACkB,YAA+B,EAC/B,UAA8D;QAD9D,iBAAY,GAAZ,YAAY,CAAmB;QAC/B,eAAU,GAAV,UAAU,CAAoD;IAC5E,CAAC;IAEL,UAAU,CAAsF,SAAiB,EAAE,IAAgC;QAClJ,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACjC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAC/C,CAAC;CACD;AAOM,IAAM,qCAAqC,GAA3C,MAAM,qCAAsC,SAAQ,4BAA4B;IACtF,YACoB,gBAAmC,EACjC,kBAAuC;QAE5D,KAAK,CAAC,gBAAgB,EAAE,CAAC,SAAS,EAAE,IAAI,EAAE,EAAE;YAC3C,uBAAuB;YACvB,IAAI,OAAO,GAAG,IAAI,CAAC;YACnB,IAAI,IAAI,IAAI,sBAAsB,IAAI,IAAI,EAAE,CAAC;gBAC5C,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC;YACjD,CAAC;YAED,IAAI,OAAO,EAAE,CAAC;gBACb,kBAAkB,CAAC,cAAc,CAAqB,eAAe,CAAC,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,IAAW,EAAE,CAAC,CAAC;YACnH,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;CACD,CAAA;AAjBY,qCAAqC;IAE/C,WAAA,iBAAiB,CAAA;IACjB,WAAA,mBAAmB,CAAA;GAHT,qCAAqC,CAiBjD;;AAED,MAAM,sBAAsB,GAAG,MAAM,CAAC,wBAAwB,CAAC,CAAC;AAChE,MAAM,UAAU,kBAAkB,CAAC,KAAc;IAChD,OAAO;QACN,2DAA2D;QAC3D,CAAC,sBAAsB,CAAC,EAAE,KAAK;KAC/B,CAAC;AACH,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,WAA+B;IACrE,IAAI,CAAC,WAAW,EAAE,CAAC;QAClB,OAAO,KAAK,CAAC;IACd,CAAC;IACD,MAAM,cAAc,GAAG,WAAW,CAAC,WAAW,EAAE,CAAC;IACjD,OAAO,cAAc,KAAK,gBAAgB,IAAI,cAAc,KAAK,qBAAqB,CAAC;AACxF,CAAC","file":"forwardingTelemetryService.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ClassifiedEvent, OmitMetadata, IGDPRProperty, StrictPropertyCheck } from '../../telemetry/common/gdprTypings.js';\nimport { ITelemetryData, ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { IDataChannelService } from '../common/dataChannel.js';\n\nexport class InterceptingTelemetryService implements ITelemetryService {\n\t_serviceBrand: undefined;\n\n\tconstructor(\n\t\tprivate readonly _baseService: ITelemetryService,\n\t\tprivate readonly _intercept: (eventName: string, data?: ITelemetryData) => void,\n\t) { }\n\n\tpublicLog2<E extends ClassifiedEvent<OmitMetadata<T>> = never, T extends IGDPRProperty = never>(eventName: string, data?: StrictPropertyCheck<T, E>): void {\n\t\tthis._intercept(eventName, data);\n\t\tthis._baseService.publicLog2(eventName, data);\n\t}\n}\n\nexport interface IEditTelemetryData {\n\teventName: string;\n\tdata: Record<string, unknown>;\n}\n\nexport class DataChannelForwardingTelemetryService extends InterceptingTelemetryService {\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IDataChannelService dataChannelService: IDataChannelService,\n\t) {\n\t\tsuper(telemetryService, (eventName, data) => {\n\t\t\t// filter for extension\n\t\t\tlet forward = true;\n\t\t\tif (data && shouldForwardToChannel in data) {\n\t\t\t\tforward = Boolean(data[shouldForwardToChannel]);\n\t\t\t}\n\n\t\t\tif (forward) {\n\t\t\t\tdataChannelService.getDataChannel<IEditTelemetryData>('editTelemetry').sendData({ eventName, data: data as any });\n\t\t\t}\n\t\t});\n\t}\n}\n\nconst shouldForwardToChannel = Symbol('shouldForwardToChannel');\nexport function forwardToChannelIf(value: boolean): Record<string, unknown> {\n\treturn {\n\t\t// This will not be sent via telemetry, it is just a marker\n\t\t[shouldForwardToChannel]: value\n\t};\n}\n\nexport function isCopilotLikeExtension(extensionId: string | undefined): boolean {\n\tif (!extensionId) {\n\t\treturn false;\n\t}\n\tconst extIdLowerCase = extensionId.toLowerCase();\n\treturn extIdLowerCase === 'github.copilot' || extIdLowerCase === 'github.copilot-chat';\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ClassifiedEvent, OmitMetadata, IGDPRProperty, StrictPropertyCheck } from '../../telemetry/common/gdprTypings.js';\nimport { ITelemetryData, ITelemetryService } from '../../telemetry/common/telemetry.js';\nimport { IDataChannelService } from '../common/dataChannel.js';\n\nexport class InterceptingTelemetryService implements ITelemetryService {\n\t_serviceBrand: undefined;\n\n\tconstructor(\n\t\tprivate readonly _baseService: ITelemetryService,\n\t\tprivate readonly _intercept: (eventName: string, data?: ITelemetryData) => void,\n\t) { }\n\n\tpublicLog2<E extends ClassifiedEvent<OmitMetadata<T>> = never, T extends IGDPRProperty = never>(eventName: string, data?: StrictPropertyCheck<T, E>): void {\n\t\tthis._intercept(eventName, data);\n\t\tthis._baseService.publicLog2(eventName, data);\n\t}\n}\n\nexport interface IEditTelemetryData {\n\teventName: string;\n\tdata: Record<string, unknown>;\n}\n\nexport class DataChannelForwardingTelemetryService extends InterceptingTelemetryService {\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IDataChannelService dataChannelService: IDataChannelService,\n\t) {\n\t\tsuper(telemetryService, (eventName, data) => {\n\t\t\t// filter for extension\n\t\t\tlet forward = true;\n\t\t\tif (data && shouldForwardToChannel in data) {\n\t\t\t\tforward = Boolean(data[shouldForwardToChannel]);\n\t\t\t}\n\n\t\t\tif (forward) {\n\t\t\t\tdataChannelService.getDataChannel<IEditTelemetryData>('editTelemetry').sendData({ eventName, data: data as any });\n\t\t\t}\n\t\t});\n\t}\n}\n\nconst shouldForwardToChannel = Symbol('shouldForwardToChannel');\nexport function forwardToChannelIf(value: boolean): Record<string, unknown> {\n\treturn {\n\t\t// This will not be sent via telemetry, it is just a marker\n\t\t[shouldForwardToChannel]: value\n\t};\n}\n\nexport function isCopilotLikeExtension(extensionId: string | undefined): boolean {\n\tif (!extensionId) {\n\t\treturn false;\n\t}\n\tconst extIdLowerCase = extensionId.toLowerCase();\n\treturn extIdLowerCase === 'github.copilot' || extIdLowerCase === 'github.copilot-chat';\n}\n"]}