{"version":3,"sources":["../../../src/bin/generateImportMap/generateImportMap.spec.ts"],"sourcesContent":["import type { PayloadComponent } from '../../index.js'\nimport { addPayloadComponentToImportMap } from './utilities/addPayloadComponentToImportMap.js'\nimport { getImportMapToBaseDirPath } from './utilities/getImportMapToBaseDirPath.js'\n\ndescribe('addPayloadComponentToImportMap', () => {\n  let importMap: Record<string, string>\n  let imports: Record<\n    string,\n    {\n      path: string\n      specifier: string\n    }\n  >\n\n  beforeEach(() => {\n    importMap = {}\n    imports = {}\n    jest.restoreAllMocks()\n  })\n\n  function componentPathTest({\n    baseDir,\n    importMapFilePath,\n    payloadComponent,\n    expectedPath,\n    expectedSpecifier,\n    expectedImportMapToBaseDirPath,\n  }: {\n    baseDir: string\n    importMapFilePath: string\n    payloadComponent: PayloadComponent\n    expectedPath: string\n    expectedImportMapToBaseDirPath: string\n    expectedSpecifier: string\n  }) {\n    const importMapToBaseDirPath = getImportMapToBaseDirPath({\n      baseDir,\n      importMapPath: importMapFilePath,\n    })\n\n    expect(importMapToBaseDirPath).toBe(expectedImportMapToBaseDirPath)\n\n    const { path, specifier } =\n      addPayloadComponentToImportMap({\n        importMapToBaseDirPath,\n        importMap,\n        imports,\n        payloadComponent,\n      }) ?? {}\n\n    expect(path).toBe(expectedPath)\n    expect(specifier).toBe(expectedSpecifier)\n  }\n\n  it('relative path with import map partially in base dir', () => {\n    componentPathTest({\n      baseDir: '/myPackage/test/myTest',\n      importMapFilePath: '/myPackage/app/(payload)/importMap.js',\n      payloadComponent: './MyComponent.js#MyExport',\n      expectedImportMapToBaseDirPath: '../../test/myTest/',\n      expectedPath: '../../test/myTest/MyComponent.js',\n      expectedSpecifier: 'MyExport',\n    })\n  })\n\n  it('relative path with import map partially in base dir 2', () => {\n    componentPathTest({\n      baseDir: '/myPackage/test/myTest',\n      importMapFilePath: '/myPackage/test/prod/app/(payload)/importMap.js',\n      payloadComponent: {\n        path: './MyComponent.js#MyExport',\n      },\n      expectedImportMapToBaseDirPath: '../../../myTest/',\n      expectedPath: '../../../myTest/MyComponent.js',\n      expectedSpecifier: 'MyExport',\n    })\n  })\n\n  it('relative path with import map partially in base dir 3', () => {\n    componentPathTest({\n      baseDir: '/myPackage/test/myTest',\n      importMapFilePath: '/myPackage/test/prod/app/(payload)/importMap.js',\n      payloadComponent: {\n        path: '../otherTest/MyComponent.js',\n        exportName: 'MyExport',\n      },\n      expectedImportMapToBaseDirPath: '../../../myTest/',\n      expectedPath: '../../../otherTest/MyComponent.js',\n      expectedSpecifier: 'MyExport',\n    })\n  })\n\n  it('relative path with import map within base dir', () => {\n    componentPathTest({\n      baseDir: '/myPackage/test/myTest',\n      importMapFilePath: '/myPackage/test/myTest/prod/app/(payload)/importMap.js',\n      payloadComponent: './MyComponent.js#MyExport',\n      expectedImportMapToBaseDirPath: '../../../',\n      expectedPath: '../../../MyComponent.js',\n      expectedSpecifier: 'MyExport',\n    })\n  })\n\n  it('relative path with import map not in base dir', () => {\n    componentPathTest({\n      baseDir: '/test/myTest',\n      importMapFilePath: '/app/(payload)/importMap.js',\n      payloadComponent: './MyComponent.js#MyExport',\n      expectedImportMapToBaseDirPath: '../../test/myTest/',\n      expectedPath: '../../test/myTest/MyComponent.js',\n      expectedSpecifier: 'MyExport',\n    })\n  })\n\n  it('relative path with import map not in base dir 2', () => {\n    componentPathTest({\n      baseDir: '/test/myTest',\n      importMapFilePath: '/app/(payload)/importMap.js',\n      payloadComponent: '../myOtherTest/MyComponent.js#MyExport',\n      expectedImportMapToBaseDirPath: '../../test/myTest/',\n      expectedPath: '../../test/myOtherTest/MyComponent.js',\n      expectedSpecifier: 'MyExport',\n    })\n  })\n\n  it('relative path with import map not in base dir, baseDir ending with slash', () => {\n    componentPathTest({\n      baseDir: '/test/myTest/',\n      importMapFilePath: '/app/(payload)/importMap.js',\n      payloadComponent: './MyComponent.js#MyExport',\n      expectedImportMapToBaseDirPath: '../../test/myTest/',\n      expectedPath: '../../test/myTest/MyComponent.js',\n      expectedSpecifier: 'MyExport',\n    })\n  })\n\n  it('relative path with import map not in base dir, component starting with slash', () => {\n    componentPathTest({\n      baseDir: '/test/myTest',\n      importMapFilePath: '/app/(payload)/importMap.js',\n      payloadComponent: '/MyComponent.js#MyExport',\n      expectedImportMapToBaseDirPath: '../../test/myTest/',\n      expectedPath: '../../test/myTest/MyComponent.js',\n      expectedSpecifier: 'MyExport',\n    })\n  })\n\n  it('aliased path', () => {\n    componentPathTest({\n      baseDir: '/test/myTest',\n      importMapFilePath: '/app/(payload)/importMap.js',\n      payloadComponent: '@components/MyComponent.js#MyExport',\n      expectedImportMapToBaseDirPath: '../../test/myTest/',\n      expectedPath: '@components/MyComponent.js',\n      expectedSpecifier: 'MyExport',\n    })\n  })\n  it('aliased path in PayloadComponent object', () => {\n    componentPathTest({\n      baseDir: '/test/',\n      importMapFilePath: '/app/(payload)/importMap.js',\n      payloadComponent: {\n        path: '@components/MyComponent.js',\n      },\n      expectedImportMapToBaseDirPath: '../../test/',\n      expectedPath: '@components/MyComponent.js',\n      expectedSpecifier: 'default',\n    })\n  })\n\n  it('relative path import starting with slash, going up', () => {\n    componentPathTest({\n      baseDir: '/test/myTest',\n      importMapFilePath: '/test/myTest/app/importMap.js',\n      payloadComponent: '/../MyComponent.js#MyExport',\n      expectedImportMapToBaseDirPath: '../',\n      expectedPath: '../../MyComponent.js',\n      expectedSpecifier: 'MyExport',\n    })\n  })\n\n  it('relative path import starting with dot-slash, going up', () => {\n    componentPathTest({\n      baseDir: '/test/myTest',\n      importMapFilePath: '/test/myTest/app/importMap.js',\n      payloadComponent: './../MyComponent.js#MyExport',\n      expectedImportMapToBaseDirPath: '../',\n      expectedPath: '../../MyComponent.js',\n      expectedSpecifier: 'MyExport',\n    })\n  })\n\n  it('importMap and baseDir in same directory', () => {\n    componentPathTest({\n      baseDir: '/test/myTest',\n      importMapFilePath: '/test/myTest/importMap.js',\n      payloadComponent: './MyComponent.js#MyExport',\n      expectedImportMapToBaseDirPath: './',\n      expectedPath: './MyComponent.js',\n      expectedSpecifier: 'MyExport',\n    })\n  })\n\n  it('baseDir within importMap dir', () => {\n    componentPathTest({\n      baseDir: '/test/myTest/components',\n      importMapFilePath: '/test/myTest/importMap.js',\n      payloadComponent: './MyComponent.js#MyExport',\n      expectedImportMapToBaseDirPath: './components/',\n      expectedPath: './components/MyComponent.js',\n      expectedSpecifier: 'MyExport',\n    })\n  })\n})\n"],"names":["addPayloadComponentToImportMap","getImportMapToBaseDirPath","describe","importMap","imports","beforeEach","jest","restoreAllMocks","componentPathTest","baseDir","importMapFilePath","payloadComponent","expectedPath","expectedSpecifier","expectedImportMapToBaseDirPath","importMapToBaseDirPath","importMapPath","expect","toBe","path","specifier","it","exportName"],"mappings":"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"}