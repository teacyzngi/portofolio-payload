{"version":3,"sources":["../../../../src/bin/generateImportMap/utilities/resolveImportMapFilePath.ts"],"sourcesContent":["import fs from 'fs/promises'\nimport path from 'path'\n\nasync function pathOrFileExists(path: string): Promise<boolean> {\n  try {\n    await fs.access(path)\n    return true\n  } catch {\n    return false\n  }\n}\n\n/**\n * Returns the path to the import map file. If the import map file is not found, it throws an error.\n */\nexport async function resolveImportMapFilePath({\n  adminRoute = '/admin',\n  importMapFile,\n  rootDir,\n}: {\n  adminRoute?: string\n  importMapFile?: string\n  rootDir: string\n}) {\n  let importMapFilePath: string | undefined = undefined\n\n  if (importMapFile?.length) {\n    if (!(await pathOrFileExists(importMapFile))) {\n      try {\n        await fs.writeFile(importMapFile, '', { flag: 'wx' })\n      } catch (err) {\n        throw new Error(\n          `Could not find the import map file at ${importMapFile}${err instanceof Error && err?.message ? `: ${err.message}` : ''}`,\n        )\n      }\n    }\n    importMapFilePath = importMapFile\n  } else {\n    const appLocation = path.resolve(rootDir, `app/(payload)${adminRoute}/`)\n    const srcAppLocation = path.resolve(rootDir, `src/app/(payload)${adminRoute}/`)\n\n    if (appLocation && (await pathOrFileExists(appLocation))) {\n      importMapFilePath = path.resolve(appLocation, 'importMap.js')\n      if (!(await pathOrFileExists(importMapFilePath))) {\n        await fs.writeFile(importMapFilePath, '', { flag: 'wx' })\n      }\n    } else if (srcAppLocation && (await pathOrFileExists(srcAppLocation))) {\n      importMapFilePath = path.resolve(srcAppLocation, 'importMap.js')\n      if (!(await pathOrFileExists(importMapFilePath))) {\n        await fs.writeFile(importMapFilePath, '', { flag: 'wx' })\n      }\n    } else {\n      throw new Error(\n        `Could not find Payload import map folder. Looked in ${appLocation} and ${srcAppLocation}`,\n      )\n    }\n  }\n  return importMapFilePath\n}\n"],"names":["fs","path","pathOrFileExists","access","resolveImportMapFilePath","adminRoute","importMapFile","rootDir","importMapFilePath","undefined","length","writeFile","flag","err","Error","message","appLocation","resolve","srcAppLocation"],"mappings":"AAAA,OAAOA,QAAQ,cAAa;AAC5B,OAAOC,UAAU,OAAM;AAEvB,eAAeC,iBAAiBD,IAAY;IAC1C,IAAI;QACF,MAAMD,GAAGG,MAAM,CAACF;QAChB,OAAO;IACT,EAAE,OAAM;QACN,OAAO;IACT;AACF;AAEA;;CAEC,GACD,OAAO,eAAeG,yBAAyB,EAC7CC,aAAa,QAAQ,EACrBC,aAAa,EACbC,OAAO,EAKR;IACC,IAAIC,oBAAwCC;IAE5C,IAAIH,eAAeI,QAAQ;QACzB,IAAI,CAAE,MAAMR,iBAAiBI,gBAAiB;YAC5C,IAAI;gBACF,MAAMN,GAAGW,SAAS,CAACL,eAAe,IAAI;oBAAEM,MAAM;gBAAK;YACrD,EAAE,OAAOC,KAAK;gBACZ,MAAM,IAAIC,MACR,CAAC,sCAAsC,EAAER,gBAAgBO,eAAeC,SAASD,KAAKE,UAAU,CAAC,EAAE,EAAEF,IAAIE,OAAO,EAAE,GAAG,IAAI;YAE7H;QACF;QACAP,oBAAoBF;IACtB,OAAO;QACL,MAAMU,cAAcf,KAAKgB,OAAO,CAACV,SAAS,CAAC,aAAa,EAAEF,WAAW,CAAC,CAAC;QACvE,MAAMa,iBAAiBjB,KAAKgB,OAAO,CAACV,SAAS,CAAC,iBAAiB,EAAEF,WAAW,CAAC,CAAC;QAE9E,IAAIW,eAAgB,MAAMd,iBAAiBc,cAAe;YACxDR,oBAAoBP,KAAKgB,OAAO,CAACD,aAAa;YAC9C,IAAI,CAAE,MAAMd,iBAAiBM,oBAAqB;gBAChD,MAAMR,GAAGW,SAAS,CAACH,mBAAmB,IAAI;oBAAEI,MAAM;gBAAK;YACzD;QACF,OAAO,IAAIM,kBAAmB,MAAMhB,iBAAiBgB,iBAAkB;YACrEV,oBAAoBP,KAAKgB,OAAO,CAACC,gBAAgB;YACjD,IAAI,CAAE,MAAMhB,iBAAiBM,oBAAqB;gBAChD,MAAMR,GAAGW,SAAS,CAACH,mBAAmB,IAAI;oBAAEI,MAAM;gBAAK;YACzD;QACF,OAAO;YACL,MAAM,IAAIE,MACR,CAAC,oDAAoD,EAAEE,YAAY,KAAK,EAAEE,gBAAgB;QAE9F;IACF;IACA,OAAOV;AACT"}