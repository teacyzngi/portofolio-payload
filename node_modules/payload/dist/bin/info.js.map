{"version":3,"sources":["../../src/bin/info.ts"],"sourcesContent":["import { execFileSync } from 'child_process'\nimport os from 'os'\n\nimport { getDependencies } from '../index.js'\nimport { PAYLOAD_PACKAGE_LIST } from '../versions/payloadPackageList.js'\n\nexport const info = async () => {\n  const deps = await getDependencies(process.cwd(), [\n    ...PAYLOAD_PACKAGE_LIST,\n    'next',\n    'react',\n    'react-dom',\n  ])\n\n  const formattedDeps = Array.from(deps.resolved.entries()).map(([name, { version }]) => ({\n    name,\n    version,\n  }))\n\n  console.log(generateOutput(formattedDeps))\n}\n\nfunction generateOutput(packages: Array<{ name: string; version: string }>) {\n  const cpuCores = os.cpus().length\n\n  const primaryDeps = packages.filter(({ name }) => name === 'payload' || name === 'next')\n  const otherDeps = packages\n    .filter(({ name }) => name !== 'payload' && name !== 'next')\n    .sort((a, b) => a.name.localeCompare(b.name))\n\n  const formattedDeps = [...primaryDeps, ...otherDeps]\n    .map(({ name, version }) => `  ${name}: ${version}`)\n    .join('\\n')\n\n  return `\nBinaries:\n  Node: ${process.versions.node}\n  npm: ${getBinaryVersion('npm')}\n  Yarn: ${getBinaryVersion('yarn')}\n  pnpm: ${getBinaryVersion('pnpm')}\nRelevant Packages:\n${formattedDeps}\nOperating System:\n  Platform: ${os.platform()}\n  Arch: ${os.arch()}\n  Version: ${os.version()}\n  Available memory (MB): ${Math.ceil(os.totalmem() / 1024 / 1024)}\n  Available CPU cores: ${cpuCores > 0 ? cpuCores : 'N/A'}\n`\n}\n\nfunction getBinaryVersion(binaryName: string) {\n  try {\n    return execFileSync(binaryName, ['--version']).toString().trim()\n  } catch {\n    return 'N/A'\n  }\n}\n\n// Direct execution\nif (import.meta.url === `file://${process.argv[1]}`) {\n  void info()\n}\n"],"names":["execFileSync","os","getDependencies","PAYLOAD_PACKAGE_LIST","info","deps","process","cwd","formattedDeps","Array","from","resolved","entries","map","name","version","console","log","generateOutput","packages","cpuCores","cpus","length","primaryDeps","filter","otherDeps","sort","a","b","localeCompare","join","versions","node","getBinaryVersion","platform","arch","Math","ceil","totalmem","binaryName","toString","trim","url","argv"],"mappings":"AAAA,SAASA,YAAY,QAAQ,gBAAe;AAC5C,OAAOC,QAAQ,KAAI;AAEnB,SAASC,eAAe,QAAQ,cAAa;AAC7C,SAASC,oBAAoB,QAAQ,oCAAmC;AAExE,OAAO,MAAMC,OAAO;IAClB,MAAMC,OAAO,MAAMH,gBAAgBI,QAAQC,GAAG,IAAI;WAC7CJ;QACH;QACA;QACA;KACD;IAED,MAAMK,gBAAgBC,MAAMC,IAAI,CAACL,KAAKM,QAAQ,CAACC,OAAO,IAAIC,GAAG,CAAC,CAAC,CAACC,MAAM,EAAEC,OAAO,EAAE,CAAC,GAAM,CAAA;YACtFD;YACAC;QACF,CAAA;IAEAC,QAAQC,GAAG,CAACC,eAAeV;AAC7B,EAAC;AAED,SAASU,eAAeC,QAAkD;IACxE,MAAMC,WAAWnB,GAAGoB,IAAI,GAAGC,MAAM;IAEjC,MAAMC,cAAcJ,SAASK,MAAM,CAAC,CAAC,EAAEV,IAAI,EAAE,GAAKA,SAAS,aAAaA,SAAS;IACjF,MAAMW,YAAYN,SACfK,MAAM,CAAC,CAAC,EAAEV,IAAI,EAAE,GAAKA,SAAS,aAAaA,SAAS,QACpDY,IAAI,CAAC,CAACC,GAAGC,IAAMD,EAAEb,IAAI,CAACe,aAAa,CAACD,EAAEd,IAAI;IAE7C,MAAMN,gBAAgB;WAAIe;WAAgBE;KAAU,CACjDZ,GAAG,CAAC,CAAC,EAAEC,IAAI,EAAEC,OAAO,EAAE,GAAK,CAAC,EAAE,EAAED,KAAK,EAAE,EAAEC,SAAS,EAClDe,IAAI,CAAC;IAER,OAAO,CAAC;;QAEF,EAAExB,QAAQyB,QAAQ,CAACC,IAAI,CAAC;OACzB,EAAEC,iBAAiB,OAAO;QACzB,EAAEA,iBAAiB,QAAQ;QAC3B,EAAEA,iBAAiB,QAAQ;;AAEnC,EAAEzB,cAAc;;YAEJ,EAAEP,GAAGiC,QAAQ,GAAG;QACpB,EAAEjC,GAAGkC,IAAI,GAAG;WACT,EAAElC,GAAGc,OAAO,GAAG;yBACD,EAAEqB,KAAKC,IAAI,CAACpC,GAAGqC,QAAQ,KAAK,OAAO,MAAM;uBAC3C,EAAElB,WAAW,IAAIA,WAAW,MAAM;AACzD,CAAC;AACD;AAEA,SAASa,iBAAiBM,UAAkB;IAC1C,IAAI;QACF,OAAOvC,aAAauC,YAAY;YAAC;SAAY,EAAEC,QAAQ,GAAGC,IAAI;IAChE,EAAE,OAAM;QACN,OAAO;IACT;AACF;AAEA,mBAAmB;AACnB,IAAI,YAAYC,GAAG,KAAK,CAAC,OAAO,EAAEpC,QAAQqC,IAAI,CAAC,EAAE,EAAE,EAAE;IACnD,KAAKvC;AACP"}