{"version":3,"sources":["../../src/bin/loadEnv.ts"],"sourcesContent":["import nextEnvImport from '@next/env'\n\nimport { findUpSync } from '../utilities/findUp.js'\nconst { loadEnvConfig } = nextEnvImport\n\n/**\n * Try to find user's env files and load it. Uses the same algorithm next.js uses to parse env files, meaning this also supports .env.local, .env.development, .env.production, etc.\n */\nexport function loadEnv(path?: string) {\n  if (path?.length) {\n    loadEnvConfig(path, true)\n    return\n  }\n\n  const dev = process.env.NODE_ENV !== 'production'\n  const { loadedEnvFiles } = loadEnvConfig(process.cwd(), dev)\n\n  if (!loadedEnvFiles?.length) {\n    // use findUp to find the env file. So, run loadEnvConfig for every directory upwards\n    findUpSync({\n      // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n      condition: (dir) => {\n        const { loadedEnvFiles } = loadEnvConfig(dir, true)\n        if (loadedEnvFiles?.length) {\n          return true\n        }\n      },\n      dir: process.cwd(),\n    })\n  }\n}\n"],"names":["nextEnvImport","findUpSync","loadEnvConfig","loadEnv","path","length","dev","process","env","NODE_ENV","loadedEnvFiles","cwd","condition","dir"],"mappings":"AAAA,OAAOA,mBAAmB,YAAW;AAErC,SAASC,UAAU,QAAQ,yBAAwB;AACnD,MAAM,EAAEC,aAAa,EAAE,GAAGF;AAE1B;;CAEC,GACD,OAAO,SAASG,QAAQC,IAAa;IACnC,IAAIA,MAAMC,QAAQ;QAChBH,cAAcE,MAAM;QACpB;IACF;IAEA,MAAME,MAAMC,QAAQC,GAAG,CAACC,QAAQ,KAAK;IACrC,MAAM,EAAEC,cAAc,EAAE,GAAGR,cAAcK,QAAQI,GAAG,IAAIL;IAExD,IAAI,CAACI,gBAAgBL,QAAQ;QAC3B,qFAAqF;QACrFJ,WAAW;YACT,oFAAoF;YACpFW,WAAW,CAACC;gBACV,MAAM,EAAEH,cAAc,EAAE,GAAGR,cAAcW,KAAK;gBAC9C,IAAIH,gBAAgBL,QAAQ;oBAC1B,OAAO;gBACT;YACF;YACAQ,KAAKN,QAAQI,GAAG;QAClB;IACF;AACF"}