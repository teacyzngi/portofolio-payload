{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport type { ExecutionResult, GraphQLSchema, ValidationRule } from 'graphql'\nimport type { Request as graphQLRequest, OperationArgs } from 'graphql-http'\nimport type { Logger } from 'pino'\nimport type { NonNever } from 'ts-essentials'\n\nimport { spawn } from 'child_process'\nimport crypto from 'crypto'\nimport { fileURLToPath } from 'node:url'\nimport path from 'path'\nimport WebSocket from 'ws'\n\nimport type { AuthArgs } from './auth/operations/auth.js'\nimport type { Result as ForgotPasswordResult } from './auth/operations/forgotPassword.js'\nimport type { Result as LoginResult } from './auth/operations/login.js'\nimport type { Result as ResetPasswordResult } from './auth/operations/resetPassword.js'\nimport type { AuthStrategy, UntypedUser } from './auth/types.js'\nimport type {\n  BulkOperationResult,\n  Collection,\n  DataFromCollectionSlug,\n  SelectFromCollectionSlug,\n  TypeWithID,\n} from './collections/config/types.js'\n\nimport {\n  forgotPasswordLocal,\n  type Options as ForgotPasswordOptions,\n} from './auth/operations/local/forgotPassword.js'\nimport { loginLocal, type Options as LoginOptions } from './auth/operations/local/login.js'\nimport {\n  resetPasswordLocal,\n  type Options as ResetPasswordOptions,\n} from './auth/operations/local/resetPassword.js'\nimport { unlockLocal, type Options as UnlockOptions } from './auth/operations/local/unlock.js'\nimport {\n  verifyEmailLocal,\n  type Options as VerifyEmailOptions,\n} from './auth/operations/local/verifyEmail.js'\nexport type { FieldState } from './admin/forms/Form.js'\nimport type { InitOptions, SanitizedConfig } from './config/types.js'\nimport type { BaseDatabaseAdapter, PaginatedDistinctDocs, PaginatedDocs } from './database/types.js'\nimport type { InitializedEmailAdapter } from './email/types.js'\nimport type { DataFromGlobalSlug, Globals, SelectFromGlobalSlug } from './globals/config/types.js'\nimport type {\n  ApplyDisableErrors,\n  JsonObject,\n  SelectType,\n  TransformCollectionWithSelect,\n  TransformGlobalWithSelect,\n} from './types/index.js'\nimport type { TraverseFieldsCallback } from './utilities/traverseFields.js'\n\nimport { countLocal, type Options as CountOptions } from './collections/operations/local/count.js'\nimport {\n  createLocal,\n  type Options as CreateOptions,\n} from './collections/operations/local/create.js'\nimport {\n  type ByIDOptions as DeleteByIDOptions,\n  deleteLocal,\n  type ManyOptions as DeleteManyOptions,\n  type Options as DeleteOptions,\n} from './collections/operations/local/delete.js'\nimport {\n  duplicateLocal,\n  type Options as DuplicateOptions,\n} from './collections/operations/local/duplicate.js'\nimport { findLocal, type Options as FindOptions } from './collections/operations/local/find.js'\nimport {\n  findByIDLocal,\n  type Options as FindByIDOptions,\n} from './collections/operations/local/findByID.js'\nimport {\n  findDistinct as findDistinctLocal,\n  type Options as FindDistinctOptions,\n} from './collections/operations/local/findDistinct.js'\nimport {\n  findVersionByIDLocal,\n  type Options as FindVersionByIDOptions,\n} from './collections/operations/local/findVersionByID.js'\nimport {\n  findVersionsLocal,\n  type Options as FindVersionsOptions,\n} from './collections/operations/local/findVersions.js'\nimport {\n  restoreVersionLocal,\n  type Options as RestoreVersionOptions,\n} from './collections/operations/local/restoreVersion.js'\nimport {\n  type ByIDOptions as UpdateByIDOptions,\n  updateLocal,\n  type ManyOptions as UpdateManyOptions,\n  type Options as UpdateOptions,\n} from './collections/operations/local/update.js'\nimport {\n  countGlobalVersionsLocal,\n  type CountGlobalVersionsOptions,\n} from './globals/operations/local/countVersions.js'\nimport {\n  type Options as FindGlobalOptions,\n  findOneGlobalLocal,\n} from './globals/operations/local/findOne.js'\nimport {\n  findGlobalVersionByIDLocal,\n  type Options as FindGlobalVersionByIDOptions,\n} from './globals/operations/local/findVersionByID.js'\nimport {\n  findGlobalVersionsLocal,\n  type Options as FindGlobalVersionsOptions,\n} from './globals/operations/local/findVersions.js'\nimport {\n  restoreGlobalVersionLocal,\n  type Options as RestoreGlobalVersionOptions,\n} from './globals/operations/local/restoreVersion.js'\nimport {\n  updateGlobalLocal,\n  type Options as UpdateGlobalOptions,\n} from './globals/operations/local/update.js'\nexport type * from './admin/types.js'\nimport type { SupportedLanguages } from '@payloadcms/translations'\n\nimport { Cron } from 'croner'\n\nimport type { ClientConfig, CreateClientConfigArgs } from './config/client.js'\nimport type { BaseJob } from './queues/config/types/workflowTypes.js'\nimport type { TypeWithVersion } from './versions/types.js'\n\nimport { decrypt, encrypt } from './auth/crypto.js'\nimport { authLocal } from './auth/operations/local/auth.js'\nimport { APIKeyAuthentication } from './auth/strategies/apiKey.js'\nimport { JWTAuthentication } from './auth/strategies/jwt.js'\nimport { generateImportMap, type ImportMap } from './bin/generateImportMap/index.js'\nimport { checkPayloadDependencies } from './checkPayloadDependencies.js'\nimport { countVersionsLocal } from './collections/operations/local/countVersions.js'\nimport { consoleEmailAdapter } from './email/consoleEmailAdapter.js'\nimport { fieldAffectsData, type FlattenedBlock } from './fields/config/types.js'\nimport { getJobsLocalAPI } from './queues/localAPI.js'\nimport { _internal_jobSystemGlobals } from './queues/utilities/getCurrentDate.js'\nimport { isNextBuild } from './utilities/isNextBuild.js'\nimport { getLogger } from './utilities/logger.js'\nimport { serverInit as serverInitTelemetry } from './utilities/telemetry/events/serverInit.js'\nimport { traverseFields } from './utilities/traverseFields.js'\n\n/**\n * Export of all base fields that could potentially be\n * useful as users wish to extend built-in fields with custom logic\n */\nexport { accountLockFields as baseAccountLockFields } from './auth/baseFields/accountLock.js'\nexport { apiKeyFields as baseAPIKeyFields } from './auth/baseFields/apiKey.js'\nexport { baseAuthFields } from './auth/baseFields/auth.js'\nexport { emailFieldConfig as baseEmailField } from './auth/baseFields/email.js'\nexport { sessionsFieldConfig as baseSessionsField } from './auth/baseFields/sessions.js'\nexport { usernameFieldConfig as baseUsernameField } from './auth/baseFields/username.js'\n\nexport { verificationFields as baseVerificationFields } from './auth/baseFields/verification.js'\nexport { executeAccess } from './auth/executeAccess.js'\nexport { executeAuthStrategies } from './auth/executeAuthStrategies.js'\nexport { extractAccessFromPermission } from './auth/extractAccessFromPermission.js'\nexport { getAccessResults } from './auth/getAccessResults.js'\nexport { getFieldsToSign } from './auth/getFieldsToSign.js'\nexport { getLoginOptions } from './auth/getLoginOptions.js'\nexport interface GeneratedTypes {\n  authUntyped: {\n    [slug: string]: {\n      forgotPassword: {\n        email: string\n      }\n      login: {\n        email: string\n        password: string\n      }\n      registerFirstUser: {\n        email: string\n        password: string\n      }\n      unlock: {\n        email: string\n      }\n    }\n  }\n\n  blocksUntyped: {\n    [slug: string]: JsonObject\n  }\n  collectionsJoinsUntyped: {\n    [slug: string]: {\n      [schemaPath: string]: CollectionSlug\n    }\n  }\n  collectionsSelectUntyped: {\n    [slug: string]: SelectType\n  }\n\n  collectionsUntyped: {\n    [slug: string]: JsonObject & TypeWithID\n  }\n  dbUntyped: {\n    defaultIDType: number | string\n  }\n  globalsSelectUntyped: {\n    [slug: string]: SelectType\n  }\n\n  globalsUntyped: {\n    [slug: string]: JsonObject\n  }\n  jobsUntyped: {\n    tasks: {\n      [slug: string]: {\n        input?: JsonObject\n        output?: JsonObject\n      }\n    }\n    workflows: {\n      [slug: string]: {\n        input: JsonObject\n      }\n    }\n  }\n  localeUntyped: null | string\n  userUntyped: UntypedUser\n}\n\n// Helper type to resolve the correct type using conditional types\ntype ResolveCollectionType<T> = 'collections' extends keyof T\n  ? T['collections']\n  : // @ts-expect-error\n    T['collectionsUntyped']\n\ntype ResolveBlockType<T> = 'blocks' extends keyof T\n  ? T['blocks']\n  : // @ts-expect-error\n    T['blocksUntyped']\n\ntype ResolveCollectionSelectType<T> = 'collectionsSelect' extends keyof T\n  ? T['collectionsSelect']\n  : // @ts-expect-error\n    T['collectionsSelectUntyped']\n\ntype ResolveCollectionJoinsType<T> = 'collectionsJoins' extends keyof T\n  ? T['collectionsJoins']\n  : // @ts-expect-error\n    T['collectionsJoinsUntyped']\n\ntype ResolveGlobalType<T> = 'globals' extends keyof T\n  ? T['globals']\n  : // @ts-expect-error\n    T['globalsUntyped']\n\ntype ResolveGlobalSelectType<T> = 'globalsSelect' extends keyof T\n  ? T['globalsSelect']\n  : // @ts-expect-error\n    T['globalsSelectUntyped']\n\n// Applying helper types to GeneratedTypes\nexport type TypedCollection = ResolveCollectionType<GeneratedTypes>\n\nexport type TypedBlock = ResolveBlockType<GeneratedTypes>\n\nexport type TypedUploadCollection = NonNever<{\n  [K in keyof TypedCollection]:\n    | 'filename'\n    | 'filesize'\n    | 'mimeType'\n    | 'url' extends keyof TypedCollection[K]\n    ? TypedCollection[K]\n    : never\n}>\n\nexport type TypedCollectionSelect = ResolveCollectionSelectType<GeneratedTypes>\n\nexport type TypedCollectionJoins = ResolveCollectionJoinsType<GeneratedTypes>\n\nexport type TypedGlobal = ResolveGlobalType<GeneratedTypes>\n\nexport type TypedGlobalSelect = ResolveGlobalSelectType<GeneratedTypes>\n\n// Extract string keys from the type\nexport type StringKeyOf<T> = Extract<keyof T, string>\n\n// Define the types for slugs using the appropriate collections and globals\nexport type CollectionSlug = StringKeyOf<TypedCollection>\n\nexport type BlockSlug = StringKeyOf<TypedBlock>\n\nexport type UploadCollectionSlug = StringKeyOf<TypedUploadCollection>\n\ntype ResolveDbType<T> = 'db' extends keyof T\n  ? T['db']\n  : // @ts-expect-error\n    T['dbUntyped']\n\nexport type DefaultDocumentIDType = ResolveDbType<GeneratedTypes>['defaultIDType']\nexport type GlobalSlug = StringKeyOf<TypedGlobal>\n\n// now for locale and user\n\n// @ts-expect-error\ntype ResolveLocaleType<T> = 'locale' extends keyof T ? T['locale'] : T['localeUntyped']\n// @ts-expect-error\ntype ResolveUserType<T> = 'user' extends keyof T ? T['user'] : T['userUntyped']\n\nexport type TypedLocale = ResolveLocaleType<GeneratedTypes>\n\n/**\n * @todo rename to `User` in 4.0\n */\nexport type TypedUser = ResolveUserType<GeneratedTypes>\n\n// @ts-expect-error\ntype ResolveAuthOperationsType<T> = 'auth' extends keyof T ? T['auth'] : T['authUntyped']\nexport type TypedAuthOperations = ResolveAuthOperationsType<GeneratedTypes>\n\n// @ts-expect-error\ntype ResolveJobOperationsType<T> = 'jobs' extends keyof T ? T['jobs'] : T['jobsUntyped']\nexport type TypedJobs = ResolveJobOperationsType<GeneratedTypes>\n\ntype HasPayloadJobsType = 'collections' extends keyof GeneratedTypes\n  ? 'payload-jobs' extends keyof TypedCollection\n    ? true\n    : false\n  : false\n\n/**\n * Represents a job in the `payload-jobs` collection, referencing a queued workflow or task (= Job).\n * If a generated type for the `payload-jobs` collection is not available, falls back to the BaseJob type.\n *\n * `input` and `taksStatus` are always present here, as the job afterRead hook will always populate them.\n */\nexport type Job<\n  TWorkflowSlugOrInput extends false | keyof TypedJobs['workflows'] | object = false,\n> = HasPayloadJobsType extends true\n  ? {\n      input: BaseJob<TWorkflowSlugOrInput>['input']\n      taskStatus: BaseJob<TWorkflowSlugOrInput>['taskStatus']\n    } & Omit<TypedCollection['payload-jobs'], 'input' | 'taskStatus'>\n  : BaseJob<TWorkflowSlugOrInput>\n\nconst filename = fileURLToPath(import.meta.url)\nconst dirname = path.dirname(filename)\n\nlet checkedDependencies = false\n\n/**\n * @description Payload\n */\nexport class BasePayload {\n  /**\n   * @description Authorization and Authentication using headers and cookies to run auth user strategies\n   * @returns permissions: Permissions\n   * @returns user: User\n   */\n  auth = async (options: AuthArgs) => {\n    return authLocal(this, options)\n  }\n\n  authStrategies!: AuthStrategy[]\n\n  blocks: Record<BlockSlug, FlattenedBlock> = {}\n\n  collections: Record<CollectionSlug, Collection> = {}\n\n  config!: SanitizedConfig\n  /**\n   * @description Performs count operation\n   * @param options\n   * @returns count of documents satisfying query\n   */\n  count = async <T extends CollectionSlug>(\n    options: CountOptions<T>,\n  ): Promise<{ totalDocs: number }> => {\n    return countLocal(this, options)\n  }\n\n  /**\n   * @description Performs countGlobalVersions operation\n   * @param options\n   * @returns count of global document versions satisfying query\n   */\n  countGlobalVersions = async <T extends GlobalSlug>(\n    options: CountGlobalVersionsOptions<T>,\n  ): Promise<{ totalDocs: number }> => {\n    return countGlobalVersionsLocal(this, options)\n  }\n\n  /**\n   * @description Performs countVersions operation\n   * @param options\n   * @returns count of document versions satisfying query\n   */\n  countVersions = async <T extends CollectionSlug>(\n    options: CountOptions<T>,\n  ): Promise<{ totalDocs: number }> => {\n    return countVersionsLocal(this, options)\n  }\n\n  /**\n   * @description Performs create operation\n   * @param options\n   * @returns created document\n   */\n  create = async <TSlug extends CollectionSlug, TSelect extends SelectFromCollectionSlug<TSlug>>(\n    options: CreateOptions<TSlug, TSelect>,\n  ): Promise<TransformCollectionWithSelect<TSlug, TSelect>> => {\n    return createLocal<TSlug, TSelect>(this, options)\n  }\n\n  crons: Cron[] = []\n  db!: DatabaseAdapter\n\n  decrypt = decrypt\n\n  destroy = async () => {\n    if (this.crons.length) {\n      // Remove all crons from the list before stopping them\n      const cronsToStop = this.crons.splice(0, this.crons.length)\n      await Promise.all(cronsToStop.map((cron) => cron.stop()))\n    }\n\n    if (this.db?.destroy && typeof this.db.destroy === 'function') {\n      await this.db.destroy()\n    }\n  }\n\n  duplicate = async <TSlug extends CollectionSlug, TSelect extends SelectFromCollectionSlug<TSlug>>(\n    options: DuplicateOptions<TSlug, TSelect>,\n  ): Promise<TransformCollectionWithSelect<TSlug, TSelect>> => {\n    return duplicateLocal<TSlug, TSelect>(this, options)\n  }\n\n  email!: InitializedEmailAdapter\n\n  // TODO: re-implement or remove?\n  // errorHandler: ErrorHandler\n\n  encrypt = encrypt\n\n  extensions!: (args: {\n    args: OperationArgs<any>\n    req: graphQLRequest<unknown, unknown>\n    result: ExecutionResult\n  }) => Promise<any>\n\n  /**\n   * @description Find documents with criteria\n   * @param options\n   * @returns documents satisfying query\n   */\n  find = async <TSlug extends CollectionSlug, TSelect extends SelectFromCollectionSlug<TSlug>>(\n    options: FindOptions<TSlug, TSelect>,\n  ): Promise<PaginatedDocs<TransformCollectionWithSelect<TSlug, TSelect>>> => {\n    return findLocal<TSlug, TSelect>(this, options)\n  }\n\n  /**\n   * @description Find document by ID\n   * @param options\n   * @returns document with specified ID\n   */\n  findByID = async <\n    TSlug extends CollectionSlug,\n    TDisableErrors extends boolean,\n    TSelect extends SelectFromCollectionSlug<TSlug>,\n  >(\n    options: FindByIDOptions<TSlug, TDisableErrors, TSelect>,\n  ): Promise<ApplyDisableErrors<TransformCollectionWithSelect<TSlug, TSelect>, TDisableErrors>> => {\n    return findByIDLocal<TSlug, TDisableErrors, TSelect>(this, options)\n  }\n\n  /**\n   * @description Find distinct field values\n   * @param options\n   * @returns result with distinct field values\n   */\n  findDistinct = async <\n    TSlug extends CollectionSlug,\n    TField extends keyof DataFromCollectionSlug<TSlug> & string,\n  >(\n    options: FindDistinctOptions<TSlug, TField>,\n  ): Promise<PaginatedDistinctDocs<Record<TField, DataFromCollectionSlug<TSlug>[TField]>>> => {\n    return findDistinctLocal(this, options)\n  }\n\n  findGlobal = async <TSlug extends GlobalSlug, TSelect extends SelectFromGlobalSlug<TSlug>>(\n    options: FindGlobalOptions<TSlug, TSelect>,\n  ): Promise<TransformGlobalWithSelect<TSlug, TSelect>> => {\n    return findOneGlobalLocal<TSlug, TSelect>(this, options)\n  }\n\n  /**\n   * @description Find global version by ID\n   * @param options\n   * @returns global version with specified ID\n   */\n  findGlobalVersionByID = async <TSlug extends GlobalSlug>(\n    options: FindGlobalVersionByIDOptions<TSlug>,\n  ): Promise<TypeWithVersion<DataFromGlobalSlug<TSlug>>> => {\n    return findGlobalVersionByIDLocal<TSlug>(this, options)\n  }\n\n  /**\n   * @description Find global versions with criteria\n   * @param options\n   * @returns versions satisfying query\n   */\n  findGlobalVersions = async <TSlug extends GlobalSlug>(\n    options: FindGlobalVersionsOptions<TSlug>,\n  ): Promise<PaginatedDocs<TypeWithVersion<DataFromGlobalSlug<TSlug>>>> => {\n    return findGlobalVersionsLocal<TSlug>(this, options)\n  }\n\n  /**\n   * @description Find version by ID\n   * @param options\n   * @returns version with specified ID\n   */\n  findVersionByID = async <TSlug extends CollectionSlug>(\n    options: FindVersionByIDOptions<TSlug>,\n  ): Promise<TypeWithVersion<DataFromCollectionSlug<TSlug>>> => {\n    return findVersionByIDLocal<TSlug>(this, options)\n  }\n\n  /**\n   * @description Find versions with criteria\n   * @param options\n   * @returns versions satisfying query\n   */\n  findVersions = async <TSlug extends CollectionSlug>(\n    options: FindVersionsOptions<TSlug>,\n  ): Promise<PaginatedDocs<TypeWithVersion<DataFromCollectionSlug<TSlug>>>> => {\n    return findVersionsLocal<TSlug>(this, options)\n  }\n\n  forgotPassword = async <TSlug extends CollectionSlug>(\n    options: ForgotPasswordOptions<TSlug>,\n  ): Promise<ForgotPasswordResult> => {\n    return forgotPasswordLocal<TSlug>(this, options)\n  }\n\n  getAdminURL = (): string => `${this.config.serverURL}${this.config.routes.admin}`\n\n  getAPIURL = (): string => `${this.config.serverURL}${this.config.routes.api}`\n\n  globals!: Globals\n\n  importMap!: ImportMap\n\n  jobs = getJobsLocalAPI(this)\n\n  logger!: Logger\n\n  login = async <TSlug extends CollectionSlug>(\n    options: LoginOptions<TSlug>,\n  ): Promise<{ user: DataFromCollectionSlug<TSlug> } & LoginResult> => {\n    return loginLocal<TSlug>(this, options)\n  }\n\n  resetPassword = async <TSlug extends CollectionSlug>(\n    options: ResetPasswordOptions<TSlug>,\n  ): Promise<ResetPasswordResult> => {\n    return resetPasswordLocal<TSlug>(this, options)\n  }\n\n  /**\n   * @description Restore global version by ID\n   * @param options\n   * @returns version with specified ID\n   */\n  restoreGlobalVersion = async <TSlug extends GlobalSlug>(\n    options: RestoreGlobalVersionOptions<TSlug>,\n  ): Promise<DataFromGlobalSlug<TSlug>> => {\n    return restoreGlobalVersionLocal<TSlug>(this, options)\n  }\n\n  /**\n   * @description Restore version by ID\n   * @param options\n   * @returns version with specified ID\n   */\n  restoreVersion = async <TSlug extends CollectionSlug>(\n    options: RestoreVersionOptions<TSlug>,\n  ): Promise<DataFromCollectionSlug<TSlug>> => {\n    return restoreVersionLocal<TSlug>(this, options)\n  }\n\n  schema!: GraphQLSchema\n\n  secret!: string\n\n  sendEmail!: InitializedEmailAdapter['sendEmail']\n\n  types!: {\n    arrayTypes: any\n    blockInputTypes: any\n    blockTypes: any\n    fallbackLocaleInputType?: any\n    groupTypes: any\n    localeInputType?: any\n    tabTypes: any\n  }\n\n  unlock = async <TSlug extends CollectionSlug>(\n    options: UnlockOptions<TSlug>,\n  ): Promise<boolean> => {\n    return unlockLocal<TSlug>(this, options)\n  }\n\n  updateGlobal = async <TSlug extends GlobalSlug, TSelect extends SelectFromGlobalSlug<TSlug>>(\n    options: UpdateGlobalOptions<TSlug, TSelect>,\n  ): Promise<TransformGlobalWithSelect<TSlug, TSelect>> => {\n    return updateGlobalLocal<TSlug, TSelect>(this, options)\n  }\n\n  validationRules!: (args: OperationArgs<any>) => ValidationRule[]\n\n  verifyEmail = async <TSlug extends CollectionSlug>(\n    options: VerifyEmailOptions<TSlug>,\n  ): Promise<boolean> => {\n    return verifyEmailLocal(this, options)\n  }\n\n  versions: {\n    [slug: string]: any // TODO: Type this\n  } = {}\n\n  async _initializeCrons() {\n    if (this.config.jobs.enabled && this.config.jobs.autoRun && !isNextBuild()) {\n      const DEFAULT_CRON = '* * * * *'\n      const DEFAULT_LIMIT = 10\n\n      const cronJobs =\n        typeof this.config.jobs.autoRun === 'function'\n          ? await this.config.jobs.autoRun(this)\n          : this.config.jobs.autoRun\n\n      await Promise.all(\n        cronJobs.map((cronConfig) => {\n          const jobAutorunCron = new Cron(\n            cronConfig.cron ?? DEFAULT_CRON,\n            async () => {\n              if (\n                _internal_jobSystemGlobals.shouldAutoSchedule &&\n                !cronConfig.disableScheduling &&\n                this.config.jobs.scheduling\n              ) {\n                await this.jobs.handleSchedules({\n                  allQueues: cronConfig.allQueues,\n                  queue: cronConfig.queue,\n                })\n              }\n\n              if (!_internal_jobSystemGlobals.shouldAutoRun) {\n                return\n              }\n\n              if (typeof this.config.jobs.shouldAutoRun === 'function') {\n                const shouldAutoRun = await this.config.jobs.shouldAutoRun(this)\n\n                if (!shouldAutoRun) {\n                  jobAutorunCron.stop()\n                  return\n                }\n              }\n\n              await this.jobs.run({\n                allQueues: cronConfig.allQueues,\n                limit: cronConfig.limit ?? DEFAULT_LIMIT,\n                queue: cronConfig.queue,\n                silent: cronConfig.silent,\n              })\n            },\n            {\n              // Do not run consecutive crons if previous crons still ongoing\n              protect: true,\n            },\n          )\n\n          this.crons.push(jobAutorunCron)\n        }),\n      )\n    }\n  }\n\n  async bin({\n    args,\n    cwd,\n    log,\n  }: {\n    args: string[]\n    cwd?: string\n    log?: boolean\n  }): Promise<{ code: number }> {\n    return new Promise((resolve, reject) => {\n      const spawned = spawn('node', [path.resolve(dirname, '../bin.js'), ...args], {\n        cwd,\n        stdio: log || log === undefined ? 'inherit' : 'ignore',\n      })\n\n      spawned.on('exit', (code) => {\n        resolve({ code: code! })\n      })\n\n      spawned.on('error', (error) => {\n        reject(error)\n      })\n    })\n  }\n\n  /**\n   * @description delete one or more documents\n   * @param options\n   * @returns Updated document(s)\n   */\n  delete<TSlug extends CollectionSlug, TSelect extends SelectFromCollectionSlug<TSlug>>(\n    options: DeleteByIDOptions<TSlug, TSelect>,\n  ): Promise<TransformCollectionWithSelect<TSlug, TSelect>>\n\n  delete<TSlug extends CollectionSlug, TSelect extends SelectFromCollectionSlug<TSlug>>(\n    options: DeleteManyOptions<TSlug, TSelect>,\n  ): Promise<BulkOperationResult<TSlug, TSelect>>\n\n  delete<TSlug extends CollectionSlug, TSelect extends SelectFromCollectionSlug<TSlug>>(\n    options: DeleteOptions<TSlug, TSelect>,\n  ): Promise<BulkOperationResult<TSlug, TSelect> | TransformCollectionWithSelect<TSlug, TSelect>> {\n    return deleteLocal<TSlug, TSelect>(this, options)\n  }\n\n  /**\n   * @description Initializes Payload\n   * @param options\n   */\n  async init(options: InitOptions): Promise<Payload> {\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      process.env.PAYLOAD_DISABLE_DEPENDENCY_CHECKER !== 'true' &&\n      !checkedDependencies\n    ) {\n      checkedDependencies = true\n      void checkPayloadDependencies()\n    }\n\n    this.importMap = options.importMap!\n\n    if (!options?.config) {\n      throw new Error('Error: the payload config is required to initialize payload.')\n    }\n\n    this.config = await options.config\n    this.logger = getLogger('payload', this.config.logger)\n\n    if (!this.config.secret) {\n      throw new Error('Error: missing secret key. A secret key is needed to secure Payload.')\n    }\n\n    this.secret = crypto.createHash('sha256').update(this.config.secret).digest('hex').slice(0, 32)\n\n    this.globals = {\n      config: this.config.globals,\n    }\n\n    for (const collection of this.config.collections) {\n      let customIDType: string | undefined = undefined\n      const findCustomID: TraverseFieldsCallback = ({ field }) => {\n        if (\n          ['array', 'blocks', 'group'].includes(field.type) ||\n          (field.type === 'tab' && 'name' in field)\n        ) {\n          return true\n        }\n\n        if (!fieldAffectsData(field)) {\n          return\n        }\n\n        if (field.name === 'id') {\n          customIDType = field.type\n          return true\n        }\n      }\n\n      traverseFields({\n        callback: findCustomID,\n        config: this.config,\n        fields: collection.fields,\n        parentIsLocalized: false,\n      })\n\n      this.collections[collection.slug] = {\n        config: collection,\n        customIDType,\n      }\n    }\n\n    this.blocks = this.config.blocks!.reduce(\n      (blocks, block) => {\n        blocks[block.slug] = block\n        return blocks\n      },\n      {} as Record<string, FlattenedBlock>,\n    )\n\n    // Generate types on startup\n    if (process.env.NODE_ENV !== 'production' && this.config.typescript.autoGenerate !== false) {\n      // We cannot run it directly here, as generate-types imports json-schema-to-typescript, which breaks on turbopack.\n      // see: https://github.com/vercel/next.js/issues/66723\n      void this.bin({\n        args: ['generate:types'],\n        log: false,\n      })\n    }\n\n    this.db = this.config.db.init({ payload: this })\n    this.db.payload = this\n\n    if (this.db?.init) {\n      await this.db.init()\n    }\n\n    if (!options.disableDBConnect && this.db.connect) {\n      await this.db.connect()\n    }\n\n    // Load email adapter\n    if (this.config.email instanceof Promise) {\n      const awaitedAdapter = await this.config.email\n      this.email = awaitedAdapter({ payload: this })\n    } else if (this.config.email) {\n      this.email = this.config.email({ payload: this })\n    } else {\n      if (process.env.NEXT_PHASE !== 'phase-production-build') {\n        this.logger.warn(\n          `No email adapter provided. Email will be written to console. More info at https://payloadcms.com/docs/email/overview.`,\n        )\n      }\n\n      this.email = consoleEmailAdapter({ payload: this })\n    }\n\n    // Warn if image resizing is enabled but sharp is not installed\n    if (\n      !this.config.sharp &&\n      this.config.collections.some((c) => c.upload.imageSizes || c.upload.formatOptions)\n    ) {\n      this.logger.warn(\n        `Image resizing is enabled for one or more collections, but sharp not installed. Please install 'sharp' and pass into the config.`,\n      )\n    }\n\n    // Warn if user is deploying to Vercel, and any upload collection is missing a storage adapter\n    if (process.env.VERCEL) {\n      const uploadCollWithoutAdapter = this.config.collections.filter(\n        (c) => c.upload && c.upload.adapter === undefined, // Uploads enabled, but no storage adapter provided\n      )\n\n      if (uploadCollWithoutAdapter.length) {\n        const slugs = uploadCollWithoutAdapter.map((c) => c.slug).join(', ')\n        this.logger.warn(\n          `Collections with uploads enabled require a storage adapter when deploying to Vercel. Collection(s) without storage adapters: ${slugs}. See https://payloadcms.com/docs/upload/storage-adapters for more info.`,\n        )\n      }\n    }\n\n    this.sendEmail = this.email['sendEmail']\n\n    serverInitTelemetry(this)\n\n    // 1. loop over collections, if collection has auth strategy, initialize and push to array\n    let jwtStrategyEnabled = false\n    this.authStrategies = this.config.collections.reduce((authStrategies, collection) => {\n      if (collection?.auth) {\n        if (collection.auth.strategies.length > 0) {\n          authStrategies.push(...collection.auth.strategies)\n        }\n\n        // 2. if api key enabled, push api key strategy into the array\n        if (collection.auth?.useAPIKey) {\n          authStrategies.push({\n            name: `${collection.slug}-api-key`,\n            authenticate: APIKeyAuthentication(collection),\n          })\n        }\n\n        // 3. if localStrategy flag is true\n        if (!collection.auth.disableLocalStrategy && !jwtStrategyEnabled) {\n          jwtStrategyEnabled = true\n        }\n      }\n\n      return authStrategies\n    }, [] as AuthStrategy[])\n\n    // 4. if enabled, push jwt strategy into authStrategies last\n    if (jwtStrategyEnabled) {\n      this.authStrategies.push({\n        name: 'local-jwt',\n        authenticate: JWTAuthentication,\n      })\n    }\n\n    try {\n      if (!options.disableOnInit) {\n        if (typeof options.onInit === 'function') {\n          await options.onInit(this)\n        }\n        if (typeof this.config.onInit === 'function') {\n          await this.config.onInit(this)\n        }\n      }\n    } catch (error) {\n      this.logger.error({ err: error }, 'Error running onInit function')\n      throw error\n    }\n\n    if (options.cron) {\n      await this._initializeCrons()\n    }\n\n    return this\n  }\n\n  update<TSlug extends CollectionSlug, TSelect extends SelectFromCollectionSlug<TSlug>>(\n    options: UpdateManyOptions<TSlug, TSelect>,\n  ): Promise<BulkOperationResult<TSlug, TSelect>>\n\n  /**\n   * @description Update one or more documents\n   * @param options\n   * @returns Updated document(s)\n   */\n  update<TSlug extends CollectionSlug, TSelect extends SelectFromCollectionSlug<TSlug>>(\n    options: UpdateByIDOptions<TSlug, TSelect>,\n  ): Promise<TransformCollectionWithSelect<TSlug, TSelect>>\n\n  update<TSlug extends CollectionSlug, TSelect extends SelectFromCollectionSlug<TSlug>>(\n    options: UpdateOptions<TSlug, TSelect>,\n  ): Promise<BulkOperationResult<TSlug, TSelect> | TransformCollectionWithSelect<TSlug, TSelect>> {\n    return updateLocal<TSlug, TSelect>(this, options)\n  }\n}\n\nconst initialized = new BasePayload()\n\n// eslint-disable-next-line no-restricted-exports\nexport default initialized\n\nexport const reload = async (\n  config: SanitizedConfig,\n  payload: Payload,\n  skipImportMapGeneration?: boolean,\n  options?: InitOptions,\n): Promise<void> => {\n  if (typeof payload.db.destroy === 'function') {\n    // Only destroy db, as we then later only call payload.db.init and not payload.init\n    await payload.db.destroy()\n  }\n  payload.config = config\n\n  payload.collections = config.collections.reduce(\n    (collections, collection) => {\n      collections[collection.slug] = {\n        config: collection,\n        customIDType: payload.collections[collection.slug]?.customIDType,\n      }\n      return collections\n    },\n    {} as Record<string, any>,\n  )\n\n  payload.blocks = config.blocks!.reduce(\n    (blocks, block) => {\n      blocks[block.slug] = block\n      return blocks\n    },\n    {} as Record<string, FlattenedBlock>,\n  )\n\n  payload.globals = {\n    config: config.globals,\n  }\n\n  // TODO: support HMR for other props in the future (see payload/src/index init()) that may change on Payload singleton\n\n  // Generate types\n  if (config.typescript.autoGenerate !== false) {\n    // We cannot run it directly here, as generate-types imports json-schema-to-typescript, which breaks on turbopack.\n    // see: https://github.com/vercel/next.js/issues/66723\n    void payload.bin({\n      args: ['generate:types'],\n      log: false,\n    })\n  }\n\n  // Generate component map\n  if (skipImportMapGeneration !== true && config.admin?.importMap?.autoGenerate !== false) {\n    await generateImportMap(config, {\n      log: true,\n    })\n  }\n\n  if (payload.db?.init) {\n    await payload.db.init()\n  }\n\n  if (!options?.disableDBConnect && payload.db.connect) {\n    await payload.db.connect({ hotReload: true })\n  }\n\n  ;(global as any)._payload_clientConfigs = {} as Record<keyof SupportedLanguages, ClientConfig>\n  ;(global as any)._payload_schemaMap = null\n  ;(global as any)._payload_clientSchemaMap = null\n  ;(global as any)._payload_doNotCacheClientConfig = true // This will help refreshing the client config cache more reliably. If you remove this, please test HMR + client config refreshing (do new fields appear in the document?)\n  ;(global as any)._payload_doNotCacheSchemaMap = true\n  ;(global as any)._payload_doNotCacheClientSchemaMap = true\n}\n\nlet _cached: Map<\n  string,\n  {\n    initializedCrons: boolean\n    payload: null | Payload\n    promise: null | Promise<Payload>\n    reload: boolean | Promise<void>\n    ws: null | WebSocket\n  }\n> = (global as any)._payload\n\nif (!_cached) {\n  _cached = (global as any)._payload = new Map()\n}\n\n/**\n * Get a payload instance.\n * This function is a wrapper around new BasePayload().init() that adds the following functionality on top of that:\n *\n * - smartly caches Payload instance on the module scope. That way, we prevent unnecessarily initializing Payload over and over again\n * when calling getPayload multiple times or from multiple locations.\n * - adds HMR support and reloads the payload instance when the config changes.\n */\nexport const getPayload = async (\n  options: {\n    /**\n     * A unique key to identify the payload instance. You can pass your own key if you want to cache this payload instance separately.\n     * This is useful if you pass a different payload config for each instance.\n     *\n     * @default 'default'\n     */\n    key?: string\n  } & InitOptions,\n): Promise<Payload> => {\n  if (!options?.config) {\n    throw new Error('Error: the payload config is required for getPayload to work.')\n  }\n\n  let alreadyCachedSameConfig = false\n\n  let cached = _cached.get(options.key ?? 'default')\n  if (!cached) {\n    cached = {\n      initializedCrons: Boolean(options.cron),\n      payload: null,\n      promise: null,\n      reload: false,\n      ws: null,\n    }\n    _cached.set(options.key ?? 'default', cached)\n  } else {\n    alreadyCachedSameConfig = true\n  }\n\n  if (alreadyCachedSameConfig) {\n    // alreadyCachedSameConfig => already called onInit once, but same config => no need to call onInit again.\n    // calling onInit again would only make sense if a different config was passed.\n    options.disableOnInit = true\n  }\n\n  if (cached.payload) {\n    if (options.cron && !cached.initializedCrons) {\n      // getPayload called with crons enabled, but existing cached version does not have crons initialized. => Initialize crons in existing cached version\n      cached.initializedCrons = true\n      await cached.payload._initializeCrons()\n    }\n\n    if (cached.reload === true) {\n      let resolve!: () => void\n\n      // getPayload is called multiple times, in parallel. However, we only want to run `await reload` once. By immediately setting cached.reload to a promise,\n      // we can ensure that all subsequent calls will wait for the first reload to finish. So if we set it here, the 2nd call of getPayload\n      // will reach `if (cached.reload instanceof Promise) {` which then waits for the first reload to finish.\n      cached.reload = new Promise((res) => (resolve = res))\n      const config = await options.config\n      await reload(config, cached.payload, !options.importMap, options)\n\n      resolve()\n    }\n\n    if (cached.reload instanceof Promise) {\n      await cached.reload\n    }\n    if (options?.importMap) {\n      cached.payload.importMap = options.importMap\n    }\n    return cached.payload\n  }\n\n  if (!cached.promise) {\n    // no need to await options.config here, as it's already awaited in the BasePayload.init\n    cached.promise = new BasePayload().init(options)\n  }\n\n  try {\n    cached.payload = await cached.promise\n\n    if (\n      !cached.ws &&\n      process.env.NODE_ENV !== 'production' &&\n      process.env.NODE_ENV !== 'test' &&\n      process.env.DISABLE_PAYLOAD_HMR !== 'true'\n    ) {\n      try {\n        const port = process.env.PORT || '3000'\n        const hasHTTPS =\n          process.env.USE_HTTPS === 'true' || process.argv.includes('--experimental-https')\n        const protocol = hasHTTPS ? 'wss' : 'ws'\n\n        const path = '/_next/webpack-hmr'\n        // The __NEXT_ASSET_PREFIX env variable is set for both assetPrefix and basePath (tested in Next.js 15.1.6)\n        const prefix = process.env.__NEXT_ASSET_PREFIX ?? ''\n\n        cached.ws = new WebSocket(\n          process.env.PAYLOAD_HMR_URL_OVERRIDE ?? `${protocol}://localhost:${port}${prefix}${path}`,\n        )\n\n        cached.ws.onmessage = (event) => {\n          if (typeof event.data === 'string') {\n            const data = JSON.parse(event.data)\n\n            if ('action' in data && data.action === 'serverComponentChanges') {\n              cached.reload = true\n            }\n          }\n        }\n\n        cached.ws.onerror = (_) => {\n          // swallow any websocket connection error\n        }\n      } catch (_) {\n        // swallow e\n      }\n    }\n  } catch (e) {\n    cached.promise = null\n    // add identifier to error object, so that our error logger in routeError.ts does not attempt to re-initialize getPayload\n    ;(e as { payloadInitError?: boolean }).payloadInitError = true\n    throw e\n  }\n\n  if (options?.importMap) {\n    cached.payload.importMap = options.importMap\n  }\n\n  return cached.payload\n}\n\ntype Payload = BasePayload\n\ninterface RequestContext {\n  [key: string]: unknown\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface DatabaseAdapter extends BaseDatabaseAdapter {}\nexport type { Payload, RequestContext }\nexport * from './auth/index.js'\nexport { jwtSign } from './auth/jwt.js'\nexport { accessOperation } from './auth/operations/access.js'\nexport { forgotPasswordOperation } from './auth/operations/forgotPassword.js'\nexport { initOperation } from './auth/operations/init.js'\nexport { checkLoginPermission } from './auth/operations/login.js'\nexport { loginOperation } from './auth/operations/login.js'\nexport { logoutOperation } from './auth/operations/logout.js'\nexport type { MeOperationResult } from './auth/operations/me.js'\nexport { meOperation } from './auth/operations/me.js'\nexport { refreshOperation } from './auth/operations/refresh.js'\nexport { registerFirstUserOperation } from './auth/operations/registerFirstUser.js'\nexport { resetPasswordOperation } from './auth/operations/resetPassword.js'\nexport { unlockOperation } from './auth/operations/unlock.js'\nexport { verifyEmailOperation } from './auth/operations/verifyEmail.js'\nexport { JWTAuthentication } from './auth/strategies/jwt.js'\nexport { incrementLoginAttempts } from './auth/strategies/local/incrementLoginAttempts.js'\nexport { resetLoginAttempts } from './auth/strategies/local/resetLoginAttempts.js'\nexport type {\n  AuthStrategyFunction,\n  AuthStrategyFunctionArgs,\n  AuthStrategyResult,\n  CollectionPermission,\n  DocumentPermissions,\n  FieldPermissions,\n  GlobalPermission,\n  IncomingAuthType,\n  Permission,\n  Permissions,\n  SanitizedCollectionPermission,\n  SanitizedDocumentPermissions,\n  SanitizedFieldPermissions,\n  SanitizedGlobalPermission,\n  SanitizedPermissions,\n  UntypedUser as User,\n  VerifyConfig,\n} from './auth/types.js'\nexport { generateImportMap } from './bin/generateImportMap/index.js'\n\nexport type { ImportMap } from './bin/generateImportMap/index.js'\nexport { genImportMapIterateFields } from './bin/generateImportMap/iterateFields.js'\nexport { migrate as migrateCLI } from './bin/migrate.js'\n\nexport {\n  type ClientCollectionConfig,\n  createClientCollectionConfig,\n  createClientCollectionConfigs,\n  type ServerOnlyCollectionAdminProperties,\n  type ServerOnlyCollectionProperties,\n  type ServerOnlyUploadProperties,\n} from './collections/config/client.js'\n\nexport type {\n  AfterChangeHook as CollectionAfterChangeHook,\n  AfterDeleteHook as CollectionAfterDeleteHook,\n  AfterErrorHook as CollectionAfterErrorHook,\n  AfterForgotPasswordHook as CollectionAfterForgotPasswordHook,\n  AfterLoginHook as CollectionAfterLoginHook,\n  AfterLogoutHook as CollectionAfterLogoutHook,\n  AfterMeHook as CollectionAfterMeHook,\n  AfterOperationHook as CollectionAfterOperationHook,\n  AfterReadHook as CollectionAfterReadHook,\n  AfterRefreshHook as CollectionAfterRefreshHook,\n  AuthCollection,\n  AuthOperationsFromCollectionSlug,\n  BaseFilter,\n  BaseListFilter,\n  BeforeChangeHook as CollectionBeforeChangeHook,\n  BeforeDeleteHook as CollectionBeforeDeleteHook,\n  BeforeLoginHook as CollectionBeforeLoginHook,\n  BeforeOperationHook as CollectionBeforeOperationHook,\n  BeforeReadHook as CollectionBeforeReadHook,\n  BeforeValidateHook as CollectionBeforeValidateHook,\n  BulkOperationResult,\n  Collection,\n  CollectionAdminOptions,\n  CollectionConfig,\n  DataFromCollectionSlug,\n  HookOperationType,\n  MeHook as CollectionMeHook,\n  RefreshHook as CollectionRefreshHook,\n  RequiredDataFromCollection,\n  RequiredDataFromCollectionSlug,\n  SanitizedCollectionConfig,\n  SanitizedJoins,\n  TypeWithID,\n  TypeWithTimestamps,\n} from './collections/config/types.js'\n\nexport type { CompoundIndex } from './collections/config/types.js'\nexport type { SanitizedCompoundIndex } from './collections/config/types.js'\n\nexport { createDataloaderCacheKey, getDataLoader } from './collections/dataloader.js'\nexport { countOperation } from './collections/operations/count.js'\nexport { createOperation } from './collections/operations/create.js'\nexport { deleteOperation } from './collections/operations/delete.js'\nexport { deleteByIDOperation } from './collections/operations/deleteByID.js'\nexport { docAccessOperation } from './collections/operations/docAccess.js'\nexport { duplicateOperation } from './collections/operations/duplicate.js'\nexport { findOperation } from './collections/operations/find.js'\nexport { findByIDOperation } from './collections/operations/findByID.js'\nexport { findVersionByIDOperation } from './collections/operations/findVersionByID.js'\nexport { findVersionsOperation } from './collections/operations/findVersions.js'\nexport { restoreVersionOperation } from './collections/operations/restoreVersion.js'\nexport { updateOperation } from './collections/operations/update.js'\nexport { updateByIDOperation } from './collections/operations/updateByID.js'\nexport { buildConfig } from './config/build.js'\nexport {\n  type ClientConfig,\n  createClientConfig,\n  type CreateClientConfigArgs,\n  createUnauthenticatedClientConfig,\n  serverOnlyAdminConfigProperties,\n  serverOnlyConfigProperties,\n  type UnauthenticatedClientConfig,\n} from './config/client.js'\nexport { defaults } from './config/defaults.js'\n\nexport { type OrderableEndpointBody } from './config/orderable/index.js'\nexport { sanitizeConfig } from './config/sanitize.js'\nexport type * from './config/types.js'\nexport { combineQueries } from './database/combineQueries.js'\nexport { createDatabaseAdapter } from './database/createDatabaseAdapter.js'\nexport { defaultBeginTransaction } from './database/defaultBeginTransaction.js'\nexport { flattenWhereToOperators } from './database/flattenWhereToOperators.js'\nexport { getLocalizedPaths } from './database/getLocalizedPaths.js'\nexport { createMigration } from './database/migrations/createMigration.js'\nexport { getMigrations } from './database/migrations/getMigrations.js'\nexport { getPredefinedMigration } from './database/migrations/getPredefinedMigration.js'\nexport { migrate } from './database/migrations/migrate.js'\nexport { migrateDown } from './database/migrations/migrateDown.js'\nexport { migrateRefresh } from './database/migrations/migrateRefresh.js'\nexport { migrateReset } from './database/migrations/migrateReset.js'\nexport { migrateStatus } from './database/migrations/migrateStatus.js'\nexport { migrationsCollection } from './database/migrations/migrationsCollection.js'\nexport { migrationTemplate } from './database/migrations/migrationTemplate.js'\nexport { readMigrationFiles } from './database/migrations/readMigrationFiles.js'\nexport { writeMigrationIndex } from './database/migrations/writeMigrationIndex.js'\nexport type * from './database/queryValidation/types.js'\nexport type { EntityPolicies, PathToQuery } from './database/queryValidation/types.js'\nexport { validateQueryPaths } from './database/queryValidation/validateQueryPaths.js'\nexport { validateSearchParam } from './database/queryValidation/validateSearchParams.js'\nexport type {\n  BaseDatabaseAdapter,\n  BeginTransaction,\n  CommitTransaction,\n  Connect,\n  Count,\n  CountArgs,\n  CountGlobalVersionArgs,\n  CountGlobalVersions,\n  CountVersions,\n  Create,\n  CreateArgs,\n  CreateGlobal,\n  CreateGlobalArgs,\n  CreateGlobalVersion,\n  CreateGlobalVersionArgs,\n  CreateMigration,\n  CreateVersion,\n  CreateVersionArgs,\n  DatabaseAdapterResult as DatabaseAdapterObj,\n  DBIdentifierName,\n  DeleteMany,\n  DeleteManyArgs,\n  DeleteOne,\n  DeleteOneArgs,\n  DeleteVersions,\n  DeleteVersionsArgs,\n  Destroy,\n  Find,\n  FindArgs,\n  FindDistinct,\n  FindGlobal,\n  FindGlobalArgs,\n  FindGlobalVersions,\n  FindGlobalVersionsArgs,\n  FindOne,\n  FindOneArgs,\n  FindVersions,\n  FindVersionsArgs,\n  GenerateSchema,\n  Init,\n  Migration,\n  MigrationData,\n  MigrationTemplateArgs,\n  PaginatedDistinctDocs,\n  PaginatedDocs,\n  QueryDrafts,\n  QueryDraftsArgs,\n  RollbackTransaction,\n  Transaction,\n  UpdateGlobal,\n  UpdateGlobalArgs,\n  UpdateGlobalVersion,\n  UpdateGlobalVersionArgs,\n  UpdateJobs,\n  UpdateJobsArgs,\n  UpdateMany,\n  UpdateManyArgs,\n  UpdateOne,\n  UpdateOneArgs,\n  UpdateVersion,\n  UpdateVersionArgs,\n  Upsert,\n  UpsertArgs,\n} from './database/types.js'\nexport type { EmailAdapter as PayloadEmailAdapter, SendEmailOptions } from './email/types.js'\nexport {\n  APIError,\n  APIErrorName,\n  AuthenticationError,\n  DuplicateCollection,\n  DuplicateFieldName,\n  DuplicateGlobal,\n  ErrorDeletingFile,\n  FileRetrievalError,\n  FileUploadError,\n  Forbidden,\n  InvalidConfiguration,\n  InvalidFieldName,\n  InvalidFieldRelationship,\n  Locked,\n  LockedAuth,\n  MissingCollectionLabel,\n  MissingEditorProp,\n  MissingFieldInputOptions,\n  MissingFieldType,\n  MissingFile,\n  NotFound,\n  QueryError,\n  UnverifiedEmail,\n  ValidationError,\n  ValidationErrorName,\n} from './errors/index.js'\n\nexport type { ValidationFieldError } from './errors/index.js'\nexport { baseBlockFields } from './fields/baseFields/baseBlockFields.js'\n\nexport { baseIDField } from './fields/baseFields/baseIDField.js'\n\nexport { slugField, type SlugFieldProps } from './fields/baseFields/slug/index.js'\n\nexport {\n  createClientField,\n  createClientFields,\n  type ServerOnlyFieldAdminProperties,\n  type ServerOnlyFieldProperties,\n} from './fields/config/client.js'\n\nexport interface FieldCustom extends Record<string, any> {}\n\nexport { sanitizeFields } from './fields/config/sanitize.js'\n\nexport type {\n  AdminClient,\n  ArrayField,\n  ArrayFieldClient,\n  BaseValidateOptions,\n  Block,\n  BlockJSX,\n  BlocksField,\n  BlocksFieldClient,\n  CheckboxField,\n  CheckboxFieldClient,\n  ClientBlock,\n  ClientField,\n  ClientFieldProps,\n  CodeField,\n  CodeFieldClient,\n  CollapsibleField,\n  CollapsibleFieldClient,\n  Condition,\n  DateField,\n  DateFieldClient,\n  EmailField,\n  EmailFieldClient,\n  Field,\n  FieldAccess,\n  FieldAffectingData,\n  FieldAffectingDataClient,\n  FieldBase,\n  FieldBaseClient,\n  FieldHook,\n  FieldHookArgs,\n  FieldPresentationalOnly,\n  FieldPresentationalOnlyClient,\n  FieldTypes,\n  FieldWithMany,\n  FieldWithManyClient,\n  FieldWithMaxDepth,\n  FieldWithMaxDepthClient,\n  FieldWithPath,\n  FieldWithPathClient,\n  FieldWithSubFields,\n  FieldWithSubFieldsClient,\n  FilterOptions,\n  FilterOptionsProps,\n  FlattenedArrayField,\n  FlattenedBlock,\n  FlattenedBlocksField,\n  FlattenedField,\n  FlattenedGroupField,\n  FlattenedJoinField,\n  FlattenedTabAsField,\n  GroupField,\n  GroupFieldClient,\n  HookName,\n  JoinField,\n  JoinFieldClient,\n  JSONField,\n  JSONFieldClient,\n  Labels,\n  LabelsClient,\n  NamedGroupField,\n  NamedGroupFieldClient,\n  NamedTab,\n  NonPresentationalField,\n  NonPresentationalFieldClient,\n  NumberField,\n  NumberFieldClient,\n  Option,\n  OptionLabel,\n  OptionObject,\n  PointField,\n  PointFieldClient,\n  PolymorphicRelationshipField,\n  PolymorphicRelationshipFieldClient,\n  RadioField,\n  RadioFieldClient,\n  RelationshipField,\n  RelationshipFieldClient,\n  RelationshipValue,\n  RichTextField,\n  RichTextFieldClient,\n  RowField,\n  RowFieldClient,\n  SelectField,\n  SelectFieldClient,\n  SingleRelationshipField,\n  SingleRelationshipFieldClient,\n  Tab,\n  TabAsField,\n  TabAsFieldClient,\n  TabsField,\n  TabsFieldClient,\n  TextareaField,\n  TextareaFieldClient,\n  TextField,\n  TextFieldClient,\n  UIField,\n  UIFieldClient,\n  UnnamedGroupField,\n  UnnamedGroupFieldClient,\n  UnnamedTab,\n  UploadField,\n  UploadFieldClient,\n  Validate,\n  ValidateOptions,\n  ValueWithRelation,\n} from './fields/config/types.js'\n\nexport { getDefaultValue } from './fields/getDefaultValue.js'\nexport { traverseFields as afterChangeTraverseFields } from './fields/hooks/afterChange/traverseFields.js'\n\nexport { promise as afterReadPromise } from './fields/hooks/afterRead/promise.js'\nexport { traverseFields as afterReadTraverseFields } from './fields/hooks/afterRead/traverseFields.js'\nexport { traverseFields as beforeChangeTraverseFields } from './fields/hooks/beforeChange/traverseFields.js'\nexport { traverseFields as beforeValidateTraverseFields } from './fields/hooks/beforeValidate/traverseFields.js'\n\nexport { sortableFieldTypes } from './fields/sortableFieldTypes.js'\nexport { validateBlocksFilterOptions, validations } from './fields/validations.js'\n\nexport type {\n  ArrayFieldValidation,\n  BlocksFieldValidation,\n  CheckboxFieldValidation,\n  CodeFieldValidation,\n  ConfirmPasswordFieldValidation,\n  DateFieldValidation,\n  EmailFieldValidation,\n  JSONFieldValidation,\n  NumberFieldManyValidation,\n  NumberFieldSingleValidation,\n  NumberFieldValidation,\n  PasswordFieldValidation,\n  PointFieldValidation,\n  RadioFieldValidation,\n  RelationshipFieldManyValidation,\n  RelationshipFieldSingleValidation,\n  RelationshipFieldValidation,\n  RichTextFieldValidation,\n  SelectFieldManyValidation,\n  SelectFieldSingleValidation,\n  SelectFieldValidation,\n  TextareaFieldValidation,\n  TextFieldManyValidation,\n  TextFieldSingleValidation,\n  TextFieldValidation,\n  UploadFieldManyValidation,\n  UploadFieldSingleValidation,\n  UploadFieldValidation,\n  UsernameFieldValidation,\n} from './fields/validations.js'\nexport type { FolderSortKeys } from './folders/types.js'\nexport { getFolderData } from './folders/utils/getFolderData.js'\nexport {\n  type ClientGlobalConfig,\n  createClientGlobalConfig,\n  createClientGlobalConfigs,\n  type ServerOnlyGlobalAdminProperties,\n  type ServerOnlyGlobalProperties,\n} from './globals/config/client.js'\nexport type {\n  AfterChangeHook as GlobalAfterChangeHook,\n  AfterReadHook as GlobalAfterReadHook,\n  BeforeChangeHook as GlobalBeforeChangeHook,\n  BeforeOperationHook as GlobalBeforeOperationHook,\n  BeforeReadHook as GlobalBeforeReadHook,\n  BeforeValidateHook as GlobalBeforeValidateHook,\n  DataFromGlobalSlug,\n  GlobalAdminOptions,\n  GlobalConfig,\n  SanitizedGlobalConfig,\n} from './globals/config/types.js'\n\nexport { docAccessOperation as docAccessOperationGlobal } from './globals/operations/docAccess.js'\nexport { findOneOperation } from './globals/operations/findOne.js'\n\nexport { findVersionByIDOperation as findVersionByIDOperationGlobal } from './globals/operations/findVersionByID.js'\nexport { findVersionsOperation as findVersionsOperationGlobal } from './globals/operations/findVersions.js'\nexport { restoreVersionOperation as restoreVersionOperationGlobal } from './globals/operations/restoreVersion.js'\nexport { updateOperation as updateOperationGlobal } from './globals/operations/update.js'\nexport type {\n  CollapsedPreferences,\n  CollectionPreferences,\n  /**\n   * @deprecated Use `CollectionPreferences` instead.\n   */\n  CollectionPreferences as ListPreferences,\n  ColumnPreference,\n  DocumentPreferences,\n  FieldsPreferences,\n  InsideFieldsPreferences,\n  PreferenceRequest,\n  PreferenceUpdateRequest,\n  TabsPreferences,\n} from './preferences/types.js'\nexport type { QueryPreset } from './query-presets/types.js'\nexport { jobAfterRead } from './queues/config/collection.js'\nexport type { JobsConfig, RunJobAccess, RunJobAccessArgs } from './queues/config/types/index.js'\nexport type {\n  RunInlineTaskFunction,\n  RunTaskFunction,\n  RunTaskFunctions,\n  TaskConfig,\n  TaskHandler,\n  TaskHandlerArgs,\n  TaskHandlerResult,\n  TaskHandlerResults,\n  TaskInput,\n  TaskOutput,\n  TaskType,\n} from './queues/config/types/taskTypes.js'\n\nexport type {\n  BaseJob,\n  JobLog,\n  JobTaskStatus,\n  RunningJob,\n  SingleTaskStatus,\n  WorkflowConfig,\n  WorkflowHandler,\n  WorkflowTypes,\n} from './queues/config/types/workflowTypes.js'\nexport { countRunnableOrActiveJobsForQueue } from './queues/operations/handleSchedules/countRunnableOrActiveJobsForQueue.js'\nexport { importHandlerPath } from './queues/operations/runJobs/runJob/importHandlerPath.js'\n\nexport {\n  _internal_jobSystemGlobals,\n  _internal_resetJobSystemGlobals,\n  getCurrentDate,\n} from './queues/utilities/getCurrentDate.js'\nexport { getLocalI18n } from './translations/getLocalI18n.js'\nexport * from './types/index.js'\nexport { getFileByPath } from './uploads/getFileByPath.js'\nexport { _internal_safeFetchGlobal } from './uploads/safeFetch.js'\n\nexport type * from './uploads/types.js'\nexport { addDataAndFileToRequest } from './utilities/addDataAndFileToRequest.js'\nexport { addLocalesToRequestFromData, sanitizeLocales } from './utilities/addLocalesToRequest.js'\nexport { canAccessAdmin } from './utilities/canAccessAdmin.js'\nexport { commitTransaction } from './utilities/commitTransaction.js'\nexport {\n  configToJSONSchema,\n  entityToJSONSchema,\n  fieldsToJSONSchema,\n  withNullableJSONSchemaType,\n} from './utilities/configToJSONSchema.js'\nexport { createArrayFromCommaDelineated } from './utilities/createArrayFromCommaDelineated.js'\nexport { createLocalReq } from './utilities/createLocalReq.js'\nexport { createPayloadRequest } from './utilities/createPayloadRequest.js'\nexport {\n  deepCopyObject,\n  deepCopyObjectComplex,\n  deepCopyObjectSimple,\n} from './utilities/deepCopyObject.js'\nexport {\n  deepMerge,\n  deepMergeWithCombinedArrays,\n  deepMergeWithReactComponents,\n  deepMergeWithSourceArrays,\n} from './utilities/deepMerge.js'\nexport {\n  checkDependencies,\n  type CustomVersionParser,\n} from './utilities/dependencies/dependencyChecker.js'\nexport { getDependencies } from './utilities/dependencies/getDependencies.js'\nexport {\n  findUp,\n  findUpSync,\n  pathExistsAndIsAccessible,\n  pathExistsAndIsAccessibleSync,\n} from './utilities/findUp.js'\nexport { flattenAllFields } from './utilities/flattenAllFields.js'\nexport { flattenTopLevelFields } from './utilities/flattenTopLevelFields.js'\nexport { formatErrors } from './utilities/formatErrors.js'\nexport { formatLabels, formatNames, toWords } from './utilities/formatLabels.js'\nexport { getBlockSelect } from './utilities/getBlockSelect.js'\nexport { getCollectionIDFieldTypes } from './utilities/getCollectionIDFieldTypes.js'\nexport { getFieldByPath } from './utilities/getFieldByPath.js'\nexport { getObjectDotNotation } from './utilities/getObjectDotNotation.js'\nexport { getRequestLanguage } from './utilities/getRequestLanguage.js'\nexport { handleEndpoints } from './utilities/handleEndpoints.js'\nexport { headersWithCors } from './utilities/headersWithCors.js'\nexport { initTransaction } from './utilities/initTransaction.js'\nexport { isEntityHidden } from './utilities/isEntityHidden.js'\nexport { isolateObjectProperty } from './utilities/isolateObjectProperty.js'\nexport { isPlainObject } from './utilities/isPlainObject.js'\nexport { isValidID } from './utilities/isValidID.js'\nexport { killTransaction } from './utilities/killTransaction.js'\nexport { logError } from './utilities/logError.js'\nexport { defaultLoggerOptions } from './utilities/logger.js'\nexport { mapAsync } from './utilities/mapAsync.js'\nexport { mergeHeaders } from './utilities/mergeHeaders.js'\nexport { parseDocumentID } from './utilities/parseDocumentID.js'\nexport { sanitizeFallbackLocale } from './utilities/sanitizeFallbackLocale.js'\nexport { sanitizeJoinParams } from './utilities/sanitizeJoinParams.js'\nexport { sanitizePopulateParam } from './utilities/sanitizePopulateParam.js'\nexport { sanitizeSelectParam } from './utilities/sanitizeSelectParam.js'\nexport { stripUnselectedFields } from './utilities/stripUnselectedFields.js'\nexport { traverseFields } from './utilities/traverseFields.js'\nexport type { TraverseFieldsCallback } from './utilities/traverseFields.js'\nexport { buildVersionCollectionFields } from './versions/buildCollectionFields.js'\nexport { buildVersionGlobalFields } from './versions/buildGlobalFields.js'\nexport { buildVersionCompoundIndexes } from './versions/buildVersionCompoundIndexes.js'\nexport { versionDefaults } from './versions/defaults.js'\nexport { deleteCollectionVersions } from './versions/deleteCollectionVersions.js'\nexport { appendVersionToQueryKey } from './versions/drafts/appendVersionToQueryKey.js'\nexport { getQueryDraftsSort } from './versions/drafts/getQueryDraftsSort.js'\n\nexport { enforceMaxVersions } from './versions/enforceMaxVersions.js'\nexport { getLatestCollectionVersion } from './versions/getLatestCollectionVersion.js'\nexport { getLatestGlobalVersion } from './versions/getLatestGlobalVersion.js'\nexport { saveVersion } from './versions/saveVersion.js'\nexport type { SchedulePublishTaskInput } from './versions/schedule/types.js'\nexport type { SchedulePublish, TypeWithVersion } from './versions/types.js'\nexport { deepMergeSimple } from '@payloadcms/translations/utilities'\n"],"names":["spawn","crypto","fileURLToPath","path","WebSocket","forgotPasswordLocal","loginLocal","resetPasswordLocal","unlockLocal","verifyEmailLocal","countLocal","createLocal","deleteLocal","duplicateLocal","findLocal","findByIDLocal","findDistinct","findDistinctLocal","findVersionByIDLocal","findVersionsLocal","restoreVersionLocal","updateLocal","countGlobalVersionsLocal","findOneGlobalLocal","findGlobalVersionByIDLocal","findGlobalVersionsLocal","restoreGlobalVersionLocal","updateGlobalLocal","Cron","decrypt","encrypt","authLocal","APIKeyAuthentication","JWTAuthentication","generateImportMap","checkPayloadDependencies","countVersionsLocal","consoleEmailAdapter","fieldAffectsData","getJobsLocalAPI","_internal_jobSystemGlobals","isNextBuild","getLogger","serverInit","serverInitTelemetry","traverseFields","accountLockFields","baseAccountLockFields","apiKeyFields","baseAPIKeyFields","baseAuthFields","emailFieldConfig","baseEmailField","sessionsFieldConfig","baseSessionsField","usernameFieldConfig","baseUsernameField","verificationFields","baseVerificationFields","executeAccess","executeAuthStrategies","extractAccessFromPermission","getAccessResults","getFieldsToSign","getLoginOptions","filename","url","dirname","checkedDependencies","BasePayload","auth","options","authStrategies","blocks","collections","config","count","countGlobalVersions","countVersions","create","crons","db","destroy","length","cronsToStop","splice","Promise","all","map","cron","stop","duplicate","email","extensions","find","findByID","findGlobal","findGlobalVersionByID","findGlobalVersions","findVersionByID","findVersions","forgotPassword","getAdminURL","serverURL","routes","admin","getAPIURL","api","globals","importMap","jobs","logger","login","resetPassword","restoreGlobalVersion","restoreVersion","schema","secret","sendEmail","types","unlock","updateGlobal","validationRules","verifyEmail","versions","_initializeCrons","enabled","autoRun","DEFAULT_CRON","DEFAULT_LIMIT","cronJobs","cronConfig","jobAutorunCron","shouldAutoSchedule","disableScheduling","scheduling","handleSchedules","allQueues","queue","shouldAutoRun","run","limit","silent","protect","push","bin","args","cwd","log","resolve","reject","spawned","stdio","undefined","on","code","error","delete","init","process","env","NODE_ENV","PAYLOAD_DISABLE_DEPENDENCY_CHECKER","Error","createHash","update","digest","slice","collection","customIDType","findCustomID","field","includes","type","name","callback","fields","parentIsLocalized","slug","reduce","block","typescript","autoGenerate","payload","disableDBConnect","connect","awaitedAdapter","NEXT_PHASE","warn","sharp","some","c","upload","imageSizes","formatOptions","VERCEL","uploadCollWithoutAdapter","filter","adapter","slugs","join","jwtStrategyEnabled","strategies","useAPIKey","authenticate","disableLocalStrategy","disableOnInit","onInit","err","initialized","reload","skipImportMapGeneration","hotReload","global","_payload_clientConfigs","_payload_schemaMap","_payload_clientSchemaMap","_payload_doNotCacheClientConfig","_payload_doNotCacheSchemaMap","_payload_doNotCacheClientSchemaMap","_cached","_payload","Map","getPayload","alreadyCachedSameConfig","cached","get","key","initializedCrons","Boolean","promise","ws","set","res","DISABLE_PAYLOAD_HMR","port","PORT","hasHTTPS","USE_HTTPS","argv","protocol","prefix","__NEXT_ASSET_PREFIX","PAYLOAD_HMR_URL_OVERRIDE","onmessage","event","data","JSON","parse","action","onerror","_","e","payloadInitError","jwtSign","accessOperation","forgotPasswordOperation","initOperation","checkLoginPermission","loginOperation","logoutOperation","meOperation","refreshOperation","registerFirstUserOperation","resetPasswordOperation","unlockOperation","verifyEmailOperation","incrementLoginAttempts","resetLoginAttempts","genImportMapIterateFields","migrate","migrateCLI","createClientCollectionConfig","createClientCollectionConfigs","createDataloaderCacheKey","getDataLoader","countOperation","createOperation","deleteOperation","deleteByIDOperation","docAccessOperation","duplicateOperation","findOperation","findByIDOperation","findVersionByIDOperation","findVersionsOperation","restoreVersionOperation","updateOperation","updateByIDOperation","buildConfig","createClientConfig","createUnauthenticatedClientConfig","serverOnlyAdminConfigProperties","serverOnlyConfigProperties","defaults","sanitizeConfig","combineQueries","createDatabaseAdapter","defaultBeginTransaction","flattenWhereToOperators","getLocalizedPaths","createMigration","getMigrations","getPredefinedMigration","migrateDown","migrateRefresh","migrateReset","migrateStatus","migrationsCollection","migrationTemplate","readMigrationFiles","writeMigrationIndex","validateQueryPaths","validateSearchParam","APIError","APIErrorName","AuthenticationError","DuplicateCollection","DuplicateFieldName","DuplicateGlobal","ErrorDeletingFile","FileRetrievalError","FileUploadError","Forbidden","InvalidConfiguration","InvalidFieldName","InvalidFieldRelationship","Locked","LockedAuth","MissingCollectionLabel","MissingEditorProp","MissingFieldInputOptions","MissingFieldType","MissingFile","NotFound","QueryError","UnverifiedEmail","ValidationError","ValidationErrorName","baseBlockFields","baseIDField","slugField","createClientField","createClientFields","sanitizeFields","getDefaultValue","afterChangeTraverseFields","afterReadPromise","afterReadTraverseFields","beforeChangeTraverseFields","beforeValidateTraverseFields","sortableFieldTypes","validateBlocksFilterOptions","validations","getFolderData","createClientGlobalConfig","createClientGlobalConfigs","docAccessOperationGlobal","findOneOperation","findVersionByIDOperationGlobal","findVersionsOperationGlobal","restoreVersionOperationGlobal","updateOperationGlobal","jobAfterRead","countRunnableOrActiveJobsForQueue","importHandlerPath","_internal_resetJobSystemGlobals","getCurrentDate","getLocalI18n","getFileByPath","_internal_safeFetchGlobal","addDataAndFileToRequest","addLocalesToRequestFromData","sanitizeLocales","canAccessAdmin","commitTransaction","configToJSONSchema","entityToJSONSchema","fieldsToJSONSchema","withNullableJSONSchemaType","createArrayFromCommaDelineated","createLocalReq","createPayloadRequest","deepCopyObject","deepCopyObjectComplex","deepCopyObjectSimple","deepMerge","deepMergeWithCombinedArrays","deepMergeWithReactComponents","deepMergeWithSourceArrays","checkDependencies","getDependencies","findUp","findUpSync","pathExistsAndIsAccessible","pathExistsAndIsAccessibleSync","flattenAllFields","flattenTopLevelFields","formatErrors","formatLabels","formatNames","toWords","getBlockSelect","getCollectionIDFieldTypes","getFieldByPath","getObjectDotNotation","getRequestLanguage","handleEndpoints","headersWithCors","initTransaction","isEntityHidden","isolateObjectProperty","isPlainObject","isValidID","killTransaction","logError","defaultLoggerOptions","mapAsync","mergeHeaders","parseDocumentID","sanitizeFallbackLocale","sanitizeJoinParams","sanitizePopulateParam","sanitizeSelectParam","stripUnselectedFields","buildVersionCollectionFields","buildVersionGlobalFields","buildVersionCompoundIndexes","versionDefaults","deleteCollectionVersions","appendVersionToQueryKey","getQueryDraftsSort","enforceMaxVersions","getLatestCollectionVersion","getLatestGlobalVersion","saveVersion","deepMergeSimple"],"mappings":"AAAA,qDAAqD,GACrD,oDAAoD,GAMpD,SAASA,KAAK,QAAQ,gBAAe;AACrC,OAAOC,YAAY,SAAQ;AAC3B,SAASC,aAAa,QAAQ,WAAU;AACxC,OAAOC,UAAU,OAAM;AACvB,OAAOC,eAAe,KAAI;AAe1B,SACEC,mBAAmB,QAEd,4CAA2C;AAClD,SAASC,UAAU,QAAsC,mCAAkC;AAC3F,SACEC,kBAAkB,QAEb,2CAA0C;AACjD,SAASC,WAAW,QAAuC,oCAAmC;AAC9F,SACEC,gBAAgB,QAEX,yCAAwC;AAe/C,SAASC,UAAU,QAAsC,0CAAyC;AAClG,SACEC,WAAW,QAEN,2CAA0C;AACjD,SAEEC,WAAW,QAGN,2CAA0C;AACjD,SACEC,cAAc,QAET,8CAA6C;AACpD,SAASC,SAAS,QAAqC,yCAAwC;AAC/F,SACEC,aAAa,QAER,6CAA4C;AACnD,SACEC,gBAAgBC,iBAAiB,QAE5B,iDAAgD;AACvD,SACEC,oBAAoB,QAEf,oDAAmD;AAC1D,SACEC,iBAAiB,QAEZ,iDAAgD;AACvD,SACEC,mBAAmB,QAEd,mDAAkD;AACzD,SAEEC,WAAW,QAGN,2CAA0C;AACjD,SACEC,wBAAwB,QAEnB,8CAA6C;AACpD,SAEEC,kBAAkB,QACb,wCAAuC;AAC9C,SACEC,0BAA0B,QAErB,gDAA+C;AACtD,SACEC,uBAAuB,QAElB,6CAA4C;AACnD,SACEC,yBAAyB,QAEpB,+CAA8C;AACrD,SACEC,iBAAiB,QAEZ,uCAAsC;AAI7C,SAASC,IAAI,QAAQ,SAAQ;AAM7B,SAASC,OAAO,EAAEC,OAAO,QAAQ,mBAAkB;AACnD,SAASC,SAAS,QAAQ,kCAAiC;AAC3D,SAASC,oBAAoB,QAAQ,8BAA6B;AAClE,SAASC,iBAAiB,QAAQ,2BAA0B;AAC5D,SAASC,iBAAiB,QAAwB,mCAAkC;AACpF,SAASC,wBAAwB,QAAQ,gCAA+B;AACxE,SAASC,kBAAkB,QAAQ,kDAAiD;AACpF,SAASC,mBAAmB,QAAQ,iCAAgC;AACpE,SAASC,gBAAgB,QAA6B,2BAA0B;AAChF,SAASC,eAAe,QAAQ,uBAAsB;AACtD,SAASC,0BAA0B,QAAQ,uCAAsC;AACjF,SAASC,WAAW,QAAQ,6BAA4B;AACxD,SAASC,SAAS,QAAQ,wBAAuB;AACjD,SAASC,cAAcC,mBAAmB,QAAQ,6CAA4C;AAC9F,SAASC,cAAc,QAAQ,gCAA+B;AAE9D;;;CAGC,GACD,SAASC,qBAAqBC,qBAAqB,QAAQ,mCAAkC;AAC7F,SAASC,gBAAgBC,gBAAgB,QAAQ,8BAA6B;AAC9E,SAASC,cAAc,QAAQ,4BAA2B;AAC1D,SAASC,oBAAoBC,cAAc,QAAQ,6BAA4B;AAC/E,SAASC,uBAAuBC,iBAAiB,QAAQ,gCAA+B;AACxF,SAASC,uBAAuBC,iBAAiB,QAAQ,gCAA+B;AAExF,SAASC,sBAAsBC,sBAAsB,QAAQ,oCAAmC;AAChG,SAASC,aAAa,QAAQ,0BAAyB;AACvD,SAASC,qBAAqB,QAAQ,kCAAiC;AACvE,SAASC,2BAA2B,QAAQ,wCAAuC;AACnF,SAASC,gBAAgB,QAAQ,6BAA4B;AAC7D,SAASC,eAAe,QAAQ,4BAA2B;AAC3D,SAASC,eAAe,QAAQ,4BAA2B;AAkL3D,MAAMC,WAAW/D,cAAc,YAAYgE,GAAG;AAC9C,MAAMC,UAAUhE,KAAKgE,OAAO,CAACF;AAE7B,IAAIG,sBAAsB;AAE1B;;CAEC,GACD,OAAO,MAAMC;IACX;;;;GAIC,GACDC,OAAO,OAAOC;QACZ,OAAOxC,UAAU,IAAI,EAAEwC;IACzB,EAAC;IAEDC,eAA+B;IAE/BC,SAA4C,CAAC,EAAC;IAE9CC,cAAkD,CAAC,EAAC;IAEpDC,OAAwB;IACxB;;;;GAIC,GACDC,QAAQ,OACNL;QAEA,OAAO7D,WAAW,IAAI,EAAE6D;IAC1B,EAAC;IAED;;;;GAIC,GACDM,sBAAsB,OACpBN;QAEA,OAAOjD,yBAAyB,IAAI,EAAEiD;IACxC,EAAC;IAED;;;;GAIC,GACDO,gBAAgB,OACdP;QAEA,OAAOnC,mBAAmB,IAAI,EAAEmC;IAClC,EAAC;IAED;;;;GAIC,GACDQ,SAAS,OACPR;QAEA,OAAO5D,YAA4B,IAAI,EAAE4D;IAC3C,EAAC;IAEDS,QAAgB,EAAE,CAAA;IAClBC,GAAoB;IAEpBpD,UAAUA,QAAO;IAEjBqD,UAAU;QACR,IAAI,IAAI,CAACF,KAAK,CAACG,MAAM,EAAE;YACrB,sDAAsD;YACtD,MAAMC,cAAc,IAAI,CAACJ,KAAK,CAACK,MAAM,CAAC,GAAG,IAAI,CAACL,KAAK,CAACG,MAAM;YAC1D,MAAMG,QAAQC,GAAG,CAACH,YAAYI,GAAG,CAAC,CAACC,OAASA,KAAKC,IAAI;QACvD;QAEA,IAAI,IAAI,CAACT,EAAE,EAAEC,WAAW,OAAO,IAAI,CAACD,EAAE,CAACC,OAAO,KAAK,YAAY;YAC7D,MAAM,IAAI,CAACD,EAAE,CAACC,OAAO;QACvB;IACF,EAAC;IAEDS,YAAY,OACVpB;QAEA,OAAO1D,eAA+B,IAAI,EAAE0D;IAC9C,EAAC;IAEDqB,MAA+B;IAE/B,gCAAgC;IAChC,6BAA6B;IAE7B9D,UAAUA,QAAO;IAEjB+D,WAIkB;IAElB;;;;GAIC,GACDC,OAAO,OACLvB;QAEA,OAAOzD,UAA0B,IAAI,EAAEyD;IACzC,EAAC;IAED;;;;GAIC,GACDwB,WAAW,OAKTxB;QAEA,OAAOxD,cAA8C,IAAI,EAAEwD;IAC7D,EAAC;IAED;;;;GAIC,GACDvD,eAAe,OAIbuD;QAEA,OAAOtD,kBAAkB,IAAI,EAAEsD;IACjC,EAAC;IAEDyB,aAAa,OACXzB;QAEA,OAAOhD,mBAAmC,IAAI,EAAEgD;IAClD,EAAC;IAED;;;;GAIC,GACD0B,wBAAwB,OACtB1B;QAEA,OAAO/C,2BAAkC,IAAI,EAAE+C;IACjD,EAAC;IAED;;;;GAIC,GACD2B,qBAAqB,OACnB3B;QAEA,OAAO9C,wBAA+B,IAAI,EAAE8C;IAC9C,EAAC;IAED;;;;GAIC,GACD4B,kBAAkB,OAChB5B;QAEA,OAAOrD,qBAA4B,IAAI,EAAEqD;IAC3C,EAAC;IAED;;;;GAIC,GACD6B,eAAe,OACb7B;QAEA,OAAOpD,kBAAyB,IAAI,EAAEoD;IACxC,EAAC;IAED8B,iBAAiB,OACf9B;QAEA,OAAOlE,oBAA2B,IAAI,EAAEkE;IAC1C,EAAC;IAED+B,cAAc,IAAc,GAAG,IAAI,CAAC3B,MAAM,CAAC4B,SAAS,GAAG,IAAI,CAAC5B,MAAM,CAAC6B,MAAM,CAACC,KAAK,EAAE,CAAA;IAEjFC,YAAY,IAAc,GAAG,IAAI,CAAC/B,MAAM,CAAC4B,SAAS,GAAG,IAAI,CAAC5B,MAAM,CAAC6B,MAAM,CAACG,GAAG,EAAE,CAAA;IAE7EC,QAAiB;IAEjBC,UAAqB;IAErBC,OAAOvE,gBAAgB,IAAI,EAAC;IAE5BwE,OAAe;IAEfC,QAAQ,OACNzC;QAEA,OAAOjE,WAAkB,IAAI,EAAEiE;IACjC,EAAC;IAED0C,gBAAgB,OACd1C;QAEA,OAAOhE,mBAA0B,IAAI,EAAEgE;IACzC,EAAC;IAED;;;;GAIC,GACD2C,uBAAuB,OACrB3C;QAEA,OAAO7C,0BAAiC,IAAI,EAAE6C;IAChD,EAAC;IAED;;;;GAIC,GACD4C,iBAAiB,OACf5C;QAEA,OAAOnD,oBAA2B,IAAI,EAAEmD;IAC1C,EAAC;IAED6C,OAAsB;IAEtBC,OAAe;IAEfC,UAAgD;IAEhDC,MAQC;IAEDC,SAAS,OACPjD;QAEA,OAAO/D,YAAmB,IAAI,EAAE+D;IAClC,EAAC;IAEDkD,eAAe,OACblD;QAEA,OAAO5C,kBAAkC,IAAI,EAAE4C;IACjD,EAAC;IAEDmD,gBAAgE;IAEhEC,cAAc,OACZpD;QAEA,OAAO9D,iBAAiB,IAAI,EAAE8D;IAChC,EAAC;IAEDqD,WAEI,CAAC,EAAC;IAEN,MAAMC,mBAAmB;QACvB,IAAI,IAAI,CAAClD,MAAM,CAACmC,IAAI,CAACgB,OAAO,IAAI,IAAI,CAACnD,MAAM,CAACmC,IAAI,CAACiB,OAAO,IAAI,CAACtF,eAAe;YAC1E,MAAMuF,eAAe;YACrB,MAAMC,gBAAgB;YAEtB,MAAMC,WACJ,OAAO,IAAI,CAACvD,MAAM,CAACmC,IAAI,CAACiB,OAAO,KAAK,aAChC,MAAM,IAAI,CAACpD,MAAM,CAACmC,IAAI,CAACiB,OAAO,CAAC,IAAI,IACnC,IAAI,CAACpD,MAAM,CAACmC,IAAI,CAACiB,OAAO;YAE9B,MAAMzC,QAAQC,GAAG,CACf2C,SAAS1C,GAAG,CAAC,CAAC2C;gBACZ,MAAMC,iBAAiB,IAAIxG,KACzBuG,WAAW1C,IAAI,IAAIuC,cACnB;oBACE,IACExF,2BAA2B6F,kBAAkB,IAC7C,CAACF,WAAWG,iBAAiB,IAC7B,IAAI,CAAC3D,MAAM,CAACmC,IAAI,CAACyB,UAAU,EAC3B;wBACA,MAAM,IAAI,CAACzB,IAAI,CAAC0B,eAAe,CAAC;4BAC9BC,WAAWN,WAAWM,SAAS;4BAC/BC,OAAOP,WAAWO,KAAK;wBACzB;oBACF;oBAEA,IAAI,CAAClG,2BAA2BmG,aAAa,EAAE;wBAC7C;oBACF;oBAEA,IAAI,OAAO,IAAI,CAAChE,MAAM,CAACmC,IAAI,CAAC6B,aAAa,KAAK,YAAY;wBACxD,MAAMA,gBAAgB,MAAM,IAAI,CAAChE,MAAM,CAACmC,IAAI,CAAC6B,aAAa,CAAC,IAAI;wBAE/D,IAAI,CAACA,eAAe;4BAClBP,eAAe1C,IAAI;4BACnB;wBACF;oBACF;oBAEA,MAAM,IAAI,CAACoB,IAAI,CAAC8B,GAAG,CAAC;wBAClBH,WAAWN,WAAWM,SAAS;wBAC/BI,OAAOV,WAAWU,KAAK,IAAIZ;wBAC3BS,OAAOP,WAAWO,KAAK;wBACvBI,QAAQX,WAAWW,MAAM;oBAC3B;gBACF,GACA;oBACE,+DAA+D;oBAC/DC,SAAS;gBACX;gBAGF,IAAI,CAAC/D,KAAK,CAACgE,IAAI,CAACZ;YAClB;QAEJ;IACF;IAEA,MAAMa,IAAI,EACRC,IAAI,EACJC,GAAG,EACHC,GAAG,EAKJ,EAA6B;QAC5B,OAAO,IAAI9D,QAAQ,CAAC+D,SAASC;YAC3B,MAAMC,UAAUvJ,MAAM,QAAQ;gBAACG,KAAKkJ,OAAO,CAAClF,SAAS;mBAAiB+E;aAAK,EAAE;gBAC3EC;gBACAK,OAAOJ,OAAOA,QAAQK,YAAY,YAAY;YAChD;YAEAF,QAAQG,EAAE,CAAC,QAAQ,CAACC;gBAClBN,QAAQ;oBAAEM,MAAMA;gBAAM;YACxB;YAEAJ,QAAQG,EAAE,CAAC,SAAS,CAACE;gBACnBN,OAAOM;YACT;QACF;IACF;IAeAC,OACEtF,OAAsC,EACwD;QAC9F,OAAO3D,YAA4B,IAAI,EAAE2D;IAC3C;IAEA;;;GAGC,GACD,MAAMuF,KAAKvF,OAAoB,EAAoB;QACjD,IACEwF,QAAQC,GAAG,CAACC,QAAQ,KAAK,gBACzBF,QAAQC,GAAG,CAACE,kCAAkC,KAAK,UACnD,CAAC9F,qBACD;YACAA,sBAAsB;YACtB,KAAKjC;QACP;QAEA,IAAI,CAAC0E,SAAS,GAAGtC,QAAQsC,SAAS;QAElC,IAAI,CAACtC,SAASI,QAAQ;YACpB,MAAM,IAAIwF,MAAM;QAClB;QAEA,IAAI,CAACxF,MAAM,GAAG,MAAMJ,QAAQI,MAAM;QAClC,IAAI,CAACoC,MAAM,GAAGrE,UAAU,WAAW,IAAI,CAACiC,MAAM,CAACoC,MAAM;QAErD,IAAI,CAAC,IAAI,CAACpC,MAAM,CAAC0C,MAAM,EAAE;YACvB,MAAM,IAAI8C,MAAM;QAClB;QAEA,IAAI,CAAC9C,MAAM,GAAGpH,OAAOmK,UAAU,CAAC,UAAUC,MAAM,CAAC,IAAI,CAAC1F,MAAM,CAAC0C,MAAM,EAAEiD,MAAM,CAAC,OAAOC,KAAK,CAAC,GAAG;QAE5F,IAAI,CAAC3D,OAAO,GAAG;YACbjC,QAAQ,IAAI,CAACA,MAAM,CAACiC,OAAO;QAC7B;QAEA,KAAK,MAAM4D,cAAc,IAAI,CAAC7F,MAAM,CAACD,WAAW,CAAE;YAChD,IAAI+F,eAAmChB;YACvC,MAAMiB,eAAuC,CAAC,EAAEC,KAAK,EAAE;gBACrD,IACE;oBAAC;oBAAS;oBAAU;iBAAQ,CAACC,QAAQ,CAACD,MAAME,IAAI,KAC/CF,MAAME,IAAI,KAAK,SAAS,UAAUF,OACnC;oBACA,OAAO;gBACT;gBAEA,IAAI,CAACrI,iBAAiBqI,QAAQ;oBAC5B;gBACF;gBAEA,IAAIA,MAAMG,IAAI,KAAK,MAAM;oBACvBL,eAAeE,MAAME,IAAI;oBACzB,OAAO;gBACT;YACF;YAEAhI,eAAe;gBACbkI,UAAUL;gBACV/F,QAAQ,IAAI,CAACA,MAAM;gBACnBqG,QAAQR,WAAWQ,MAAM;gBACzBC,mBAAmB;YACrB;YAEA,IAAI,CAACvG,WAAW,CAAC8F,WAAWU,IAAI,CAAC,GAAG;gBAClCvG,QAAQ6F;gBACRC;YACF;QACF;QAEA,IAAI,CAAChG,MAAM,GAAG,IAAI,CAACE,MAAM,CAACF,MAAM,CAAE0G,MAAM,CACtC,CAAC1G,QAAQ2G;YACP3G,MAAM,CAAC2G,MAAMF,IAAI,CAAC,GAAGE;YACrB,OAAO3G;QACT,GACA,CAAC;QAGH,4BAA4B;QAC5B,IAAIsF,QAAQC,GAAG,CAACC,QAAQ,KAAK,gBAAgB,IAAI,CAACtF,MAAM,CAAC0G,UAAU,CAACC,YAAY,KAAK,OAAO;YAC1F,kHAAkH;YAClH,sDAAsD;YACtD,KAAK,IAAI,CAACrC,GAAG,CAAC;gBACZC,MAAM;oBAAC;iBAAiB;gBACxBE,KAAK;YACP;QACF;QAEA,IAAI,CAACnE,EAAE,GAAG,IAAI,CAACN,MAAM,CAACM,EAAE,CAAC6E,IAAI,CAAC;YAAEyB,SAAS,IAAI;QAAC;QAC9C,IAAI,CAACtG,EAAE,CAACsG,OAAO,GAAG,IAAI;QAEtB,IAAI,IAAI,CAACtG,EAAE,EAAE6E,MAAM;YACjB,MAAM,IAAI,CAAC7E,EAAE,CAAC6E,IAAI;QACpB;QAEA,IAAI,CAACvF,QAAQiH,gBAAgB,IAAI,IAAI,CAACvG,EAAE,CAACwG,OAAO,EAAE;YAChD,MAAM,IAAI,CAACxG,EAAE,CAACwG,OAAO;QACvB;QAEA,qBAAqB;QACrB,IAAI,IAAI,CAAC9G,MAAM,CAACiB,KAAK,YAAYN,SAAS;YACxC,MAAMoG,iBAAiB,MAAM,IAAI,CAAC/G,MAAM,CAACiB,KAAK;YAC9C,IAAI,CAACA,KAAK,GAAG8F,eAAe;gBAAEH,SAAS,IAAI;YAAC;QAC9C,OAAO,IAAI,IAAI,CAAC5G,MAAM,CAACiB,KAAK,EAAE;YAC5B,IAAI,CAACA,KAAK,GAAG,IAAI,CAACjB,MAAM,CAACiB,KAAK,CAAC;gBAAE2F,SAAS,IAAI;YAAC;QACjD,OAAO;YACL,IAAIxB,QAAQC,GAAG,CAAC2B,UAAU,KAAK,0BAA0B;gBACvD,IAAI,CAAC5E,MAAM,CAAC6E,IAAI,CACd,CAAC,qHAAqH,CAAC;YAE3H;YAEA,IAAI,CAAChG,KAAK,GAAGvD,oBAAoB;gBAAEkJ,SAAS,IAAI;YAAC;QACnD;QAEA,+DAA+D;QAC/D,IACE,CAAC,IAAI,CAAC5G,MAAM,CAACkH,KAAK,IAClB,IAAI,CAAClH,MAAM,CAACD,WAAW,CAACoH,IAAI,CAAC,CAACC,IAAMA,EAAEC,MAAM,CAACC,UAAU,IAAIF,EAAEC,MAAM,CAACE,aAAa,GACjF;YACA,IAAI,CAACnF,MAAM,CAAC6E,IAAI,CACd,CAAC,gIAAgI,CAAC;QAEtI;QAEA,8FAA8F;QAC9F,IAAI7B,QAAQC,GAAG,CAACmC,MAAM,EAAE;YACtB,MAAMC,2BAA2B,IAAI,CAACzH,MAAM,CAACD,WAAW,CAAC2H,MAAM,CAC7D,CAACN,IAAMA,EAAEC,MAAM,IAAID,EAAEC,MAAM,CAACM,OAAO,KAAK7C;YAG1C,IAAI2C,yBAAyBjH,MAAM,EAAE;gBACnC,MAAMoH,QAAQH,yBAAyB5G,GAAG,CAAC,CAACuG,IAAMA,EAAEb,IAAI,EAAEsB,IAAI,CAAC;gBAC/D,IAAI,CAACzF,MAAM,CAAC6E,IAAI,CACd,CAAC,6HAA6H,EAAEW,MAAM,wEAAwE,CAAC;YAEnN;QACF;QAEA,IAAI,CAACjF,SAAS,GAAG,IAAI,CAAC1B,KAAK,CAAC,YAAY;QAExChD,oBAAoB,IAAI;QAExB,0FAA0F;QAC1F,IAAI6J,qBAAqB;QACzB,IAAI,CAACjI,cAAc,GAAG,IAAI,CAACG,MAAM,CAACD,WAAW,CAACyG,MAAM,CAAC,CAAC3G,gBAAgBgG;YACpE,IAAIA,YAAYlG,MAAM;gBACpB,IAAIkG,WAAWlG,IAAI,CAACoI,UAAU,CAACvH,MAAM,GAAG,GAAG;oBACzCX,eAAewE,IAAI,IAAIwB,WAAWlG,IAAI,CAACoI,UAAU;gBACnD;gBAEA,8DAA8D;gBAC9D,IAAIlC,WAAWlG,IAAI,EAAEqI,WAAW;oBAC9BnI,eAAewE,IAAI,CAAC;wBAClB8B,MAAM,GAAGN,WAAWU,IAAI,CAAC,QAAQ,CAAC;wBAClC0B,cAAc5K,qBAAqBwI;oBACrC;gBACF;gBAEA,mCAAmC;gBACnC,IAAI,CAACA,WAAWlG,IAAI,CAACuI,oBAAoB,IAAI,CAACJ,oBAAoB;oBAChEA,qBAAqB;gBACvB;YACF;YAEA,OAAOjI;QACT,GAAG,EAAE;QAEL,4DAA4D;QAC5D,IAAIiI,oBAAoB;YACtB,IAAI,CAACjI,cAAc,CAACwE,IAAI,CAAC;gBACvB8B,MAAM;gBACN8B,cAAc3K;YAChB;QACF;QAEA,IAAI;YACF,IAAI,CAACsC,QAAQuI,aAAa,EAAE;gBAC1B,IAAI,OAAOvI,QAAQwI,MAAM,KAAK,YAAY;oBACxC,MAAMxI,QAAQwI,MAAM,CAAC,IAAI;gBAC3B;gBACA,IAAI,OAAO,IAAI,CAACpI,MAAM,CAACoI,MAAM,KAAK,YAAY;oBAC5C,MAAM,IAAI,CAACpI,MAAM,CAACoI,MAAM,CAAC,IAAI;gBAC/B;YACF;QACF,EAAE,OAAOnD,OAAO;YACd,IAAI,CAAC7C,MAAM,CAAC6C,KAAK,CAAC;gBAAEoD,KAAKpD;YAAM,GAAG;YAClC,MAAMA;QACR;QAEA,IAAIrF,QAAQkB,IAAI,EAAE;YAChB,MAAM,IAAI,CAACoC,gBAAgB;QAC7B;QAEA,OAAO,IAAI;IACb;IAeAwC,OACE9F,OAAsC,EACwD;QAC9F,OAAOlD,YAA4B,IAAI,EAAEkD;IAC3C;AACF;AAEA,MAAM0I,cAAc,IAAI5I;AAExB,iDAAiD;AACjD,eAAe4I,YAAW;AAE1B,OAAO,MAAMC,SAAS,OACpBvI,QACA4G,SACA4B,yBACA5I;IAEA,IAAI,OAAOgH,QAAQtG,EAAE,CAACC,OAAO,KAAK,YAAY;QAC5C,mFAAmF;QACnF,MAAMqG,QAAQtG,EAAE,CAACC,OAAO;IAC1B;IACAqG,QAAQ5G,MAAM,GAAGA;IAEjB4G,QAAQ7G,WAAW,GAAGC,OAAOD,WAAW,CAACyG,MAAM,CAC7C,CAACzG,aAAa8F;QACZ9F,WAAW,CAAC8F,WAAWU,IAAI,CAAC,GAAG;YAC7BvG,QAAQ6F;YACRC,cAAcc,QAAQ7G,WAAW,CAAC8F,WAAWU,IAAI,CAAC,EAAET;QACtD;QACA,OAAO/F;IACT,GACA,CAAC;IAGH6G,QAAQ9G,MAAM,GAAGE,OAAOF,MAAM,CAAE0G,MAAM,CACpC,CAAC1G,QAAQ2G;QACP3G,MAAM,CAAC2G,MAAMF,IAAI,CAAC,GAAGE;QACrB,OAAO3G;IACT,GACA,CAAC;IAGH8G,QAAQ3E,OAAO,GAAG;QAChBjC,QAAQA,OAAOiC,OAAO;IACxB;IAEA,sHAAsH;IAEtH,iBAAiB;IACjB,IAAIjC,OAAO0G,UAAU,CAACC,YAAY,KAAK,OAAO;QAC5C,kHAAkH;QAClH,sDAAsD;QACtD,KAAKC,QAAQtC,GAAG,CAAC;YACfC,MAAM;gBAAC;aAAiB;YACxBE,KAAK;QACP;IACF;IAEA,yBAAyB;IACzB,IAAI+D,4BAA4B,QAAQxI,OAAO8B,KAAK,EAAEI,WAAWyE,iBAAiB,OAAO;QACvF,MAAMpJ,kBAAkByC,QAAQ;YAC9ByE,KAAK;QACP;IACF;IAEA,IAAImC,QAAQtG,EAAE,EAAE6E,MAAM;QACpB,MAAMyB,QAAQtG,EAAE,CAAC6E,IAAI;IACvB;IAEA,IAAI,CAACvF,SAASiH,oBAAoBD,QAAQtG,EAAE,CAACwG,OAAO,EAAE;QACpD,MAAMF,QAAQtG,EAAE,CAACwG,OAAO,CAAC;YAAE2B,WAAW;QAAK;IAC7C;;IAEEC,OAAeC,sBAAsB,GAAG,CAAC;IACzCD,OAAeE,kBAAkB,GAAG;IACpCF,OAAeG,wBAAwB,GAAG;IAC1CH,OAAeI,+BAA+B,GAAG,KAAK,0KAA0K;;IAChOJ,OAAeK,4BAA4B,GAAG;IAC9CL,OAAeM,kCAAkC,GAAG;AACxD,EAAC;AAED,IAAIC,UASA,AAACP,OAAeQ,QAAQ;AAE5B,IAAI,CAACD,SAAS;IACZA,UAAU,AAACP,OAAeQ,QAAQ,GAAG,IAAIC;AAC3C;AAEA;;;;;;;CAOC,GACD,OAAO,MAAMC,aAAa,OACxBxJ;IAUA,IAAI,CAACA,SAASI,QAAQ;QACpB,MAAM,IAAIwF,MAAM;IAClB;IAEA,IAAI6D,0BAA0B;IAE9B,IAAIC,SAASL,QAAQM,GAAG,CAAC3J,QAAQ4J,GAAG,IAAI;IACxC,IAAI,CAACF,QAAQ;QACXA,SAAS;YACPG,kBAAkBC,QAAQ9J,QAAQkB,IAAI;YACtC8F,SAAS;YACT+C,SAAS;YACTpB,QAAQ;YACRqB,IAAI;QACN;QACAX,QAAQY,GAAG,CAACjK,QAAQ4J,GAAG,IAAI,WAAWF;IACxC,OAAO;QACLD,0BAA0B;IAC5B;IAEA,IAAIA,yBAAyB;QAC3B,0GAA0G;QAC1G,+EAA+E;QAC/EzJ,QAAQuI,aAAa,GAAG;IAC1B;IAEA,IAAImB,OAAO1C,OAAO,EAAE;QAClB,IAAIhH,QAAQkB,IAAI,IAAI,CAACwI,OAAOG,gBAAgB,EAAE;YAC5C,oJAAoJ;YACpJH,OAAOG,gBAAgB,GAAG;YAC1B,MAAMH,OAAO1C,OAAO,CAAC1D,gBAAgB;QACvC;QAEA,IAAIoG,OAAOf,MAAM,KAAK,MAAM;YAC1B,IAAI7D;YAEJ,yJAAyJ;YACzJ,qIAAqI;YACrI,wGAAwG;YACxG4E,OAAOf,MAAM,GAAG,IAAI5H,QAAQ,CAACmJ,MAASpF,UAAUoF;YAChD,MAAM9J,SAAS,MAAMJ,QAAQI,MAAM;YACnC,MAAMuI,OAAOvI,QAAQsJ,OAAO1C,OAAO,EAAE,CAAChH,QAAQsC,SAAS,EAAEtC;YAEzD8E;QACF;QAEA,IAAI4E,OAAOf,MAAM,YAAY5H,SAAS;YACpC,MAAM2I,OAAOf,MAAM;QACrB;QACA,IAAI3I,SAASsC,WAAW;YACtBoH,OAAO1C,OAAO,CAAC1E,SAAS,GAAGtC,QAAQsC,SAAS;QAC9C;QACA,OAAOoH,OAAO1C,OAAO;IACvB;IAEA,IAAI,CAAC0C,OAAOK,OAAO,EAAE;QACnB,wFAAwF;QACxFL,OAAOK,OAAO,GAAG,IAAIjK,cAAcyF,IAAI,CAACvF;IAC1C;IAEA,IAAI;QACF0J,OAAO1C,OAAO,GAAG,MAAM0C,OAAOK,OAAO;QAErC,IACE,CAACL,OAAOM,EAAE,IACVxE,QAAQC,GAAG,CAACC,QAAQ,KAAK,gBACzBF,QAAQC,GAAG,CAACC,QAAQ,KAAK,UACzBF,QAAQC,GAAG,CAAC0E,mBAAmB,KAAK,QACpC;YACA,IAAI;gBACF,MAAMC,OAAO5E,QAAQC,GAAG,CAAC4E,IAAI,IAAI;gBACjC,MAAMC,WACJ9E,QAAQC,GAAG,CAAC8E,SAAS,KAAK,UAAU/E,QAAQgF,IAAI,CAACnE,QAAQ,CAAC;gBAC5D,MAAMoE,WAAWH,WAAW,QAAQ;gBAEpC,MAAM1O,OAAO;gBACb,2GAA2G;gBAC3G,MAAM8O,SAASlF,QAAQC,GAAG,CAACkF,mBAAmB,IAAI;gBAElDjB,OAAOM,EAAE,GAAG,IAAInO,UACd2J,QAAQC,GAAG,CAACmF,wBAAwB,IAAI,GAAGH,SAAS,aAAa,EAAEL,OAAOM,SAAS9O,MAAM;gBAG3F8N,OAAOM,EAAE,CAACa,SAAS,GAAG,CAACC;oBACrB,IAAI,OAAOA,MAAMC,IAAI,KAAK,UAAU;wBAClC,MAAMA,OAAOC,KAAKC,KAAK,CAACH,MAAMC,IAAI;wBAElC,IAAI,YAAYA,QAAQA,KAAKG,MAAM,KAAK,0BAA0B;4BAChExB,OAAOf,MAAM,GAAG;wBAClB;oBACF;gBACF;gBAEAe,OAAOM,EAAE,CAACmB,OAAO,GAAG,CAACC;gBACnB,yCAAyC;gBAC3C;YACF,EAAE,OAAOA,GAAG;YACV,YAAY;YACd;QACF;IACF,EAAE,OAAOC,GAAG;QACV3B,OAAOK,OAAO,GAAG;QAEfsB,EAAqCC,gBAAgB,GAAG;QAC1D,MAAMD;IACR;IAEA,IAAIrL,SAASsC,WAAW;QACtBoH,OAAO1C,OAAO,CAAC1E,SAAS,GAAGtC,QAAQsC,SAAS;IAC9C;IAEA,OAAOoH,OAAO1C,OAAO;AACvB,EAAC;AAWD,cAAc,kBAAiB;AAC/B,SAASuE,OAAO,QAAQ,gBAAe;AACvC,SAASC,eAAe,QAAQ,8BAA6B;AAC7D,SAASC,uBAAuB,QAAQ,sCAAqC;AAC7E,SAASC,aAAa,QAAQ,4BAA2B;AACzD,SAASC,oBAAoB,QAAQ,6BAA4B;AACjE,SAASC,cAAc,QAAQ,6BAA4B;AAC3D,SAASC,eAAe,QAAQ,8BAA6B;AAE7D,SAASC,WAAW,QAAQ,0BAAyB;AACrD,SAASC,gBAAgB,QAAQ,+BAA8B;AAC/D,SAASC,0BAA0B,QAAQ,yCAAwC;AACnF,SAASC,sBAAsB,QAAQ,qCAAoC;AAC3E,SAASC,eAAe,QAAQ,8BAA6B;AAC7D,SAASC,oBAAoB,QAAQ,mCAAkC;AACvE,SAASzO,iBAAiB,QAAQ,2BAA0B;AAC5D,SAAS0O,sBAAsB,QAAQ,oDAAmD;AAC1F,SAASC,kBAAkB,QAAQ,gDAA+C;AAoBlF,SAAS1O,iBAAiB,QAAQ,mCAAkC;AAGpE,SAAS2O,yBAAyB,QAAQ,2CAA0C;AACpF,SAASC,WAAWC,UAAU,QAAQ,mBAAkB;AAExD,SAEEC,4BAA4B,EAC5BC,6BAA6B,QAIxB,iCAAgC;AA0CvC,SAASC,wBAAwB,EAAEC,aAAa,QAAQ,8BAA6B;AACrF,SAASC,cAAc,QAAQ,oCAAmC;AAClE,SAASC,eAAe,QAAQ,qCAAoC;AACpE,SAASC,eAAe,QAAQ,qCAAoC;AACpE,SAASC,mBAAmB,QAAQ,yCAAwC;AAC5E,SAASC,kBAAkB,QAAQ,wCAAuC;AAC1E,SAASC,kBAAkB,QAAQ,wCAAuC;AAC1E,SAASC,aAAa,QAAQ,mCAAkC;AAChE,SAASC,iBAAiB,QAAQ,uCAAsC;AACxE,SAASC,wBAAwB,QAAQ,8CAA6C;AACtF,SAASC,qBAAqB,QAAQ,2CAA0C;AAChF,SAASC,uBAAuB,QAAQ,6CAA4C;AACpF,SAASC,eAAe,QAAQ,qCAAoC;AACpE,SAASC,mBAAmB,QAAQ,yCAAwC;AAC5E,SAASC,WAAW,QAAQ,oBAAmB;AAC/C,SAEEC,kBAAkB,EAElBC,iCAAiC,EACjCC,+BAA+B,EAC/BC,0BAA0B,QAErB,qBAAoB;AAC3B,SAASC,QAAQ,QAAQ,uBAAsB;AAG/C,SAASC,cAAc,QAAQ,uBAAsB;AAErD,SAASC,cAAc,QAAQ,+BAA8B;AAC7D,SAASC,qBAAqB,QAAQ,sCAAqC;AAC3E,SAASC,uBAAuB,QAAQ,wCAAuC;AAC/E,SAASC,uBAAuB,QAAQ,wCAAuC;AAC/E,SAASC,iBAAiB,QAAQ,kCAAiC;AACnE,SAASC,eAAe,QAAQ,2CAA0C;AAC1E,SAASC,aAAa,QAAQ,yCAAwC;AACtE,SAASC,sBAAsB,QAAQ,kDAAiD;AACxF,SAASjC,OAAO,QAAQ,mCAAkC;AAC1D,SAASkC,WAAW,QAAQ,uCAAsC;AAClE,SAASC,cAAc,QAAQ,0CAAyC;AACxE,SAASC,YAAY,QAAQ,wCAAuC;AACpE,SAASC,aAAa,QAAQ,yCAAwC;AACtE,SAASC,oBAAoB,QAAQ,gDAA+C;AACpF,SAASC,iBAAiB,QAAQ,6CAA4C;AAC9E,SAASC,kBAAkB,QAAQ,8CAA6C;AAChF,SAASC,mBAAmB,QAAQ,+CAA8C;AAGlF,SAASC,kBAAkB,QAAQ,mDAAkD;AACrF,SAASC,mBAAmB,QAAQ,qDAAoD;AAmExF,SACEC,QAAQ,EACRC,YAAY,EACZC,mBAAmB,EACnBC,mBAAmB,EACnBC,kBAAkB,EAClBC,eAAe,EACfC,iBAAiB,EACjBC,kBAAkB,EAClBC,eAAe,EACfC,SAAS,EACTC,oBAAoB,EACpBC,gBAAgB,EAChBC,wBAAwB,EACxBC,MAAM,EACNC,UAAU,EACVC,sBAAsB,EACtBC,iBAAiB,EACjBC,wBAAwB,EACxBC,gBAAgB,EAChBC,WAAW,EACXC,QAAQ,EACRC,UAAU,EACVC,eAAe,EACfC,eAAe,EACfC,mBAAmB,QACd,oBAAmB;AAG1B,SAASC,eAAe,QAAQ,yCAAwC;AAExE,SAASC,WAAW,QAAQ,qCAAoC;AAEhE,SAASC,SAAS,QAA6B,oCAAmC;AAElF,SACEC,iBAAiB,EACjBC,kBAAkB,QAGb,4BAA2B;AAIlC,SAASC,cAAc,QAAQ,8BAA6B;AA8G5D,SAASC,eAAe,QAAQ,8BAA6B;AAC7D,SAAS5S,kBAAkB6S,yBAAyB,QAAQ,+CAA8C;AAE1G,SAASpH,WAAWqH,gBAAgB,QAAQ,sCAAqC;AACjF,SAAS9S,kBAAkB+S,uBAAuB,QAAQ,6CAA4C;AACtG,SAAS/S,kBAAkBgT,0BAA0B,QAAQ,gDAA+C;AAC5G,SAAShT,kBAAkBiT,4BAA4B,QAAQ,kDAAiD;AAEhH,SAASC,kBAAkB,QAAQ,iCAAgC;AACnE,SAASC,2BAA2B,EAAEC,WAAW,QAAQ,0BAAyB;AAkClF,SAASC,aAAa,QAAQ,mCAAkC;AAChE,SAEEC,wBAAwB,EACxBC,yBAAyB,QAGpB,6BAA4B;AAcnC,SAAS5E,sBAAsB6E,wBAAwB,QAAQ,oCAAmC;AAClG,SAASC,gBAAgB,QAAQ,kCAAiC;AAElE,SAAS1E,4BAA4B2E,8BAA8B,QAAQ,0CAAyC;AACpH,SAAS1E,yBAAyB2E,2BAA2B,QAAQ,uCAAsC;AAC3G,SAAS1E,2BAA2B2E,6BAA6B,QAAQ,yCAAwC;AACjH,SAAS1E,mBAAmB2E,qBAAqB,QAAQ,iCAAgC;AAiBzF,SAASC,YAAY,QAAQ,gCAA+B;AA0B5D,SAASC,iCAAiC,QAAQ,2EAA0E;AAC5H,SAASC,iBAAiB,QAAQ,0DAAyD;AAE3F,SACErU,0BAA0B,EAC1BsU,+BAA+B,EAC/BC,cAAc,QACT,uCAAsC;AAC7C,SAASC,YAAY,QAAQ,iCAAgC;AAC7D,cAAc,mBAAkB;AAChC,SAASC,aAAa,QAAQ,6BAA4B;AAC1D,SAASC,yBAAyB,QAAQ,yBAAwB;AAGlE,SAASC,uBAAuB,QAAQ,yCAAwC;AAChF,SAASC,2BAA2B,EAAEC,eAAe,QAAQ,qCAAoC;AACjG,SAASC,cAAc,QAAQ,gCAA+B;AAC9D,SAASC,iBAAiB,QAAQ,mCAAkC;AACpE,SACEC,kBAAkB,EAClBC,kBAAkB,EAClBC,kBAAkB,EAClBC,0BAA0B,QACrB,oCAAmC;AAC1C,SAASC,8BAA8B,QAAQ,gDAA+C;AAC9F,SAASC,cAAc,QAAQ,gCAA+B;AAC9D,SAASC,oBAAoB,QAAQ,sCAAqC;AAC1E,SACEC,cAAc,EACdC,qBAAqB,EACrBC,oBAAoB,QACf,gCAA+B;AACtC,SACEC,SAAS,EACTC,2BAA2B,EAC3BC,4BAA4B,EAC5BC,yBAAyB,QACpB,2BAA0B;AACjC,SACEC,iBAAiB,QAEZ,gDAA+C;AACtD,SAASC,eAAe,QAAQ,8CAA6C;AAC7E,SACEC,MAAM,EACNC,UAAU,EACVC,yBAAyB,EACzBC,6BAA6B,QACxB,wBAAuB;AAC9B,SAASC,gBAAgB,QAAQ,kCAAiC;AAClE,SAASC,qBAAqB,QAAQ,uCAAsC;AAC5E,SAASC,YAAY,QAAQ,8BAA6B;AAC1D,SAASC,YAAY,EAAEC,WAAW,EAAEC,OAAO,QAAQ,8BAA6B;AAChF,SAASC,cAAc,QAAQ,gCAA+B;AAC9D,SAASC,yBAAyB,QAAQ,2CAA0C;AACpF,SAASC,cAAc,QAAQ,gCAA+B;AAC9D,SAASC,oBAAoB,QAAQ,sCAAqC;AAC1E,SAASC,kBAAkB,QAAQ,oCAAmC;AACtE,SAASC,eAAe,QAAQ,iCAAgC;AAChE,SAASC,eAAe,QAAQ,iCAAgC;AAChE,SAASC,eAAe,QAAQ,iCAAgC;AAChE,SAASC,cAAc,QAAQ,gCAA+B;AAC9D,SAASC,qBAAqB,QAAQ,uCAAsC;AAC5E,SAASC,aAAa,QAAQ,+BAA8B;AAC5D,SAASC,SAAS,QAAQ,2BAA0B;AACpD,SAASC,eAAe,QAAQ,iCAAgC;AAChE,SAASC,QAAQ,QAAQ,0BAAyB;AAClD,SAASC,oBAAoB,QAAQ,wBAAuB;AAC5D,SAASC,QAAQ,QAAQ,0BAAyB;AAClD,SAASC,YAAY,QAAQ,8BAA6B;AAC1D,SAASC,eAAe,QAAQ,iCAAgC;AAChE,SAASC,sBAAsB,QAAQ,wCAAuC;AAC9E,SAASC,kBAAkB,QAAQ,oCAAmC;AACtE,SAASC,qBAAqB,QAAQ,uCAAsC;AAC5E,SAASC,mBAAmB,QAAQ,qCAAoC;AACxE,SAASC,qBAAqB,QAAQ,uCAAsC;AAC5E,SAAS3X,cAAc,QAAQ,gCAA+B;AAE9D,SAAS4X,4BAA4B,QAAQ,sCAAqC;AAClF,SAASC,wBAAwB,QAAQ,kCAAiC;AAC1E,SAASC,2BAA2B,QAAQ,4CAA2C;AACvF,SAASC,eAAe,QAAQ,yBAAwB;AACxD,SAASC,wBAAwB,QAAQ,yCAAwC;AACjF,SAASC,uBAAuB,QAAQ,+CAA8C;AACtF,SAASC,kBAAkB,QAAQ,0CAAyC;AAE5E,SAASC,kBAAkB,QAAQ,mCAAkC;AACrE,SAASC,0BAA0B,QAAQ,2CAA0C;AACrF,SAASC,sBAAsB,QAAQ,uCAAsC;AAC7E,SAASC,WAAW,QAAQ,4BAA2B;AAGvD,SAASC,eAAe,QAAQ,qCAAoC"}