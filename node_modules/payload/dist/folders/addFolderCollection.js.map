{"version":3,"sources":["../../src/folders/addFolderCollection.ts"],"sourcesContent":["import type { Config, SanitizedConfig } from '../config/types.js'\nimport type { CollectionConfig } from '../index.js'\n\nimport { sanitizeCollection } from '../collections/config/sanitize.js'\nimport { createFolderCollection } from './createFolderCollection.js'\n\nexport async function addFolderCollection({\n  collectionSpecific,\n  config,\n  folderEnabledCollections,\n  richTextSanitizationPromises = [],\n  validRelationships = [],\n}: {\n  collectionSpecific: boolean\n  config: NonNullable<Config>\n  folderEnabledCollections: CollectionConfig[]\n  richTextSanitizationPromises?: Array<(config: SanitizedConfig) => Promise<void>>\n  validRelationships?: string[]\n}): Promise<void> {\n  if (config.folders === false) {\n    return\n  }\n\n  let folderCollectionConfig = createFolderCollection({\n    slug: config.folders!.slug as string,\n    collectionSpecific,\n    debug: config.folders!.debug,\n    folderEnabledCollections,\n    folderFieldName: config.folders!.fieldName as string,\n  })\n\n  const collectionIndex = config.collections!.push(folderCollectionConfig)\n\n  if (\n    Array.isArray(config.folders?.collectionOverrides) &&\n    config?.folders.collectionOverrides.length\n  ) {\n    for (const override of config.folders.collectionOverrides) {\n      folderCollectionConfig = await override({ collection: folderCollectionConfig })\n    }\n  }\n\n  const sanitizedCollectionWithOverrides = await sanitizeCollection(\n    config as unknown as Config,\n    folderCollectionConfig,\n    richTextSanitizationPromises,\n    validRelationships,\n  )\n\n  config.collections![collectionIndex - 1] = sanitizedCollectionWithOverrides\n}\n"],"names":["sanitizeCollection","createFolderCollection","addFolderCollection","collectionSpecific","config","folderEnabledCollections","richTextSanitizationPromises","validRelationships","folders","folderCollectionConfig","slug","debug","folderFieldName","fieldName","collectionIndex","collections","push","Array","isArray","collectionOverrides","length","override","collection","sanitizedCollectionWithOverrides"],"mappings":"AAGA,SAASA,kBAAkB,QAAQ,oCAAmC;AACtE,SAASC,sBAAsB,QAAQ,8BAA6B;AAEpE,OAAO,eAAeC,oBAAoB,EACxCC,kBAAkB,EAClBC,MAAM,EACNC,wBAAwB,EACxBC,+BAA+B,EAAE,EACjCC,qBAAqB,EAAE,EAOxB;IACC,IAAIH,OAAOI,OAAO,KAAK,OAAO;QAC5B;IACF;IAEA,IAAIC,yBAAyBR,uBAAuB;QAClDS,MAAMN,OAAOI,OAAO,CAAEE,IAAI;QAC1BP;QACAQ,OAAOP,OAAOI,OAAO,CAAEG,KAAK;QAC5BN;QACAO,iBAAiBR,OAAOI,OAAO,CAAEK,SAAS;IAC5C;IAEA,MAAMC,kBAAkBV,OAAOW,WAAW,CAAEC,IAAI,CAACP;IAEjD,IACEQ,MAAMC,OAAO,CAACd,OAAOI,OAAO,EAAEW,wBAC9Bf,QAAQI,QAAQW,oBAAoBC,QACpC;QACA,KAAK,MAAMC,YAAYjB,OAAOI,OAAO,CAACW,mBAAmB,CAAE;YACzDV,yBAAyB,MAAMY,SAAS;gBAAEC,YAAYb;YAAuB;QAC/E;IACF;IAEA,MAAMc,mCAAmC,MAAMvB,mBAC7CI,QACAK,wBACAH,8BACAC;IAGFH,OAAOW,WAAW,AAAC,CAACD,kBAAkB,EAAE,GAAGS;AAC7C"}