{"version":3,"sources":["../../src/utilities/combineWhereConstraints.spec.ts"],"sourcesContent":["import { Where } from '../types/index.js'\nimport { combineWhereConstraints } from './combineWhereConstraints.js'\n\ndescribe('combineWhereConstraints', () => {\n  it('should merge matching constraint keys', async () => {\n    const constraint: Where = {\n      test: {\n        equals: 'value',\n      },\n    }\n\n    // should merge and queries\n    const andConstraint: Where = {\n      and: [constraint],\n    }\n    expect(combineWhereConstraints([andConstraint], 'and')).toEqual(andConstraint)\n    // should merge multiple and queries\n    expect(combineWhereConstraints([andConstraint, andConstraint], 'and')).toEqual({\n      and: [constraint, constraint],\n    })\n\n    // should merge or queries\n    const orConstraint: Where = {\n      or: [constraint],\n    }\n    expect(combineWhereConstraints([orConstraint], 'or')).toEqual(orConstraint)\n    // should merge multiple or queries\n    expect(combineWhereConstraints([orConstraint, orConstraint], 'or')).toEqual({\n      or: [constraint, constraint],\n    })\n  })\n\n  it('should push mismatching constraints keys into `as` key', async () => {\n    const constraint: Where = {\n      test: {\n        equals: 'value',\n      },\n    }\n\n    // should push `and` into `or` key\n    const andConstraint: Where = {\n      and: [constraint],\n    }\n    expect(combineWhereConstraints([andConstraint], 'or')).toEqual({\n      or: [andConstraint],\n    })\n\n    // should push `or` into `and` key\n    const orConstraint: Where = {\n      or: [constraint],\n    }\n    expect(combineWhereConstraints([orConstraint], 'and')).toEqual({\n      and: [orConstraint],\n    })\n\n    // should merge `and` but push `or` into `and` key\n    expect(combineWhereConstraints([andConstraint, orConstraint], 'and')).toEqual({\n      and: [constraint, orConstraint],\n    })\n  })\n\n  it('should push non and/or constraint key into `as` key', async () => {\n    const basicConstraint: Where = {\n      test: {\n        equals: 'value',\n      },\n    }\n\n    expect(combineWhereConstraints([basicConstraint], 'and')).toEqual({\n      and: [basicConstraint],\n    })\n    expect(combineWhereConstraints([basicConstraint], 'or')).toEqual({\n      or: [basicConstraint],\n    })\n  })\n\n  it('should return an empty object when no constraints are provided', async () => {\n    expect(combineWhereConstraints([], 'and')).toEqual({})\n    expect(combineWhereConstraints([], 'or')).toEqual({})\n  })\n\n  it('should return an empty object when all constraints are empty', async () => {\n    expect(combineWhereConstraints([{}, {}, undefined], 'and')).toEqual({})\n    expect(combineWhereConstraints([{}, {}, undefined], 'or')).toEqual({})\n  })\n})\n"],"names":["combineWhereConstraints","describe","it","constraint","test","equals","andConstraint","and","expect","toEqual","orConstraint","or","basicConstraint","undefined"],"mappings":"AACA,SAASA,uBAAuB,QAAQ,+BAA8B;AAEtEC,SAAS,2BAA2B;IAClCC,GAAG,yCAAyC;QAC1C,MAAMC,aAAoB;YACxBC,MAAM;gBACJC,QAAQ;YACV;QACF;QAEA,2BAA2B;QAC3B,MAAMC,gBAAuB;YAC3BC,KAAK;gBAACJ;aAAW;QACnB;QACAK,OAAOR,wBAAwB;YAACM;SAAc,EAAE,QAAQG,OAAO,CAACH;QAChE,oCAAoC;QACpCE,OAAOR,wBAAwB;YAACM;YAAeA;SAAc,EAAE,QAAQG,OAAO,CAAC;YAC7EF,KAAK;gBAACJ;gBAAYA;aAAW;QAC/B;QAEA,0BAA0B;QAC1B,MAAMO,eAAsB;YAC1BC,IAAI;gBAACR;aAAW;QAClB;QACAK,OAAOR,wBAAwB;YAACU;SAAa,EAAE,OAAOD,OAAO,CAACC;QAC9D,mCAAmC;QACnCF,OAAOR,wBAAwB;YAACU;YAAcA;SAAa,EAAE,OAAOD,OAAO,CAAC;YAC1EE,IAAI;gBAACR;gBAAYA;aAAW;QAC9B;IACF;IAEAD,GAAG,0DAA0D;QAC3D,MAAMC,aAAoB;YACxBC,MAAM;gBACJC,QAAQ;YACV;QACF;QAEA,kCAAkC;QAClC,MAAMC,gBAAuB;YAC3BC,KAAK;gBAACJ;aAAW;QACnB;QACAK,OAAOR,wBAAwB;YAACM;SAAc,EAAE,OAAOG,OAAO,CAAC;YAC7DE,IAAI;gBAACL;aAAc;QACrB;QAEA,kCAAkC;QAClC,MAAMI,eAAsB;YAC1BC,IAAI;gBAACR;aAAW;QAClB;QACAK,OAAOR,wBAAwB;YAACU;SAAa,EAAE,QAAQD,OAAO,CAAC;YAC7DF,KAAK;gBAACG;aAAa;QACrB;QAEA,kDAAkD;QAClDF,OAAOR,wBAAwB;YAACM;YAAeI;SAAa,EAAE,QAAQD,OAAO,CAAC;YAC5EF,KAAK;gBAACJ;gBAAYO;aAAa;QACjC;IACF;IAEAR,GAAG,uDAAuD;QACxD,MAAMU,kBAAyB;YAC7BR,MAAM;gBACJC,QAAQ;YACV;QACF;QAEAG,OAAOR,wBAAwB;YAACY;SAAgB,EAAE,QAAQH,OAAO,CAAC;YAChEF,KAAK;gBAACK;aAAgB;QACxB;QACAJ,OAAOR,wBAAwB;YAACY;SAAgB,EAAE,OAAOH,OAAO,CAAC;YAC/DE,IAAI;gBAACC;aAAgB;QACvB;IACF;IAEAV,GAAG,kEAAkE;QACnEM,OAAOR,wBAAwB,EAAE,EAAE,QAAQS,OAAO,CAAC,CAAC;QACpDD,OAAOR,wBAAwB,EAAE,EAAE,OAAOS,OAAO,CAAC,CAAC;IACrD;IAEAP,GAAG,gEAAgE;QACjEM,OAAOR,wBAAwB;YAAC,CAAC;YAAG,CAAC;YAAGa;SAAU,EAAE,QAAQJ,OAAO,CAAC,CAAC;QACrED,OAAOR,wBAAwB;YAAC,CAAC;YAAG,CAAC;YAAGa;SAAU,EAAE,OAAOJ,OAAO,CAAC,CAAC;IACtE;AACF"}