{"version":3,"sources":["../../src/utilities/checkDocumentLockStatus.ts"],"sourcesContent":["import type { TypeWithID } from '../collections/config/types.js'\nimport type { PaginatedDocs } from '../database/types.js'\nimport type { JsonObject, PayloadRequest } from '../types/index.js'\n\nimport { Locked } from '../errors/index.js'\nimport { lockedDocumentsCollectionSlug } from '../locked-documents/config.js'\n\ntype CheckDocumentLockStatusArgs = {\n  collectionSlug?: string\n  globalSlug?: string\n  id?: number | string\n  lockDurationDefault?: number\n  lockErrorMessage?: string\n  overrideLock?: boolean\n  req: PayloadRequest\n}\n\nexport const checkDocumentLockStatus = async ({\n  id,\n  collectionSlug,\n  globalSlug,\n  lockDurationDefault = 300, // Default 5 minutes in seconds\n  lockErrorMessage,\n  overrideLock = true,\n  req,\n}: CheckDocumentLockStatusArgs): Promise<void> => {\n  const { payload } = req\n\n  // Retrieve the lockDocuments property for either collection or global\n  const lockDocumentsProp = collectionSlug\n    ? payload.collections?.[collectionSlug]?.config?.lockDocuments\n    : payload.config?.globals?.find((g) => g.slug === globalSlug)?.lockDocuments\n\n  const isLockingEnabled = lockDocumentsProp !== false\n\n  let lockedDocumentQuery = {}\n\n  if (collectionSlug) {\n    lockedDocumentQuery = {\n      and: [\n        { 'document.relationTo': { equals: collectionSlug } },\n        { 'document.value': { equals: id } },\n      ],\n    }\n  } else if (globalSlug) {\n    lockedDocumentQuery = { globalSlug: { equals: globalSlug } }\n  } else {\n    throw new Error('Either collectionSlug or globalSlug must be provided.')\n  }\n\n  if (!isLockingEnabled) {\n    return\n  }\n\n  // Only perform lock checks if overrideLock is false and locking is enabled\n  if (!overrideLock) {\n    const defaultLockErrorMessage = collectionSlug\n      ? `Document with ID ${id} is currently locked by another user and cannot be modified.`\n      : `Global document with slug \"${globalSlug}\" is currently locked by another user and cannot be modified.`\n\n    const finalLockErrorMessage = lockErrorMessage || defaultLockErrorMessage\n\n    const lockedDocumentResult: PaginatedDocs<JsonObject & TypeWithID> = await payload.db.find({\n      collection: lockedDocumentsCollectionSlug,\n      limit: 1,\n      pagination: false,\n      sort: '-updatedAt',\n      where: lockedDocumentQuery,\n    })\n\n    // If there's a locked document, check lock conditions\n    const lockedDoc = lockedDocumentResult?.docs[0]\n    if (lockedDoc) {\n      const lastEditedAt = new Date(lockedDoc?.updatedAt).getTime()\n      const now = new Date().getTime()\n\n      const lockDuration =\n        typeof lockDocumentsProp === 'object' ? lockDocumentsProp.duration : lockDurationDefault\n\n      const lockDurationInMilliseconds = lockDuration * 1000\n      const currentUserId = req.user?.id\n\n      // document is locked by another user and the lock hasn't expired\n      if (\n        lockedDoc.user?.value !== currentUserId &&\n        now - lastEditedAt <= lockDurationInMilliseconds\n      ) {\n        throw new Locked(finalLockErrorMessage)\n      }\n    }\n  }\n\n  // Perform the delete operation regardless of overrideLock status\n  await payload.db.deleteMany({\n    collection: lockedDocumentsCollectionSlug,\n    // Not passing req fails on postgres\n    req: payload.db.name === 'mongoose' ? undefined : req,\n    where: lockedDocumentQuery,\n  })\n}\n"],"names":["Locked","lockedDocumentsCollectionSlug","checkDocumentLockStatus","id","collectionSlug","globalSlug","lockDurationDefault","lockErrorMessage","overrideLock","req","payload","lockDocumentsProp","collections","config","lockDocuments","globals","find","g","slug","isLockingEnabled","lockedDocumentQuery","and","equals","Error","defaultLockErrorMessage","finalLockErrorMessage","lockedDocumentResult","db","collection","limit","pagination","sort","where","lockedDoc","docs","lastEditedAt","Date","updatedAt","getTime","now","lockDuration","duration","lockDurationInMilliseconds","currentUserId","user","value","deleteMany","name","undefined"],"mappings":"AAIA,SAASA,MAAM,QAAQ,qBAAoB;AAC3C,SAASC,6BAA6B,QAAQ,gCAA+B;AAY7E,OAAO,MAAMC,0BAA0B,OAAO,EAC5CC,EAAE,EACFC,cAAc,EACdC,UAAU,EACVC,sBAAsB,GAAG,EACzBC,gBAAgB,EAChBC,eAAe,IAAI,EACnBC,GAAG,EACyB;IAC5B,MAAM,EAAEC,OAAO,EAAE,GAAGD;IAEpB,sEAAsE;IACtE,MAAME,oBAAoBP,iBACtBM,QAAQE,WAAW,EAAE,CAACR,eAAe,EAAES,QAAQC,gBAC/CJ,QAAQG,MAAM,EAAEE,SAASC,KAAK,CAACC,IAAMA,EAAEC,IAAI,KAAKb,aAAaS;IAEjE,MAAMK,mBAAmBR,sBAAsB;IAE/C,IAAIS,sBAAsB,CAAC;IAE3B,IAAIhB,gBAAgB;QAClBgB,sBAAsB;YACpBC,KAAK;gBACH;oBAAE,uBAAuB;wBAAEC,QAAQlB;oBAAe;gBAAE;gBACpD;oBAAE,kBAAkB;wBAAEkB,QAAQnB;oBAAG;gBAAE;aACpC;QACH;IACF,OAAO,IAAIE,YAAY;QACrBe,sBAAsB;YAAEf,YAAY;gBAAEiB,QAAQjB;YAAW;QAAE;IAC7D,OAAO;QACL,MAAM,IAAIkB,MAAM;IAClB;IAEA,IAAI,CAACJ,kBAAkB;QACrB;IACF;IAEA,2EAA2E;IAC3E,IAAI,CAACX,cAAc;QACjB,MAAMgB,0BAA0BpB,iBAC5B,CAAC,iBAAiB,EAAED,GAAG,4DAA4D,CAAC,GACpF,CAAC,2BAA2B,EAAEE,WAAW,6DAA6D,CAAC;QAE3G,MAAMoB,wBAAwBlB,oBAAoBiB;QAElD,MAAME,uBAA+D,MAAMhB,QAAQiB,EAAE,CAACX,IAAI,CAAC;YACzFY,YAAY3B;YACZ4B,OAAO;YACPC,YAAY;YACZC,MAAM;YACNC,OAAOZ;QACT;QAEA,sDAAsD;QACtD,MAAMa,YAAYP,sBAAsBQ,IAAI,CAAC,EAAE;QAC/C,IAAID,WAAW;YACb,MAAME,eAAe,IAAIC,KAAKH,WAAWI,WAAWC,OAAO;YAC3D,MAAMC,MAAM,IAAIH,OAAOE,OAAO;YAE9B,MAAME,eACJ,OAAO7B,sBAAsB,WAAWA,kBAAkB8B,QAAQ,GAAGnC;YAEvE,MAAMoC,6BAA6BF,eAAe;YAClD,MAAMG,gBAAgBlC,IAAImC,IAAI,EAAEzC;YAEhC,iEAAiE;YACjE,IACE8B,UAAUW,IAAI,EAAEC,UAAUF,iBAC1BJ,MAAMJ,gBAAgBO,4BACtB;gBACA,MAAM,IAAI1C,OAAOyB;YACnB;QACF;IACF;IAEA,iEAAiE;IACjE,MAAMf,QAAQiB,EAAE,CAACmB,UAAU,CAAC;QAC1BlB,YAAY3B;QACZ,oCAAoC;QACpCQ,KAAKC,QAAQiB,EAAE,CAACoB,IAAI,KAAK,aAAaC,YAAYvC;QAClDuB,OAAOZ;IACT;AACF,EAAC"}