{"version":3,"sources":["../../src/utilities/getSafeRedirect.spec.ts"],"sourcesContent":["import { getSafeRedirect } from './getSafeRedirect'\n\nconst fallback = '/admin' // default fallback if the input is unsafe or invalid\n\ndescribe('getSafeRedirect', () => {\n  // Valid - safe redirect paths\n  it.each([['/dashboard'], ['/admin/settings'], ['/projects?id=123'], ['/hello-world']])(\n    'should allow safe relative path: %s',\n    (input) => {\n      // If the input is a clean relative path, it should be returned as-is\n      expect(getSafeRedirect({ redirectTo: input, fallbackTo: fallback })).toBe(input)\n    },\n  )\n\n  // Invalid types or empty inputs\n  it.each(['', null, undefined, 123, {}, []])(\n    'should fallback on invalid or non-string input: %s',\n    (input) => {\n      // If the input is not a valid string, it should return the fallback\n      expect(getSafeRedirect({ redirectTo: input as any, fallbackTo: fallback })).toBe(fallback)\n    },\n  )\n\n  // Unsafe redirect patterns\n  it.each([\n    '//example.com', // protocol-relative URL\n    '/javascript:alert(1)', // JavaScript scheme\n    '/JavaScript:alert(1)', // case-insensitive JavaScript\n    '/http://unknown.com', // disguised external redirect\n    '/https://unknown.com', // disguised external redirect\n    '/%2Funknown.com', // encoded slash — could resolve to //\n    '/\\\\/unknown.com', // escaped slash\n    '/\\\\\\\\unknown.com', // double escaped slashes\n    '/\\\\unknown.com', // single escaped slash\n    '%2F%2Funknown.com', // fully encoded protocol-relative path\n    '%2Fjavascript:alert(1)', // encoded JavaScript scheme\n  ])('should block unsafe redirect: %s', (input) => {\n    // All of these should return the fallback because they’re unsafe\n    expect(getSafeRedirect({ redirectTo: input, fallbackTo: fallback })).toBe(fallback)\n  })\n\n  // Input with extra spaces should still be properly handled\n  it('should trim whitespace before evaluating', () => {\n    // A valid path with surrounding spaces should still be accepted\n    expect(getSafeRedirect({ redirectTo: '   /dashboard   ', fallbackTo: fallback })).toBe(\n      '/dashboard',\n    )\n\n    // An unsafe path with spaces should still be rejected\n    expect(getSafeRedirect({ redirectTo: '   //example.com   ', fallbackTo: fallback })).toBe(\n      fallback,\n    )\n  })\n\n  // If decoding the input fails (e.g., invalid percent encoding), it should not crash\n  it('should return fallback on invalid encoding', () => {\n    expect(getSafeRedirect({ redirectTo: '%E0%A4%A', fallbackTo: fallback })).toBe(fallback)\n  })\n})\n"],"names":["getSafeRedirect","fallback","describe","it","each","input","expect","redirectTo","fallbackTo","toBe","undefined"],"mappings":"AAAA,SAASA,eAAe,QAAQ,oBAAmB;AAEnD,MAAMC,WAAW,SAAS,qDAAqD;;AAE/EC,SAAS,mBAAmB;IAC1B,8BAA8B;IAC9BC,GAAGC,IAAI,CAAC;QAAC;YAAC;SAAa;QAAE;YAAC;SAAkB;QAAE;YAAC;SAAmB;QAAE;YAAC;SAAe;KAAC,EACnF,uCACA,CAACC;QACC,qEAAqE;QACrEC,OAAON,gBAAgB;YAAEO,YAAYF;YAAOG,YAAYP;QAAS,IAAIQ,IAAI,CAACJ;IAC5E;IAGF,gCAAgC;IAChCF,GAAGC,IAAI,CAAC;QAAC;QAAI;QAAMM;QAAW;QAAK,CAAC;QAAG,EAAE;KAAC,EACxC,sDACA,CAACL;QACC,oEAAoE;QACpEC,OAAON,gBAAgB;YAAEO,YAAYF;YAAcG,YAAYP;QAAS,IAAIQ,IAAI,CAACR;IACnF;IAGF,2BAA2B;IAC3BE,GAAGC,IAAI,CAAC;QACN;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;KACD,EAAE,oCAAoC,CAACC;QACtC,iEAAiE;QACjEC,OAAON,gBAAgB;YAAEO,YAAYF;YAAOG,YAAYP;QAAS,IAAIQ,IAAI,CAACR;IAC5E;IAEA,2DAA2D;IAC3DE,GAAG,4CAA4C;QAC7C,gEAAgE;QAChEG,OAAON,gBAAgB;YAAEO,YAAY;YAAoBC,YAAYP;QAAS,IAAIQ,IAAI,CACpF;QAGF,sDAAsD;QACtDH,OAAON,gBAAgB;YAAEO,YAAY;YAAuBC,YAAYP;QAAS,IAAIQ,IAAI,CACvFR;IAEJ;IAEA,oFAAoF;IACpFE,GAAG,8CAA8C;QAC/CG,OAAON,gBAAgB;YAAEO,YAAY;YAAYC,YAAYP;QAAS,IAAIQ,IAAI,CAACR;IACjF;AACF"}