{"version":3,"sources":["../../src/utilities/addSelectGenericsToGeneretedTypes.ts"],"sourcesContent":["export const addSelectGenericsToGeneratedTypes = ({\n  compiledGeneratedTypes,\n}: {\n  compiledGeneratedTypes: string\n}) => {\n  const modifiedLines: string[] = []\n\n  let isCollectionsSelectToken = false\n  let isSelectTypeToken = false\n\n  for (const line of compiledGeneratedTypes.split('\\n')) {\n    let newLine = line\n    if (line === `  collectionsSelect: {` || line === `  globalsSelect: {`) {\n      isCollectionsSelectToken = true\n    }\n\n    if (isCollectionsSelectToken) {\n      if (line === '  };') {\n        isCollectionsSelectToken = false\n      } else {\n        // replace <posts: PostsSelect;> with <posts: PostsSelect<true> | PostsSelect<false;>\n        newLine = line.replace(/(['\"]?\\w+['\"]?):\\s*(\\w+);/g, (_, variable, type) => {\n          return `${variable}: ${type}<false> | ${type}<true>;`\n        })\n      }\n    }\n\n    // eslint-disable-next-line regexp/no-unused-capturing-group\n    if (line.match(/via the `definition` \"([\\w-]+_select)\"/g)) {\n      isSelectTypeToken = true\n    }\n\n    if (isSelectTypeToken) {\n      if (line.startsWith('export interface')) {\n        // add generic to the interface\n        newLine = line.replace(/(export interface\\s+\\w+)(\\s*\\{)/g, '$1<T extends boolean = true>$2')\n      } else {\n        newLine = line\n          // replace booleans with T on the line\n          .replace(/(?<!\\?)\\bboolean\\b/g, 'T')\n          // replace interface names like CtaBlock to CtaBlock<T>\n          .replace(\n            /\\b(\\w+)\\s*\\|\\s*(\\w+)\\b/g,\n            (_match, left, right) => `${left} | ${right}<${left}>`,\n          )\n\n        if (line === '}') {\n          isSelectTypeToken = false\n        }\n      }\n    }\n\n    modifiedLines.push(newLine)\n  }\n\n  return modifiedLines.join('\\n')\n}\n"],"names":["addSelectGenericsToGeneratedTypes","compiledGeneratedTypes","modifiedLines","isCollectionsSelectToken","isSelectTypeToken","line","split","newLine","replace","_","variable","type","match","startsWith","_match","left","right","push","join"],"mappings":"AAAA,OAAO,MAAMA,oCAAoC,CAAC,EAChDC,sBAAsB,EAGvB;IACC,MAAMC,gBAA0B,EAAE;IAElC,IAAIC,2BAA2B;IAC/B,IAAIC,oBAAoB;IAExB,KAAK,MAAMC,QAAQJ,uBAAuBK,KAAK,CAAC,MAAO;QACrD,IAAIC,UAAUF;QACd,IAAIA,SAAS,CAAC,sBAAsB,CAAC,IAAIA,SAAS,CAAC,kBAAkB,CAAC,EAAE;YACtEF,2BAA2B;QAC7B;QAEA,IAAIA,0BAA0B;YAC5B,IAAIE,SAAS,QAAQ;gBACnBF,2BAA2B;YAC7B,OAAO;gBACL,qFAAqF;gBACrFI,UAAUF,KAAKG,OAAO,CAAC,8BAA8B,CAACC,GAAGC,UAAUC;oBACjE,OAAO,GAAGD,SAAS,EAAE,EAAEC,KAAK,UAAU,EAAEA,KAAK,OAAO,CAAC;gBACvD;YACF;QACF;QAEA,4DAA4D;QAC5D,IAAIN,KAAKO,KAAK,CAAC,4CAA4C;YACzDR,oBAAoB;QACtB;QAEA,IAAIA,mBAAmB;YACrB,IAAIC,KAAKQ,UAAU,CAAC,qBAAqB;gBACvC,+BAA+B;gBAC/BN,UAAUF,KAAKG,OAAO,CAAC,oCAAoC;YAC7D,OAAO;gBACLD,UAAUF,IACR,sCAAsC;iBACrCG,OAAO,CAAC,uBAAuB,IAChC,uDAAuD;iBACtDA,OAAO,CACN,2BACA,CAACM,QAAQC,MAAMC,QAAU,GAAGD,KAAK,GAAG,EAAEC,MAAM,CAAC,EAAED,KAAK,CAAC,CAAC;gBAG1D,IAAIV,SAAS,KAAK;oBAChBD,oBAAoB;gBACtB;YACF;QACF;QAEAF,cAAce,IAAI,CAACV;IACrB;IAEA,OAAOL,cAAcgB,IAAI,CAAC;AAC5B,EAAC"}