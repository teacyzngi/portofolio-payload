{"version":3,"sources":["../../src/utilities/getFieldPermissions.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { SanitizedFieldPermissions, SanitizedFieldsPermissions } from '../auth/types.js'\nimport type { ClientField, Field } from '../fields/config/types.js'\nimport type { Operation } from '../types/index.js'\n\n/**\n * Gets read and operation-level permissions for a given field based on cascading field permissions.\n * @returns An object with the following properties:\n * - `operation`: Whether the user has permission to perform the operation on the field (`create` or `update`).\n * - `permissions`: The field-level permissions.\n * - `read`: Whether the user has permission to read the field.\n */\nexport const getFieldPermissions = ({\n  field,\n  operation,\n  parentName,\n  permissions,\n}: {\n  readonly field: ClientField | Field\n  readonly operation: Operation\n  readonly parentName: string\n  readonly permissions: SanitizedFieldPermissions | SanitizedFieldsPermissions\n}): {\n  operation: boolean\n  /**\n   * The field-level permissions. This can be equal to the permissions passed to the\n   * `getFieldPermissions` function if the field has no name.\n   */\n  permissions: SanitizedFieldPermissions | SanitizedFieldsPermissions\n  read: boolean\n} => ({\n  operation:\n    permissions === true ||\n    permissions?.[operation as keyof typeof permissions] === true ||\n    permissions?.[parentName as keyof typeof permissions] === true ||\n    ('name' in field &&\n      typeof permissions === 'object' &&\n      permissions?.[field.name as keyof typeof permissions] &&\n      (permissions[field.name as keyof typeof permissions] === true ||\n        (operation in (permissions as any)[field.name] &&\n          (permissions as any)[field.name][operation]))),\n\n  permissions:\n    permissions === undefined || permissions === null || permissions === true\n      ? true\n      : 'name' in field\n        ? (permissions as any)[field.name]\n        : permissions,\n  read:\n    permissions === true ||\n    permissions?.read === true ||\n    permissions?.[parentName as keyof typeof permissions] === true ||\n    ('name' in field &&\n      typeof permissions === 'object' &&\n      permissions?.[field.name as keyof typeof permissions] &&\n      ((permissions as any)[field.name] === true ||\n        ('read' in (permissions as any)[field.name] && (permissions as any)[field.name].read))),\n})\n"],"names":["getFieldPermissions","field","operation","parentName","permissions","name","undefined","read"],"mappings":"AAAA,qDAAqD,GAKrD;;;;;;CAMC,GACD,OAAO,MAAMA,sBAAsB,CAAC,EAClCC,KAAK,EACLC,SAAS,EACTC,UAAU,EACVC,WAAW,EAMZ,GAQK,CAAA;QACJF,WACEE,gBAAgB,QAChBA,aAAa,CAACF,UAAsC,KAAK,QACzDE,aAAa,CAACD,WAAuC,KAAK,QACzD,UAAUF,SACT,OAAOG,gBAAgB,YACvBA,aAAa,CAACH,MAAMI,IAAI,CAA6B,IACpDD,CAAAA,WAAW,CAACH,MAAMI,IAAI,CAA6B,KAAK,QACtDH,aAAa,AAACE,WAAmB,CAACH,MAAMI,IAAI,CAAC,IAC5C,AAACD,WAAmB,CAACH,MAAMI,IAAI,CAAC,CAACH,UAAU;QAEnDE,aACEA,gBAAgBE,aAAaF,gBAAgB,QAAQA,gBAAgB,OACjE,OACA,UAAUH,QACR,AAACG,WAAmB,CAACH,MAAMI,IAAI,CAAC,GAChCD;QACRG,MACEH,gBAAgB,QAChBA,aAAaG,SAAS,QACtBH,aAAa,CAACD,WAAuC,KAAK,QACzD,UAAUF,SACT,OAAOG,gBAAgB,YACvBA,aAAa,CAACH,MAAMI,IAAI,CAA6B,IACpD,CAAA,AAACD,WAAmB,CAACH,MAAMI,IAAI,CAAC,KAAK,QACnC,UAAU,AAACD,WAAmB,CAACH,MAAMI,IAAI,CAAC,IAAI,AAACD,WAAmB,CAACH,MAAMI,IAAI,CAAC,CAACE,IAAI;IAC5F,CAAA,EAAE"}