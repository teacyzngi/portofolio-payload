{"version":3,"sources":["../../src/utilities/sanitizeFallbackLocale.ts"],"sourcesContent":["import type { SanitizedLocalizationConfig } from '../config/types.js'\nimport type { TypedLocale } from '../index.js'\n\ninterface Args {\n  fallbackLocale: false | TypedLocale | TypedLocale[]\n  locale: string\n  localization: SanitizedLocalizationConfig\n}\n\n/**\n * Sanitizes fallbackLocale based on a provided fallbackLocale, locale and localization config\n *\n * Handles the following scenarios:\n * - determines if a fallback locale should be used\n * - determines if a locale specific fallback should be used in place of the default locale\n * - sets the fallbackLocale to 'null' if no fallback locale should be used\n */\nexport const sanitizeFallbackLocale = ({\n  fallbackLocale,\n  locale,\n  localization,\n}: Args): null | string => {\n  let hasFallbackLocale = false\n\n  if (fallbackLocale === undefined || fallbackLocale === null) {\n    hasFallbackLocale = Boolean(localization && localization.fallback)\n  }\n\n  if (\n    fallbackLocale &&\n    (Array.isArray(fallbackLocale) || !['false', 'none', 'null'].includes(fallbackLocale))\n  ) {\n    hasFallbackLocale = true\n  }\n\n  if (hasFallbackLocale) {\n    if (!fallbackLocale) {\n      // Check for locale specific fallback\n      const localeSpecificFallback =\n        localization && localization?.locales?.length\n          ? localization.locales.find((localeConfig) => localeConfig.code === locale)\n              ?.fallbackLocale\n          : undefined\n\n      if (localeSpecificFallback) {\n        fallbackLocale = localeSpecificFallback\n      } else {\n        // Use defaultLocale as fallback otherwise\n        if (localization && 'fallback' in localization && localization.fallback) {\n          fallbackLocale = localization.defaultLocale\n        }\n      }\n    }\n  } else {\n    fallbackLocale = null\n  }\n\n  return fallbackLocale as null | string\n}\n"],"names":["sanitizeFallbackLocale","fallbackLocale","locale","localization","hasFallbackLocale","undefined","Boolean","fallback","Array","isArray","includes","localeSpecificFallback","locales","length","find","localeConfig","code","defaultLocale"],"mappings":"AASA;;;;;;;CAOC,GACD,OAAO,MAAMA,yBAAyB,CAAC,EACrCC,cAAc,EACdC,MAAM,EACNC,YAAY,EACP;IACL,IAAIC,oBAAoB;IAExB,IAAIH,mBAAmBI,aAAaJ,mBAAmB,MAAM;QAC3DG,oBAAoBE,QAAQH,gBAAgBA,aAAaI,QAAQ;IACnE;IAEA,IACEN,kBACCO,CAAAA,MAAMC,OAAO,CAACR,mBAAmB,CAAC;QAAC;QAAS;QAAQ;KAAO,CAACS,QAAQ,CAACT,eAAc,GACpF;QACAG,oBAAoB;IACtB;IAEA,IAAIA,mBAAmB;QACrB,IAAI,CAACH,gBAAgB;YACnB,qCAAqC;YACrC,MAAMU,yBACJR,gBAAgBA,cAAcS,SAASC,SACnCV,aAAaS,OAAO,CAACE,IAAI,CAAC,CAACC,eAAiBA,aAAaC,IAAI,KAAKd,SAC9DD,iBACJI;YAEN,IAAIM,wBAAwB;gBAC1BV,iBAAiBU;YACnB,OAAO;gBACL,0CAA0C;gBAC1C,IAAIR,gBAAgB,cAAcA,gBAAgBA,aAAaI,QAAQ,EAAE;oBACvEN,iBAAiBE,aAAac,aAAa;gBAC7C;YACF;QACF;IACF,OAAO;QACLhB,iBAAiB;IACnB;IAEA,OAAOA;AACT,EAAC"}