{"version":3,"sources":["../../src/utilities/configToJSONSchema.spec.ts"],"sourcesContent":["import type { JSONSchema4 } from 'json-schema'\n\nimport type { Config } from '../config/types.js'\n\nimport { sanitizeConfig } from '../config/sanitize.js'\nimport { configToJSONSchema } from './configToJSONSchema.js'\nimport type { Block, BlocksField, RichTextField } from '../fields/config/types.js'\n\ndescribe('configToJSONSchema', () => {\n  it('should handle optional arrays with required fields', async () => {\n    // @ts-expect-error\n    const config: Config = {\n      collections: [\n        {\n          slug: 'test',\n          fields: [\n            {\n              name: 'someRequiredField',\n              type: 'array',\n              fields: [\n                {\n                  name: 'someRequiredField',\n                  type: 'text',\n                  required: true,\n                },\n              ],\n            },\n          ],\n          timestamps: false,\n        },\n      ],\n    }\n\n    const sanitizedConfig = await sanitizeConfig(config)\n    const schema = configToJSONSchema(sanitizedConfig, 'text')\n\n    expect(schema?.definitions?.test).toStrictEqual({\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        id: {\n          type: 'string',\n        },\n        someRequiredField: {\n          type: ['array', 'null'],\n          items: {\n            type: 'object',\n            additionalProperties: false,\n            properties: {\n              id: {\n                type: ['string', 'null'],\n              },\n              someRequiredField: {\n                type: 'string',\n              },\n            },\n            required: ['someRequiredField'],\n          },\n        },\n      },\n      required: ['id'],\n      title: 'Test',\n    })\n  })\n\n  it('should handle block fields with no blocks', async () => {\n    // @ts-expect-error\n    const config: Config = {\n      collections: [\n        {\n          slug: 'test',\n          fields: [\n            {\n              name: 'blockField',\n              type: 'blocks',\n              blocks: [],\n            },\n            {\n              name: 'blockFieldRequired',\n              type: 'blocks',\n              blocks: [],\n              required: true,\n            },\n            {\n              name: 'blockFieldWithFields',\n              type: 'blocks',\n              blocks: [\n                {\n                  slug: 'test',\n                  fields: [\n                    {\n                      name: 'field',\n                      type: 'text',\n                    },\n                  ],\n                },\n              ],\n            },\n            {\n              name: 'blockFieldWithFieldsRequired',\n              type: 'blocks',\n              blocks: [\n                {\n                  slug: 'test',\n                  fields: [\n                    {\n                      name: 'field',\n                      type: 'text',\n                      required: true,\n                    },\n                  ],\n                },\n              ],\n            },\n          ],\n          timestamps: false,\n        },\n      ],\n    }\n\n    const sanitizedConfig = await sanitizeConfig(config)\n    const schema = configToJSONSchema(sanitizedConfig, 'text')\n\n    expect(schema?.definitions?.test).toStrictEqual({\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        id: {\n          type: 'string',\n        },\n        blockField: {\n          type: ['array', 'null'],\n          items: {},\n        },\n        blockFieldRequired: {\n          type: 'array',\n          items: {},\n        },\n        blockFieldWithFields: {\n          type: ['array', 'null'],\n          items: {\n            oneOf: [\n              {\n                type: 'object',\n                additionalProperties: false,\n                properties: {\n                  id: {\n                    type: ['string', 'null'],\n                  },\n                  blockName: {\n                    type: ['string', 'null'],\n                  },\n                  blockType: {\n                    const: 'test',\n                  },\n                  field: {\n                    type: ['string', 'null'],\n                  },\n                },\n                required: ['blockType'],\n              },\n            ],\n          },\n        },\n        blockFieldWithFieldsRequired: {\n          type: ['array', 'null'],\n          items: {\n            oneOf: [\n              {\n                type: 'object',\n                additionalProperties: false,\n                properties: {\n                  id: {\n                    type: ['string', 'null'],\n                  },\n                  blockName: {\n                    type: ['string', 'null'],\n                  },\n                  blockType: {\n                    const: 'test',\n                  },\n                  field: {\n                    type: 'string',\n                  },\n                },\n                required: ['blockType', 'field'],\n              },\n            ],\n          },\n        },\n      },\n      required: ['id', 'blockFieldRequired'],\n      title: 'Test',\n    })\n  })\n\n  it('should handle tabs and named tabs with required fields', async () => {\n    // @ts-expect-error\n    const config: Config = {\n      collections: [\n        {\n          slug: 'test',\n          fields: [\n            {\n              type: 'tabs',\n              tabs: [\n                {\n                  fields: [\n                    {\n                      name: 'fieldInUnnamedTab',\n                      type: 'text',\n                    },\n                  ],\n                  label: 'unnamedTab',\n                },\n                {\n                  name: 'namedTab',\n                  fields: [\n                    {\n                      name: 'fieldInNamedTab',\n                      type: 'text',\n                    },\n                  ],\n                  label: 'namedTab',\n                },\n                {\n                  name: 'namedTabWithRequired',\n                  fields: [\n                    {\n                      name: 'fieldInNamedTab',\n                      type: 'text',\n                      required: true,\n                    },\n                  ],\n                  label: 'namedTabWithRequired',\n                },\n              ],\n            },\n          ],\n          timestamps: false,\n        },\n      ],\n    }\n\n    const sanitizedConfig = await sanitizeConfig(config)\n    const schema = configToJSONSchema(sanitizedConfig, 'text')\n\n    expect(schema?.definitions?.test).toStrictEqual({\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        id: {\n          type: 'string',\n        },\n        fieldInUnnamedTab: {\n          type: ['string', 'null'],\n        },\n        namedTab: {\n          type: 'object',\n          additionalProperties: false,\n          properties: {\n            fieldInNamedTab: {\n              type: ['string', 'null'],\n            },\n          },\n          required: [],\n        },\n        namedTabWithRequired: {\n          type: 'object',\n          additionalProperties: false,\n          properties: {\n            fieldInNamedTab: {\n              type: 'string',\n            },\n          },\n          required: ['fieldInNamedTab'],\n        },\n      },\n      required: ['id', 'namedTabWithRequired'],\n      title: 'Test',\n    })\n  })\n\n  it('should handle custom typescript schema and JSON field schema', async () => {\n    const customSchema: JSONSchema4 = {\n      type: 'object',\n      properties: {\n        id: {\n          type: 'number',\n        },\n        required: ['id'],\n      },\n    }\n\n    const config: Partial<Config> = {\n      collections: [\n        {\n          slug: 'test',\n          fields: [\n            {\n              name: 'withCustom',\n              type: 'text',\n              typescriptSchema: [() => customSchema],\n            },\n            {\n              name: 'jsonWithSchema',\n              type: 'json',\n              jsonSchema: {\n                fileMatch: ['a://b/foo.json'],\n                schema: customSchema,\n                uri: 'a://b/foo.json',\n              },\n            },\n          ],\n          timestamps: false,\n        },\n      ],\n    }\n\n    const sanitizedConfig = await sanitizeConfig(config as Config)\n    const schema = configToJSONSchema(sanitizedConfig, 'text')\n\n    expect(schema?.definitions?.test).toStrictEqual({\n      type: 'object',\n      additionalProperties: false,\n      properties: {\n        id: {\n          type: 'string',\n        },\n        jsonWithSchema: customSchema,\n        withCustom: customSchema,\n      },\n      required: ['id'],\n      title: 'Test',\n    })\n  })\n\n  it('should handle same block object being referenced in both collection and config.blocks', async () => {\n    const sharedBlock: Block = {\n      slug: 'sharedBlock',\n      interfaceName: 'SharedBlock',\n      fields: [\n        {\n          name: 'richText',\n          type: 'richText',\n          editor: () => {\n            // stub rich text editor\n            return {\n              CellComponent: '',\n              FieldComponent: '',\n              validate: () => true,\n            }\n          },\n        },\n      ],\n    }\n\n    // @ts-expect-error\n    const config: Config = {\n      blocks: [sharedBlock],\n      collections: [\n        {\n          slug: 'test',\n          fields: [\n            {\n              name: 'someBlockField',\n              type: 'blocks',\n              blocks: [sharedBlock],\n            },\n          ],\n          timestamps: false,\n        },\n      ],\n    }\n\n    // Ensure both rich text editor are sanitized\n    const sanitizedConfig = await sanitizeConfig(config)\n    expect(typeof (sanitizedConfig?.blocks?.[0]?.fields?.[0] as RichTextField)?.editor).toBe(\n      'object',\n    )\n    expect(\n      typeof (\n        (sanitizedConfig.collections[0].fields[0] as BlocksField)?.blocks?.[0]\n          ?.fields?.[0] as RichTextField\n      )?.editor,\n    ).toBe('object')\n\n    const schema = configToJSONSchema(sanitizedConfig, 'text')\n\n    expect(schema?.definitions?.test).toStrictEqual({\n      type: 'object',\n      additionalProperties: false,\n      title: 'Test',\n      properties: {\n        id: {\n          type: 'string',\n        },\n        someBlockField: {\n          type: ['array', 'null'],\n          items: {\n            oneOf: [\n              {\n                $ref: '#/definitions/SharedBlock',\n              },\n            ],\n          },\n        },\n      },\n      required: ['id'],\n    })\n\n    expect(schema?.definitions?.SharedBlock).toBeDefined()\n  })\n\n  it('should allow overriding required to false', async () => {\n    // @ts-expect-error\n    const config: Config = {\n      collections: [\n        {\n          slug: 'test',\n          fields: [\n            {\n              name: 'title',\n              type: 'text',\n              required: true,\n              defaultValue: 'test',\n              typescriptSchema: [\n                () => ({\n                  type: 'string',\n                  required: false,\n                }),\n              ],\n            },\n          ],\n          timestamps: false,\n        },\n      ],\n    }\n\n    const sanitizedConfig = await sanitizeConfig(config)\n    const schema = configToJSONSchema(sanitizedConfig, 'text')\n\n    // @ts-expect-error\n    expect(schema.definitions.test.properties.title.required).toStrictEqual(false)\n  })\n})\n"],"names":["sanitizeConfig","configToJSONSchema","describe","it","config","collections","slug","fields","name","type","required","timestamps","sanitizedConfig","schema","expect","definitions","test","toStrictEqual","additionalProperties","properties","id","someRequiredField","items","title","blocks","blockField","blockFieldRequired","blockFieldWithFields","oneOf","blockName","blockType","const","field","blockFieldWithFieldsRequired","tabs","label","fieldInUnnamedTab","namedTab","fieldInNamedTab","namedTabWithRequired","customSchema","typescriptSchema","jsonSchema","fileMatch","uri","jsonWithSchema","withCustom","sharedBlock","interfaceName","editor","CellComponent","FieldComponent","validate","toBe","someBlockField","$ref","SharedBlock","toBeDefined","defaultValue"],"mappings":"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"}