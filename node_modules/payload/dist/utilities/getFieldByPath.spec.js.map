{"version":3,"sources":["../../src/utilities/getFieldByPath.spec.ts"],"sourcesContent":["import { assert } from 'ts-essentials'\nimport { flattenAllFields } from './flattenAllFields.js'\nimport { getFieldByPath } from './getFieldByPath.js'\nimport type { FlattenedArrayField, FlattenedGroupField } from '../fields/config/types.js'\n\nconst fields = flattenAllFields({\n  fields: [\n    {\n      type: 'text',\n      name: 'text',\n    },\n    {\n      type: 'text',\n      name: 'textLocalized',\n      localized: true,\n    },\n    {\n      type: 'array',\n      name: 'array',\n      fields: [\n        {\n          name: 'text',\n          type: 'text',\n        },\n        {\n          name: 'textLocalized',\n          localized: true,\n          type: 'text',\n        },\n        {\n          name: 'group',\n          type: 'group',\n          fields: [\n            {\n              name: 'text',\n              type: 'text',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      type: 'tabs',\n      tabs: [\n        {\n          name: 'tab',\n          fields: [\n            {\n              type: 'array',\n              name: 'localizedArray',\n              localized: true,\n              fields: [\n                {\n                  name: 'text',\n                  type: 'text',\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    },\n  ],\n})\n\ndescribe('getFieldByPath', () => {\n  it('asserts getFieldByPath', () => {\n    const assert_1 = getFieldByPath({ fields, path: 'text' })\n    assert(assert_1)\n    expect(assert_1.field).toBe(fields[0])\n    expect(assert_1.pathHasLocalized).toBe(false)\n\n    const assert_2 = getFieldByPath({ fields, path: 'textLocalized' })\n    assert(assert_2)\n    expect(assert_2.field).toBe(fields[1])\n    expect(assert_2.pathHasLocalized).toBe(true)\n    expect(assert_2.localizedPath).toBe('textLocalized.<locale>')\n\n    const arrayField = fields[2] as FlattenedArrayField\n    const assert_3 = getFieldByPath({ fields, path: 'array' })\n    assert(assert_3)\n    expect(assert_3.field).toBe(arrayField)\n    expect(assert_3.pathHasLocalized).toBe(false)\n\n    const assert_4 = getFieldByPath({ fields, path: 'array.text' })\n    assert(assert_4)\n    expect(assert_4.field).toBe(arrayField.flattenedFields[0])\n    expect(assert_4.pathHasLocalized).toBe(false)\n\n    const assert_5 = getFieldByPath({ fields, path: 'array.textLocalized' })\n    assert(assert_5)\n    expect(assert_5.field).toBe(arrayField.flattenedFields[1])\n    expect(assert_5.pathHasLocalized).toBe(true)\n    expect(assert_5.localizedPath).toBe('array.textLocalized.<locale>')\n\n    const groupWithinArray = arrayField.flattenedFields[2] as FlattenedGroupField\n    const assert_6 = getFieldByPath({ fields, path: 'array.group.text' })\n    assert(assert_6)\n    expect(assert_6.field).toBe(groupWithinArray.flattenedFields[0])\n    expect(assert_6.pathHasLocalized).toBe(false)\n\n    const assert_7 = getFieldByPath({ fields, path: 'tab.localizedArray.text' })\n    assert(assert_7)\n    expect(assert_7.field).toBe((fields[3] as any).flattenedFields[0].flattenedFields[0])\n    expect(assert_7.pathHasLocalized).toBe(true)\n    expect(assert_7.localizedPath).toBe('tab.localizedArray.<locale>.text')\n  })\n})\n"],"names":["assert","flattenAllFields","getFieldByPath","fields","type","name","localized","tabs","describe","it","assert_1","path","expect","field","toBe","pathHasLocalized","assert_2","localizedPath","arrayField","assert_3","assert_4","flattenedFields","assert_5","groupWithinArray","assert_6","assert_7"],"mappings":"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"}