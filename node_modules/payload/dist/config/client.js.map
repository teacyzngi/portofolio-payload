{"version":3,"sources":["../../src/config/client.ts"],"sourcesContent":["import type { I18nClient } from '@payloadcms/translations'\nimport type { DeepPartial } from 'ts-essentials'\n\nimport type { ImportMap } from '../bin/generateImportMap/index.js'\nimport type { ClientBlock } from '../fields/config/types.js'\nimport type { BlockSlug, TypedUser } from '../index.js'\nimport type {\n  RootLivePreviewConfig,\n  SanitizedConfig,\n  ServerOnlyLivePreviewProperties,\n} from './types.js'\n\nimport {\n  type ClientCollectionConfig,\n  createClientCollectionConfigs,\n} from '../collections/config/client.js'\nimport { createClientBlocks } from '../fields/config/client.js'\nimport { type ClientGlobalConfig, createClientGlobalConfigs } from '../globals/config/client.js'\n\nexport type ServerOnlyRootProperties = keyof Pick<\n  SanitizedConfig,\n  | 'bin'\n  | 'cors'\n  | 'csrf'\n  | 'custom'\n  | 'db'\n  | 'editor'\n  | 'email'\n  | 'endpoints'\n  | 'graphQL'\n  | 'hooks'\n  | 'i18n'\n  | 'jobs'\n  | 'logger'\n  | 'onInit'\n  | 'plugins'\n  | 'queryPresets'\n  | 'secret'\n  | 'sharp'\n  | 'typescript'\n>\n\nexport type ServerOnlyRootAdminProperties = keyof Pick<SanitizedConfig['admin'], 'components'>\n\nexport type ClientConfig = {\n  admin: {\n    livePreview?: Omit<RootLivePreviewConfig, ServerOnlyLivePreviewProperties>\n  } & Omit<SanitizedConfig['admin'], 'components' | 'dependencies' | 'livePreview'>\n  blocks: ClientBlock[]\n  blocksMap: Record<BlockSlug, ClientBlock>\n  collections: ClientCollectionConfig[]\n  custom?: Record<string, any>\n  globals: ClientGlobalConfig[]\n  unauthenticated?: boolean\n} & Omit<SanitizedConfig, 'admin' | 'collections' | 'globals' | 'i18n' | ServerOnlyRootProperties>\n\nexport type UnauthenticatedClientConfig = {\n  admin: {\n    routes: ClientConfig['admin']['routes']\n    user: ClientConfig['admin']['user']\n  }\n  collections: [\n    {\n      auth: ClientCollectionConfig['auth']\n      slug: string\n    },\n  ]\n  globals: []\n  routes: ClientConfig['routes']\n  serverURL: ClientConfig['serverURL']\n  unauthenticated: true\n}\n\nexport const serverOnlyAdminConfigProperties: readonly Partial<ServerOnlyRootAdminProperties>[] = []\n\nexport const serverOnlyConfigProperties: readonly Partial<ServerOnlyRootProperties>[] = [\n  'endpoints',\n  'db',\n  'editor',\n  'plugins',\n  'sharp',\n  'onInit',\n  'secret',\n  'hooks',\n  'bin',\n  'i18n',\n  'typescript',\n  'cors',\n  'csrf',\n  'email',\n  'custom',\n  'graphQL',\n  'jobs',\n  'logger',\n  'queryPresets',\n  // `admin`, `onInit`, `localization`, `collections`, and `globals` are all handled separately\n]\n\nexport type CreateClientConfigArgs = {\n  config: SanitizedConfig\n  i18n: I18nClient\n  importMap: ImportMap\n  /**\n   * If unauthenticated, the client config will omit some sensitive properties\n   * such as field schemas, etc. This is useful for login and error pages where\n   * the page source should not contain this information.\n   *\n   * For example, allow `true` to generate a client config for the \"create first user\" page\n   * where there is no user yet, but the config should still be complete.\n   */\n  user: true | TypedUser\n}\n\nexport const createUnauthenticatedClientConfig = ({\n  clientConfig,\n}: {\n  /**\n   * Send the previously generated client config to share memory when applicable.\n   * E.g. the admin-enabled collection config can reference the existing collection rather than creating a new object.\n   */\n  clientConfig: ClientConfig\n}): UnauthenticatedClientConfig => {\n  /**\n   * To share memory, find the admin user collection from the existing client config.\n   */\n  const adminUserCollection = clientConfig.collections.find(\n    ({ slug }) => slug === clientConfig.admin.user,\n  )!\n\n  return {\n    admin: {\n      routes: clientConfig.admin.routes,\n      user: clientConfig.admin.user,\n    },\n    collections: [\n      {\n        slug: adminUserCollection.slug,\n        auth: adminUserCollection.auth,\n      },\n    ],\n    globals: [],\n    routes: clientConfig.routes,\n    serverURL: clientConfig.serverURL,\n    unauthenticated: true,\n  }\n}\n\nexport const createClientConfig = ({\n  config,\n  i18n,\n  importMap,\n}: CreateClientConfigArgs): ClientConfig => {\n  const clientConfig = {} as DeepPartial<ClientConfig>\n\n  for (const key in config) {\n    if (serverOnlyConfigProperties.includes(key as any)) {\n      continue\n    }\n\n    switch (key) {\n      case 'admin':\n        clientConfig.admin = {\n          autoLogin: config.admin.autoLogin,\n          avatar: config.admin.avatar,\n          custom: config.admin.custom,\n          dateFormat: config.admin.dateFormat,\n          importMap: config.admin.importMap,\n          meta: config.admin.meta,\n          routes: config.admin.routes,\n          theme: config.admin.theme,\n          timezones: config.admin.timezones,\n          toast: config.admin.toast,\n          user: config.admin.user,\n        }\n\n        if (config.admin.livePreview) {\n          clientConfig.admin.livePreview = {}\n\n          if (config.admin.livePreview.breakpoints) {\n            clientConfig.admin.livePreview.breakpoints = config.admin.livePreview.breakpoints\n          }\n\n          if (config.admin.livePreview.collections) {\n            clientConfig.admin.livePreview.collections = config.admin.livePreview.collections\n          }\n\n          if (config.admin.livePreview.globals) {\n            clientConfig.admin.livePreview.globals = config.admin.livePreview.globals\n          }\n        }\n\n        break\n\n      case 'blocks': {\n        ;(clientConfig.blocks as ClientBlock[]) = createClientBlocks({\n          blocks: config.blocks!,\n          defaultIDType: config.db.defaultIDType,\n          i18n,\n          importMap,\n        }).filter((block) => typeof block !== 'string') as ClientBlock[]\n\n        clientConfig.blocksMap = {}\n        if (clientConfig.blocks?.length) {\n          for (const block of clientConfig.blocks) {\n            if (!block?.slug) {\n              continue\n            }\n\n            clientConfig.blocksMap[block.slug] = block as ClientBlock\n          }\n        }\n\n        break\n      }\n\n      case 'collections':\n        ;(clientConfig.collections as ClientCollectionConfig[]) = createClientCollectionConfigs({\n          collections: config.collections,\n          defaultIDType: config.db.defaultIDType,\n          i18n,\n          importMap,\n        })\n\n        break\n\n      case 'folders':\n        if (config.folders) {\n          clientConfig.folders = {\n            slug: config.folders.slug,\n            browseByFolder: config.folders.browseByFolder,\n            debug: config.folders.debug,\n            fieldName: config.folders.fieldName,\n          }\n        }\n\n        break\n\n      case 'globals':\n        ;(clientConfig.globals as ClientGlobalConfig[]) = createClientGlobalConfigs({\n          defaultIDType: config.db.defaultIDType,\n          globals: config.globals,\n          i18n,\n          importMap,\n        })\n\n        break\n\n      case 'localization':\n        if (typeof config.localization === 'object' && config.localization) {\n          clientConfig.localization = {}\n\n          if (config.localization.defaultLocale) {\n            clientConfig.localization.defaultLocale = config.localization.defaultLocale\n          }\n\n          if (config.localization.defaultLocalePublishOption) {\n            clientConfig.localization.defaultLocalePublishOption =\n              config.localization.defaultLocalePublishOption\n          }\n\n          if (config.localization.fallback) {\n            clientConfig.localization.fallback = config.localization.fallback\n          }\n\n          if (config.localization.localeCodes) {\n            clientConfig.localization.localeCodes = config.localization.localeCodes\n          }\n\n          if (config.localization.locales) {\n            clientConfig.localization.locales = []\n\n            for (const locale of config.localization.locales) {\n              if (locale) {\n                const clientLocale: Partial<(typeof config.localization.locales)[0]> = {}\n\n                if (locale.code) {\n                  clientLocale.code = locale.code\n                }\n\n                if (locale.fallbackLocale) {\n                  clientLocale.fallbackLocale = locale.fallbackLocale\n                }\n\n                if (locale.label) {\n                  clientLocale.label = locale.label\n                }\n\n                if (locale.rtl) {\n                  clientLocale.rtl = locale.rtl\n                }\n\n                clientConfig.localization.locales.push(clientLocale)\n              }\n            }\n          }\n        }\n\n        break\n\n      default:\n        ;(clientConfig as any)[key] = config[key as keyof SanitizedConfig]\n    }\n  }\n\n  return clientConfig as ClientConfig\n}\n"],"names":["createClientCollectionConfigs","createClientBlocks","createClientGlobalConfigs","serverOnlyAdminConfigProperties","serverOnlyConfigProperties","createUnauthenticatedClientConfig","clientConfig","adminUserCollection","collections","find","slug","admin","user","routes","auth","globals","serverURL","unauthenticated","createClientConfig","config","i18n","importMap","key","includes","autoLogin","avatar","custom","dateFormat","meta","theme","timezones","toast","livePreview","breakpoints","blocks","defaultIDType","db","filter","block","blocksMap","length","folders","browseByFolder","debug","fieldName","localization","defaultLocale","defaultLocalePublishOption","fallback","localeCodes","locales","locale","clientLocale","code","fallbackLocale","label","rtl","push"],"mappings":"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"}