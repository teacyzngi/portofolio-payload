{"version":3,"sources":["../../../src/fields/config/reservedFieldNames.spec.ts"],"sourcesContent":["import type { Config } from '../../config/types.js'\nimport type { CollectionConfig, Field } from '../../index.js'\n\nimport { ReservedFieldName } from '../../errors/index.js'\nimport { sanitizeCollection } from '../../collections/config/sanitize.js'\n\ndescribe('reservedFieldNames - collections -', () => {\n  const config = {\n    collections: [],\n    globals: [],\n  } as Partial<Config>\n\n  describe('uploads -', () => {\n    const collectionWithUploads: CollectionConfig = {\n      slug: 'collection-with-uploads',\n      fields: [],\n      upload: true,\n    }\n\n    it('should throw on file', async () => {\n      const fields: Field[] = [\n        {\n          name: 'file',\n          type: 'text',\n          label: 'some-collection',\n        },\n      ]\n\n      await expect(async () => {\n        await sanitizeCollection(\n          // @ts-expect-error\n          {\n            ...config,\n            collections: [\n              {\n                ...collectionWithUploads,\n                fields,\n              },\n            ],\n          },\n          {\n            ...collectionWithUploads,\n            fields,\n          },\n        )\n      }).rejects.toThrow(ReservedFieldName)\n    })\n\n    it('should not throw on a custom field', async () => {\n      const fields: Field[] = [\n        {\n          name: 'customField',\n          type: 'text',\n          label: 'some-collection',\n        },\n      ]\n\n      await expect(async () => {\n        await sanitizeCollection(\n          // @ts-expect-error\n          {\n            ...config,\n            collections: [\n              {\n                ...collectionWithUploads,\n                fields,\n              },\n            ],\n          },\n          {\n            ...collectionWithUploads,\n            fields,\n          },\n        )\n      }).not.toThrow()\n    })\n  })\n\n  describe('auth -', () => {\n    const collectionWithAuth: CollectionConfig = {\n      slug: 'collection-with-auth',\n      auth: {\n        loginWithUsername: true,\n        useAPIKey: true,\n        verify: true,\n      },\n      fields: [],\n    }\n\n    it('should throw on hash', async () => {\n      const fields: Field[] = [\n        {\n          name: 'hash',\n          type: 'text',\n          label: 'some-collection',\n        },\n      ]\n\n      await expect(async () => {\n        await sanitizeCollection(\n          // @ts-expect-error\n          {\n            ...config,\n            collections: [\n              {\n                ...collectionWithAuth,\n                fields,\n              },\n            ],\n          },\n          {\n            ...collectionWithAuth,\n            fields,\n          },\n        )\n      }).rejects.toThrow(ReservedFieldName)\n    })\n\n    it('should throw on salt', async () => {\n      const fields: Field[] = [\n        {\n          name: 'salt',\n          type: 'text',\n          label: 'some-collection',\n        },\n      ]\n\n      await expect(async () => {\n        await sanitizeCollection(\n          // @ts-expect-error\n          {\n            ...config,\n            collections: [\n              {\n                ...collectionWithAuth,\n                fields,\n              },\n            ],\n          },\n          {\n            ...collectionWithAuth,\n            fields,\n          },\n        )\n      }).rejects.toThrow(ReservedFieldName)\n    })\n\n    it('should not throw on a custom field', async () => {\n      const fields: Field[] = [\n        {\n          name: 'customField',\n          type: 'text',\n          label: 'some-collection',\n        },\n      ]\n\n      await expect(async () => {\n        await sanitizeCollection(\n          // @ts-expect-error\n          {\n            ...config,\n            collections: [\n              {\n                ...collectionWithAuth,\n                fields,\n              },\n            ],\n          },\n          {\n            ...collectionWithAuth,\n            fields,\n          },\n        )\n      }).not.toThrow()\n    })\n  })\n})\n"],"names":["ReservedFieldName","sanitizeCollection","describe","config","collections","globals","collectionWithUploads","slug","fields","upload","it","name","type","label","expect","rejects","toThrow","not","collectionWithAuth","auth","loginWithUsername","useAPIKey","verify"],"mappings":"AAGA,SAASA,iBAAiB,QAAQ,wBAAuB;AACzD,SAASC,kBAAkB,QAAQ,uCAAsC;AAEzEC,SAAS,sCAAsC;IAC7C,MAAMC,SAAS;QACbC,aAAa,EAAE;QACfC,SAAS,EAAE;IACb;IAEAH,SAAS,aAAa;QACpB,MAAMI,wBAA0C;YAC9CC,MAAM;YACNC,QAAQ,EAAE;YACVC,QAAQ;QACV;QAEAC,GAAG,wBAAwB;YACzB,MAAMF,SAAkB;gBACtB;oBACEG,MAAM;oBACNC,MAAM;oBACNC,OAAO;gBACT;aACD;YAED,MAAMC,OAAO;gBACX,MAAMb,mBACJ,mBAAmB;gBACnB;oBACE,GAAGE,MAAM;oBACTC,aAAa;wBACX;4BACE,GAAGE,qBAAqB;4BACxBE;wBACF;qBACD;gBACH,GACA;oBACE,GAAGF,qBAAqB;oBACxBE;gBACF;YAEJ,GAAGO,OAAO,CAACC,OAAO,CAAChB;QACrB;QAEAU,GAAG,sCAAsC;YACvC,MAAMF,SAAkB;gBACtB;oBACEG,MAAM;oBACNC,MAAM;oBACNC,OAAO;gBACT;aACD;YAED,MAAMC,OAAO;gBACX,MAAMb,mBACJ,mBAAmB;gBACnB;oBACE,GAAGE,MAAM;oBACTC,aAAa;wBACX;4BACE,GAAGE,qBAAqB;4BACxBE;wBACF;qBACD;gBACH,GACA;oBACE,GAAGF,qBAAqB;oBACxBE;gBACF;YAEJ,GAAGS,GAAG,CAACD,OAAO;QAChB;IACF;IAEAd,SAAS,UAAU;QACjB,MAAMgB,qBAAuC;YAC3CX,MAAM;YACNY,MAAM;gBACJC,mBAAmB;gBACnBC,WAAW;gBACXC,QAAQ;YACV;YACAd,QAAQ,EAAE;QACZ;QAEAE,GAAG,wBAAwB;YACzB,MAAMF,SAAkB;gBACtB;oBACEG,MAAM;oBACNC,MAAM;oBACNC,OAAO;gBACT;aACD;YAED,MAAMC,OAAO;gBACX,MAAMb,mBACJ,mBAAmB;gBACnB;oBACE,GAAGE,MAAM;oBACTC,aAAa;wBACX;4BACE,GAAGc,kBAAkB;4BACrBV;wBACF;qBACD;gBACH,GACA;oBACE,GAAGU,kBAAkB;oBACrBV;gBACF;YAEJ,GAAGO,OAAO,CAACC,OAAO,CAAChB;QACrB;QAEAU,GAAG,wBAAwB;YACzB,MAAMF,SAAkB;gBACtB;oBACEG,MAAM;oBACNC,MAAM;oBACNC,OAAO;gBACT;aACD;YAED,MAAMC,OAAO;gBACX,MAAMb,mBACJ,mBAAmB;gBACnB;oBACE,GAAGE,MAAM;oBACTC,aAAa;wBACX;4BACE,GAAGc,kBAAkB;4BACrBV;wBACF;qBACD;gBACH,GACA;oBACE,GAAGU,kBAAkB;oBACrBV;gBACF;YAEJ,GAAGO,OAAO,CAACC,OAAO,CAAChB;QACrB;QAEAU,GAAG,sCAAsC;YACvC,MAAMF,SAAkB;gBACtB;oBACEG,MAAM;oBACNC,MAAM;oBACNC,OAAO;gBACT;aACD;YAED,MAAMC,OAAO;gBACX,MAAMb,mBACJ,mBAAmB;gBACnB;oBACE,GAAGE,MAAM;oBACTC,aAAa;wBACX;4BACE,GAAGc,kBAAkB;4BACrBV;wBACF;qBACD;gBACH,GACA;oBACE,GAAGU,kBAAkB;oBACrBV;gBACF;YAEJ,GAAGS,GAAG,CAACD,OAAO;QAChB;IACF;AACF"}