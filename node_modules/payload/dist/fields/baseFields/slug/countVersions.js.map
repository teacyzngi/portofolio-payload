{"version":3,"sources":["../../../../src/fields/baseFields/slug/countVersions.ts"],"sourcesContent":["import type {\n  CollectionSlug,\n  DefaultDocumentIDType,\n  GlobalSlug,\n  PayloadRequest,\n  Where,\n} from '../../../index.js'\n\n/**\n * This is a cross-entity way to count the number of versions for any given document.\n * It will work for both collections and globals.\n * @returns number of versions\n */\nexport const countVersions = async (args: {\n  collectionSlug?: CollectionSlug\n  globalSlug?: GlobalSlug\n  parentID?: DefaultDocumentIDType\n  req: PayloadRequest\n}): Promise<number> => {\n  const { collectionSlug, globalSlug, parentID, req } = args\n\n  let countFn\n\n  const where: Where = {\n    parent: {\n      equals: parentID,\n    },\n  }\n\n  if (collectionSlug) {\n    countFn = () =>\n      req.payload.countVersions({\n        collection: collectionSlug,\n        depth: 0,\n        where,\n      })\n  }\n\n  if (globalSlug) {\n    countFn = () =>\n      req.payload.countGlobalVersions({\n        depth: 0,\n        global: globalSlug,\n        where,\n      })\n  }\n\n  const res = countFn ? (await countFn()?.then((res) => res.totalDocs || 0)) || 0 : 0\n\n  return res\n}\n"],"names":["countVersions","args","collectionSlug","globalSlug","parentID","req","countFn","where","parent","equals","payload","collection","depth","countGlobalVersions","global","res","then","totalDocs"],"mappings":"AAQA;;;;CAIC,GACD,OAAO,MAAMA,gBAAgB,OAAOC;IAMlC,MAAM,EAAEC,cAAc,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,GAAG,EAAE,GAAGJ;IAEtD,IAAIK;IAEJ,MAAMC,QAAe;QACnBC,QAAQ;YACNC,QAAQL;QACV;IACF;IAEA,IAAIF,gBAAgB;QAClBI,UAAU,IACRD,IAAIK,OAAO,CAACV,aAAa,CAAC;gBACxBW,YAAYT;gBACZU,OAAO;gBACPL;YACF;IACJ;IAEA,IAAIJ,YAAY;QACdG,UAAU,IACRD,IAAIK,OAAO,CAACG,mBAAmB,CAAC;gBAC9BD,OAAO;gBACPE,QAAQX;gBACRI;YACF;IACJ;IAEA,MAAMQ,MAAMT,UAAU,AAAC,MAAMA,WAAWU,KAAK,CAACD,MAAQA,IAAIE,SAAS,IAAI,MAAO,IAAI;IAElF,OAAOF;AACT,EAAC"}