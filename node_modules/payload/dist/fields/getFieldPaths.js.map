{"version":3,"sources":["../../src/fields/getFieldPaths.ts"],"sourcesContent":["import type { ClientField, Field, Tab, TabAsFieldClient } from './config/types.js'\n\ntype Args = {\n  field: ClientField | Field | Tab | TabAsFieldClient\n  index: number\n  parentIndexPath: string\n  parentPath: string\n  parentSchemaPath: string\n}\n\ntype FieldPaths = {\n  /**\n   * A string of '-' separated indexes representing where\n   * to find this field in a given field schema array.\n   * It will always be complete and accurate.\n   */\n  indexPath: string\n  /**\n   * Path for this field relative to its position in the data.\n   */\n  path: string\n  /**\n   * Path for this field relative to its position in the schema.\n   */\n  schemaPath: string\n}\n\nexport function getFieldPaths({\n  field,\n  index,\n  parentIndexPath,\n  parentPath,\n  parentSchemaPath,\n}: Args): FieldPaths {\n  if ('name' in field) {\n    return {\n      indexPath: `${parentIndexPath ? parentIndexPath + '-' : ''}${index}`,\n      path: `${parentPath ? parentPath + '.' : ''}${field.name}`,\n      schemaPath: `${parentSchemaPath ? parentSchemaPath + '.' : ''}${field.name}`,\n    }\n  }\n\n  const indexSuffix = `_index-${`${parentIndexPath ? parentIndexPath + '-' : ''}${index}`}`\n\n  return {\n    indexPath: `${parentIndexPath ? parentIndexPath + '-' : ''}${index}`,\n    path: `${parentPath ? parentPath + '.' : ''}${indexSuffix}`,\n    schemaPath: `${parentSchemaPath ? parentSchemaPath + '.' : ''}${indexSuffix}`,\n  }\n}\n\n/**\n * @deprecated - will be removed in 4.0. Use `getFieldPaths` instead.\n */\nexport function getFieldPathsModified({\n  field,\n  index,\n  parentIndexPath,\n  parentPath,\n  parentSchemaPath,\n}: Args): FieldPaths {\n  const parentPathSegments = parentPath.split('.')\n\n  const parentIsUnnamed = parentPathSegments[parentPathSegments.length - 1]!.startsWith('_index-')\n\n  const parentWithoutIndex = parentIsUnnamed\n    ? parentPathSegments.slice(0, -1).join('.')\n    : parentPath\n\n  const parentPathToUse = parentIsUnnamed ? parentWithoutIndex : parentPath\n\n  if ('name' in field) {\n    return {\n      indexPath: '',\n      path: `${parentPathToUse ? parentPathToUse + '.' : ''}${field.name}`,\n      schemaPath: `${parentSchemaPath ? parentSchemaPath + '.' : ''}${field.name}`,\n    }\n  }\n\n  const indexSuffix = `_index-${`${parentIndexPath ? parentIndexPath + '-' : ''}${index}`}`\n\n  return {\n    indexPath: `${parentIndexPath ? parentIndexPath + '-' : ''}${index}`,\n    path: `${parentPathToUse ? parentPathToUse + '.' : ''}${indexSuffix}`,\n    schemaPath: `${!parentIsUnnamed && parentSchemaPath ? parentSchemaPath + '.' : ''}${indexSuffix}`,\n  }\n}\n"],"names":["getFieldPaths","field","index","parentIndexPath","parentPath","parentSchemaPath","indexPath","path","name","schemaPath","indexSuffix","getFieldPathsModified","parentPathSegments","split","parentIsUnnamed","length","startsWith","parentWithoutIndex","slice","join","parentPathToUse"],"mappings":"AA2BA,OAAO,SAASA,cAAc,EAC5BC,KAAK,EACLC,KAAK,EACLC,eAAe,EACfC,UAAU,EACVC,gBAAgB,EACX;IACL,IAAI,UAAUJ,OAAO;QACnB,OAAO;YACLK,WAAW,GAAGH,kBAAkBA,kBAAkB,MAAM,KAAKD,OAAO;YACpEK,MAAM,GAAGH,aAAaA,aAAa,MAAM,KAAKH,MAAMO,IAAI,EAAE;YAC1DC,YAAY,GAAGJ,mBAAmBA,mBAAmB,MAAM,KAAKJ,MAAMO,IAAI,EAAE;QAC9E;IACF;IAEA,MAAME,cAAc,CAAC,OAAO,EAAE,GAAGP,kBAAkBA,kBAAkB,MAAM,KAAKD,OAAO,EAAE;IAEzF,OAAO;QACLI,WAAW,GAAGH,kBAAkBA,kBAAkB,MAAM,KAAKD,OAAO;QACpEK,MAAM,GAAGH,aAAaA,aAAa,MAAM,KAAKM,aAAa;QAC3DD,YAAY,GAAGJ,mBAAmBA,mBAAmB,MAAM,KAAKK,aAAa;IAC/E;AACF;AAEA;;CAEC,GACD,OAAO,SAASC,sBAAsB,EACpCV,KAAK,EACLC,KAAK,EACLC,eAAe,EACfC,UAAU,EACVC,gBAAgB,EACX;IACL,MAAMO,qBAAqBR,WAAWS,KAAK,CAAC;IAE5C,MAAMC,kBAAkBF,kBAAkB,CAACA,mBAAmBG,MAAM,GAAG,EAAE,CAAEC,UAAU,CAAC;IAEtF,MAAMC,qBAAqBH,kBACvBF,mBAAmBM,KAAK,CAAC,GAAG,CAAC,GAAGC,IAAI,CAAC,OACrCf;IAEJ,MAAMgB,kBAAkBN,kBAAkBG,qBAAqBb;IAE/D,IAAI,UAAUH,OAAO;QACnB,OAAO;YACLK,WAAW;YACXC,MAAM,GAAGa,kBAAkBA,kBAAkB,MAAM,KAAKnB,MAAMO,IAAI,EAAE;YACpEC,YAAY,GAAGJ,mBAAmBA,mBAAmB,MAAM,KAAKJ,MAAMO,IAAI,EAAE;QAC9E;IACF;IAEA,MAAME,cAAc,CAAC,OAAO,EAAE,GAAGP,kBAAkBA,kBAAkB,MAAM,KAAKD,OAAO,EAAE;IAEzF,OAAO;QACLI,WAAW,GAAGH,kBAAkBA,kBAAkB,MAAM,KAAKD,OAAO;QACpEK,MAAM,GAAGa,kBAAkBA,kBAAkB,MAAM,KAAKV,aAAa;QACrED,YAAY,GAAG,CAACK,mBAAmBT,mBAAmBA,mBAAmB,MAAM,KAAKK,aAAa;IACnG;AACF"}