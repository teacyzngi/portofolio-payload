{"version":3,"sources":["../../src/uploads/mimeTypeValidator.spec.ts"],"sourcesContent":["import type { ValidateOptions } from '../fields/config/types'\n\nimport { mimeTypeValidator } from './mimeTypeValidator'\n\nconst options = { siblingData: { filename: 'file.xyz' } } as ValidateOptions<\n  undefined,\n  undefined,\n  undefined\n>\n\ndescribe('mimeTypeValidator', () => {\n  it('should validate single mimeType', () => {\n    const mimeTypes = ['image/png']\n    const validate = mimeTypeValidator(mimeTypes)\n    expect(validate('image/png', options)).toBe(true)\n  })\n\n  it('should validate multiple mimeTypes', () => {\n    const mimeTypes = ['image/png', 'application/pdf']\n    const validate = mimeTypeValidator(mimeTypes)\n    expect(validate('image/png', options)).toBe(true)\n    expect(validate('application/pdf', options)).toBe(true)\n  })\n\n  it('should validate using wildcard', () => {\n    const mimeTypes = ['image/*']\n    const validate = mimeTypeValidator(mimeTypes)\n    expect(validate('image/png', options)).toBe(true)\n    expect(validate('image/gif', options)).toBe(true)\n  })\n\n  it('should validate multiple wildcards', () => {\n    const mimeTypes = ['image/*', 'audio/*']\n    const validate = mimeTypeValidator(mimeTypes)\n    expect(validate('image/png', options)).toBe(true)\n    expect(validate('audio/mpeg', options)).toBe(true)\n  })\n\n  it('should not validate when unmatched', () => {\n    const mimeTypes = ['image/png']\n    const validate = mimeTypeValidator(mimeTypes)\n    expect(validate('audio/mpeg', options)).toBe(\"Invalid file type: 'audio/mpeg'\")\n  })\n\n  it('should not validate when unmatched - multiple mimeTypes', () => {\n    const mimeTypes = ['image/png', 'application/pdf']\n    const validate = mimeTypeValidator(mimeTypes)\n    expect(validate('audio/mpeg', options)).toBe(\"Invalid file type: 'audio/mpeg'\")\n  })\n\n  it('should not validate using wildcard - unmatched', () => {\n    const mimeTypes = ['image/*']\n    const validate = mimeTypeValidator(mimeTypes)\n    expect(validate('audio/mpeg', options)).toBe(\"Invalid file type: 'audio/mpeg'\")\n  })\n\n  it('should not validate multiple wildcards - unmatched', () => {\n    const mimeTypes = ['image/*', 'audio/*']\n    const validate = mimeTypeValidator(mimeTypes)\n    expect(validate('video/mp4', options)).toBe(\"Invalid file type: 'video/mp4'\")\n    expect(validate('application/pdf', options)).toBe(\"Invalid file type: 'application/pdf'\")\n  })\n\n  it('should not error when mimeType is missing', () => {\n    const mimeTypes = ['image/*', 'application/pdf']\n    const validate = mimeTypeValidator(mimeTypes)\n    let value\n    expect(validate(value, options)).toBe('Invalid file type')\n  })\n})\n"],"names":["mimeTypeValidator","options","siblingData","filename","describe","it","mimeTypes","validate","expect","toBe","value"],"mappings":"AAEA,SAASA,iBAAiB,QAAQ,sBAAqB;AAEvD,MAAMC,UAAU;IAAEC,aAAa;QAAEC,UAAU;IAAW;AAAE;AAMxDC,SAAS,qBAAqB;IAC5BC,GAAG,mCAAmC;QACpC,MAAMC,YAAY;YAAC;SAAY;QAC/B,MAAMC,WAAWP,kBAAkBM;QACnCE,OAAOD,SAAS,aAAaN,UAAUQ,IAAI,CAAC;IAC9C;IAEAJ,GAAG,sCAAsC;QACvC,MAAMC,YAAY;YAAC;YAAa;SAAkB;QAClD,MAAMC,WAAWP,kBAAkBM;QACnCE,OAAOD,SAAS,aAAaN,UAAUQ,IAAI,CAAC;QAC5CD,OAAOD,SAAS,mBAAmBN,UAAUQ,IAAI,CAAC;IACpD;IAEAJ,GAAG,kCAAkC;QACnC,MAAMC,YAAY;YAAC;SAAU;QAC7B,MAAMC,WAAWP,kBAAkBM;QACnCE,OAAOD,SAAS,aAAaN,UAAUQ,IAAI,CAAC;QAC5CD,OAAOD,SAAS,aAAaN,UAAUQ,IAAI,CAAC;IAC9C;IAEAJ,GAAG,sCAAsC;QACvC,MAAMC,YAAY;YAAC;YAAW;SAAU;QACxC,MAAMC,WAAWP,kBAAkBM;QACnCE,OAAOD,SAAS,aAAaN,UAAUQ,IAAI,CAAC;QAC5CD,OAAOD,SAAS,cAAcN,UAAUQ,IAAI,CAAC;IAC/C;IAEAJ,GAAG,sCAAsC;QACvC,MAAMC,YAAY;YAAC;SAAY;QAC/B,MAAMC,WAAWP,kBAAkBM;QACnCE,OAAOD,SAAS,cAAcN,UAAUQ,IAAI,CAAC;IAC/C;IAEAJ,GAAG,2DAA2D;QAC5D,MAAMC,YAAY;YAAC;YAAa;SAAkB;QAClD,MAAMC,WAAWP,kBAAkBM;QACnCE,OAAOD,SAAS,cAAcN,UAAUQ,IAAI,CAAC;IAC/C;IAEAJ,GAAG,kDAAkD;QACnD,MAAMC,YAAY;YAAC;SAAU;QAC7B,MAAMC,WAAWP,kBAAkBM;QACnCE,OAAOD,SAAS,cAAcN,UAAUQ,IAAI,CAAC;IAC/C;IAEAJ,GAAG,sDAAsD;QACvD,MAAMC,YAAY;YAAC;YAAW;SAAU;QACxC,MAAMC,WAAWP,kBAAkBM;QACnCE,OAAOD,SAAS,aAAaN,UAAUQ,IAAI,CAAC;QAC5CD,OAAOD,SAAS,mBAAmBN,UAAUQ,IAAI,CAAC;IACpD;IAEAJ,GAAG,6CAA6C;QAC9C,MAAMC,YAAY;YAAC;YAAW;SAAkB;QAChD,MAAMC,WAAWP,kBAAkBM;QACnC,IAAII;QACJF,OAAOD,SAASG,OAAOT,UAAUQ,IAAI,CAAC;IACxC;AACF"}