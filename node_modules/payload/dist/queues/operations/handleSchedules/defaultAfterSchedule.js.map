{"version":3,"sources":["../../../../src/queues/operations/handleSchedules/defaultAfterSchedule.ts"],"sourcesContent":["import type { AfterScheduleFn } from '../../config/types/index.js'\n\nimport { type JobStats, jobStatsGlobalSlug } from '../../config/global.js'\nimport { getCurrentDate } from '../../utilities/getCurrentDate.js'\n\ntype JobStatsScheduledRuns = NonNullable<\n  NonNullable<NonNullable<JobStats['stats']>['scheduledRuns']>['queues']\n>[string]\n\nexport const defaultAfterSchedule: AfterScheduleFn = async ({ jobStats, queueable, req }) => {\n  const existingQueuesConfig =\n    jobStats?.stats?.scheduledRuns?.queues?.[queueable.scheduleConfig.queue] || {}\n\n  const queueConfig: JobStatsScheduledRuns = {\n    ...existingQueuesConfig,\n  }\n  if (queueable.taskConfig) {\n    ;(queueConfig.tasks ??= {})[queueable.taskConfig.slug] = {\n      lastScheduledRun: getCurrentDate().toISOString(),\n    }\n  } else if (queueable.workflowConfig) {\n    ;(queueConfig.workflows ??= {})[queueable.workflowConfig.slug] = {\n      lastScheduledRun: getCurrentDate().toISOString(),\n    }\n  }\n\n  // Add to payload-jobs-stats global regardless of the status\n  if (jobStats) {\n    await req.payload.db.updateGlobal({\n      slug: jobStatsGlobalSlug,\n      data: {\n        ...(jobStats || {}),\n        stats: {\n          ...(jobStats?.stats || {}),\n          scheduledRuns: {\n            ...(jobStats?.stats?.scheduledRuns || {}),\n            queues: {\n              ...(jobStats?.stats?.scheduledRuns?.queues || {}),\n              [queueable.scheduleConfig.queue]: queueConfig,\n            },\n          },\n        },\n        updatedAt: new Date().toISOString(),\n      } as JobStats,\n      req,\n      returning: false,\n    })\n  } else {\n    await req.payload.db.createGlobal({\n      slug: jobStatsGlobalSlug,\n      data: {\n        createdAt: getCurrentDate().toISOString(),\n        stats: {\n          scheduledRuns: {\n            queues: {\n              [queueable.scheduleConfig.queue]: queueConfig,\n            },\n          },\n        },\n      } as JobStats,\n      req,\n      returning: false,\n    })\n  }\n}\n"],"names":["jobStatsGlobalSlug","getCurrentDate","defaultAfterSchedule","jobStats","queueable","req","existingQueuesConfig","stats","scheduledRuns","queues","scheduleConfig","queue","queueConfig","taskConfig","tasks","slug","lastScheduledRun","toISOString","workflowConfig","workflows","payload","db","updateGlobal","data","updatedAt","Date","returning","createGlobal","createdAt"],"mappings":"AAEA,SAAwBA,kBAAkB,QAAQ,yBAAwB;AAC1E,SAASC,cAAc,QAAQ,oCAAmC;AAMlE,OAAO,MAAMC,uBAAwC,OAAO,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,GAAG,EAAE;IACtF,MAAMC,uBACJH,UAAUI,OAAOC,eAAeC,QAAQ,CAACL,UAAUM,cAAc,CAACC,KAAK,CAAC,IAAI,CAAC;IAE/E,MAAMC,cAAqC;QACzC,GAAGN,oBAAoB;IACzB;IACA,IAAIF,UAAUS,UAAU,EAAE;;QACtBD,CAAAA,YAAYE,KAAK,KAAK,CAAC,CAAA,CAAE,CAACV,UAAUS,UAAU,CAACE,IAAI,CAAC,GAAG;YACvDC,kBAAkBf,iBAAiBgB,WAAW;QAChD;IACF,OAAO,IAAIb,UAAUc,cAAc,EAAE;;QACjCN,CAAAA,YAAYO,SAAS,KAAK,CAAC,CAAA,CAAE,CAACf,UAAUc,cAAc,CAACH,IAAI,CAAC,GAAG;YAC/DC,kBAAkBf,iBAAiBgB,WAAW;QAChD;IACF;IAEA,4DAA4D;IAC5D,IAAId,UAAU;QACZ,MAAME,IAAIe,OAAO,CAACC,EAAE,CAACC,YAAY,CAAC;YAChCP,MAAMf;YACNuB,MAAM;gBACJ,GAAIpB,YAAY,CAAC,CAAC;gBAClBI,OAAO;oBACL,GAAIJ,UAAUI,SAAS,CAAC,CAAC;oBACzBC,eAAe;wBACb,GAAIL,UAAUI,OAAOC,iBAAiB,CAAC,CAAC;wBACxCC,QAAQ;4BACN,GAAIN,UAAUI,OAAOC,eAAeC,UAAU,CAAC,CAAC;4BAChD,CAACL,UAAUM,cAAc,CAACC,KAAK,CAAC,EAAEC;wBACpC;oBACF;gBACF;gBACAY,WAAW,IAAIC,OAAOR,WAAW;YACnC;YACAZ;YACAqB,WAAW;QACb;IACF,OAAO;QACL,MAAMrB,IAAIe,OAAO,CAACC,EAAE,CAACM,YAAY,CAAC;YAChCZ,MAAMf;YACNuB,MAAM;gBACJK,WAAW3B,iBAAiBgB,WAAW;gBACvCV,OAAO;oBACLC,eAAe;wBACbC,QAAQ;4BACN,CAACL,UAAUM,cAAc,CAACC,KAAK,CAAC,EAAEC;wBACpC;oBACF;gBACF;YACF;YACAP;YACAqB,WAAW;QACb;IACF;AACF,EAAC"}