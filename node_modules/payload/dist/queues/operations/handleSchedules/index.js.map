{"version":3,"sources":["../../../../src/queues/operations/handleSchedules/index.ts"],"sourcesContent":["import { Cron } from 'croner'\n\nimport type { Job, TaskConfig, WorkflowConfig } from '../../../index.js'\nimport type { PayloadRequest } from '../../../types/index.js'\nimport type { BeforeScheduleFn, Queueable, ScheduleConfig } from '../../config/types/index.js'\n\nimport { type JobStats, jobStatsGlobalSlug } from '../../config/global.js'\nimport { defaultAfterSchedule } from './defaultAfterSchedule.js'\nimport { defaultBeforeSchedule } from './defaultBeforeSchedule.js'\nimport { getQueuesWithSchedules } from './getQueuesWithSchedules.js'\n\nexport type HandleSchedulesResult = {\n  errored: Queueable[]\n  queued: Queueable[]\n  skipped: Queueable[]\n}\n\n/**\n * On vercel, we cannot auto-schedule jobs using a Cron - instead, we'll use this same endpoint that can\n * also be called from Vercel Cron for auto-running jobs.\n *\n * The benefit of doing it like this instead of a separate endpoint is that we can run jobs immediately\n * after they are scheduled\n */\nexport async function handleSchedules({\n  allQueues = false,\n  queue: _queue,\n  req,\n}: {\n  /**\n   * If you want to schedule jobs from all queues, set this to true.\n   * If you set this to true, the `queue` property will be ignored.\n   *\n   * @default false\n   */\n  allQueues?: boolean\n  /**\n   * If you want to only schedule jobs that are set to schedule in a specific queue, set this to the queue name.\n   *\n   * @default jobs from the `default` queue will be executed.\n   */\n  queue?: string\n  req: PayloadRequest\n}): Promise<HandleSchedulesResult> {\n  const queue = _queue ?? 'default'\n  const jobsConfig = req.payload.config.jobs\n  const queuesWithSchedules = getQueuesWithSchedules({\n    jobsConfig,\n  })\n\n  const stats: JobStats = await req.payload.db.findGlobal({\n    slug: jobStatsGlobalSlug,\n    req,\n  })\n\n  /**\n   * Almost last step! Tasks and Workflows added here just need to be constraint-checked (e.g max. 1 running task etc.),\n   * before we can queue them\n   */\n  const queueables: Queueable[] = []\n\n  // Need to know when that particular job was last scheduled in that particular queue\n\n  for (const [queueName, { schedules }] of Object.entries(queuesWithSchedules)) {\n    if (!allQueues && queueName !== queue) {\n      // If a queue is specified, only schedule jobs for that queue\n      continue\n    }\n    for (const schedulable of schedules) {\n      const queuable = checkQueueableTimeConstraints({\n        queue: queueName,\n        scheduleConfig: schedulable.scheduleConfig,\n        stats,\n        taskConfig: schedulable.taskConfig,\n        workflowConfig: schedulable.workflowConfig,\n      })\n      if (queuable) {\n        queueables.push(queuable)\n      }\n    }\n  }\n\n  const queued: Queueable[] = []\n  const skipped: Queueable[] = []\n  const errored: Queueable[] = []\n\n  /**\n   * Now queue, but check for constraints (= beforeSchedule) first.\n   * Default constraint (= defaultBeforeSchedule): max. 1 running / scheduled task or workflow per queue\n   */\n  for (const queueable of queueables) {\n    const { status } = await scheduleQueueable({\n      queueable,\n      req,\n      stats,\n    })\n    switch (status) {\n      case 'error':\n        errored.push(queueable)\n        break\n      case 'skipped':\n        skipped.push(queueable)\n        break\n      case 'success':\n        queued.push(queueable)\n        break\n    }\n  }\n  return {\n    errored,\n    queued,\n    skipped,\n  }\n}\n\nexport function checkQueueableTimeConstraints({\n  queue,\n  scheduleConfig,\n  stats,\n  taskConfig,\n  workflowConfig,\n}: {\n  queue: string\n  scheduleConfig: ScheduleConfig\n  stats: JobStats\n  taskConfig?: TaskConfig\n  workflowConfig?: WorkflowConfig\n}): false | Queueable {\n  const queueScheduleStats = stats?.stats?.scheduledRuns?.queues?.[queue]\n\n  const lastScheduledRun = taskConfig\n    ? queueScheduleStats?.tasks?.[taskConfig.slug]?.lastScheduledRun\n    : queueScheduleStats?.workflows?.[workflowConfig?.slug ?? '']?.lastScheduledRun\n\n  const nextRun = new Cron(scheduleConfig.cron).nextRun(lastScheduledRun ?? undefined)\n\n  if (!nextRun) {\n    return false\n  }\n  return {\n    scheduleConfig,\n    taskConfig,\n    waitUntil: nextRun,\n    workflowConfig,\n  }\n}\n\nexport async function scheduleQueueable({\n  queueable,\n  req,\n  stats,\n}: {\n  queueable: Queueable\n  req: PayloadRequest\n  stats: JobStats\n}): Promise<{\n  job?: Job<false>\n  status: 'error' | 'skipped' | 'success'\n}> {\n  if (!queueable.taskConfig && !queueable.workflowConfig) {\n    return {\n      status: 'error',\n    }\n  }\n\n  const beforeScheduleFn = queueable.scheduleConfig.hooks?.beforeSchedule\n  const afterScheduleFN = queueable.scheduleConfig.hooks?.afterSchedule\n\n  try {\n    const beforeScheduleResult: Awaited<ReturnType<BeforeScheduleFn>> = await (\n      beforeScheduleFn ?? defaultBeforeSchedule\n    )({\n      // @ts-expect-error we know defaultBeforeSchedule will never call itself => pass null\n      defaultBeforeSchedule: beforeScheduleFn ? defaultBeforeSchedule : null,\n      jobStats: stats,\n      queueable,\n      req,\n    })\n\n    if (!beforeScheduleResult.shouldSchedule) {\n      await (afterScheduleFN ?? defaultAfterSchedule)({\n        // @ts-expect-error we know defaultAfterchedule will never call itself => pass null\n        defaultAfterSchedule: afterScheduleFN ? defaultAfterSchedule : null,\n        jobStats: stats,\n        queueable,\n        req,\n        status: 'skipped',\n      })\n      return {\n        status: 'skipped',\n      }\n    }\n\n    const job = (await req.payload.jobs.queue({\n      input: beforeScheduleResult.input ?? {},\n      meta: {\n        scheduled: true,\n      },\n      queue: queueable.scheduleConfig.queue,\n      req,\n      task: queueable?.taskConfig?.slug,\n      waitUntil: beforeScheduleResult.waitUntil,\n      workflow: queueable.workflowConfig?.slug,\n    } as Parameters<typeof req.payload.jobs.queue>[0])) as unknown as Job<false>\n\n    await (afterScheduleFN ?? defaultAfterSchedule)({\n      // @ts-expect-error we know defaultAfterchedule will never call itself => pass null\n      defaultAfterSchedule: afterScheduleFN ? defaultAfterSchedule : null,\n      job,\n      jobStats: stats,\n      queueable,\n      req,\n      status: 'success',\n    })\n    return {\n      status: 'success',\n    }\n  } catch (error) {\n    await (afterScheduleFN ?? defaultAfterSchedule)({\n      // @ts-expect-error we know defaultAfterchedule will never call itself => pass null\n      defaultAfterSchedule: afterScheduleFN ? defaultAfterSchedule : null,\n      error: error as Error,\n      jobStats: stats,\n      queueable,\n      req,\n      status: 'error',\n    })\n    return {\n      status: 'error',\n    }\n  }\n}\n"],"names":["Cron","jobStatsGlobalSlug","defaultAfterSchedule","defaultBeforeSchedule","getQueuesWithSchedules","handleSchedules","allQueues","queue","_queue","req","jobsConfig","payload","config","jobs","queuesWithSchedules","stats","db","findGlobal","slug","queueables","queueName","schedules","Object","entries","schedulable","queuable","checkQueueableTimeConstraints","scheduleConfig","taskConfig","workflowConfig","push","queued","skipped","errored","queueable","status","scheduleQueueable","queueScheduleStats","scheduledRuns","queues","lastScheduledRun","tasks","workflows","nextRun","cron","undefined","waitUntil","beforeScheduleFn","hooks","beforeSchedule","afterScheduleFN","afterSchedule","beforeScheduleResult","jobStats","shouldSchedule","job","input","meta","scheduled","task","workflow","error"],"mappings":"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"}