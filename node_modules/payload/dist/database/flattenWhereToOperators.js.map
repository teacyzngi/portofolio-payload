{"version":3,"sources":["../../src/database/flattenWhereToOperators.ts"],"sourcesContent":["import type { Where, WhereField } from '../types/index.js'\n\n/**\n * Take a where query and flatten it to all top-level operators\n */\nexport function flattenWhereToOperators(query: Where): WhereField[] {\n  const result: WhereField[] = []\n\n  for (const [key, value] of Object.entries(query)) {\n    if ((key === 'and' || key === 'or') && Array.isArray(value)) {\n      for (const subQuery of value) {\n        const flattenedSub = flattenWhereToOperators(subQuery)\n        result.push(...flattenedSub)\n      }\n    } else {\n      result.push(value as WhereField)\n    }\n  }\n\n  return result\n}\n"],"names":["flattenWhereToOperators","query","result","key","value","Object","entries","Array","isArray","subQuery","flattenedSub","push"],"mappings":"AAEA;;CAEC,GACD,OAAO,SAASA,wBAAwBC,KAAY;IAClD,MAAMC,SAAuB,EAAE;IAE/B,KAAK,MAAM,CAACC,KAAKC,MAAM,IAAIC,OAAOC,OAAO,CAACL,OAAQ;QAChD,IAAI,AAACE,CAAAA,QAAQ,SAASA,QAAQ,IAAG,KAAMI,MAAMC,OAAO,CAACJ,QAAQ;YAC3D,KAAK,MAAMK,YAAYL,MAAO;gBAC5B,MAAMM,eAAeV,wBAAwBS;gBAC7CP,OAAOS,IAAI,IAAID;YACjB;QACF,OAAO;YACLR,OAAOS,IAAI,CAACP;QACd;IACF;IAEA,OAAOF;AACT"}