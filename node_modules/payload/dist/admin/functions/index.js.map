{"version":3,"sources":["../../../src/admin/functions/index.ts"],"sourcesContent":["import type { ImportMap } from '../../bin/generateImportMap/index.js'\nimport type { SanitizedConfig } from '../../config/types.js'\nimport type { PaginatedDocs } from '../../database/types.js'\nimport type { CollectionSlug, ColumnPreference, FolderSortKeys } from '../../index.js'\nimport type { PayloadRequest, Sort, Where } from '../../types/index.js'\nimport type { ColumnsFromURL } from '../../utilities/transformColumnPreferences.js'\n\nexport type DefaultServerFunctionArgs = {\n  importMap: ImportMap\n  req: PayloadRequest\n}\n\nexport type ServerFunctionArgs = {\n  args: Record<string, unknown>\n  name: string\n}\n\nexport type ServerFunctionClientArgs = {\n  args: Record<string, unknown>\n  name: string\n}\n\nexport type ServerFunctionClient = (args: ServerFunctionClientArgs) => Promise<unknown> | unknown\n\nexport type ServerFunction<\n  TArgs extends object = Record<string, unknown>,\n  TReturnType = Promise<unknown> | unknown,\n> = (args: DefaultServerFunctionArgs & TArgs) => TReturnType\n\nexport type ServerFunctionConfig = {\n  fn: ServerFunction\n  name: string\n}\n\nexport type ServerFunctionHandler = (\n  args: {\n    config: Promise<SanitizedConfig> | SanitizedConfig\n    importMap: ImportMap\n    /**\n     * A map of server function names to their implementations. These are\n     * registered alongside the base server functions and can be called\n     * using the useServerFunctions() hook.\n     *\n     * @example\n     * const { serverFunction } = useServerFunctions()\n     *\n     * const callServerFunction = useCallback(() => {\n     *\n     *  async function call() {\n     *   const result = (await serverFunction({\n     *    name: 'record-key',\n     *    args: {\n     *     // Your args\n     *    },\n     *   }))\n     *\n     *   // Do someting with the result\n     *  }\n     *\n     *  void call()\n     * }, [serverFunction])\n     */\n    serverFunctions?: Record<string, ServerFunction<any, any>>\n  } & ServerFunctionClientArgs,\n) => Promise<unknown>\n\nexport type ListQuery = {\n  /*\n   * This is an of strings, i.e. `['title', '-slug']`\n   * Use `transformColumnsToPreferences` and `transformColumnsToSearchParams` to convert it back and forth\n   */\n  columns?: ColumnsFromURL\n  /*\n   * A string representing the field to group by, e.g. `category`\n   * A leading hyphen represents descending order, e.g. `-category`\n   */\n  groupBy?: string\n  limit?: number\n  page?: number\n  preset?: number | string\n  queryByGroup?: Record<string, ListQuery>\n  /*\n    When provided, is automatically injected into the `where` object\n  */\n  search?: string\n  sort?: Sort\n  where?: Where\n} & Record<string, unknown>\n\nexport type BuildTableStateArgs = {\n  /**\n   * If an array is provided, the table will be built to support polymorphic collections.\n   */\n  collectionSlug: string | string[]\n  columns?: ColumnPreference[]\n  data?: PaginatedDocs\n  /**\n   * @deprecated Use `data` instead\n   */\n  docs?: PaginatedDocs['docs']\n  enableRowSelections?: boolean\n  orderableFieldName: string\n  parent?: {\n    collectionSlug: CollectionSlug\n    id: number | string\n    joinPath: string\n  }\n  query?: ListQuery\n  renderRowTypes?: boolean\n  req: PayloadRequest\n  tableAppearance?: 'condensed' | 'default'\n}\n\nexport type BuildCollectionFolderViewResult = {\n  View: React.ReactNode\n}\n\nexport type GetFolderResultsComponentAndDataArgs = {\n  /**\n   * If true and no folderID is provided, only folders will be returned.\n   * If false, the results will include documents from the active collections.\n   */\n  browseByFolder: boolean\n  /**\n   * Used to filter document types to include in the results/display.\n   *\n   * i.e. ['folders', 'posts'] will only include folders and posts in the results.\n   *\n   * collectionsToQuery?\n   */\n  collectionsToDisplay: CollectionSlug[]\n  /**\n   * Used to determine how the results should be displayed.\n   */\n  displayAs: 'grid' | 'list'\n  /**\n   * Used to filter folders by the collections they are assigned to.\n   *\n   * i.e. ['posts'] will only include folders that are assigned to the posts collections.\n   */\n  folderAssignedCollections: CollectionSlug[]\n  /**\n   * The ID of the folder to filter results by.\n   */\n  folderID: number | string | undefined\n  req: PayloadRequest\n  /**\n   * The sort order for the results.\n   */\n  sort: FolderSortKeys\n}\n"],"names":[],"mappings":"AAqHA,WAiCC"}