{"version":3,"sources":["../../../src/admin/forms/Field.ts"],"sourcesContent":["import type { I18nClient } from '@payloadcms/translations'\nimport type { MarkOptional } from 'ts-essentials'\n\nimport type { SanitizedFieldPermissions } from '../../auth/types.js'\nimport type { ClientBlock, ClientField, Field } from '../../fields/config/types.js'\nimport type { TypedUser } from '../../index.js'\nimport type { DocumentPreferences } from '../../preferences/types.js'\nimport type { Operation, Payload, PayloadRequest } from '../../types/index.js'\nimport type {\n  ClientFieldSchemaMap,\n  ClientTab,\n  Data,\n  FieldSchemaMap,\n  FormField,\n  FormState,\n  RenderedField,\n} from '../types.js'\n\nexport type ClientFieldWithOptionalType = MarkOptional<ClientField, 'type'>\n\nexport type ClientComponentProps = {\n  customComponents?: FormField['customComponents']\n  field: ClientBlock | ClientField | ClientTab\n  /**\n   * Controls the rendering behavior of the fields, i.e. defers rendering until they intersect with the viewport using the Intersection Observer API.\n   *\n   * If true, the fields will be rendered immediately, rather than waiting for them to intersect with the viewport.\n   *\n   * If a number is provided, will immediately render fields _up to that index_.\n   */\n  forceRender?: boolean\n  permissions?: SanitizedFieldPermissions\n  readOnly?: boolean\n  renderedBlocks?: RenderedField[]\n  /**\n   * Used to extract field configs from a schemaMap.\n   * Does not include indexes.\n   *\n   * @default field.name\n   **/\n  schemaPath?: string\n}\n\n// TODO: maybe we can come up with a better name?\nexport type FieldPaths = {\n  /**\n   * @default ''\n   */\n  indexPath?: string\n  /**\n   * @default ''\n   */\n  parentPath?: string\n  /**\n   * The path built up to the point of the field\n   * excluding the field name.\n   *\n   * @default ''\n   */\n  parentSchemaPath?: string\n  /**\n   * A built up path to access FieldState in the form state.\n   * Nested fields will have a path that includes the parent field names\n   * if they are nested within a group, array, block or named tab.\n   *\n   * Collapsibles and unnamed tabs will have arbitrary paths\n   * that look like _index-0, _index-1, etc.\n   *\n   * Row fields will not have a path.\n   *\n   * @example 'parentGroupField.childTextField'\n   *\n   * @default field.name\n   */\n  path: string\n}\n\n/**\n * TODO: This should be renamed to `FieldComponentServerProps` or similar\n */\nexport type ServerComponentProps = {\n  clientField: ClientFieldWithOptionalType\n  clientFieldSchemaMap: ClientFieldSchemaMap\n  collectionSlug: string\n  data: Data\n  field: Field\n  /**\n   * The fieldSchemaMap that is created before form state is built is made available here.\n   */\n  fieldSchemaMap: FieldSchemaMap\n  /**\n   * Server Components will also have available to the entire form state.\n   * We cannot add it to ClientComponentProps as that would blow up the size of the props sent to the client.\n   */\n  formState: FormState\n  i18n: I18nClient\n  id?: number | string\n  operation: Operation\n  payload: Payload\n  permissions: SanitizedFieldPermissions\n  preferences: DocumentPreferences\n  req: PayloadRequest\n  siblingData: Data\n  user: TypedUser\n  value?: unknown\n}\n\nexport type ClientFieldBase<\n  TFieldClient extends ClientFieldWithOptionalType = ClientFieldWithOptionalType,\n> = {\n  readonly field: TFieldClient\n} & Omit<ClientComponentProps, 'customComponents' | 'field'>\n\nexport type ServerFieldBase<\n  TFieldServer extends Field = Field,\n  TFieldClient extends ClientFieldWithOptionalType = ClientFieldWithOptionalType,\n> = {\n  readonly clientField: TFieldClient\n  readonly field: TFieldServer\n} & Omit<ClientComponentProps, 'field'> &\n  Omit<ServerComponentProps, 'clientField' | 'field'>\n\nexport type FieldClientComponent<\n  TFieldClient extends ClientFieldWithOptionalType = ClientFieldWithOptionalType,\n  AdditionalProps extends Record<string, unknown> = Record<string, unknown>,\n> = React.ComponentType<AdditionalProps & ClientFieldBase<TFieldClient>>\n\nexport type FieldServerComponent<\n  TFieldServer extends Field = Field,\n  TFieldClient extends ClientFieldWithOptionalType = ClientFieldWithOptionalType,\n  AdditionalProps extends Record<string, unknown> = Record<string, unknown>,\n> = React.ComponentType<AdditionalProps & ServerFieldBase<TFieldServer, TFieldClient>>\n"],"names":[],"mappings":"AA+HA,WAIsF"}