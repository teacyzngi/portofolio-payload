{"version":3,"sources":["../../../src/admin/views/list.ts"],"sourcesContent":["import type { SanitizedCollectionPermission } from '../../auth/types.js'\nimport type {\n  CollectionAdminOptions,\n  SanitizedCollectionConfig,\n} from '../../collections/config/types.js'\nimport type { ServerProps } from '../../config/types.js'\nimport type { CollectionPreferences } from '../../preferences/types.js'\nimport type { QueryPreset } from '../../query-presets/types.js'\nimport type { ResolvedFilterOptions } from '../../types/index.js'\nimport type { Column } from '../elements/Table.js'\nimport type { Data, ViewTypes } from '../types.js'\n\nexport type ListViewSlots = {\n  AfterList?: React.ReactNode\n  AfterListTable?: React.ReactNode\n  BeforeList?: React.ReactNode\n  BeforeListTable?: React.ReactNode\n  Description?: React.ReactNode\n  listMenuItems?: React.ReactNode[]\n  Table: React.ReactNode | React.ReactNode[]\n}\n\n/**\n * The `ListViewServerPropsOnly` approach is needed to ensure type strictness when injecting component props\n * There is no way to do something like `Omit<ListViewServerProps, keyof ListViewClientProps>`\n * This is because `ListViewClientProps` is a union which is impossible to exclude from\n * Exporting explicitly defined `ListViewServerPropsOnly`, etc. allows for the strictest typing\n */\nexport type ListViewServerPropsOnly = {\n  collectionConfig: SanitizedCollectionConfig\n  data: Data\n  limit: number\n  listPreferences: CollectionPreferences\n  listSearchableFields: CollectionAdminOptions['listSearchableFields']\n} & ServerProps\n\nexport type ListViewServerProps = ListViewClientProps & ListViewServerPropsOnly\n\nexport type ListViewClientProps = {\n  beforeActions?: React.ReactNode[]\n  collectionSlug: SanitizedCollectionConfig['slug']\n  columnState: Column[]\n  disableBulkDelete?: boolean\n  disableBulkEdit?: boolean\n  disableQueryPresets?: boolean\n  enableRowSelections?: boolean\n  hasCreatePermission: boolean\n  hasDeletePermission?: boolean\n  /**\n   * @deprecated\n   */\n  listPreferences?: CollectionPreferences\n  newDocumentURL: string\n  /**\n   * @deprecated\n   */\n  preferenceKey?: string\n  queryPreset?: QueryPreset\n  queryPresetPermissions?: SanitizedCollectionPermission\n  renderedFilters?: Map<string, React.ReactNode>\n  resolvedFilterOptions?: Map<string, ResolvedFilterOptions>\n  viewType: ViewTypes\n} & ListViewSlots\n\nexport type ListViewSlotSharedClientProps = {\n  collectionSlug: SanitizedCollectionConfig['slug']\n  hasCreatePermission: boolean\n  hasDeletePermission?: boolean\n  newDocumentURL: string\n}\n\n// BeforeList\nexport type BeforeListClientProps = ListViewSlotSharedClientProps\nexport type BeforeListServerPropsOnly = {} & ListViewServerPropsOnly\nexport type BeforeListServerProps = BeforeListClientProps & BeforeListServerPropsOnly\n\n// BeforeListTable\nexport type BeforeListTableClientProps = ListViewSlotSharedClientProps\nexport type BeforeListTableServerPropsOnly = {} & ListViewServerPropsOnly\nexport type BeforeListTableServerProps = BeforeListTableClientProps & BeforeListTableServerPropsOnly\n\n// AfterList\nexport type AfterListClientProps = ListViewSlotSharedClientProps\nexport type AfterListServerPropsOnly = {} & ListViewServerPropsOnly\nexport type AfterListServerProps = AfterListClientProps & AfterListServerPropsOnly\n\n// AfterListTable\nexport type AfterListTableClientProps = ListViewSlotSharedClientProps\nexport type AfterListTableServerPropsOnly = {} & ListViewServerPropsOnly\nexport type AfterListTableServerProps = AfterListTableClientProps & AfterListTableServerPropsOnly\n"],"names":[],"mappings":"AAyFA,WAAiG"}