{"version":3,"sources":["../../../src/globals/config/client.ts"],"sourcesContent":["import type { I18nClient, TFunction } from '@payloadcms/translations'\n\nimport type { ImportMap } from '../../bin/generateImportMap/index.js'\nimport type {\n  LivePreviewConfig,\n  SanitizedConfig,\n  ServerOnlyLivePreviewProperties,\n} from '../../config/types.js'\nimport type { Payload } from '../../types/index.js'\nimport type { SanitizedGlobalConfig } from './types.js'\n\nimport { type ClientField, createClientFields } from '../../fields/config/client.js'\n\nexport type ServerOnlyGlobalProperties = keyof Pick<\n  SanitizedGlobalConfig,\n  'access' | 'admin' | 'custom' | 'endpoints' | 'fields' | 'flattenedFields' | 'hooks'\n>\n\nexport type ServerOnlyGlobalAdminProperties = keyof Pick<\n  SanitizedGlobalConfig['admin'],\n  'components' | 'hidden'\n>\n\nexport type ClientGlobalConfig = {\n  admin: {\n    components: null\n    livePreview?: Omit<LivePreviewConfig, ServerOnlyLivePreviewProperties>\n    preview?: boolean\n  } & Omit<\n    SanitizedGlobalConfig['admin'],\n    'components' | 'livePreview' | 'preview' | ServerOnlyGlobalAdminProperties\n  >\n  fields: ClientField[]\n} & Omit<SanitizedGlobalConfig, 'admin' | 'fields' | ServerOnlyGlobalProperties>\n\nconst serverOnlyProperties: Partial<ServerOnlyGlobalProperties>[] = [\n  'hooks',\n  'access',\n  'endpoints',\n  'custom',\n  'flattenedFields',\n  // `admin` is handled separately\n]\n\nconst serverOnlyGlobalAdminProperties: Partial<ServerOnlyGlobalAdminProperties>[] = [\n  'hidden',\n  'components',\n]\n\nexport const createClientGlobalConfig = ({\n  defaultIDType,\n  global,\n  i18n,\n  importMap,\n}: {\n  defaultIDType: Payload['config']['db']['defaultIDType']\n  global: SanitizedConfig['globals'][0]\n  i18n: I18nClient\n  importMap: ImportMap\n}): ClientGlobalConfig => {\n  const clientGlobal = {} as ClientGlobalConfig\n\n  for (const key in global) {\n    if (serverOnlyProperties.includes(key as any)) {\n      continue\n    }\n    switch (key) {\n      case 'admin':\n        if (!global.admin) {\n          break\n        }\n        clientGlobal.admin = {} as ClientGlobalConfig['admin']\n        for (const adminKey in global.admin) {\n          if (serverOnlyGlobalAdminProperties.includes(adminKey as any)) {\n            continue\n          }\n          switch (adminKey) {\n            case 'livePreview':\n              if (!global.admin.livePreview) {\n                break\n              }\n              clientGlobal.admin.livePreview = {}\n              if (global.admin.livePreview.breakpoints) {\n                clientGlobal.admin.livePreview.breakpoints = global.admin.livePreview.breakpoints\n              }\n              break\n            case 'preview':\n              clientGlobal.admin.preview = true\n              break\n            default:\n              ;(clientGlobal.admin as any)[adminKey] =\n                global.admin[adminKey as keyof typeof global.admin]\n          }\n        }\n        break\n      case 'fields':\n        clientGlobal.fields = createClientFields({\n          defaultIDType,\n          fields: global.fields,\n          i18n,\n          importMap,\n        })\n        break\n      case 'label':\n        clientGlobal.label =\n          typeof global.label === 'function'\n            ? global.label({ i18n, t: i18n.t as TFunction })\n            : global.label\n        break\n      default: {\n        ;(clientGlobal as any)[key] = global[key as keyof typeof global]\n        break\n      }\n    }\n  }\n\n  return clientGlobal\n}\n\nexport const createClientGlobalConfigs = ({\n  defaultIDType,\n  globals,\n  i18n,\n  importMap,\n}: {\n  defaultIDType: Payload['config']['db']['defaultIDType']\n  globals: SanitizedConfig['globals']\n  i18n: I18nClient\n  importMap: ImportMap\n}): ClientGlobalConfig[] => {\n  const clientGlobals = new Array(globals.length)\n\n  for (let i = 0; i < globals.length; i++) {\n    const global = globals[i]\n\n    clientGlobals[i] = createClientGlobalConfig({\n      defaultIDType,\n      global: global!,\n      i18n,\n      importMap,\n    })\n  }\n\n  return clientGlobals\n}\n"],"names":["createClientFields","serverOnlyProperties","serverOnlyGlobalAdminProperties","createClientGlobalConfig","defaultIDType","global","i18n","importMap","clientGlobal","key","includes","admin","adminKey","livePreview","breakpoints","preview","fields","label","t","createClientGlobalConfigs","globals","clientGlobals","Array","length","i"],"mappings":"AAWA,SAA2BA,kBAAkB,QAAQ,gCAA+B;AAwBpF,MAAMC,uBAA8D;IAClE;IACA;IACA;IACA;IACA;CAED;AAED,MAAMC,kCAA8E;IAClF;IACA;CACD;AAED,OAAO,MAAMC,2BAA2B,CAAC,EACvCC,aAAa,EACbC,MAAM,EACNC,IAAI,EACJC,SAAS,EAMV;IACC,MAAMC,eAAe,CAAC;IAEtB,IAAK,MAAMC,OAAOJ,OAAQ;QACxB,IAAIJ,qBAAqBS,QAAQ,CAACD,MAAa;YAC7C;QACF;QACA,OAAQA;YACN,KAAK;gBACH,IAAI,CAACJ,OAAOM,KAAK,EAAE;oBACjB;gBACF;gBACAH,aAAaG,KAAK,GAAG,CAAC;gBACtB,IAAK,MAAMC,YAAYP,OAAOM,KAAK,CAAE;oBACnC,IAAIT,gCAAgCQ,QAAQ,CAACE,WAAkB;wBAC7D;oBACF;oBACA,OAAQA;wBACN,KAAK;4BACH,IAAI,CAACP,OAAOM,KAAK,CAACE,WAAW,EAAE;gCAC7B;4BACF;4BACAL,aAAaG,KAAK,CAACE,WAAW,GAAG,CAAC;4BAClC,IAAIR,OAAOM,KAAK,CAACE,WAAW,CAACC,WAAW,EAAE;gCACxCN,aAAaG,KAAK,CAACE,WAAW,CAACC,WAAW,GAAGT,OAAOM,KAAK,CAACE,WAAW,CAACC,WAAW;4BACnF;4BACA;wBACF,KAAK;4BACHN,aAAaG,KAAK,CAACI,OAAO,GAAG;4BAC7B;wBACF;;4BACIP,aAAaG,KAAK,AAAQ,CAACC,SAAS,GACpCP,OAAOM,KAAK,CAACC,SAAsC;oBACzD;gBACF;gBACA;YACF,KAAK;gBACHJ,aAAaQ,MAAM,GAAGhB,mBAAmB;oBACvCI;oBACAY,QAAQX,OAAOW,MAAM;oBACrBV;oBACAC;gBACF;gBACA;YACF,KAAK;gBACHC,aAAaS,KAAK,GAChB,OAAOZ,OAAOY,KAAK,KAAK,aACpBZ,OAAOY,KAAK,CAAC;oBAAEX;oBAAMY,GAAGZ,KAAKY,CAAC;gBAAc,KAC5Cb,OAAOY,KAAK;gBAClB;YACF;gBAAS;;oBACLT,YAAoB,CAACC,IAAI,GAAGJ,MAAM,CAACI,IAA2B;oBAChE;gBACF;QACF;IACF;IAEA,OAAOD;AACT,EAAC;AAED,OAAO,MAAMW,4BAA4B,CAAC,EACxCf,aAAa,EACbgB,OAAO,EACPd,IAAI,EACJC,SAAS,EAMV;IACC,MAAMc,gBAAgB,IAAIC,MAAMF,QAAQG,MAAM;IAE9C,IAAK,IAAIC,IAAI,GAAGA,IAAIJ,QAAQG,MAAM,EAAEC,IAAK;QACvC,MAAMnB,SAASe,OAAO,CAACI,EAAE;QAEzBH,aAAa,CAACG,EAAE,GAAGrB,yBAAyB;YAC1CC;YACAC,QAAQA;YACRC;YACAC;QACF;IACF;IAEA,OAAOc;AACT,EAAC"}