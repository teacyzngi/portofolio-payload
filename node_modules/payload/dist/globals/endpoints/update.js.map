{"version":3,"sources":["../../../src/globals/endpoints/update.ts"],"sourcesContent":["import { status as httpStatus } from 'http-status'\n\nimport type { PayloadHandler } from '../../config/types.js'\n\nimport { getRequestGlobal } from '../../utilities/getRequestEntity.js'\nimport { headersWithCors } from '../../utilities/headersWithCors.js'\nimport { isNumber } from '../../utilities/isNumber.js'\nimport { sanitizePopulateParam } from '../../utilities/sanitizePopulateParam.js'\nimport { sanitizeSelectParam } from '../../utilities/sanitizeSelectParam.js'\nimport { updateOperation } from '../operations/update.js'\n\nexport const updateHandler: PayloadHandler = async (req) => {\n  const globalConfig = getRequestGlobal(req)\n  const { searchParams } = req\n  const depth = searchParams.get('depth')\n  const draft = searchParams.get('draft') === 'true'\n  const autosave = searchParams.get('autosave') === 'true'\n  const publishSpecificLocale = req.query.publishSpecificLocale as string | undefined\n\n  const result = await updateOperation({\n    slug: globalConfig.slug,\n    autosave,\n    data: req.data!,\n    depth: isNumber(depth) ? Number(depth) : undefined,\n    draft,\n    globalConfig,\n    populate: sanitizePopulateParam(req.query.populate),\n    publishSpecificLocale,\n    req,\n    select: sanitizeSelectParam(req.query.select),\n  })\n\n  let message = req.t('general:updatedSuccessfully')\n\n  if (draft) {\n    message = req.t('version:draftSavedSuccessfully')\n  }\n  if (autosave) {\n    message = req.t('version:autosavedSuccessfully')\n  }\n\n  return Response.json(\n    {\n      message,\n      result,\n    },\n    {\n      headers: headersWithCors({\n        headers: new Headers(),\n        req,\n      }),\n      status: httpStatus.OK,\n    },\n  )\n}\n"],"names":["status","httpStatus","getRequestGlobal","headersWithCors","isNumber","sanitizePopulateParam","sanitizeSelectParam","updateOperation","updateHandler","req","globalConfig","searchParams","depth","get","draft","autosave","publishSpecificLocale","query","result","slug","data","Number","undefined","populate","select","message","t","Response","json","headers","Headers","OK"],"mappings":"AAAA,SAASA,UAAUC,UAAU,QAAQ,cAAa;AAIlD,SAASC,gBAAgB,QAAQ,sCAAqC;AACtE,SAASC,eAAe,QAAQ,qCAAoC;AACpE,SAASC,QAAQ,QAAQ,8BAA6B;AACtD,SAASC,qBAAqB,QAAQ,2CAA0C;AAChF,SAASC,mBAAmB,QAAQ,yCAAwC;AAC5E,SAASC,eAAe,QAAQ,0BAAyB;AAEzD,OAAO,MAAMC,gBAAgC,OAAOC;IAClD,MAAMC,eAAeR,iBAAiBO;IACtC,MAAM,EAAEE,YAAY,EAAE,GAAGF;IACzB,MAAMG,QAAQD,aAAaE,GAAG,CAAC;IAC/B,MAAMC,QAAQH,aAAaE,GAAG,CAAC,aAAa;IAC5C,MAAME,WAAWJ,aAAaE,GAAG,CAAC,gBAAgB;IAClD,MAAMG,wBAAwBP,IAAIQ,KAAK,CAACD,qBAAqB;IAE7D,MAAME,SAAS,MAAMX,gBAAgB;QACnCY,MAAMT,aAAaS,IAAI;QACvBJ;QACAK,MAAMX,IAAIW,IAAI;QACdR,OAAOR,SAASQ,SAASS,OAAOT,SAASU;QACzCR;QACAJ;QACAa,UAAUlB,sBAAsBI,IAAIQ,KAAK,CAACM,QAAQ;QAClDP;QACAP;QACAe,QAAQlB,oBAAoBG,IAAIQ,KAAK,CAACO,MAAM;IAC9C;IAEA,IAAIC,UAAUhB,IAAIiB,CAAC,CAAC;IAEpB,IAAIZ,OAAO;QACTW,UAAUhB,IAAIiB,CAAC,CAAC;IAClB;IACA,IAAIX,UAAU;QACZU,UAAUhB,IAAIiB,CAAC,CAAC;IAClB;IAEA,OAAOC,SAASC,IAAI,CAClB;QACEH;QACAP;IACF,GACA;QACEW,SAAS1B,gBAAgB;YACvB0B,SAAS,IAAIC;YACbrB;QACF;QACAT,QAAQC,WAAW8B,EAAE;IACvB;AAEJ,EAAC"}