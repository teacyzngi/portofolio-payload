{"version":3,"sources":["../../../src/globals/operations/update.ts"],"sourcesContent":["import type { DeepPartial } from 'ts-essentials'\n\nimport type { GlobalSlug, JsonObject } from '../../index.js'\nimport type {\n  Operation,\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  TransformGlobalWithSelect,\n  Where,\n} from '../../types/index.js'\nimport type {\n  DataFromGlobalSlug,\n  SanitizedGlobalConfig,\n  SelectFromGlobalSlug,\n} from '../config/types.js'\n\nimport { executeAccess } from '../../auth/executeAccess.js'\nimport { afterChange } from '../../fields/hooks/afterChange/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { beforeChange } from '../../fields/hooks/beforeChange/index.js'\nimport { beforeValidate } from '../../fields/hooks/beforeValidate/index.js'\nimport { deepCopyObjectSimple } from '../../index.js'\nimport { checkDocumentLockStatus } from '../../utilities/checkDocumentLockStatus.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { getSelectMode } from '../../utilities/getSelectMode.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { sanitizeSelect } from '../../utilities/sanitizeSelect.js'\nimport { getLatestGlobalVersion } from '../../versions/getLatestGlobalVersion.js'\nimport { saveVersion } from '../../versions/saveVersion.js'\n\ntype Args<TSlug extends GlobalSlug> = {\n  autosave?: boolean\n  data: DeepPartial<Omit<DataFromGlobalSlug<TSlug>, 'id'>>\n  depth?: number\n  disableTransaction?: boolean\n  draft?: boolean\n  globalConfig: SanitizedGlobalConfig\n  overrideAccess?: boolean\n  overrideLock?: boolean\n  populate?: PopulateType\n  publishSpecificLocale?: string\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n  slug: string\n}\n\nexport const updateOperation = async <\n  TSlug extends GlobalSlug,\n  TSelect extends SelectFromGlobalSlug<TSlug>,\n>(\n  args: Args<TSlug>,\n): Promise<TransformGlobalWithSelect<TSlug, TSelect>> => {\n  if (args.publishSpecificLocale) {\n    args.req.locale = args.publishSpecificLocale\n  }\n\n  const {\n    slug,\n    autosave,\n    depth,\n    disableTransaction,\n    draft: draftArg,\n    globalConfig,\n    overrideAccess,\n    overrideLock,\n    populate,\n    publishSpecificLocale,\n    req: { fallbackLocale, locale, payload },\n    req,\n    select: incomingSelect,\n    showHiddenFields,\n  } = args\n\n  try {\n    const shouldCommit = !disableTransaction && (await initTransaction(req))\n\n    // /////////////////////////////////////\n    // beforeOperation - Global\n    // /////////////////////////////////////\n\n    if (globalConfig.hooks?.beforeOperation?.length) {\n      for (const hook of globalConfig.hooks.beforeOperation) {\n        args =\n          (await hook({\n            args,\n            context: args.req.context,\n            global: globalConfig,\n            operation: 'update',\n            req: args.req,\n          })) || args\n      }\n    }\n\n    let { data } = args\n\n    const shouldSaveDraft = Boolean(draftArg && globalConfig.versions?.drafts)\n\n    // /////////////////////////////////////\n    // 1. Retrieve and execute access\n    // /////////////////////////////////////\n\n    const accessResults = !overrideAccess\n      ? await executeAccess(\n          {\n            data,\n            req,\n          },\n          globalConfig.access.update,\n        )\n      : true\n\n    // /////////////////////////////////////\n    // Retrieve document\n    // /////////////////////////////////////\n\n    const query: Where = overrideAccess ? undefined! : (accessResults as Where)\n\n    // /////////////////////////////////////\n    // 2. Retrieve document\n    // /////////////////////////////////////\n    const globalVersion = await getLatestGlobalVersion({\n      slug,\n      config: globalConfig,\n      locale: locale!,\n      payload,\n      req,\n      where: query,\n    })\n    const { global, globalExists } = globalVersion || {}\n\n    let globalJSON: JsonObject = {}\n\n    if (globalVersion && globalVersion.global) {\n      globalJSON = deepCopyObjectSimple(global)\n\n      if (globalJSON._id) {\n        delete globalJSON._id\n      }\n    }\n\n    const originalDoc = await afterRead({\n      collection: null,\n      context: req.context,\n      depth: 0,\n      doc: deepCopyObjectSimple(globalJSON),\n      draft: draftArg!,\n      fallbackLocale: fallbackLocale!,\n      global: globalConfig,\n      locale: locale!,\n      overrideAccess: true,\n      req,\n      showHiddenFields: showHiddenFields!,\n    })\n\n    // ///////////////////////////////////////////\n    // Handle potentially locked global documents\n    // ///////////////////////////////////////////\n\n    await checkDocumentLockStatus({\n      globalSlug: slug,\n      lockErrorMessage: `Global with slug \"${slug}\" is currently locked by another user and cannot be updated.`,\n      overrideLock,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // beforeValidate - Fields\n    // /////////////////////////////////////\n\n    data = await beforeValidate({\n      collection: null,\n      context: req.context,\n      data,\n      doc: originalDoc,\n      global: globalConfig,\n      operation: 'update',\n      overrideAccess: overrideAccess!,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // beforeValidate - Global\n    // /////////////////////////////////////\n\n    if (globalConfig.hooks?.beforeValidate?.length) {\n      for (const hook of globalConfig.hooks.beforeValidate) {\n        data =\n          (await hook({\n            context: req.context,\n            data,\n            global: globalConfig,\n            originalDoc,\n            req,\n          })) || data\n      }\n    }\n\n    // /////////////////////////////////////\n    // beforeChange - Global\n    // /////////////////////////////////////\n\n    if (globalConfig.hooks?.beforeChange?.length) {\n      for (const hook of globalConfig.hooks.beforeChange) {\n        data =\n          (await hook({\n            context: req.context,\n            data,\n            global: globalConfig,\n            originalDoc,\n            req,\n          })) || data\n      }\n    }\n\n    // /////////////////////////////////////\n    // beforeChange - Fields\n    // /////////////////////////////////////\n    let publishedDocWithLocales = globalJSON\n    let versionSnapshotResult\n\n    const beforeChangeArgs = {\n      collection: null,\n      context: req.context,\n      data,\n      doc: originalDoc,\n      docWithLocales: undefined,\n      global: globalConfig,\n      operation: 'update' as Operation,\n      req,\n      skipValidation:\n        shouldSaveDraft && globalConfig.versions.drafts && !globalConfig.versions.drafts.validate,\n    }\n\n    if (publishSpecificLocale) {\n      const latestVersion = await getLatestGlobalVersion({\n        slug,\n        config: globalConfig,\n        payload,\n        published: true,\n        req,\n        where: query,\n      })\n\n      publishedDocWithLocales = latestVersion?.global || {}\n\n      versionSnapshotResult = await beforeChange({\n        ...beforeChangeArgs,\n        docWithLocales: globalJSON,\n      })\n    }\n\n    let result = await beforeChange({\n      ...beforeChangeArgs,\n      docWithLocales: publishedDocWithLocales,\n    })\n\n    // /////////////////////////////////////\n    // Update\n    // /////////////////////////////////////\n\n    const select = sanitizeSelect({\n      fields: globalConfig.flattenedFields,\n      forceSelect: globalConfig.forceSelect,\n      select: incomingSelect,\n    })\n\n    if (!shouldSaveDraft) {\n      // Ensure global has createdAt\n      if (!result.createdAt) {\n        result.createdAt = new Date().toISOString()\n      }\n\n      // Ensure updatedAt date is always updated\n      result.updatedAt = new Date().toISOString()\n\n      if (globalExists) {\n        result = await payload.db.updateGlobal({\n          slug,\n          data: result,\n          req,\n          select,\n        })\n      } else {\n        result = await payload.db.createGlobal({\n          slug,\n          data: result,\n          req,\n        })\n      }\n    }\n\n    // /////////////////////////////////////\n    // Create version\n    // /////////////////////////////////////\n    if (globalConfig.versions) {\n      const { globalType } = result\n      result = await saveVersion({\n        autosave,\n        docWithLocales: result,\n        draft: shouldSaveDraft,\n        global: globalConfig,\n        operation: 'update',\n        payload,\n        publishSpecificLocale,\n        req,\n        select,\n        snapshot: versionSnapshotResult,\n      })\n\n      result = {\n        ...result,\n        globalType,\n      }\n    }\n\n    // /////////////////////////////////////\n    // Execute globalType field if not selected\n    // /////////////////////////////////////\n    if (select && result.globalType) {\n      const selectMode = getSelectMode(select)\n      if (\n        (selectMode === 'include' && !select['globalType']) ||\n        (selectMode === 'exclude' && select['globalType'] === false)\n      ) {\n        delete result['globalType']\n      }\n    }\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result = await afterRead({\n      collection: null,\n      context: req.context,\n      depth: depth!,\n      doc: result,\n      draft: draftArg!,\n      fallbackLocale: null,\n      global: globalConfig,\n      locale: locale!,\n      overrideAccess: overrideAccess!,\n      populate,\n      req,\n      select,\n      showHiddenFields: showHiddenFields!,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Global\n    // /////////////////////////////////////\n\n    if (globalConfig.hooks?.afterRead?.length) {\n      for (const hook of globalConfig.hooks.afterRead) {\n        result =\n          (await hook({\n            context: req.context,\n            doc: result,\n            global: globalConfig,\n            req,\n          })) || result\n      }\n    }\n\n    // /////////////////////////////////////\n    // afterChange - Fields\n    // /////////////////////////////////////\n\n    result = await afterChange({\n      collection: null,\n      context: req.context,\n      data,\n      doc: result,\n      global: globalConfig,\n      operation: 'update',\n      previousDoc: originalDoc,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // afterChange - Global\n    // /////////////////////////////////////\n\n    if (globalConfig.hooks?.afterChange?.length) {\n      for (const hook of globalConfig.hooks.afterChange) {\n        result =\n          (await hook({\n            context: req.context,\n            data,\n            doc: result,\n            global: globalConfig,\n            previousDoc: originalDoc,\n            req,\n          })) || result\n      }\n    }\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    if (shouldCommit) {\n      await commitTransaction(req)\n    }\n\n    return result as TransformGlobalWithSelect<TSlug, TSelect>\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["executeAccess","afterChange","afterRead","beforeChange","beforeValidate","deepCopyObjectSimple","checkDocumentLockStatus","commitTransaction","getSelectMode","initTransaction","killTransaction","sanitizeSelect","getLatestGlobalVersion","saveVersion","updateOperation","args","publishSpecificLocale","req","locale","slug","autosave","depth","disableTransaction","draft","draftArg","globalConfig","overrideAccess","overrideLock","populate","fallbackLocale","payload","select","incomingSelect","showHiddenFields","shouldCommit","hooks","beforeOperation","length","hook","context","global","operation","data","shouldSaveDraft","Boolean","versions","drafts","accessResults","access","update","query","undefined","globalVersion","config","where","globalExists","globalJSON","_id","originalDoc","collection","doc","globalSlug","lockErrorMessage","publishedDocWithLocales","versionSnapshotResult","beforeChangeArgs","docWithLocales","skipValidation","validate","latestVersion","published","result","fields","flattenedFields","forceSelect","createdAt","Date","toISOString","updatedAt","db","updateGlobal","createGlobal","globalType","snapshot","selectMode","previousDoc","error"],"mappings":"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"}