{"version":3,"sources":["../../../src/globals/operations/findOne.ts"],"sourcesContent":["import type { AccessResult } from '../../config/types.js'\nimport type {\n  JsonObject,\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  Where,\n} from '../../types/index.js'\nimport type { SanitizedGlobalConfig } from '../config/types.js'\n\nimport { executeAccess } from '../../auth/executeAccess.js'\nimport { afterRead, type AfterReadArgs } from '../../fields/hooks/afterRead/index.js'\nimport { lockedDocumentsCollectionSlug } from '../../locked-documents/config.js'\nimport { getSelectMode } from '../../utilities/getSelectMode.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { sanitizeSelect } from '../../utilities/sanitizeSelect.js'\nimport { replaceWithDraftIfAvailable } from '../../versions/drafts/replaceWithDraftIfAvailable.js'\n\nexport type GlobalFindOneArgs = {\n  /**\n   * You may pass the document data directly which will skip the `db.findOne` database query.\n   * This is useful if you want to use this endpoint solely for running hooks and populating data.\n   */\n  data?: Record<string, unknown>\n  depth?: number\n  draft?: boolean\n  globalConfig: SanitizedGlobalConfig\n  includeLockStatus?: boolean\n  overrideAccess?: boolean\n  populate?: PopulateType\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n  slug: string\n} & Pick<AfterReadArgs<JsonObject>, 'flattenLocales'>\n\nexport const findOneOperation = async <T extends Record<string, unknown>>(\n  args: GlobalFindOneArgs,\n): Promise<T> => {\n  const {\n    slug,\n    depth,\n    draft: draftEnabled = false,\n    flattenLocales,\n    globalConfig,\n    includeLockStatus,\n    overrideAccess = false,\n    populate,\n    req: { fallbackLocale, locale },\n    req,\n    select: incomingSelect,\n    showHiddenFields,\n  } = args\n\n  try {\n    // /////////////////////////////////////\n    // beforeOperation - Global\n    // /////////////////////////////////////\n\n    if (globalConfig.hooks?.beforeOperation?.length) {\n      for (const hook of globalConfig.hooks.beforeOperation) {\n        args =\n          (await hook({\n            args,\n            context: args.req.context,\n            global: globalConfig,\n            operation: 'read',\n            req: args.req,\n          })) || args\n      }\n    }\n\n    // /////////////////////////////////////\n    // Retrieve and execute access\n    // /////////////////////////////////////\n\n    let accessResult!: AccessResult\n\n    if (!overrideAccess) {\n      accessResult = await executeAccess({ req }, globalConfig.access.read)\n    }\n\n    const select = sanitizeSelect({\n      fields: globalConfig.flattenedFields,\n      forceSelect: globalConfig.forceSelect,\n      select: incomingSelect,\n    })\n\n    // /////////////////////////////////////\n    // Perform database operation\n    // /////////////////////////////////////\n\n    let doc =\n      (args.data as any) ??\n      (await req.payload.db.findGlobal({\n        slug,\n        locale: locale!,\n        req,\n        select,\n        where: overrideAccess ? undefined : (accessResult as Where),\n      }))\n    if (!doc) {\n      doc = {}\n    }\n\n    // /////////////////////////////////////\n    // Include Lock Status if required\n    // /////////////////////////////////////\n    if (includeLockStatus && slug) {\n      let lockStatus: JsonObject | null = null\n\n      try {\n        const lockDocumentsProp = globalConfig?.lockDocuments\n\n        const lockDurationDefault = 300 // Default 5 minutes in seconds\n        const lockDuration =\n          typeof lockDocumentsProp === 'object' ? lockDocumentsProp.duration : lockDurationDefault\n        const lockDurationInMilliseconds = lockDuration * 1000\n\n        const lockedDocument = await req.payload.find({\n          collection: lockedDocumentsCollectionSlug,\n          depth: 1,\n          limit: 1,\n          overrideAccess: false,\n          pagination: false,\n          req,\n          where: {\n            and: [\n              {\n                globalSlug: {\n                  equals: slug,\n                },\n              },\n              {\n                updatedAt: {\n                  greater_than: new Date(new Date().getTime() - lockDurationInMilliseconds),\n                },\n              },\n            ],\n          },\n        })\n\n        if (lockedDocument && lockedDocument.docs.length > 0) {\n          lockStatus = lockedDocument.docs[0]!\n        }\n      } catch {\n        // swallow error\n      }\n\n      doc._isLocked = !!lockStatus\n      doc._userEditing = lockStatus?.user?.value ?? null\n    }\n\n    // /////////////////////////////////////\n    // Replace document with draft if available\n    // /////////////////////////////////////\n\n    if (globalConfig.versions?.drafts && draftEnabled) {\n      doc = await replaceWithDraftIfAvailable({\n        accessResult,\n        doc,\n        entity: globalConfig,\n        entityType: 'global',\n        overrideAccess,\n        req,\n        select,\n      })\n    }\n\n    // /////////////////////////////////////\n    // Execute before global hook\n    // /////////////////////////////////////\n\n    if (globalConfig.hooks?.beforeRead?.length) {\n      for (const hook of globalConfig.hooks.beforeRead) {\n        doc =\n          (await hook({\n            context: req.context,\n            doc,\n            global: globalConfig,\n            req,\n          })) || doc\n      }\n    }\n\n    // /////////////////////////////////////\n    // Execute globalType field if not selected\n    // /////////////////////////////////////\n    if (select && doc.globalType) {\n      const selectMode = getSelectMode(select)\n      if (\n        (selectMode === 'include' && !select['globalType']) ||\n        (selectMode === 'exclude' && select['globalType'] === false)\n      ) {\n        delete doc['globalType']\n      }\n    }\n\n    // /////////////////////////////////////\n    // Execute field-level hooks and access\n    // /////////////////////////////////////\n\n    doc = await afterRead({\n      collection: null,\n      context: req.context,\n      depth: depth!,\n      doc,\n      draft: draftEnabled,\n      fallbackLocale: fallbackLocale!,\n      flattenLocales,\n      global: globalConfig,\n      locale: locale!,\n      overrideAccess,\n      populate,\n      req,\n      select,\n      showHiddenFields: showHiddenFields!,\n    })\n\n    // /////////////////////////////////////\n    // Execute after global hook\n    // /////////////////////////////////////\n\n    if (globalConfig.hooks?.afterRead?.length) {\n      for (const hook of globalConfig.hooks.afterRead) {\n        doc =\n          (await hook({\n            context: req.context,\n            doc,\n            global: globalConfig,\n            req,\n          })) || doc\n      }\n    }\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    return doc\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["executeAccess","afterRead","lockedDocumentsCollectionSlug","getSelectMode","killTransaction","sanitizeSelect","replaceWithDraftIfAvailable","findOneOperation","args","slug","depth","draft","draftEnabled","flattenLocales","globalConfig","includeLockStatus","overrideAccess","populate","req","fallbackLocale","locale","select","incomingSelect","showHiddenFields","hooks","beforeOperation","length","hook","context","global","operation","accessResult","access","read","fields","flattenedFields","forceSelect","doc","data","payload","db","findGlobal","where","undefined","lockStatus","lockDocumentsProp","lockDocuments","lockDurationDefault","lockDuration","duration","lockDurationInMilliseconds","lockedDocument","find","collection","limit","pagination","and","globalSlug","equals","updatedAt","greater_than","Date","getTime","docs","_isLocked","_userEditing","user","value","versions","drafts","entity","entityType","beforeRead","globalType","selectMode","error"],"mappings":"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"}