{"version":3,"sources":["../../../../src/globals/operations/local/restoreVersion.ts"],"sourcesContent":["import type { GlobalSlug, Payload, RequestContext, TypedLocale } from '../../../index.js'\nimport type { Document, PayloadRequest, PopulateType } from '../../../types/index.js'\nimport type { CreateLocalReqOptions } from '../../../utilities/createLocalReq.js'\nimport type { DataFromGlobalSlug } from '../../config/types.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { restoreVersionOperation } from '../restoreVersion.js'\n\nexport type Options<TSlug extends GlobalSlug> = {\n  /**\n   * [Context](https://payloadcms.com/docs/hooks/context), which will then be passed to `context` and `req.context`,\n   * which can be read by hooks. Useful if you want to pass additional information to the hooks which\n   * shouldn't be necessarily part of the document, for example a `triggerBeforeChange` option which can be read by the BeforeChange hook\n   * to determine if it should run or not.\n   */\n  context?: RequestContext\n  /**\n   * [Control auto-population](https://payloadcms.com/docs/queries/depth) of nested relationship and upload fields.\n   */\n  depth?: number\n  /**\n   * Specify a [fallback locale](https://payloadcms.com/docs/configuration/localization) to use for any returned documents.\n   */\n  fallbackLocale?: false | TypedLocale\n  /**\n   * The ID of the version to restore.\n   */\n  id: string\n  /**\n   * Specify [locale](https://payloadcms.com/docs/configuration/localization) for any returned documents.\n   */\n  locale?: TypedLocale\n  /**\n   * Skip access control.\n   * Set to `false` if you want to respect Access Control for the operation, for example when fetching data for the front-end.\n   * @default true\n   */\n  overrideAccess?: boolean\n  /**\n   * Specify [populate](https://payloadcms.com/docs/queries/select#populate) to control which fields to include to the result from populated documents.\n   */\n  populate?: PopulateType\n  /**\n   * The `PayloadRequest` object. You can pass it to thread the current [transaction](https://payloadcms.com/docs/database/transactions), user and locale to the operation.\n   * Recommended to pass when using the Local API from hooks, as usually you want to execute the operation within the current transaction.\n   */\n  req?: Partial<PayloadRequest>\n  /**\n   * Opt-in to receiving hidden fields. By default, they are hidden from returned documents in accordance to your config.\n   * @default false\n   */\n  showHiddenFields?: boolean\n  /**\n   * the Global slug to operate against.\n   */\n  slug: TSlug\n  /**\n   * If you set `overrideAccess` to `false`, you can pass a user to use against the access control checks.\n   */\n  user?: Document\n}\n\nexport async function restoreGlobalVersionLocal<TSlug extends GlobalSlug>(\n  payload: Payload,\n  options: Options<TSlug>,\n): Promise<DataFromGlobalSlug<TSlug>> {\n  const { id, slug: globalSlug, depth, overrideAccess = true, populate, showHiddenFields } = options\n\n  const globalConfig = payload.globals.config.find((config) => config.slug === globalSlug)\n\n  if (!globalConfig) {\n    throw new APIError(`The global with slug ${String(globalSlug)} can't be found.`)\n  }\n\n  return restoreVersionOperation({\n    id,\n    depth,\n    globalConfig,\n    overrideAccess,\n    populate,\n    req: await createLocalReq(options as CreateLocalReqOptions, payload),\n    showHiddenFields,\n  })\n}\n"],"names":["APIError","createLocalReq","restoreVersionOperation","restoreGlobalVersionLocal","payload","options","id","slug","globalSlug","depth","overrideAccess","populate","showHiddenFields","globalConfig","globals","config","find","String","req"],"mappings":"AAKA,SAASA,QAAQ,QAAQ,2BAA0B;AACnD,SAASC,cAAc,QAAQ,uCAAsC;AACrE,SAASC,uBAAuB,QAAQ,uBAAsB;AAwD9D,OAAO,eAAeC,0BACpBC,OAAgB,EAChBC,OAAuB;IAEvB,MAAM,EAAEC,EAAE,EAAEC,MAAMC,UAAU,EAAEC,KAAK,EAAEC,iBAAiB,IAAI,EAAEC,QAAQ,EAAEC,gBAAgB,EAAE,GAAGP;IAE3F,MAAMQ,eAAeT,QAAQU,OAAO,CAACC,MAAM,CAACC,IAAI,CAAC,CAACD,SAAWA,OAAOR,IAAI,KAAKC;IAE7E,IAAI,CAACK,cAAc;QACjB,MAAM,IAAIb,SAAS,CAAC,qBAAqB,EAAEiB,OAAOT,YAAY,gBAAgB,CAAC;IACjF;IAEA,OAAON,wBAAwB;QAC7BI;QACAG;QACAI;QACAH;QACAC;QACAO,KAAK,MAAMjB,eAAeI,SAAkCD;QAC5DQ;IACF;AACF"}