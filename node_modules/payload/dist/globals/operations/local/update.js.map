{"version":3,"sources":["../../../../src/globals/operations/local/update.ts"],"sourcesContent":["import type { DeepPartial } from 'ts-essentials'\n\nimport type {\n  Document,\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  TransformGlobalWithSelect,\n} from '../../../types/index.js'\nimport type { CreateLocalReqOptions } from '../../../utilities/createLocalReq.js'\nimport type { DataFromGlobalSlug, SelectFromGlobalSlug } from '../../config/types.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport {\n  deepCopyObjectSimple,\n  type GlobalSlug,\n  type Payload,\n  type RequestContext,\n  type TypedLocale,\n} from '../../../index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { updateOperation } from '../update.js'\n\nexport type Options<TSlug extends GlobalSlug, TSelect extends SelectType> = {\n  /**\n   * [Context](https://payloadcms.com/docs/hooks/context), which will then be passed to `context` and `req.context`,\n   * which can be read by hooks. Useful if you want to pass additional information to the hooks which\n   * shouldn't be necessarily part of the document, for example a `triggerBeforeChange` option which can be read by the BeforeChange hook\n   * to determine if it should run or not.\n   */\n  context?: RequestContext\n  /**\n   * The global data to update.\n   */\n  data: DeepPartial<Omit<DataFromGlobalSlug<TSlug>, 'id'>>\n  /**\n   * [Control auto-population](https://payloadcms.com/docs/queries/depth) of nested relationship and upload fields.\n   */\n  depth?: number\n  /**\n   * Update documents to a draft.\n   */\n  draft?: boolean\n  /**\n   * Specify a [fallback locale](https://payloadcms.com/docs/configuration/localization) to use for any returned documents.\n   */\n  fallbackLocale?: false | TypedLocale\n  /**\n   * Specify [locale](https://payloadcms.com/docs/configuration/localization) for any returned documents.\n   */\n  locale?: 'all' | TypedLocale\n  /**\n   * Skip access control.\n   * Set to `false` if you want to respect Access Control for the operation, for example when fetching data for the front-end.\n   * @default true\n   */\n  overrideAccess?: boolean\n  /**\n   * If you are uploading a file and would like to replace\n   * the existing file instead of generating a new filename,\n   * you can set the following property to `true`\n   */\n  overrideLock?: boolean\n  /**\n   * Specify [populate](https://payloadcms.com/docs/queries/select#populate) to control which fields to include to the result from populated documents.\n   */\n  populate?: PopulateType\n  /**\n   * Publish the document / documents with a specific locale.\n   */\n  publishSpecificLocale?: TypedLocale\n  /**\n   * The `PayloadRequest` object. You can pass it to thread the current [transaction](https://payloadcms.com/docs/database/transactions), user and locale to the operation.\n   * Recommended to pass when using the Local API from hooks, as usually you want to execute the operation within the current transaction.\n   */\n  req?: Partial<PayloadRequest>\n  /**\n   * Specify [select](https://payloadcms.com/docs/queries/select) to control which fields to include to the result.\n   */\n  select?: TSelect\n  /**\n   * Opt-in to receiving hidden fields. By default, they are hidden from returned documents in accordance to your config.\n   * @default false\n   */\n  showHiddenFields?: boolean\n  /**\n   * the Global slug to operate against.\n   */\n  slug: TSlug\n  /**\n   * If you set `overrideAccess` to `false`, you can pass a user to use against the access control checks.\n   */\n  user?: Document\n}\n\nexport async function updateGlobalLocal<\n  TSlug extends GlobalSlug,\n  TSelect extends SelectFromGlobalSlug<TSlug>,\n>(\n  payload: Payload,\n  options: Options<TSlug, TSelect>,\n): Promise<TransformGlobalWithSelect<TSlug, TSelect>> {\n  const {\n    slug: globalSlug,\n    data,\n    depth,\n    draft,\n    overrideAccess = true,\n    overrideLock,\n    populate,\n    publishSpecificLocale,\n    select,\n    showHiddenFields,\n  } = options\n\n  const globalConfig = payload.globals.config.find((config) => config.slug === globalSlug)\n\n  if (!globalConfig) {\n    throw new APIError(`The global with slug ${String(globalSlug)} can't be found.`)\n  }\n\n  return updateOperation<TSlug, TSelect>({\n    slug: globalSlug as string,\n    data: deepCopyObjectSimple(data), // Ensure mutation of data in create operation hooks doesn't affect the original data\n    depth,\n    draft,\n    globalConfig,\n    overrideAccess,\n    overrideLock,\n    populate,\n    publishSpecificLocale: publishSpecificLocale!,\n    req: await createLocalReq(options as CreateLocalReqOptions, payload),\n    select,\n    showHiddenFields,\n  })\n}\n"],"names":["APIError","deepCopyObjectSimple","createLocalReq","updateOperation","updateGlobalLocal","payload","options","slug","globalSlug","data","depth","draft","overrideAccess","overrideLock","populate","publishSpecificLocale","select","showHiddenFields","globalConfig","globals","config","find","String","req"],"mappings":"AAYA,SAASA,QAAQ,QAAQ,2BAA0B;AACnD,SACEC,oBAAoB,QAKf,oBAAmB;AAC1B,SAASC,cAAc,QAAQ,uCAAsC;AACrE,SAASC,eAAe,QAAQ,eAAc;AA0E9C,OAAO,eAAeC,kBAIpBC,OAAgB,EAChBC,OAAgC;IAEhC,MAAM,EACJC,MAAMC,UAAU,EAChBC,IAAI,EACJC,KAAK,EACLC,KAAK,EACLC,iBAAiB,IAAI,EACrBC,YAAY,EACZC,QAAQ,EACRC,qBAAqB,EACrBC,MAAM,EACNC,gBAAgB,EACjB,GAAGX;IAEJ,MAAMY,eAAeb,QAAQc,OAAO,CAACC,MAAM,CAACC,IAAI,CAAC,CAACD,SAAWA,OAAOb,IAAI,KAAKC;IAE7E,IAAI,CAACU,cAAc;QACjB,MAAM,IAAIlB,SAAS,CAAC,qBAAqB,EAAEsB,OAAOd,YAAY,gBAAgB,CAAC;IACjF;IAEA,OAAOL,gBAAgC;QACrCI,MAAMC;QACNC,MAAMR,qBAAqBQ;QAC3BC;QACAC;QACAO;QACAN;QACAC;QACAC;QACAC,uBAAuBA;QACvBQ,KAAK,MAAMrB,eAAeI,SAAkCD;QAC5DW;QACAC;IACF;AACF"}