{"version":3,"sources":["../../../src/globals/operations/docAccess.ts"],"sourcesContent":["import type { SanitizedGlobalPermission } from '../../auth/index.js'\nimport type { AllOperations, PayloadRequest } from '../../types/index.js'\nimport type { SanitizedGlobalConfig } from '../config/types.js'\n\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { getEntityPolicies } from '../../utilities/getEntityPolicies.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { sanitizePermissions } from '../../utilities/sanitizePermissions.js'\n\ntype Arguments = {\n  globalConfig: SanitizedGlobalConfig\n  req: PayloadRequest\n}\n\nexport const docAccessOperation = async (args: Arguments): Promise<SanitizedGlobalPermission> => {\n  const { globalConfig, req } = args\n\n  const globalOperations: AllOperations[] = ['read', 'update']\n\n  if (globalConfig.versions) {\n    globalOperations.push('readVersions')\n  }\n\n  try {\n    const shouldCommit = await initTransaction(req)\n    const result = await getEntityPolicies({\n      type: 'global',\n      blockPolicies: {},\n      entity: globalConfig,\n      operations: globalOperations,\n      req,\n    })\n    if (shouldCommit) {\n      await commitTransaction(req)\n    }\n    const sanitizedPermissions = sanitizePermissions({\n      globals: {\n        [globalConfig.slug]: result,\n      },\n    })\n\n    const globalPermissions = sanitizedPermissions?.globals?.[globalConfig.slug]\n    return globalPermissions ?? { fields: {} }\n  } catch (e: unknown) {\n    await killTransaction(req)\n    throw e\n  }\n}\n"],"names":["commitTransaction","getEntityPolicies","initTransaction","killTransaction","sanitizePermissions","docAccessOperation","args","globalConfig","req","globalOperations","versions","push","shouldCommit","result","type","blockPolicies","entity","operations","sanitizedPermissions","globals","slug","globalPermissions","fields","e"],"mappings":"AAIA,SAASA,iBAAiB,QAAQ,uCAAsC;AACxE,SAASC,iBAAiB,QAAQ,uCAAsC;AACxE,SAASC,eAAe,QAAQ,qCAAoC;AACpE,SAASC,eAAe,QAAQ,qCAAoC;AACpE,SAASC,mBAAmB,QAAQ,yCAAwC;AAO5E,OAAO,MAAMC,qBAAqB,OAAOC;IACvC,MAAM,EAAEC,YAAY,EAAEC,GAAG,EAAE,GAAGF;IAE9B,MAAMG,mBAAoC;QAAC;QAAQ;KAAS;IAE5D,IAAIF,aAAaG,QAAQ,EAAE;QACzBD,iBAAiBE,IAAI,CAAC;IACxB;IAEA,IAAI;QACF,MAAMC,eAAe,MAAMV,gBAAgBM;QAC3C,MAAMK,SAAS,MAAMZ,kBAAkB;YACrCa,MAAM;YACNC,eAAe,CAAC;YAChBC,QAAQT;YACRU,YAAYR;YACZD;QACF;QACA,IAAII,cAAc;YAChB,MAAMZ,kBAAkBQ;QAC1B;QACA,MAAMU,uBAAuBd,oBAAoB;YAC/Ce,SAAS;gBACP,CAACZ,aAAaa,IAAI,CAAC,EAAEP;YACvB;QACF;QAEA,MAAMQ,oBAAoBH,sBAAsBC,SAAS,CAACZ,aAAaa,IAAI,CAAC;QAC5E,OAAOC,qBAAqB;YAAEC,QAAQ,CAAC;QAAE;IAC3C,EAAE,OAAOC,GAAY;QACnB,MAAMpB,gBAAgBK;QACtB,MAAMe;IACR;AACF,EAAC"}