{"version":3,"sources":["../../../src/versions/drafts/replaceWithDraftIfAvailable.ts"],"sourcesContent":["// @ts-strict-ignore\nimport type { SanitizedCollectionConfig, TypeWithID } from '../../collections/config/types.js'\nimport type { AccessResult } from '../../config/types.js'\nimport type { FindGlobalVersionsArgs, FindVersionsArgs } from '../../database/types.js'\nimport type { SanitizedGlobalConfig } from '../../globals/config/types.js'\nimport type { PayloadRequest, SelectType, Where } from '../../types/index.js'\n\nimport { hasWhereAccessResult } from '../../auth/index.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { docHasTimestamps } from '../../types/index.js'\nimport { sanitizeInternalFields } from '../../utilities/sanitizeInternalFields.js'\nimport { appendVersionToQueryKey } from './appendVersionToQueryKey.js'\nimport { getQueryDraftsSelect } from './getQueryDraftsSelect.js'\n\ntype Arguments<T> = {\n  accessResult: AccessResult\n  doc: T\n  entity: SanitizedCollectionConfig | SanitizedGlobalConfig\n  entityType: 'collection' | 'global'\n  overrideAccess: boolean\n  req: PayloadRequest\n  select?: SelectType\n}\n\nexport const replaceWithDraftIfAvailable = async <T extends TypeWithID>({\n  accessResult,\n  doc,\n  entity,\n  entityType,\n  req,\n  select,\n}: Arguments<T>): Promise<T> => {\n  const { locale } = req\n\n  const queryToBuild: Where = {\n    and: [\n      {\n        'version._status': {\n          equals: 'draft',\n        },\n      },\n    ],\n  }\n\n  if (entityType === 'collection') {\n    queryToBuild.and!.push({\n      parent: {\n        equals: doc.id,\n      },\n    })\n  }\n\n  if (docHasTimestamps(doc)) {\n    queryToBuild.and!.push({\n      or: [\n        {\n          updatedAt: {\n            greater_than: doc.updatedAt,\n          },\n        },\n        {\n          latest: {\n            equals: true,\n          },\n        },\n      ],\n    })\n  }\n\n  let versionAccessResult: undefined | Where\n\n  if (hasWhereAccessResult(accessResult)) {\n    versionAccessResult = appendVersionToQueryKey(accessResult)\n  }\n\n  const findVersionsArgs: FindGlobalVersionsArgs & FindVersionsArgs = {\n    collection: entity.slug,\n    global: entity.slug,\n    limit: 1,\n    locale: locale!,\n    pagination: false,\n    req,\n    select: getQueryDraftsSelect({ select }),\n    sort: '-updatedAt',\n    where: combineQueries(queryToBuild, versionAccessResult!),\n  }\n\n  let versionDocs\n  if (entityType === 'global') {\n    versionDocs = (await req.payload.db.findGlobalVersions<T>(findVersionsArgs)).docs\n  } else {\n    versionDocs = (await req.payload.db.findVersions<T>(findVersionsArgs)).docs\n  }\n\n  let draft = versionDocs[0]\n\n  if (!draft) {\n    return doc\n  }\n\n  draft = sanitizeInternalFields(draft)\n\n  // Patch globalType onto version doc\n  if (entityType === 'global' && 'globalType' in doc) {\n    // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n    draft.version.globalType = doc.globalType\n  }\n\n  // handle when .version wasn't selected due to projection\n  if (!draft.version) {\n    draft.version = {} as T\n  }\n\n  // Disregard all other draft content at this point,\n  // Only interested in the version itself.\n  // Operations will handle firing hooks, etc.\n\n  draft.version.id = doc.id\n\n  return draft.version\n}\n"],"names":["hasWhereAccessResult","combineQueries","docHasTimestamps","sanitizeInternalFields","appendVersionToQueryKey","getQueryDraftsSelect","replaceWithDraftIfAvailable","accessResult","doc","entity","entityType","req","select","locale","queryToBuild","and","equals","push","parent","id","or","updatedAt","greater_than","latest","versionAccessResult","findVersionsArgs","collection","slug","global","limit","pagination","sort","where","versionDocs","payload","db","findGlobalVersions","docs","findVersions","draft","version","globalType"],"mappings":"AAAA,oBAAoB;AAOpB,SAASA,oBAAoB,QAAQ,sBAAqB;AAC1D,SAASC,cAAc,QAAQ,mCAAkC;AACjE,SAASC,gBAAgB,QAAQ,uBAAsB;AACvD,SAASC,sBAAsB,QAAQ,4CAA2C;AAClF,SAASC,uBAAuB,QAAQ,+BAA8B;AACtE,SAASC,oBAAoB,QAAQ,4BAA2B;AAYhE,OAAO,MAAMC,8BAA8B,OAA6B,EACtEC,YAAY,EACZC,GAAG,EACHC,MAAM,EACNC,UAAU,EACVC,GAAG,EACHC,MAAM,EACO;IACb,MAAM,EAAEC,MAAM,EAAE,GAAGF;IAEnB,MAAMG,eAAsB;QAC1BC,KAAK;YACH;gBACE,mBAAmB;oBACjBC,QAAQ;gBACV;YACF;SACD;IACH;IAEA,IAAIN,eAAe,cAAc;QAC/BI,aAAaC,GAAG,CAAEE,IAAI,CAAC;YACrBC,QAAQ;gBACNF,QAAQR,IAAIW,EAAE;YAChB;QACF;IACF;IAEA,IAAIjB,iBAAiBM,MAAM;QACzBM,aAAaC,GAAG,CAAEE,IAAI,CAAC;YACrBG,IAAI;gBACF;oBACEC,WAAW;wBACTC,cAAcd,IAAIa,SAAS;oBAC7B;gBACF;gBACA;oBACEE,QAAQ;wBACNP,QAAQ;oBACV;gBACF;aACD;QACH;IACF;IAEA,IAAIQ;IAEJ,IAAIxB,qBAAqBO,eAAe;QACtCiB,sBAAsBpB,wBAAwBG;IAChD;IAEA,MAAMkB,mBAA8D;QAClEC,YAAYjB,OAAOkB,IAAI;QACvBC,QAAQnB,OAAOkB,IAAI;QACnBE,OAAO;QACPhB,QAAQA;QACRiB,YAAY;QACZnB;QACAC,QAAQP,qBAAqB;YAAEO;QAAO;QACtCmB,MAAM;QACNC,OAAO/B,eAAea,cAAcU;IACtC;IAEA,IAAIS;IACJ,IAAIvB,eAAe,UAAU;QAC3BuB,cAAc,AAAC,CAAA,MAAMtB,IAAIuB,OAAO,CAACC,EAAE,CAACC,kBAAkB,CAAIX,iBAAgB,EAAGY,IAAI;IACnF,OAAO;QACLJ,cAAc,AAAC,CAAA,MAAMtB,IAAIuB,OAAO,CAACC,EAAE,CAACG,YAAY,CAAIb,iBAAgB,EAAGY,IAAI;IAC7E;IAEA,IAAIE,QAAQN,WAAW,CAAC,EAAE;IAE1B,IAAI,CAACM,OAAO;QACV,OAAO/B;IACT;IAEA+B,QAAQpC,uBAAuBoC;IAE/B,oCAAoC;IACpC,IAAI7B,eAAe,YAAY,gBAAgBF,KAAK;QAClD,oFAAoF;QACpF+B,MAAMC,OAAO,CAACC,UAAU,GAAGjC,IAAIiC,UAAU;IAC3C;IAEA,yDAAyD;IACzD,IAAI,CAACF,MAAMC,OAAO,EAAE;QAClBD,MAAMC,OAAO,GAAG,CAAC;IACnB;IAEA,mDAAmD;IACnD,yCAAyC;IACzC,4CAA4C;IAE5CD,MAAMC,OAAO,CAACrB,EAAE,GAAGX,IAAIW,EAAE;IAEzB,OAAOoB,MAAMC,OAAO;AACtB,EAAC"}