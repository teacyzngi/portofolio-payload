{"version":3,"sources":["../../src/auth/ensureUsernameOrEmail.ts"],"sourcesContent":["import type { RequiredDataFromCollectionSlug } from '../collections/config/types.js'\nimport type { AuthCollection, CollectionSlug, PayloadRequest } from '../index.js'\n\nimport { ValidationError } from '../errors/index.js'\n\ntype ValidateUsernameOrEmailArgs<TSlug extends CollectionSlug> = {\n  authOptions: AuthCollection['config']['auth']\n  collectionSlug: string\n  data: RequiredDataFromCollectionSlug<TSlug>\n  req: PayloadRequest\n} & (\n  | {\n      operation: 'create'\n      originalDoc?: never\n    }\n  | {\n      operation: 'update'\n      originalDoc: RequiredDataFromCollectionSlug<TSlug>\n    }\n)\nexport const ensureUsernameOrEmail = <TSlug extends CollectionSlug>({\n  authOptions: { disableLocalStrategy, loginWithUsername },\n  collectionSlug,\n  data,\n  operation,\n  originalDoc,\n  req,\n}: ValidateUsernameOrEmailArgs<TSlug>) => {\n  // neither username or email are required\n  // and neither are provided\n  // so we need to manually validate\n  if (\n    !disableLocalStrategy &&\n    loginWithUsername &&\n    !loginWithUsername.requireEmail &&\n    !loginWithUsername.requireUsername\n  ) {\n    let missingFields = false\n    if (operation === 'create' && !data.email && !data.username) {\n      missingFields = true\n    } else if (operation === 'update') {\n      // prevent clearing both email and username\n      if ('email' in data && !data.email && 'username' in data && !data.username) {\n        missingFields = true\n      }\n      // prevent clearing email if no username\n      if ('email' in data && !data.email && !originalDoc.username && !data?.username) {\n        missingFields = true\n      }\n      // prevent clearing username if no email\n      if ('username' in data && !data.username && !originalDoc.email && !data?.email) {\n        missingFields = true\n      }\n    }\n\n    if (missingFields) {\n      throw new ValidationError(\n        {\n          collection: collectionSlug,\n          errors: [\n            {\n              message: 'Username or email is required',\n              path: 'username',\n            },\n            {\n              message: 'Username or email is required',\n              path: 'email',\n            },\n          ],\n        },\n        req.t,\n      )\n    }\n  }\n\n  return\n}\n"],"names":["ValidationError","ensureUsernameOrEmail","authOptions","disableLocalStrategy","loginWithUsername","collectionSlug","data","operation","originalDoc","req","requireEmail","requireUsername","missingFields","email","username","collection","errors","message","path","t"],"mappings":"AAGA,SAASA,eAAe,QAAQ,qBAAoB;AAiBpD,OAAO,MAAMC,wBAAwB,CAA+B,EAClEC,aAAa,EAAEC,oBAAoB,EAAEC,iBAAiB,EAAE,EACxDC,cAAc,EACdC,IAAI,EACJC,SAAS,EACTC,WAAW,EACXC,GAAG,EACgC;IACnC,yCAAyC;IACzC,2BAA2B;IAC3B,kCAAkC;IAClC,IACE,CAACN,wBACDC,qBACA,CAACA,kBAAkBM,YAAY,IAC/B,CAACN,kBAAkBO,eAAe,EAClC;QACA,IAAIC,gBAAgB;QACpB,IAAIL,cAAc,YAAY,CAACD,KAAKO,KAAK,IAAI,CAACP,KAAKQ,QAAQ,EAAE;YAC3DF,gBAAgB;QAClB,OAAO,IAAIL,cAAc,UAAU;YACjC,2CAA2C;YAC3C,IAAI,WAAWD,QAAQ,CAACA,KAAKO,KAAK,IAAI,cAAcP,QAAQ,CAACA,KAAKQ,QAAQ,EAAE;gBAC1EF,gBAAgB;YAClB;YACA,wCAAwC;YACxC,IAAI,WAAWN,QAAQ,CAACA,KAAKO,KAAK,IAAI,CAACL,YAAYM,QAAQ,IAAI,CAACR,MAAMQ,UAAU;gBAC9EF,gBAAgB;YAClB;YACA,wCAAwC;YACxC,IAAI,cAAcN,QAAQ,CAACA,KAAKQ,QAAQ,IAAI,CAACN,YAAYK,KAAK,IAAI,CAACP,MAAMO,OAAO;gBAC9ED,gBAAgB;YAClB;QACF;QAEA,IAAIA,eAAe;YACjB,MAAM,IAAIZ,gBACR;gBACEe,YAAYV;gBACZW,QAAQ;oBACN;wBACEC,SAAS;wBACTC,MAAM;oBACR;oBACA;wBACED,SAAS;wBACTC,MAAM;oBACR;iBACD;YACH,GACAT,IAAIU,CAAC;QAET;IACF;IAEA;AACF,EAAC"}