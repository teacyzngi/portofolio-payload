{"version":3,"sources":["../../../../src/auth/operations/local/forgotPassword.ts"],"sourcesContent":["import type { CollectionSlug, Payload, RequestContext } from '../../../index.js'\nimport type { PayloadRequest } from '../../../types/index.js'\nimport type { Result } from '../forgotPassword.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { forgotPasswordOperation } from '../forgotPassword.js'\n\nexport type Options<T extends CollectionSlug> = {\n  collection: T\n  context?: RequestContext\n  data: {\n    email: string\n  }\n  disableEmail?: boolean\n  expiration?: number\n  req?: Partial<PayloadRequest>\n}\n\nexport async function forgotPasswordLocal<T extends CollectionSlug>(\n  payload: Payload,\n  options: Options<T>,\n): Promise<Result> {\n  const { collection: collectionSlug, data, disableEmail, expiration } = options\n\n  const collection = payload.collections[collectionSlug]\n\n  if (!collection) {\n    throw new APIError(\n      `The collection with slug ${String(\n        collectionSlug,\n      )} can't be found. Forgot Password Operation.`,\n    )\n  }\n\n  return forgotPasswordOperation({\n    collection,\n    data,\n    disableEmail,\n    expiration,\n    req: await createLocalReq(options, payload),\n  }) as Promise<Result>\n}\n"],"names":["APIError","createLocalReq","forgotPasswordOperation","forgotPasswordLocal","payload","options","collection","collectionSlug","data","disableEmail","expiration","collections","String","req"],"mappings":"AAIA,SAASA,QAAQ,QAAQ,2BAA0B;AACnD,SAASC,cAAc,QAAQ,uCAAsC;AACrE,SAASC,uBAAuB,QAAQ,uBAAsB;AAa9D,OAAO,eAAeC,oBACpBC,OAAgB,EAChBC,OAAmB;IAEnB,MAAM,EAAEC,YAAYC,cAAc,EAAEC,IAAI,EAAEC,YAAY,EAAEC,UAAU,EAAE,GAAGL;IAEvE,MAAMC,aAAaF,QAAQO,WAAW,CAACJ,eAAe;IAEtD,IAAI,CAACD,YAAY;QACf,MAAM,IAAIN,SACR,CAAC,yBAAyB,EAAEY,OAC1BL,gBACA,2CAA2C,CAAC;IAElD;IAEA,OAAOL,wBAAwB;QAC7BI;QACAE;QACAC;QACAC;QACAG,KAAK,MAAMZ,eAAeI,SAASD;IACrC;AACF"}