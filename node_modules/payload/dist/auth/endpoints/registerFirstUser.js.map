{"version":3,"sources":["../../../src/auth/endpoints/registerFirstUser.ts"],"sourcesContent":["import { status as httpStatus } from 'http-status'\n\nimport type { PayloadHandler } from '../../config/types.js'\n\nimport { getRequestCollection } from '../../utilities/getRequestEntity.js'\nimport { headersWithCors } from '../../utilities/headersWithCors.js'\nimport { generatePayloadCookie } from '../cookies.js'\nimport { registerFirstUserOperation } from '../operations/registerFirstUser.js'\n\nexport const registerFirstUserHandler: PayloadHandler = async (req) => {\n  const collection = getRequestCollection(req)\n  const { data, t } = req\n  const authData = collection.config.auth?.loginWithUsername\n    ? {\n        email: typeof req.data?.email === 'string' ? req.data.email : '',\n        password: typeof req.data?.password === 'string' ? req.data.password : '',\n        username: typeof req.data?.username === 'string' ? req.data.username : '',\n      }\n    : {\n        email: typeof req.data?.email === 'string' ? req.data.email : '',\n        password: typeof req.data?.password === 'string' ? req.data.password : '',\n      }\n\n  const result = await registerFirstUserOperation({\n    collection,\n    data: {\n      ...data,\n      ...authData,\n    },\n    req,\n  })\n\n  const cookie = generatePayloadCookie({\n    collectionAuthConfig: collection.config.auth,\n    cookiePrefix: req.payload.config.cookiePrefix,\n    token: result.token!,\n  })\n\n  return Response.json(\n    {\n      exp: result.exp,\n      message: t('authentication:successfullyRegisteredFirstUser'),\n      token: result.token,\n      user: result.user,\n    },\n    {\n      headers: headersWithCors({\n        headers: new Headers({\n          'Set-Cookie': cookie,\n        }),\n        req,\n      }),\n      status: httpStatus.OK,\n    },\n  )\n}\n"],"names":["status","httpStatus","getRequestCollection","headersWithCors","generatePayloadCookie","registerFirstUserOperation","registerFirstUserHandler","req","collection","data","t","authData","config","auth","loginWithUsername","email","password","username","result","cookie","collectionAuthConfig","cookiePrefix","payload","token","Response","json","exp","message","user","headers","Headers","OK"],"mappings":"AAAA,SAASA,UAAUC,UAAU,QAAQ,cAAa;AAIlD,SAASC,oBAAoB,QAAQ,sCAAqC;AAC1E,SAASC,eAAe,QAAQ,qCAAoC;AACpE,SAASC,qBAAqB,QAAQ,gBAAe;AACrD,SAASC,0BAA0B,QAAQ,qCAAoC;AAE/E,OAAO,MAAMC,2BAA2C,OAAOC;IAC7D,MAAMC,aAAaN,qBAAqBK;IACxC,MAAM,EAAEE,IAAI,EAAEC,CAAC,EAAE,GAAGH;IACpB,MAAMI,WAAWH,WAAWI,MAAM,CAACC,IAAI,EAAEC,oBACrC;QACEC,OAAO,OAAOR,IAAIE,IAAI,EAAEM,UAAU,WAAWR,IAAIE,IAAI,CAACM,KAAK,GAAG;QAC9DC,UAAU,OAAOT,IAAIE,IAAI,EAAEO,aAAa,WAAWT,IAAIE,IAAI,CAACO,QAAQ,GAAG;QACvEC,UAAU,OAAOV,IAAIE,IAAI,EAAEQ,aAAa,WAAWV,IAAIE,IAAI,CAACQ,QAAQ,GAAG;IACzE,IACA;QACEF,OAAO,OAAOR,IAAIE,IAAI,EAAEM,UAAU,WAAWR,IAAIE,IAAI,CAACM,KAAK,GAAG;QAC9DC,UAAU,OAAOT,IAAIE,IAAI,EAAEO,aAAa,WAAWT,IAAIE,IAAI,CAACO,QAAQ,GAAG;IACzE;IAEJ,MAAME,SAAS,MAAMb,2BAA2B;QAC9CG;QACAC,MAAM;YACJ,GAAGA,IAAI;YACP,GAAGE,QAAQ;QACb;QACAJ;IACF;IAEA,MAAMY,SAASf,sBAAsB;QACnCgB,sBAAsBZ,WAAWI,MAAM,CAACC,IAAI;QAC5CQ,cAAcd,IAAIe,OAAO,CAACV,MAAM,CAACS,YAAY;QAC7CE,OAAOL,OAAOK,KAAK;IACrB;IAEA,OAAOC,SAASC,IAAI,CAClB;QACEC,KAAKR,OAAOQ,GAAG;QACfC,SAASjB,EAAE;QACXa,OAAOL,OAAOK,KAAK;QACnBK,MAAMV,OAAOU,IAAI;IACnB,GACA;QACEC,SAAS1B,gBAAgB;YACvB0B,SAAS,IAAIC,QAAQ;gBACnB,cAAcX;YAChB;YACAZ;QACF;QACAP,QAAQC,WAAW8B,EAAE;IACvB;AAEJ,EAAC"}