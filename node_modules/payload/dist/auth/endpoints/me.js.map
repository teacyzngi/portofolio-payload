{"version":3,"sources":["../../../src/auth/endpoints/me.ts"],"sourcesContent":["import { status as httpStatus } from 'http-status'\n\nimport type { PayloadHandler } from '../../config/types.js'\nimport type { JoinParams } from '../../utilities/sanitizeJoinParams.js'\n\nimport { getRequestCollection } from '../../utilities/getRequestEntity.js'\nimport { headersWithCors } from '../../utilities/headersWithCors.js'\nimport { isNumber } from '../../utilities/isNumber.js'\nimport { sanitizeJoinParams } from '../../utilities/sanitizeJoinParams.js'\nimport { sanitizePopulateParam } from '../../utilities/sanitizePopulateParam.js'\nimport { sanitizeSelectParam } from '../../utilities/sanitizeSelectParam.js'\nimport { extractJWT } from '../extractJWT.js'\nimport { meOperation } from '../operations/me.js'\n\nexport const meHandler: PayloadHandler = async (req) => {\n  const { searchParams } = req\n  const collection = getRequestCollection(req)\n  const currentToken = extractJWT(req)\n  const depthFromSearchParams = searchParams.get('depth')\n  const draftFromSearchParams = searchParams.get('depth')\n\n  const {\n    depth: depthFromQuery,\n    draft: draftFromQuery,\n    joins,\n    populate,\n    select,\n  } = req.query as {\n    depth?: string\n    draft?: string\n    joins?: JoinParams\n    populate?: Record<string, unknown>\n    select?: Record<string, unknown>\n  }\n\n  const depth = depthFromQuery || depthFromSearchParams\n  const draft = draftFromQuery || draftFromSearchParams\n\n  const result = await meOperation({\n    collection,\n    currentToken: currentToken!,\n    depth: isNumber(depth) ? Number(depth) : undefined,\n    draft: draft === 'true',\n    joins: sanitizeJoinParams(joins),\n    populate: sanitizePopulateParam(populate),\n    req,\n    select: sanitizeSelectParam(select),\n  })\n\n  if (collection.config.auth.removeTokenFromResponses) {\n    delete result.token\n  }\n\n  return Response.json(\n    {\n      ...result,\n      message: req.t('authentication:account'),\n    },\n    {\n      headers: headersWithCors({\n        headers: new Headers(),\n        req,\n      }),\n      status: httpStatus.OK,\n    },\n  )\n}\n"],"names":["status","httpStatus","getRequestCollection","headersWithCors","isNumber","sanitizeJoinParams","sanitizePopulateParam","sanitizeSelectParam","extractJWT","meOperation","meHandler","req","searchParams","collection","currentToken","depthFromSearchParams","get","draftFromSearchParams","depth","depthFromQuery","draft","draftFromQuery","joins","populate","select","query","result","Number","undefined","config","auth","removeTokenFromResponses","token","Response","json","message","t","headers","Headers","OK"],"mappings":"AAAA,SAASA,UAAUC,UAAU,QAAQ,cAAa;AAKlD,SAASC,oBAAoB,QAAQ,sCAAqC;AAC1E,SAASC,eAAe,QAAQ,qCAAoC;AACpE,SAASC,QAAQ,QAAQ,8BAA6B;AACtD,SAASC,kBAAkB,QAAQ,wCAAuC;AAC1E,SAASC,qBAAqB,QAAQ,2CAA0C;AAChF,SAASC,mBAAmB,QAAQ,yCAAwC;AAC5E,SAASC,UAAU,QAAQ,mBAAkB;AAC7C,SAASC,WAAW,QAAQ,sBAAqB;AAEjD,OAAO,MAAMC,YAA4B,OAAOC;IAC9C,MAAM,EAAEC,YAAY,EAAE,GAAGD;IACzB,MAAME,aAAaX,qBAAqBS;IACxC,MAAMG,eAAeN,WAAWG;IAChC,MAAMI,wBAAwBH,aAAaI,GAAG,CAAC;IAC/C,MAAMC,wBAAwBL,aAAaI,GAAG,CAAC;IAE/C,MAAM,EACJE,OAAOC,cAAc,EACrBC,OAAOC,cAAc,EACrBC,KAAK,EACLC,QAAQ,EACRC,MAAM,EACP,GAAGb,IAAIc,KAAK;IAQb,MAAMP,QAAQC,kBAAkBJ;IAChC,MAAMK,QAAQC,kBAAkBJ;IAEhC,MAAMS,SAAS,MAAMjB,YAAY;QAC/BI;QACAC,cAAcA;QACdI,OAAOd,SAASc,SAASS,OAAOT,SAASU;QACzCR,OAAOA,UAAU;QACjBE,OAAOjB,mBAAmBiB;QAC1BC,UAAUjB,sBAAsBiB;QAChCZ;QACAa,QAAQjB,oBAAoBiB;IAC9B;IAEA,IAAIX,WAAWgB,MAAM,CAACC,IAAI,CAACC,wBAAwB,EAAE;QACnD,OAAOL,OAAOM,KAAK;IACrB;IAEA,OAAOC,SAASC,IAAI,CAClB;QACE,GAAGR,MAAM;QACTS,SAASxB,IAAIyB,CAAC,CAAC;IACjB,GACA;QACEC,SAASlC,gBAAgB;YACvBkC,SAAS,IAAIC;YACb3B;QACF;QACAX,QAAQC,WAAWsC,EAAE;IACvB;AAEJ,EAAC"}