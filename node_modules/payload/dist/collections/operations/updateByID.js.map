{"version":3,"sources":["../../../src/collections/operations/updateByID.ts"],"sourcesContent":["import type { DeepPartial } from 'ts-essentials'\n\nimport { status as httpStatus } from 'http-status'\n\nimport type { FindOneArgs } from '../../database/types.js'\nimport type {\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  TransformCollectionWithSelect,\n} from '../../types/index.js'\nimport type {\n  Collection,\n  RequiredDataFromCollectionSlug,\n  SelectFromCollectionSlug,\n} from '../config/types.js'\n\nimport { executeAccess } from '../../auth/executeAccess.js'\nimport { hasWhereAccessResult } from '../../auth/types.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { APIError, Forbidden, NotFound } from '../../errors/index.js'\nimport { type CollectionSlug, deepCopyObjectSimple } from '../../index.js'\nimport { generateFileData } from '../../uploads/generateFileData.js'\nimport { unlinkTempFiles } from '../../uploads/unlinkTempFiles.js'\nimport { appendNonTrashedFilter } from '../../utilities/appendNonTrashedFilter.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { sanitizeSelect } from '../../utilities/sanitizeSelect.js'\nimport { getLatestCollectionVersion } from '../../versions/getLatestCollectionVersion.js'\nimport { updateDocument } from './utilities/update.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments<TSlug extends CollectionSlug> = {\n  autosave?: boolean\n  collection: Collection\n  data: DeepPartial<RequiredDataFromCollectionSlug<TSlug>>\n  depth?: number\n  disableTransaction?: boolean\n  disableVerificationEmail?: boolean\n  draft?: boolean\n  id: number | string\n  overrideAccess?: boolean\n  overrideLock?: boolean\n  overwriteExistingFiles?: boolean\n  populate?: PopulateType\n  publishSpecificLocale?: string\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n  trash?: boolean\n}\n\nexport const updateByIDOperation = async <\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug> = SelectType,\n>(\n  incomingArgs: Arguments<TSlug>,\n): Promise<TransformCollectionWithSelect<TSlug, TSelect>> => {\n  let args = incomingArgs\n\n  try {\n    const shouldCommit = !args.disableTransaction && (await initTransaction(args.req))\n\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    if (args.collection.config.hooks?.beforeOperation?.length) {\n      for (const hook of args.collection.config.hooks.beforeOperation) {\n        args =\n          (await hook({\n            args,\n            collection: args.collection.config,\n            context: args.req.context,\n            operation: 'update',\n            req: args.req,\n          })) || args\n      }\n    }\n\n    if (args.publishSpecificLocale) {\n      args.req.locale = args.publishSpecificLocale\n    }\n\n    const {\n      id,\n      autosave = false,\n      collection: { config: collectionConfig },\n      collection,\n      depth,\n      draft: draftArg = false,\n      overrideAccess,\n      overrideLock,\n      overwriteExistingFiles = false,\n      populate,\n      publishSpecificLocale,\n      req: {\n        fallbackLocale,\n        locale,\n        payload: { config },\n        payload,\n      },\n      req,\n      select: incomingSelect,\n      showHiddenFields,\n      trash = false,\n    } = args\n\n    if (!id) {\n      throw new APIError('Missing ID of document to update.', httpStatus.BAD_REQUEST)\n    }\n\n    const { data } = args\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    const accessResults = !overrideAccess\n      ? await executeAccess({ id, data, req }, collectionConfig.access.update)\n      : true\n    const hasWherePolicy = hasWhereAccessResult(accessResults)\n\n    // /////////////////////////////////////\n    // Retrieve document\n    // /////////////////////////////////////\n\n    const where = { id: { equals: id } }\n\n    let fullWhere = combineQueries(where, accessResults)\n\n    const isTrashAttempt =\n      collectionConfig.trash &&\n      typeof data === 'object' &&\n      data !== null &&\n      'deletedAt' in data &&\n      data.deletedAt != null\n\n    if (isTrashAttempt && !overrideAccess) {\n      const deleteAccessResult = await executeAccess({ req }, collectionConfig.access.delete)\n      fullWhere = combineQueries(fullWhere, deleteAccessResult)\n    }\n\n    // Exclude trashed documents when trash: false\n    fullWhere = appendNonTrashedFilter({\n      enableTrash: collectionConfig.trash,\n      trash,\n      where: fullWhere,\n    })\n\n    const findOneArgs: FindOneArgs = {\n      collection: collectionConfig.slug,\n      locale: locale!,\n      req,\n      where: fullWhere,\n    }\n\n    const docWithLocales = await getLatestCollectionVersion({\n      id,\n      config: collectionConfig,\n      payload,\n      query: findOneArgs,\n      req,\n    })\n\n    if (!docWithLocales && !hasWherePolicy) {\n      throw new NotFound(req.t)\n    }\n    if (!docWithLocales && hasWherePolicy) {\n      throw new Forbidden(req.t)\n    }\n\n    // /////////////////////////////////////\n    // Generate data for all files and sizes\n    // /////////////////////////////////////\n\n    const { data: newFileData, files: filesToUpload } = await generateFileData({\n      collection,\n      config,\n      data,\n      operation: 'update',\n      overwriteExistingFiles,\n      req,\n      throwOnMissingFile: false,\n    })\n\n    const select = sanitizeSelect({\n      fields: collectionConfig.flattenedFields,\n      forceSelect: collectionConfig.forceSelect,\n      select: incomingSelect,\n    })\n\n    // ///////////////////////////////////////////////\n    // Update document, runs all document level hooks\n    // ///////////////////////////////////////////////\n\n    let result = await updateDocument<TSlug, TSelect>({\n      id,\n      accessResults,\n      autosave,\n      collectionConfig,\n      config,\n      data: deepCopyObjectSimple(newFileData),\n      depth: depth!,\n      docWithLocales,\n      draftArg,\n      fallbackLocale: fallbackLocale!,\n      filesToUpload,\n      locale: locale!,\n      overrideAccess: overrideAccess!,\n      overrideLock: overrideLock!,\n      payload,\n      populate,\n      publishSpecificLocale,\n      req,\n      select: select!,\n      showHiddenFields: showHiddenFields!,\n    })\n\n    await unlinkTempFiles({\n      collectionConfig,\n      config,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = (await buildAfterOperation({\n      args,\n      collection: collectionConfig,\n      operation: 'updateByID',\n      result,\n    })) as TransformCollectionWithSelect<TSlug, TSelect>\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    if (shouldCommit) {\n      await commitTransaction(req)\n    }\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["status","httpStatus","executeAccess","hasWhereAccessResult","combineQueries","APIError","Forbidden","NotFound","deepCopyObjectSimple","generateFileData","unlinkTempFiles","appendNonTrashedFilter","commitTransaction","initTransaction","killTransaction","sanitizeSelect","getLatestCollectionVersion","updateDocument","buildAfterOperation","updateByIDOperation","incomingArgs","args","shouldCommit","disableTransaction","req","collection","config","hooks","beforeOperation","length","hook","context","operation","publishSpecificLocale","locale","id","autosave","collectionConfig","depth","draft","draftArg","overrideAccess","overrideLock","overwriteExistingFiles","populate","fallbackLocale","payload","select","incomingSelect","showHiddenFields","trash","BAD_REQUEST","data","accessResults","access","update","hasWherePolicy","where","equals","fullWhere","isTrashAttempt","deletedAt","deleteAccessResult","delete","enableTrash","findOneArgs","slug","docWithLocales","query","t","newFileData","files","filesToUpload","throwOnMissingFile","fields","flattenedFields","forceSelect","result","error"],"mappings":"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"}