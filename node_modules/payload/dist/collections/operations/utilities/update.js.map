{"version":3,"sources":["../../../../src/collections/operations/utilities/update.ts"],"sourcesContent":["import type { DeepPartial } from 'ts-essentials'\n\nimport type { Args } from '../../../fields/hooks/beforeChange/index.js'\nimport type {\n  Payload,\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  TransformCollectionWithSelect,\n} from '../../../types/index.js'\nimport type {\n  DataFromCollectionSlug,\n  SanitizedCollectionConfig,\n  SelectFromCollectionSlug,\n} from '../../config/types.js'\n\nimport { ensureUsernameOrEmail } from '../../../auth/ensureUsernameOrEmail.js'\nimport { generatePasswordSaltHash } from '../../../auth/strategies/local/generatePasswordSaltHash.js'\nimport { combineQueries } from '../../../database/combineQueries.js'\nimport { afterChange } from '../../../fields/hooks/afterChange/index.js'\nimport { afterRead } from '../../../fields/hooks/afterRead/index.js'\nimport { beforeChange } from '../../../fields/hooks/beforeChange/index.js'\nimport { beforeValidate } from '../../../fields/hooks/beforeValidate/index.js'\nimport {\n  type AccessResult,\n  type CollectionSlug,\n  deepCopyObjectSimple,\n  type FileToSave,\n  type SanitizedConfig,\n} from '../../../index.js'\nimport { deleteAssociatedFiles } from '../../../uploads/deleteAssociatedFiles.js'\nimport { uploadFiles } from '../../../uploads/uploadFiles.js'\nimport { checkDocumentLockStatus } from '../../../utilities/checkDocumentLockStatus.js'\nimport { getLatestCollectionVersion } from '../../../versions/getLatestCollectionVersion.js'\nimport { saveVersion } from '../../../versions/saveVersion.js'\n\nexport type SharedUpdateDocumentArgs<TSlug extends CollectionSlug> = {\n  accessResults: AccessResult\n  autosave: boolean\n  collectionConfig: SanitizedCollectionConfig\n  config: SanitizedConfig\n  data: DeepPartial<DataFromCollectionSlug<TSlug>>\n  depth: number\n  docWithLocales: any\n  draftArg: boolean\n  fallbackLocale: string | string[]\n  filesToUpload: FileToSave[]\n  id: number | string\n  locale: string\n  overrideAccess: boolean\n  overrideLock: boolean\n  payload: Payload\n  populate?: PopulateType\n  publishSpecificLocale?: string\n  req: PayloadRequest\n  select: SelectType\n  showHiddenFields: boolean\n}\n\n/**\n * This function is used to update a document in the DB and return the result.\n *\n * It runs the following hooks in order:\n * - beforeValidate - Fields\n * - beforeValidate - Collection\n * - beforeChange - Collection\n * - beforeChange - Fields\n * - afterRead - Fields\n * - afterRead - Collection\n * - afterChange - Fields\n * - afterChange - Collection\n */\nexport const updateDocument = async <\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug> = SelectType,\n>({\n  id,\n  accessResults,\n  autosave,\n  collectionConfig,\n  config,\n  data,\n  depth,\n  docWithLocales,\n  draftArg,\n  fallbackLocale,\n  filesToUpload,\n  locale,\n  overrideAccess,\n  overrideLock,\n  payload,\n  populate,\n  publishSpecificLocale,\n  req,\n  select,\n  showHiddenFields,\n}: SharedUpdateDocumentArgs<TSlug>): Promise<TransformCollectionWithSelect<TSlug, TSelect>> => {\n  const password = data?.password\n  const shouldSaveDraft =\n    Boolean(draftArg && collectionConfig.versions.drafts) && data._status !== 'published'\n  const shouldSavePassword = Boolean(\n    password &&\n      collectionConfig.auth &&\n      (!collectionConfig.auth.disableLocalStrategy ||\n        (typeof collectionConfig.auth.disableLocalStrategy === 'object' &&\n          collectionConfig.auth.disableLocalStrategy.enableFields)) &&\n      !shouldSaveDraft,\n  )\n\n  // /////////////////////////////////////\n  // Handle potentially locked documents\n  // /////////////////////////////////////\n\n  await checkDocumentLockStatus({\n    id,\n    collectionSlug: collectionConfig.slug,\n    lockErrorMessage: `Document with ID ${id} is currently locked by another user and cannot be updated.`,\n    overrideLock,\n    req,\n  })\n\n  const originalDoc = await afterRead({\n    collection: collectionConfig,\n    context: req.context,\n    depth: 0,\n    doc: deepCopyObjectSimple(docWithLocales),\n    draft: draftArg,\n    fallbackLocale: id ? null : fallbackLocale,\n    global: null,\n    locale,\n    overrideAccess: true,\n    req,\n    showHiddenFields: true,\n  })\n\n  if (collectionConfig.auth) {\n    ensureUsernameOrEmail<TSlug>({\n      authOptions: collectionConfig.auth,\n      collectionSlug: collectionConfig.slug,\n      data,\n      operation: 'update',\n      originalDoc,\n      req,\n    })\n  }\n\n  // /////////////////////////////////////\n  // Delete any associated files\n  // /////////////////////////////////////\n\n  await deleteAssociatedFiles({\n    collectionConfig,\n    config,\n    doc: docWithLocales,\n    files: filesToUpload,\n    overrideDelete: false,\n    req,\n  })\n\n  // /////////////////////////////////////\n  // beforeValidate - Fields\n  // /////////////////////////////////////\n\n  data = await beforeValidate<DeepPartial<DataFromCollectionSlug<TSlug>>>({\n    id,\n    collection: collectionConfig,\n    context: req.context,\n    data,\n    doc: originalDoc,\n    global: null,\n    operation: 'update',\n    overrideAccess,\n    req,\n  })\n\n  // /////////////////////////////////////\n  // beforeValidate - Collection\n  // /////////////////////////////////////\n\n  if (collectionConfig.hooks?.beforeValidate?.length) {\n    for (const hook of collectionConfig.hooks.beforeValidate) {\n      data =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          data,\n          operation: 'update',\n          originalDoc,\n          req,\n        })) || data\n    }\n  }\n\n  // /////////////////////////////////////\n  // Write files to local storage\n  // /////////////////////////////////////\n\n  if (!collectionConfig.upload.disableLocalStorage) {\n    await uploadFiles(payload, filesToUpload, req)\n  }\n\n  // /////////////////////////////////////\n  // beforeChange - Collection\n  // /////////////////////////////////////\n\n  if (collectionConfig.hooks?.beforeChange?.length) {\n    for (const hook of collectionConfig.hooks.beforeChange) {\n      data =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          data,\n          operation: 'update',\n          originalDoc,\n          req,\n        })) || data\n    }\n  }\n\n  // /////////////////////////////////////\n  // beforeChange - Fields\n  // /////////////////////////////////////\n\n  let publishedDocWithLocales = docWithLocales\n  let versionSnapshotResult\n\n  const beforeChangeArgs: Args<DataFromCollectionSlug<TSlug>> = {\n    id,\n    collection: collectionConfig,\n    context: req.context,\n    data: { ...data, id },\n    doc: originalDoc,\n    // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n    docWithLocales: undefined,\n    global: null,\n    operation: 'update',\n    overrideAccess,\n    req,\n    skipValidation:\n      (shouldSaveDraft &&\n        collectionConfig.versions.drafts &&\n        !collectionConfig.versions.drafts.validate) ||\n      // Skip validation for trash operations since they're just metadata updates\n      (collectionConfig.trash &&\n        (Boolean(data?.deletedAt) ||\n          // Skip validation when restoring from trash, but only if not publishing\n          // (if publishing, we need full validation)\n          (Boolean(originalDoc?.deletedAt) && data?._status !== 'published'))),\n  }\n\n  if (publishSpecificLocale) {\n    versionSnapshotResult = await beforeChange({\n      ...beforeChangeArgs,\n      docWithLocales,\n    })\n\n    const lastPublished = await getLatestCollectionVersion({\n      id,\n      config: collectionConfig,\n      payload,\n      published: true,\n      query: {\n        collection: collectionConfig.slug,\n        locale,\n        req,\n        where: combineQueries({ id: { equals: id } }, accessResults),\n      },\n      req,\n    })\n\n    publishedDocWithLocales = lastPublished ? lastPublished : {}\n  }\n\n  let result = await beforeChange({\n    ...beforeChangeArgs,\n    docWithLocales: publishedDocWithLocales,\n  })\n\n  // /////////////////////////////////////\n  // Handle potential password update\n  // /////////////////////////////////////\n\n  const dataToUpdate: Record<string, unknown> = { ...result }\n\n  if (shouldSavePassword && typeof password === 'string') {\n    const { hash, salt } = await generatePasswordSaltHash({\n      collection: collectionConfig,\n      password,\n      req,\n    })\n    dataToUpdate.salt = salt\n    dataToUpdate.hash = hash\n    delete dataToUpdate.password\n    delete data.password\n  }\n\n  // /////////////////////////////////////\n  // Update\n  // /////////////////////////////////////\n\n  if (!shouldSaveDraft) {\n    // Ensure updatedAt date is always updated\n    dataToUpdate.updatedAt = new Date().toISOString()\n    result = await req.payload.db.updateOne({\n      id,\n      collection: collectionConfig.slug,\n      data: dataToUpdate,\n      locale,\n      req,\n    })\n  }\n\n  // /////////////////////////////////////\n  // Create version\n  // /////////////////////////////////////\n\n  if (collectionConfig.versions) {\n    result = await saveVersion({\n      id,\n      autosave,\n      collection: collectionConfig,\n      docWithLocales: result,\n      draft: shouldSaveDraft,\n      operation: 'update',\n      payload,\n      publishSpecificLocale,\n      req,\n      snapshot: versionSnapshotResult,\n    })\n  }\n\n  // /////////////////////////////////////\n  // afterRead - Fields\n  // /////////////////////////////////////\n\n  result = await afterRead({\n    collection: collectionConfig,\n    context: req.context,\n    depth,\n    doc: result,\n    draft: draftArg,\n    fallbackLocale,\n    global: null,\n    locale,\n    overrideAccess,\n    populate,\n    req,\n    select,\n    showHiddenFields,\n  })\n\n  // /////////////////////////////////////\n  // afterRead - Collection\n  // /////////////////////////////////////\n\n  if (collectionConfig.hooks?.afterRead?.length) {\n    for (const hook of collectionConfig.hooks.afterRead) {\n      result =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          doc: result,\n          req,\n        })) || result\n    }\n  }\n\n  // /////////////////////////////////////\n  // afterChange - Fields\n  // /////////////////////////////////////\n\n  result = await afterChange({\n    collection: collectionConfig,\n    context: req.context,\n    data,\n    doc: result,\n    global: null,\n    operation: 'update',\n    previousDoc: originalDoc,\n    req,\n  })\n\n  // /////////////////////////////////////\n  // afterChange - Collection\n  // /////////////////////////////////////\n\n  if (collectionConfig.hooks?.afterChange?.length) {\n    for (const hook of collectionConfig.hooks.afterChange) {\n      result =\n        (await hook({\n          collection: collectionConfig,\n          context: req.context,\n          data,\n          doc: result,\n          operation: 'update',\n          previousDoc: originalDoc,\n          req,\n        })) || result\n    }\n  }\n\n  return result as TransformCollectionWithSelect<TSlug, TSelect>\n}\n"],"names":["ensureUsernameOrEmail","generatePasswordSaltHash","combineQueries","afterChange","afterRead","beforeChange","beforeValidate","deepCopyObjectSimple","deleteAssociatedFiles","uploadFiles","checkDocumentLockStatus","getLatestCollectionVersion","saveVersion","updateDocument","id","accessResults","autosave","collectionConfig","config","data","depth","docWithLocales","draftArg","fallbackLocale","filesToUpload","locale","overrideAccess","overrideLock","payload","populate","publishSpecificLocale","req","select","showHiddenFields","password","shouldSaveDraft","Boolean","versions","drafts","_status","shouldSavePassword","auth","disableLocalStrategy","enableFields","collectionSlug","slug","lockErrorMessage","originalDoc","collection","context","doc","draft","global","authOptions","operation","files","overrideDelete","hooks","length","hook","upload","disableLocalStorage","publishedDocWithLocales","versionSnapshotResult","beforeChangeArgs","undefined","skipValidation","validate","trash","deletedAt","lastPublished","published","query","where","equals","result","dataToUpdate","hash","salt","updatedAt","Date","toISOString","db","updateOne","snapshot","previousDoc"],"mappings":"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"}