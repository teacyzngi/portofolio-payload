{"version":3,"sources":["../../../src/collections/operations/docAccess.ts"],"sourcesContent":["import type { SanitizedCollectionPermission } from '../../auth/index.js'\nimport type { AllOperations, PayloadRequest } from '../../types/index.js'\nimport type { Collection } from '../config/types.js'\n\nimport { getEntityPolicies } from '../../utilities/getEntityPolicies.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { sanitizePermissions } from '../../utilities/sanitizePermissions.js'\n\nconst allOperations: AllOperations[] = ['create', 'read', 'update', 'delete']\n\ntype Arguments = {\n  collection: Collection\n  id: number | string\n  req: PayloadRequest\n}\n\nexport async function docAccessOperation(args: Arguments): Promise<SanitizedCollectionPermission> {\n  const {\n    id,\n    collection: { config },\n    req,\n  } = args\n\n  const collectionOperations = [...allOperations]\n\n  if (\n    config.auth &&\n    typeof config.auth.maxLoginAttempts !== 'undefined' &&\n    config.auth.maxLoginAttempts !== 0\n  ) {\n    collectionOperations.push('unlock')\n  }\n\n  if (config.versions) {\n    collectionOperations.push('readVersions')\n  }\n\n  try {\n    const result = await getEntityPolicies({\n      id,\n      type: 'collection',\n      blockPolicies: {},\n      entity: config,\n      operations: collectionOperations,\n      req,\n    })\n\n    const sanitizedPermissions = sanitizePermissions({\n      collections: {\n        [config.slug]: result,\n      },\n    })\n\n    const collectionPermissions = sanitizedPermissions?.collections?.[config.slug]\n    return collectionPermissions ?? { fields: {} }\n  } catch (e: unknown) {\n    await killTransaction(req)\n    throw e\n  }\n}\n"],"names":["getEntityPolicies","killTransaction","sanitizePermissions","allOperations","docAccessOperation","args","id","collection","config","req","collectionOperations","auth","maxLoginAttempts","push","versions","result","type","blockPolicies","entity","operations","sanitizedPermissions","collections","slug","collectionPermissions","fields","e"],"mappings":"AAIA,SAASA,iBAAiB,QAAQ,uCAAsC;AACxE,SAASC,eAAe,QAAQ,qCAAoC;AACpE,SAASC,mBAAmB,QAAQ,yCAAwC;AAE5E,MAAMC,gBAAiC;IAAC;IAAU;IAAQ;IAAU;CAAS;AAQ7E,OAAO,eAAeC,mBAAmBC,IAAe;IACtD,MAAM,EACJC,EAAE,EACFC,YAAY,EAAEC,MAAM,EAAE,EACtBC,GAAG,EACJ,GAAGJ;IAEJ,MAAMK,uBAAuB;WAAIP;KAAc;IAE/C,IACEK,OAAOG,IAAI,IACX,OAAOH,OAAOG,IAAI,CAACC,gBAAgB,KAAK,eACxCJ,OAAOG,IAAI,CAACC,gBAAgB,KAAK,GACjC;QACAF,qBAAqBG,IAAI,CAAC;IAC5B;IAEA,IAAIL,OAAOM,QAAQ,EAAE;QACnBJ,qBAAqBG,IAAI,CAAC;IAC5B;IAEA,IAAI;QACF,MAAME,SAAS,MAAMf,kBAAkB;YACrCM;YACAU,MAAM;YACNC,eAAe,CAAC;YAChBC,QAAQV;YACRW,YAAYT;YACZD;QACF;QAEA,MAAMW,uBAAuBlB,oBAAoB;YAC/CmB,aAAa;gBACX,CAACb,OAAOc,IAAI,CAAC,EAAEP;YACjB;QACF;QAEA,MAAMQ,wBAAwBH,sBAAsBC,aAAa,CAACb,OAAOc,IAAI,CAAC;QAC9E,OAAOC,yBAAyB;YAAEC,QAAQ,CAAC;QAAE;IAC/C,EAAE,OAAOC,GAAY;QACnB,MAAMxB,gBAAgBQ;QACtB,MAAMgB;IACR;AACF"}