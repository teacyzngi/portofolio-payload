{"version":3,"sources":["../../../src/collections/operations/create.ts"],"sourcesContent":["import crypto from 'crypto'\n\nimport type {\n  Document,\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  TransformCollectionWithSelect,\n} from '../../types/index.js'\nimport type {\n  Collection,\n  DataFromCollectionSlug,\n  RequiredDataFromCollectionSlug,\n  SelectFromCollectionSlug,\n} from '../config/types.js'\n\nimport { ensureUsernameOrEmail } from '../../auth/ensureUsernameOrEmail.js'\nimport { executeAccess } from '../../auth/executeAccess.js'\nimport { sendVerificationEmail } from '../../auth/sendVerificationEmail.js'\nimport { registerLocalStrategy } from '../../auth/strategies/local/register.js'\nimport { getDuplicateDocumentData } from '../../duplicateDocument/index.js'\nimport { afterChange } from '../../fields/hooks/afterChange/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { beforeChange } from '../../fields/hooks/beforeChange/index.js'\nimport { beforeValidate } from '../../fields/hooks/beforeValidate/index.js'\nimport { type CollectionSlug, type JsonObject } from '../../index.js'\nimport { generateFileData } from '../../uploads/generateFileData.js'\nimport { unlinkTempFiles } from '../../uploads/unlinkTempFiles.js'\nimport { uploadFiles } from '../../uploads/uploadFiles.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { sanitizeInternalFields } from '../../utilities/sanitizeInternalFields.js'\nimport { sanitizeSelect } from '../../utilities/sanitizeSelect.js'\nimport { saveVersion } from '../../versions/saveVersion.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments<TSlug extends CollectionSlug> = {\n  autosave?: boolean\n  collection: Collection\n  data: RequiredDataFromCollectionSlug<TSlug>\n  depth?: number\n  disableTransaction?: boolean\n  disableVerificationEmail?: boolean\n  draft?: boolean\n  duplicateFromID?: DataFromCollectionSlug<TSlug>['id']\n  overrideAccess?: boolean\n  overwriteExistingFiles?: boolean\n  populate?: PopulateType\n  publishSpecificLocale?: string\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n}\n\nexport const createOperation = async <\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  incomingArgs: Arguments<TSlug>,\n): Promise<TransformCollectionWithSelect<TSlug, TSelect>> => {\n  let args = incomingArgs\n\n  try {\n    const shouldCommit = !args.disableTransaction && (await initTransaction(args.req))\n\n    ensureUsernameOrEmail<TSlug>({\n      authOptions: args.collection.config.auth,\n      collectionSlug: args.collection.config.slug,\n      data: args.data,\n      operation: 'create',\n      req: args.req,\n    })\n\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    if (args.collection.config.hooks.beforeOperation?.length) {\n      for (const hook of args.collection.config.hooks.beforeOperation) {\n        args =\n          (await hook({\n            args,\n            collection: args.collection.config,\n            context: args.req.context,\n            operation: 'create',\n            req: args.req,\n          })) || args\n      }\n    }\n\n    if (args.publishSpecificLocale) {\n      args.req.locale = args.publishSpecificLocale\n    }\n\n    const {\n      autosave = false,\n      collection: { config: collectionConfig },\n      collection,\n      depth,\n      disableVerificationEmail,\n      draft = false,\n      duplicateFromID,\n      overrideAccess,\n      overwriteExistingFiles = false,\n      populate,\n      publishSpecificLocale,\n      req: {\n        fallbackLocale,\n        locale,\n        payload,\n        payload: { config },\n      },\n      req,\n      select: incomingSelect,\n      showHiddenFields,\n    } = args\n\n    let { data } = args\n\n    const shouldSaveDraft = Boolean(draft && collectionConfig.versions.drafts)\n\n    let duplicatedFromDocWithLocales: JsonObject = {}\n    let duplicatedFromDoc: JsonObject = {}\n\n    if (duplicateFromID) {\n      const duplicateResult = await getDuplicateDocumentData({\n        id: duplicateFromID,\n        collectionConfig,\n        draftArg: shouldSaveDraft,\n        overrideAccess,\n        req,\n        shouldSaveDraft,\n      })\n\n      duplicatedFromDoc = duplicateResult.duplicatedFromDoc\n      duplicatedFromDocWithLocales = duplicateResult.duplicatedFromDocWithLocales\n    }\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    if (!overrideAccess) {\n      await executeAccess({ data, req }, collectionConfig.access.create)\n    }\n\n    // /////////////////////////////////////\n    // Generate data for all files and sizes\n    // /////////////////////////////////////\n\n    const { data: newFileData, files: filesToUpload } = await generateFileData({\n      collection,\n      config,\n      data,\n      isDuplicating: Boolean(duplicateFromID),\n      operation: 'create',\n      originalDoc: duplicatedFromDoc,\n      overwriteExistingFiles,\n      req,\n      throwOnMissingFile:\n        !shouldSaveDraft && collection.config.upload.filesRequiredOnCreate !== false,\n    })\n\n    data = newFileData\n\n    // /////////////////////////////////////\n    // beforeValidate - Fields\n    // /////////////////////////////////////\n\n    data = await beforeValidate({\n      collection: collectionConfig,\n      context: req.context,\n      data,\n      doc: duplicatedFromDoc,\n      global: null,\n      operation: 'create',\n      overrideAccess: overrideAccess!,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // beforeValidate - Collections\n    // /////////////////////////////////////\n\n    if (collectionConfig.hooks.beforeValidate?.length) {\n      for (const hook of collectionConfig.hooks.beforeValidate) {\n        data =\n          (await hook({\n            collection: collectionConfig,\n            context: req.context,\n            data,\n            operation: 'create',\n            originalDoc: duplicatedFromDoc,\n            req,\n          })) || data\n      }\n    }\n\n    // /////////////////////////////////////\n    // beforeChange - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig.hooks?.beforeChange?.length) {\n      for (const hook of collectionConfig.hooks.beforeChange) {\n        data =\n          (await hook({\n            collection: collectionConfig,\n            context: req.context,\n            data,\n            operation: 'create',\n            originalDoc: duplicatedFromDoc,\n            req,\n          })) || data\n      }\n    }\n\n    // /////////////////////////////////////\n    // beforeChange - Fields\n    // /////////////////////////////////////\n\n    const resultWithLocales = await beforeChange<JsonObject>({\n      collection: collectionConfig,\n      context: req.context,\n      data,\n      doc: duplicatedFromDoc,\n      docWithLocales: duplicatedFromDocWithLocales,\n      global: null,\n      operation: 'create',\n      overrideAccess,\n      req,\n      skipValidation:\n        shouldSaveDraft &&\n        collectionConfig.versions.drafts &&\n        !collectionConfig.versions.drafts.validate,\n    })\n\n    // /////////////////////////////////////\n    // Write files to local storage\n    // /////////////////////////////////////\n\n    if (!collectionConfig.upload.disableLocalStorage) {\n      await uploadFiles(payload, filesToUpload, req)\n    }\n\n    // /////////////////////////////////////\n    // Create\n    // /////////////////////////////////////\n\n    let doc\n\n    const select = sanitizeSelect({\n      fields: collectionConfig.flattenedFields,\n      forceSelect: collectionConfig.forceSelect,\n      select: incomingSelect,\n    })\n\n    if (collectionConfig.auth && !collectionConfig.auth.disableLocalStrategy) {\n      if (collectionConfig.auth.verify) {\n        resultWithLocales._verified = Boolean(resultWithLocales._verified) || false\n        resultWithLocales._verificationToken = crypto.randomBytes(20).toString('hex')\n      }\n\n      doc = await registerLocalStrategy({\n        collection: collectionConfig,\n        doc: resultWithLocales,\n        password: data.password as string,\n        payload: req.payload,\n        req,\n      })\n    } else {\n      doc = await payload.db.create({\n        collection: collectionConfig.slug,\n        data: resultWithLocales,\n        req,\n      })\n    }\n\n    const verificationToken = doc._verificationToken\n    let result: Document = sanitizeInternalFields(doc)\n\n    // /////////////////////////////////////\n    // Create version\n    // /////////////////////////////////////\n\n    if (collectionConfig.versions) {\n      await saveVersion({\n        id: result.id,\n        autosave,\n        collection: collectionConfig,\n        docWithLocales: result,\n        operation: 'create',\n        payload,\n        publishSpecificLocale,\n        req,\n      })\n    }\n\n    // /////////////////////////////////////\n    // Send verification email if applicable\n    // /////////////////////////////////////\n\n    if (collectionConfig.auth && collectionConfig.auth.verify && result.email) {\n      await sendVerificationEmail({\n        collection: { config: collectionConfig },\n        config: payload.config,\n        disableEmail: disableVerificationEmail!,\n        email: payload.email,\n        req,\n        token: verificationToken,\n        user: result,\n      })\n    }\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result = await afterRead({\n      collection: collectionConfig,\n      context: req.context,\n      depth: depth!,\n      doc: result,\n      draft,\n      fallbackLocale: fallbackLocale!,\n      global: null,\n      locale: locale!,\n      overrideAccess: overrideAccess!,\n      populate,\n      req,\n      select,\n      showHiddenFields: showHiddenFields!,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig.hooks?.afterRead?.length) {\n      for (const hook of collectionConfig.hooks.afterRead) {\n        result =\n          (await hook({\n            collection: collectionConfig,\n            context: req.context,\n            doc: result,\n            req,\n          })) || result\n      }\n    }\n\n    // /////////////////////////////////////\n    // afterChange - Fields\n    // /////////////////////////////////////\n\n    result = await afterChange({\n      collection: collectionConfig,\n      context: req.context,\n      data,\n      doc: result,\n      global: null,\n      operation: 'create',\n      previousDoc: {},\n      req,\n    })\n\n    // /////////////////////////////////////\n    // afterChange - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig.hooks?.afterChange?.length) {\n      for (const hook of collectionConfig.hooks.afterChange) {\n        result =\n          (await hook({\n            collection: collectionConfig,\n            context: req.context,\n            data,\n            doc: result,\n            operation: 'create',\n            previousDoc: {},\n            req: args.req,\n          })) || result\n      }\n    }\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation<TSlug>({\n      args,\n      collection: collectionConfig,\n      operation: 'create',\n      result,\n    })\n\n    await unlinkTempFiles({ collectionConfig, config, req })\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    if (shouldCommit) {\n      await commitTransaction(req)\n    }\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["crypto","ensureUsernameOrEmail","executeAccess","sendVerificationEmail","registerLocalStrategy","getDuplicateDocumentData","afterChange","afterRead","beforeChange","beforeValidate","generateFileData","unlinkTempFiles","uploadFiles","commitTransaction","initTransaction","killTransaction","sanitizeInternalFields","sanitizeSelect","saveVersion","buildAfterOperation","createOperation","incomingArgs","args","shouldCommit","disableTransaction","req","authOptions","collection","config","auth","collectionSlug","slug","data","operation","hooks","beforeOperation","length","hook","context","publishSpecificLocale","locale","autosave","collectionConfig","depth","disableVerificationEmail","draft","duplicateFromID","overrideAccess","overwriteExistingFiles","populate","fallbackLocale","payload","select","incomingSelect","showHiddenFields","shouldSaveDraft","Boolean","versions","drafts","duplicatedFromDocWithLocales","duplicatedFromDoc","duplicateResult","id","draftArg","access","create","newFileData","files","filesToUpload","isDuplicating","originalDoc","throwOnMissingFile","upload","filesRequiredOnCreate","doc","global","resultWithLocales","docWithLocales","skipValidation","validate","disableLocalStorage","fields","flattenedFields","forceSelect","disableLocalStrategy","verify","_verified","_verificationToken","randomBytes","toString","password","db","verificationToken","result","email","disableEmail","token","user","previousDoc","error"],"mappings":"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"}