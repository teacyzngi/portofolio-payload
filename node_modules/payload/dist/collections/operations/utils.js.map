{"version":3,"sources":["../../../src/collections/operations/utils.ts"],"sourcesContent":["import type { forgotPasswordOperation } from '../../auth/operations/forgotPassword.js'\nimport type { loginOperation } from '../../auth/operations/login.js'\nimport type { refreshOperation } from '../../auth/operations/refresh.js'\nimport type { resetPasswordOperation } from '../../auth/operations/resetPassword.js'\nimport type { CollectionSlug, restoreVersionOperation } from '../../index.js'\nimport type { PayloadRequest } from '../../types/index.js'\nimport type { SanitizedCollectionConfig, SelectFromCollectionSlug } from '../config/types.js'\nimport type { countOperation } from './count.js'\nimport type { countVersionsOperation } from './countVersions.js'\nimport type { createOperation } from './create.js'\nimport type { deleteOperation } from './delete.js'\nimport type { deleteByIDOperation } from './deleteByID.js'\nimport type { findOperation } from './find.js'\nimport type { findByIDOperation } from './findByID.js'\nimport type { findDistinctOperation } from './findDistinct.js'\nimport type { updateOperation } from './update.js'\nimport type { updateByIDOperation } from './updateByID.js'\n\nexport type AfterOperationMap<TOperationGeneric extends CollectionSlug> = {\n  count: typeof countOperation<TOperationGeneric>\n  countVersions: typeof countVersionsOperation<TOperationGeneric>\n  create: typeof createOperation<TOperationGeneric, SelectFromCollectionSlug<TOperationGeneric>>\n  delete: typeof deleteOperation<TOperationGeneric, SelectFromCollectionSlug<TOperationGeneric>>\n  deleteByID: typeof deleteByIDOperation<\n    TOperationGeneric,\n    SelectFromCollectionSlug<TOperationGeneric>\n  >\n  find: typeof findOperation<TOperationGeneric, SelectFromCollectionSlug<TOperationGeneric>>\n  findByID: typeof findByIDOperation<\n    TOperationGeneric,\n    boolean,\n    SelectFromCollectionSlug<TOperationGeneric>\n  >\n  findDistinct: typeof findDistinctOperation\n  forgotPassword: typeof forgotPasswordOperation\n  login: typeof loginOperation<TOperationGeneric>\n  refresh: typeof refreshOperation\n  resetPassword: typeof resetPasswordOperation<TOperationGeneric>\n  restoreVersion: typeof restoreVersionOperation\n  update: typeof updateOperation<TOperationGeneric, SelectFromCollectionSlug<TOperationGeneric>>\n  updateByID: typeof updateByIDOperation<\n    TOperationGeneric,\n    SelectFromCollectionSlug<TOperationGeneric>\n  >\n}\n\nexport type AfterOperationArg<TOperationGeneric extends CollectionSlug> = {\n  /** The collection which this hook is being run on */\n  collection: SanitizedCollectionConfig\n  req: PayloadRequest\n} & (\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['count']>[0]\n      operation: 'count'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['count']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['countVersions']>[0]\n      operation: 'countVersions'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['countVersions']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['create']>[0]\n      operation: 'create'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['create']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['delete']>[0]\n      operation: 'delete'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['delete']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['deleteByID']>[0]\n      operation: 'deleteByID'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['deleteByID']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['find']>[0]\n      operation: 'find'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['find']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['findByID']>[0]\n      operation: 'findByID'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['findByID']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['findDistinct']>[0]\n      operation: 'findDistinct'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['findDistinct']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['forgotPassword']>[0]\n      operation: 'forgotPassword'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['forgotPassword']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['login']>[0]\n      operation: 'login'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['login']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['refresh']>[0]\n      operation: 'refresh'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['refresh']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['resetPassword']>[0]\n      operation: 'resetPassword'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['resetPassword']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['restoreVersion']>[0]\n      operation: 'restoreVersion'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['restoreVersion']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['update']>[0]\n      operation: 'update'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['update']>>\n    }\n  | {\n      args: Parameters<AfterOperationMap<TOperationGeneric>['updateByID']>[0]\n      operation: 'updateByID'\n      result: Awaited<ReturnType<AfterOperationMap<TOperationGeneric>['updateByID']>>\n    }\n)\n\ntype OperationResult<\n  TOperationGeneric extends CollectionSlug,\n  O extends keyof AfterOperationMap<TOperationGeneric>,\n> = Awaited<ReturnType<AfterOperationMap<TOperationGeneric>[O]>>\n\nexport const buildAfterOperation = async <\n  TOperationGeneric extends CollectionSlug,\n  O extends keyof AfterOperationMap<TOperationGeneric> = keyof AfterOperationMap<TOperationGeneric>,\n>(\n  operationArgs: { operation: O } & Omit<AfterOperationArg<TOperationGeneric>, 'req'>,\n): Promise<any | OperationResult<TOperationGeneric, O>> => {\n  const { args, collection, operation, result } = operationArgs\n\n  let newResult = result as OperationResult<TOperationGeneric, O>\n\n  if (args.collection.config.hooks?.afterOperation?.length) {\n    for (const hook of args.collection.config.hooks.afterOperation) {\n      const hookResult = await hook({\n        args,\n        collection,\n        operation,\n        req: args.req,\n        result: newResult,\n      } as AfterOperationArg<TOperationGeneric>)\n\n      if (hookResult !== undefined) {\n        newResult = hookResult as OperationResult<TOperationGeneric, O>\n      }\n    }\n  }\n\n  return newResult\n}\n"],"names":["buildAfterOperation","operationArgs","args","collection","operation","result","newResult","config","hooks","afterOperation","length","hook","hookResult","req","undefined"],"mappings":"AAqIA,OAAO,MAAMA,sBAAsB,OAIjCC;IAEA,MAAM,EAAEC,IAAI,EAAEC,UAAU,EAAEC,SAAS,EAAEC,MAAM,EAAE,GAAGJ;IAEhD,IAAIK,YAAYD;IAEhB,IAAIH,KAAKC,UAAU,CAACI,MAAM,CAACC,KAAK,EAAEC,gBAAgBC,QAAQ;QACxD,KAAK,MAAMC,QAAQT,KAAKC,UAAU,CAACI,MAAM,CAACC,KAAK,CAACC,cAAc,CAAE;YAC9D,MAAMG,aAAa,MAAMD,KAAK;gBAC5BT;gBACAC;gBACAC;gBACAS,KAAKX,KAAKW,GAAG;gBACbR,QAAQC;YACV;YAEA,IAAIM,eAAeE,WAAW;gBAC5BR,YAAYM;YACd;QACF;IACF;IAEA,OAAON;AACT,EAAC"}