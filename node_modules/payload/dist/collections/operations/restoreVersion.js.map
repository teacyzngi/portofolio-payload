{"version":3,"sources":["../../../src/collections/operations/restoreVersion.ts"],"sourcesContent":["import { status as httpStatus } from 'http-status'\n\nimport type { FindOneArgs } from '../../database/types.js'\nimport type { PayloadRequest, PopulateType, SelectType } from '../../types/index.js'\nimport type { Collection, TypeWithID } from '../config/types.js'\n\nimport { executeAccess } from '../../auth/executeAccess.js'\nimport { hasWhereAccessResult } from '../../auth/types.js'\nimport { combineQueries } from '../../database/combineQueries.js'\nimport { APIError, Forbidden, NotFound } from '../../errors/index.js'\nimport { afterChange } from '../../fields/hooks/afterChange/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { beforeChange } from '../../fields/hooks/beforeChange/index.js'\nimport { beforeValidate } from '../../fields/hooks/beforeValidate/index.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { deepCopyObjectSimple } from '../../utilities/deepCopyObject.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport { sanitizeSelect } from '../../utilities/sanitizeSelect.js'\nimport { getLatestCollectionVersion } from '../../versions/getLatestCollectionVersion.js'\nimport { saveVersion } from '../../versions/saveVersion.js'\nimport { buildAfterOperation } from './utils.js'\n\nexport type Arguments = {\n  collection: Collection\n  currentDepth?: number\n  depth?: number\n  disableErrors?: boolean\n  disableTransaction?: boolean\n  draft?: boolean\n  id: number | string\n  overrideAccess?: boolean\n  populate?: PopulateType\n  req: PayloadRequest\n  select?: SelectType\n  showHiddenFields?: boolean\n}\n\nexport const restoreVersionOperation = async <TData extends TypeWithID = any>(\n  args: Arguments,\n): Promise<TData> => {\n  const {\n    id,\n    collection: { config: collectionConfig },\n    depth,\n    draft: draftArg = false,\n    overrideAccess = false,\n    populate,\n    req,\n    req: { fallbackLocale, locale, payload },\n    select: incomingSelect,\n    showHiddenFields,\n  } = args\n\n  try {\n    const shouldCommit = !args.disableTransaction && (await initTransaction(args.req))\n\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    if (args.collection.config.hooks?.beforeOperation?.length) {\n      for (const hook of args.collection.config.hooks.beforeOperation) {\n        args =\n          (await hook({\n            args,\n            collection: args.collection.config,\n            context: args.req.context,\n            operation: 'restoreVersion',\n            req: args.req,\n          })) || args\n      }\n    }\n\n    if (!id) {\n      throw new APIError('Missing ID of version to restore.', httpStatus.BAD_REQUEST)\n    }\n\n    // /////////////////////////////////////\n    // Retrieve original raw version\n    // /////////////////////////////////////\n\n    const { docs: versionDocs } = await req.payload.db.findVersions({\n      collection: collectionConfig.slug,\n      limit: 1,\n      locale: locale!,\n      pagination: false,\n      req,\n      where: { id: { equals: id } },\n    })\n\n    const [rawVersion] = versionDocs\n\n    if (!rawVersion) {\n      throw new NotFound(req.t)\n    }\n\n    const { parent: parentDocID, version: versionToRestoreWithLocales } = rawVersion\n\n    // /////////////////////////////////////\n    // Access\n    // /////////////////////////////////////\n\n    const accessResults = !overrideAccess\n      ? await executeAccess({ id: parentDocID, req }, collectionConfig.access.update)\n      : true\n    const hasWherePolicy = hasWhereAccessResult(accessResults)\n\n    // /////////////////////////////////////\n    // Retrieve document\n    // /////////////////////////////////////\n\n    const findOneArgs: FindOneArgs = {\n      collection: collectionConfig.slug,\n      locale: locale!,\n      req,\n      where: combineQueries({ id: { equals: parentDocID } }, accessResults),\n    }\n\n    // Get the document from the non versioned collection\n    const doc = await req.payload.db.findOne(findOneArgs)\n\n    if (!doc && !hasWherePolicy) {\n      throw new NotFound(req.t)\n    }\n    if (!doc && hasWherePolicy) {\n      throw new Forbidden(req.t)\n    }\n\n    if (collectionConfig.trash && doc?.deletedAt) {\n      throw new APIError(\n        `Cannot restore a version of a trashed document (ID: ${parentDocID}). Restore the document first.`,\n        httpStatus.FORBIDDEN,\n      )\n    }\n\n    // /////////////////////////////////////\n    // fetch previousDoc\n    // /////////////////////////////////////\n    const prevDocWithLocales = await getLatestCollectionVersion({\n      id: parentDocID,\n      config: collectionConfig,\n      payload,\n      query: findOneArgs,\n      req,\n    })\n\n    // originalDoc with hoisted localized data\n    const originalDoc = await afterRead({\n      collection: collectionConfig,\n      context: req.context,\n      depth: 0,\n      doc: deepCopyObjectSimple(prevDocWithLocales),\n      draft: draftArg,\n      fallbackLocale: null,\n      global: null,\n      locale: locale!,\n      overrideAccess: true,\n      req,\n      showHiddenFields: true,\n    })\n\n    // version data with hoisted localized data\n    const prevVersionDoc = await afterRead({\n      collection: collectionConfig,\n      context: req.context,\n      depth: 0,\n      doc: deepCopyObjectSimple(versionToRestoreWithLocales),\n      draft: draftArg,\n      fallbackLocale: null,\n      global: null,\n      locale: locale!,\n      overrideAccess: true,\n      req,\n      showHiddenFields: true,\n    })\n\n    let data = deepCopyObjectSimple(prevVersionDoc)\n\n    // /////////////////////////////////////\n    // beforeValidate - Fields\n    // /////////////////////////////////////\n\n    data = await beforeValidate({\n      id: parentDocID,\n      collection: collectionConfig,\n      context: req.context,\n      data,\n      doc: originalDoc,\n      global: null,\n      operation: 'update',\n      overrideAccess,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // beforeValidate - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig.hooks?.beforeValidate?.length) {\n      for (const hook of collectionConfig.hooks.beforeValidate) {\n        data =\n          (await hook({\n            collection: collectionConfig,\n            context: req.context,\n            data,\n            operation: 'update',\n            originalDoc,\n            req,\n          })) || data\n      }\n    }\n\n    // /////////////////////////////////////\n    // beforeChange - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig.hooks?.beforeChange?.length) {\n      for (const hook of collectionConfig.hooks.beforeChange) {\n        data =\n          (await hook({\n            collection: collectionConfig,\n            context: req.context,\n            data,\n            operation: 'update',\n            originalDoc,\n            req,\n          })) || data\n      }\n    }\n\n    // /////////////////////////////////////\n    // beforeChange - Fields\n    // /////////////////////////////////////\n\n    let result = await beforeChange({\n      id: parentDocID,\n      collection: collectionConfig,\n      context: req.context,\n      data: { ...data, id: parentDocID },\n      doc: originalDoc,\n      docWithLocales: versionToRestoreWithLocales,\n      global: null,\n      operation: 'update',\n      overrideAccess,\n      req,\n      skipValidation:\n        draftArg && collectionConfig.versions.drafts && !collectionConfig.versions.drafts.validate,\n    })\n\n    // /////////////////////////////////////\n    // Update\n    // /////////////////////////////////////\n\n    const select = sanitizeSelect({\n      fields: collectionConfig.flattenedFields,\n      forceSelect: collectionConfig.forceSelect,\n      select: incomingSelect,\n    })\n\n    // Ensure updatedAt date is always updated\n    result.updatedAt = new Date().toISOString()\n    // Ensure status respects restoreAsDraft arg\n    result._status = draftArg ? 'draft' : result._status\n    result = await req.payload.db.updateOne({\n      id: parentDocID,\n      collection: collectionConfig.slug,\n      data: result,\n      req,\n      select,\n    })\n\n    // /////////////////////////////////////\n    // Save `previousDoc` as a version after restoring\n    // /////////////////////////////////////\n\n    result = await saveVersion({\n      id: parentDocID,\n      autosave: false,\n      collection: collectionConfig,\n      docWithLocales: result,\n      draft: draftArg,\n      operation: 'restoreVersion',\n      payload,\n      req,\n      select,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    result = await afterRead({\n      collection: collectionConfig,\n      context: req.context,\n      depth: depth!,\n      doc: result,\n      // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n      draft: undefined,\n      fallbackLocale: fallbackLocale!,\n      global: null,\n      locale: locale!,\n      overrideAccess,\n      populate,\n      req,\n      select,\n      showHiddenFields: showHiddenFields!,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig.hooks?.afterRead?.length) {\n      for (const hook of collectionConfig.hooks.afterRead) {\n        result =\n          (await hook({\n            collection: collectionConfig,\n            context: req.context,\n            doc: result,\n            req,\n          })) || result\n      }\n    }\n\n    // /////////////////////////////////////\n    // afterChange - Fields\n    // /////////////////////////////////////\n\n    result = await afterChange({\n      collection: collectionConfig,\n      context: req.context,\n      data: result,\n      doc: result,\n      global: null,\n      operation: 'update',\n      previousDoc: prevDocWithLocales,\n      req,\n    })\n\n    // /////////////////////////////////////\n    // afterChange - Collection\n    // /////////////////////////////////////\n\n    if (collectionConfig.hooks?.afterChange?.length) {\n      for (const hook of collectionConfig.hooks.afterChange) {\n        result =\n          (await hook({\n            collection: collectionConfig,\n            context: req.context,\n            data: result,\n            doc: result,\n            operation: 'update',\n            previousDoc: prevDocWithLocales,\n            req,\n          })) || result\n      }\n    }\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation({\n      args,\n      collection: collectionConfig,\n      operation: 'restoreVersion',\n      result,\n    })\n\n    if (shouldCommit) {\n      await commitTransaction(req)\n    }\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(req)\n    throw error\n  }\n}\n"],"names":["status","httpStatus","executeAccess","hasWhereAccessResult","combineQueries","APIError","Forbidden","NotFound","afterChange","afterRead","beforeChange","beforeValidate","commitTransaction","deepCopyObjectSimple","initTransaction","killTransaction","sanitizeSelect","getLatestCollectionVersion","saveVersion","buildAfterOperation","restoreVersionOperation","args","id","collection","config","collectionConfig","depth","draft","draftArg","overrideAccess","populate","req","fallbackLocale","locale","payload","select","incomingSelect","showHiddenFields","shouldCommit","disableTransaction","hooks","beforeOperation","length","hook","context","operation","BAD_REQUEST","docs","versionDocs","db","findVersions","slug","limit","pagination","where","equals","rawVersion","t","parent","parentDocID","version","versionToRestoreWithLocales","accessResults","access","update","hasWherePolicy","findOneArgs","doc","findOne","trash","deletedAt","FORBIDDEN","prevDocWithLocales","query","originalDoc","global","prevVersionDoc","data","result","docWithLocales","skipValidation","versions","drafts","validate","fields","flattenedFields","forceSelect","updatedAt","Date","toISOString","_status","updateOne","autosave","undefined","previousDoc","error"],"mappings":"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"}