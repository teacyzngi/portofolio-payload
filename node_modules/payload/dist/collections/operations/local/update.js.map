{"version":3,"sources":["../../../../src/collections/operations/local/update.ts"],"sourcesContent":["import type { DeepPartial } from 'ts-essentials'\n\nimport type { CollectionSlug, Payload, RequestContext, TypedLocale } from '../../../index.js'\nimport type {\n  Document,\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  Sort,\n  TransformCollectionWithSelect,\n  Where,\n} from '../../../types/index.js'\nimport type { File } from '../../../uploads/types.js'\nimport type { CreateLocalReqOptions } from '../../../utilities/createLocalReq.js'\nimport type {\n  BulkOperationResult,\n  RequiredDataFromCollectionSlug,\n  SelectFromCollectionSlug,\n} from '../../config/types.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { getFileByPath } from '../../../uploads/getFileByPath.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { updateOperation } from '../update.js'\nimport { updateByIDOperation } from '../updateByID.js'\n\nexport type BaseOptions<TSlug extends CollectionSlug, TSelect extends SelectType> = {\n  /**\n   * Whether the current update should be marked as from autosave.\n   * `versions.drafts.autosave` should be specified.\n   */\n  autosave?: boolean\n  /**\n   * the Collection slug to operate against.\n   */\n  collection: TSlug\n  /**\n   * [Context](https://payloadcms.com/docs/hooks/context), which will then be passed to `context` and `req.context`,\n   * which can be read by hooks. Useful if you want to pass additional information to the hooks which\n   * shouldn't be necessarily part of the document, for example a `triggerBeforeChange` option which can be read by the BeforeChange hook\n   * to determine if it should run or not.\n   */\n  context?: RequestContext\n  /**\n   * The document / documents data to update.\n   */\n  data: DeepPartial<RequiredDataFromCollectionSlug<TSlug>>\n  /**\n   * [Control auto-population](https://payloadcms.com/docs/queries/depth) of nested relationship and upload fields.\n   */\n  depth?: number\n  /**\n   * When set to `true`, a [database transactions](https://payloadcms.com/docs/database/transactions) will not be initialized.\n   * @default false\n   */\n  disableTransaction?: boolean\n  /**\n   * Update documents to a draft.\n   */\n  draft?: boolean\n  /**\n   * Specify a [fallback locale](https://payloadcms.com/docs/configuration/localization) to use for any returned documents.\n   */\n  fallbackLocale?: false | TypedLocale\n  /**\n   * A `File` object when updating a collection with `upload: true`.\n   */\n  file?: File\n  /**\n   * A file path when creating a collection with `upload: true`.\n   */\n  filePath?: string\n  /**\n   * Specify [locale](https://payloadcms.com/docs/configuration/localization) for any returned documents.\n   */\n  locale?: TypedLocale\n  /**\n   * Skip access control.\n   * Set to `false` if you want to respect Access Control for the operation, for example when fetching data for the front-end.\n   * @default true\n   */\n  overrideAccess?: boolean\n  /**\n   * By default, document locks are ignored (`true`). Set to `false` to enforce locks and prevent operations when a document is locked by another user. [More details](https://payloadcms.com/docs/admin/locked-documents).\n   * @default true\n   */\n  overrideLock?: boolean\n  /**\n   * If you are uploading a file and would like to replace\n   * the existing file instead of generating a new filename,\n   * you can set the following property to `true`\n   */\n  overwriteExistingFiles?: boolean\n  /**\n   * Specify [populate](https://payloadcms.com/docs/queries/select#populate) to control which fields to include to the result from populated documents.\n   */\n  populate?: PopulateType\n  /**\n   * Publish the document / documents with a specific locale.\n   */\n  publishSpecificLocale?: string\n  /**\n   * The `PayloadRequest` object. You can pass it to thread the current [transaction](https://payloadcms.com/docs/database/transactions), user and locale to the operation.\n   * Recommended to pass when using the Local API from hooks, as usually you want to execute the operation within the current transaction.\n   */\n  req?: Partial<PayloadRequest>\n  /**\n   * Specify [select](https://payloadcms.com/docs/queries/select) to control which fields to include to the result.\n   */\n  select?: TSelect\n  /**\n   * Opt-in to receiving hidden fields. By default, they are hidden from returned documents in accordance to your config.\n   * @default false\n   */\n  showHiddenFields?: boolean\n  /**\n   * When set to `true`, the operation will update both normal and trashed (soft-deleted) documents.\n   * To update only trashed documents, pass `trash: true` and combine with a `where` clause filtering by `deletedAt`.\n   * By default (`false`), the update will only include normal documents and exclude those with a `deletedAt` field.\n   * @default false\n   */\n  trash?: boolean\n  /**\n   * If you set `overrideAccess` to `false`, you can pass a user to use against the access control checks.\n   */\n  user?: Document\n}\n\nexport type ByIDOptions<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n> = {\n  /**\n   * The ID of the document to update.\n   */\n  id: number | string\n  /**\n   * Limit documents to update\n   */\n  limit?: never\n  /**\n   * Sort the documents, can be a string or an array of strings\n   * @example '-createdAt' // Sort DESC by createdAt\n   * @example ['group', '-createdAt'] // sort by 2 fields, ASC group and DESC createdAt\n   */\n  sort?: never\n  /**\n   * A filter [query](https://payloadcms.com/docs/queries/overview)\n   */\n  where?: never\n} & BaseOptions<TSlug, TSelect>\n\nexport type ManyOptions<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n> = {\n  /**\n   * The ID of the document to update.\n   */\n  id?: never\n  /**\n   * Limit documents to update\n   */\n  limit?: number\n  /**\n   * Sort the documents, can be a string or an array of strings\n   * @example '-createdAt' // Sort DESC by createdAt\n   * @example ['group', '-createdAt'] // sort by 2 fields, ASC group and DESC createdAt\n   */\n  sort?: Sort\n  /**\n   * A filter [query](https://payloadcms.com/docs/queries/overview)\n   */\n  where: Where\n} & BaseOptions<TSlug, TSelect>\n\nexport type Options<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n> = ByIDOptions<TSlug, TSelect> | ManyOptions<TSlug, TSelect>\n\nasync function updateLocal<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  payload: Payload,\n  options: ByIDOptions<TSlug, TSelect>,\n): Promise<TransformCollectionWithSelect<TSlug, TSelect>>\nasync function updateLocal<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  payload: Payload,\n  options: ManyOptions<TSlug, TSelect>,\n): Promise<BulkOperationResult<TSlug, TSelect>>\nasync function updateLocal<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  payload: Payload,\n  options: Options<TSlug, TSelect>,\n): Promise<BulkOperationResult<TSlug, TSelect> | TransformCollectionWithSelect<TSlug, TSelect>>\nasync function updateLocal<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  payload: Payload,\n  options: Options<TSlug, TSelect>,\n): Promise<BulkOperationResult<TSlug, TSelect> | TransformCollectionWithSelect<TSlug, TSelect>> {\n  const {\n    id,\n    autosave,\n    collection: collectionSlug,\n    data,\n    depth,\n    disableTransaction,\n    draft,\n    file,\n    filePath,\n    limit,\n    overrideAccess = true,\n    overrideLock,\n    overwriteExistingFiles = false,\n    populate,\n    publishSpecificLocale,\n    select,\n    showHiddenFields,\n    sort,\n    trash = false,\n    where,\n  } = options\n\n  const collection = payload.collections[collectionSlug]\n\n  if (!collection) {\n    throw new APIError(\n      `The collection with slug ${String(collectionSlug)} can't be found. Update Operation.`,\n    )\n  }\n\n  const req = await createLocalReq(options as CreateLocalReqOptions, payload)\n  req.file = file ?? (await getFileByPath(filePath!))\n\n  const args = {\n    id,\n    autosave,\n    collection,\n    data,\n    depth,\n    disableTransaction,\n    draft,\n    limit,\n    overrideAccess,\n    overrideLock,\n    overwriteExistingFiles,\n    payload,\n    populate,\n    publishSpecificLocale,\n    req,\n    select,\n    showHiddenFields,\n    sort,\n    trash,\n    where,\n  }\n\n  if (options.id) {\n    // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n    return updateByIDOperation<TSlug, TSelect>(args)\n  }\n  // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n  return updateOperation<TSlug, TSelect>(args)\n}\n\nexport { updateLocal }\n"],"names":["APIError","getFileByPath","createLocalReq","updateOperation","updateByIDOperation","updateLocal","payload","options","id","autosave","collection","collectionSlug","data","depth","disableTransaction","draft","file","filePath","limit","overrideAccess","overrideLock","overwriteExistingFiles","populate","publishSpecificLocale","select","showHiddenFields","sort","trash","where","collections","String","req","args"],"mappings":"AAoBA,SAASA,QAAQ,QAAQ,2BAA0B;AACnD,SAASC,aAAa,QAAQ,oCAAmC;AACjE,SAASC,cAAc,QAAQ,uCAAsC;AACrE,SAASC,eAAe,QAAQ,eAAc;AAC9C,SAASC,mBAAmB,QAAQ,mBAAkB;AAkLtD,eAAeC,YAIbC,OAAgB,EAChBC,OAAgC;IAEhC,MAAM,EACJC,EAAE,EACFC,QAAQ,EACRC,YAAYC,cAAc,EAC1BC,IAAI,EACJC,KAAK,EACLC,kBAAkB,EAClBC,KAAK,EACLC,IAAI,EACJC,QAAQ,EACRC,KAAK,EACLC,iBAAiB,IAAI,EACrBC,YAAY,EACZC,yBAAyB,KAAK,EAC9BC,QAAQ,EACRC,qBAAqB,EACrBC,MAAM,EACNC,gBAAgB,EAChBC,IAAI,EACJC,QAAQ,KAAK,EACbC,KAAK,EACN,GAAGrB;IAEJ,MAAMG,aAAaJ,QAAQuB,WAAW,CAAClB,eAAe;IAEtD,IAAI,CAACD,YAAY;QACf,MAAM,IAAIV,SACR,CAAC,yBAAyB,EAAE8B,OAAOnB,gBAAgB,kCAAkC,CAAC;IAE1F;IAEA,MAAMoB,MAAM,MAAM7B,eAAeK,SAAkCD;IACnEyB,IAAIf,IAAI,GAAGA,QAAS,MAAMf,cAAcgB;IAExC,MAAMe,OAAO;QACXxB;QACAC;QACAC;QACAE;QACAC;QACAC;QACAC;QACAG;QACAC;QACAC;QACAC;QACAf;QACAgB;QACAC;QACAQ;QACAP;QACAC;QACAC;QACAC;QACAC;IACF;IAEA,IAAIrB,QAAQC,EAAE,EAAE;QACd,oFAAoF;QACpF,OAAOJ,oBAAoC4B;IAC7C;IACA,oFAAoF;IACpF,OAAO7B,gBAAgC6B;AACzC;AAEA,SAAS3B,WAAW,GAAE"}