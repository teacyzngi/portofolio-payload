{"version":3,"sources":["../../../../src/collections/operations/local/find.ts"],"sourcesContent":["import type { PaginatedDocs } from '../../../database/types.js'\nimport type {\n  CollectionSlug,\n  JoinQuery,\n  Payload,\n  RequestContext,\n  TypedLocale,\n} from '../../../index.js'\nimport type {\n  Document,\n  PayloadRequest,\n  PopulateType,\n  SelectType,\n  Sort,\n  TransformCollectionWithSelect,\n  Where,\n} from '../../../types/index.js'\nimport type { CreateLocalReqOptions } from '../../../utilities/createLocalReq.js'\nimport type { SelectFromCollectionSlug } from '../../config/types.js'\n\nimport { APIError } from '../../../errors/index.js'\nimport { createLocalReq } from '../../../utilities/createLocalReq.js'\nimport { findOperation } from '../find.js'\n\nexport type Options<TSlug extends CollectionSlug, TSelect extends SelectType> = {\n  /**\n   * the Collection slug to operate against.\n   */\n  collection: TSlug\n  /**\n   * [Context](https://payloadcms.com/docs/hooks/context), which will then be passed to `context` and `req.context`,\n   * which can be read by hooks. Useful if you want to pass additional information to the hooks which\n   * shouldn't be necessarily part of the document, for example a `triggerBeforeChange` option which can be read by the BeforeChange hook\n   * to determine if it should run or not.\n   */\n  context?: RequestContext\n  /**\n   * The current population depth, used internally for relationships population.\n   * @internal\n   */\n  currentDepth?: number\n  /**\n   * [Control auto-population](https://payloadcms.com/docs/queries/depth) of nested relationship and upload fields.\n   */\n  depth?: number\n  /**\n   * When set to `true`, errors will not be thrown.\n   */\n  disableErrors?: boolean\n  /**\n   * Whether the documents should be queried from the versions table/collection or not. [More](https://payloadcms.com/docs/versions/drafts#draft-api)\n   */\n  draft?: boolean\n  /**\n   * Specify a [fallback locale](https://payloadcms.com/docs/configuration/localization) to use for any returned documents.\n   */\n  fallbackLocale?: false | TypedLocale | TypedLocale[]\n  /**\n   * Include info about the lock status to the result into all documents with fields: `_isLocked` and `_userEditing`\n   */\n  includeLockStatus?: boolean\n  /**\n   * The [Join Field Query](https://payloadcms.com/docs/fields/join#query-options).\n   * Pass `false` to disable all join fields from the result.\n   */\n  joins?: JoinQuery<TSlug>\n  /**\n   * The maximum related documents to be returned.\n   * Defaults unless `defaultLimit` is specified for the collection config\n   * @default 10\n   */\n  limit?: number\n  /**\n   * Specify [locale](https://payloadcms.com/docs/configuration/localization) for any returned documents.\n   */\n  locale?: 'all' | TypedLocale\n  /**\n   * Skip access control.\n   * Set to `false` if you want to respect Access Control for the operation, for example when fetching data for the front-end.\n   * @default true\n   */\n  overrideAccess?: boolean\n  /**\n   * Get a specific page number\n   * @default 1\n   */\n  page?: number\n  /**\n   * Set to `false` to return all documents and avoid querying for document counts which introduces some overhead.\n   * You can also combine that property with a specified `limit` to limit documents but avoid the count query.\n   */\n  pagination?: boolean\n  /**\n   * Specify [populate](https://payloadcms.com/docs/queries/select#populate) to control which fields to include to the result from populated documents.\n   */\n  populate?: PopulateType\n  /**\n   * The `PayloadRequest` object. You can pass it to thread the current [transaction](https://payloadcms.com/docs/database/transactions), user and locale to the operation.\n   * Recommended to pass when using the Local API from hooks, as usually you want to execute the operation within the current transaction.\n   */\n  req?: Partial<PayloadRequest>\n  /**\n   * Specify [select](https://payloadcms.com/docs/queries/select) to control which fields to include to the result.\n   */\n  select?: TSelect\n  /**\n   * Opt-in to receiving hidden fields. By default, they are hidden from returned documents in accordance to your config.\n   * @default false\n   */\n  showHiddenFields?: boolean\n  /**\n   * Sort the documents, can be a string or an array of strings\n   * @example '-createdAt' // Sort DESC by createdAt\n   * @example ['group', '-createdAt'] // sort by 2 fields, ASC group and DESC createdAt\n   */\n  sort?: Sort\n  /**\n   * When set to `true`, the query will include both normal and trashed documents.\n   * To query only trashed documents, pass `trash: true` and combine with a `where` clause filtering by `deletedAt`.\n   * By default (`false`), the query will only include normal documents and exclude those with a `deletedAt` field.\n   *\n   * This argument has no effect unless `trash` is enabled on the collection.\n   * @default false\n   */\n  trash?: boolean\n  /**\n   * If you set `overrideAccess` to `false`, you can pass a user to use against the access control checks.\n   */\n  user?: Document\n  /**\n   * A filter [query](https://payloadcms.com/docs/queries/overview)\n   */\n  where?: Where\n}\n\nexport async function findLocal<\n  TSlug extends CollectionSlug,\n  TSelect extends SelectFromCollectionSlug<TSlug>,\n>(\n  payload: Payload,\n  options: Options<TSlug, TSelect>,\n): Promise<PaginatedDocs<TransformCollectionWithSelect<TSlug, TSelect>>> {\n  const {\n    collection: collectionSlug,\n    currentDepth,\n    depth,\n    disableErrors,\n    draft = false,\n    includeLockStatus,\n    joins,\n    limit,\n    overrideAccess = true,\n    page,\n    pagination = true,\n    populate,\n    select,\n    showHiddenFields,\n    sort,\n    trash = false,\n    where,\n  } = options\n\n  const collection = payload.collections[collectionSlug]\n\n  if (!collection) {\n    throw new APIError(\n      `The collection with slug ${String(collectionSlug)} can't be found. Find Operation.`,\n    )\n  }\n\n  return findOperation<TSlug, TSelect>({\n    collection,\n    currentDepth,\n    depth,\n    disableErrors,\n    draft,\n    includeLockStatus,\n    joins,\n    limit,\n    overrideAccess,\n    page,\n    pagination,\n    populate,\n    req: await createLocalReq(options as CreateLocalReqOptions, payload),\n    select,\n    showHiddenFields,\n    sort,\n    trash,\n    where,\n  })\n}\n"],"names":["APIError","createLocalReq","findOperation","findLocal","payload","options","collection","collectionSlug","currentDepth","depth","disableErrors","draft","includeLockStatus","joins","limit","overrideAccess","page","pagination","populate","select","showHiddenFields","sort","trash","where","collections","String","req"],"mappings":"AAoBA,SAASA,QAAQ,QAAQ,2BAA0B;AACnD,SAASC,cAAc,QAAQ,uCAAsC;AACrE,SAASC,aAAa,QAAQ,aAAY;AAiH1C,OAAO,eAAeC,UAIpBC,OAAgB,EAChBC,OAAgC;IAEhC,MAAM,EACJC,YAAYC,cAAc,EAC1BC,YAAY,EACZC,KAAK,EACLC,aAAa,EACbC,QAAQ,KAAK,EACbC,iBAAiB,EACjBC,KAAK,EACLC,KAAK,EACLC,iBAAiB,IAAI,EACrBC,IAAI,EACJC,aAAa,IAAI,EACjBC,QAAQ,EACRC,MAAM,EACNC,gBAAgB,EAChBC,IAAI,EACJC,QAAQ,KAAK,EACbC,KAAK,EACN,GAAGlB;IAEJ,MAAMC,aAAaF,QAAQoB,WAAW,CAACjB,eAAe;IAEtD,IAAI,CAACD,YAAY;QACf,MAAM,IAAIN,SACR,CAAC,yBAAyB,EAAEyB,OAAOlB,gBAAgB,gCAAgC,CAAC;IAExF;IAEA,OAAOL,cAA8B;QACnCI;QACAE;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAQ,KAAK,MAAMzB,eAAeI,SAAkCD;QAC5De;QACAC;QACAC;QACAC;QACAC;IACF;AACF"}