{"version":3,"sources":["../../../src/collections/config/useAsTitle.spec.ts"],"sourcesContent":["import type { Config } from '../../config/types.js'\nimport type { CollectionConfig } from '../../index.js'\n\nimport { InvalidConfiguration } from '../../errors/InvalidConfiguration.js'\nimport { sanitizeCollection } from './sanitize.js'\n\ndescribe('sanitize - collections -', () => {\n  const config = {\n    collections: [],\n    globals: [],\n  } as Partial<Config>\n\n  describe('validate useAsTitle -', () => {\n    const defaultCollection: CollectionConfig = {\n      slug: 'collection-with-defaults',\n      fields: [\n        {\n          name: 'title',\n          type: 'text',\n        },\n      ],\n    }\n\n    it('should throw on invalid field', async () => {\n      const collectionConfig: CollectionConfig = {\n        ...defaultCollection,\n        admin: {\n          useAsTitle: 'invalidField',\n        },\n      }\n      await expect(async () => {\n        await sanitizeCollection(\n          // @ts-expect-error\n          {\n            ...config,\n            collections: [collectionConfig],\n          },\n          collectionConfig,\n        )\n      }).rejects.toThrow(InvalidConfiguration)\n    })\n\n    it('should not throw on valid field', async () => {\n      const collectionConfig: CollectionConfig = {\n        ...defaultCollection,\n        admin: {\n          useAsTitle: 'title',\n        },\n      }\n      await expect(async () => {\n        await sanitizeCollection(\n          // @ts-expect-error\n          {\n            ...config,\n            collections: [collectionConfig],\n          },\n          collectionConfig,\n        )\n      }).not.toThrow()\n    })\n\n    it('should not throw on valid field inside tabs', async () => {\n      const collectionConfig: CollectionConfig = {\n        ...defaultCollection,\n        admin: {\n          useAsTitle: 'title',\n        },\n        fields: [\n          {\n            type: 'tabs',\n            tabs: [\n              {\n                label: 'General',\n                fields: [\n                  {\n                    name: 'title',\n                    type: 'text',\n                  },\n                ],\n              },\n            ],\n          },\n        ],\n      }\n      await expect(async () => {\n        await sanitizeCollection(\n          // @ts-expect-error\n          {\n            ...config,\n            collections: [collectionConfig],\n          },\n          collectionConfig,\n        )\n      }).not.toThrow()\n    })\n\n    it('should not throw on valid field inside collapsibles', async () => {\n      const collectionConfig: CollectionConfig = {\n        ...defaultCollection,\n        admin: {\n          useAsTitle: 'title',\n        },\n        fields: [\n          {\n            type: 'collapsible',\n            label: 'Collapsible',\n            fields: [\n              {\n                name: 'title',\n                type: 'text',\n              },\n            ],\n          },\n        ],\n      }\n      await expect(async () => {\n        await sanitizeCollection(\n          // @ts-expect-error\n          {\n            ...config,\n            collections: [collectionConfig],\n          },\n          collectionConfig,\n        )\n      }).not.toThrow()\n    })\n\n    it('should throw on nested useAsTitle', async () => {\n      const collectionConfig: CollectionConfig = {\n        ...defaultCollection,\n        admin: {\n          useAsTitle: 'content.title',\n        },\n      }\n      await expect(async () => {\n        await sanitizeCollection(\n          // @ts-expect-error\n          {\n            ...config,\n            collections: [collectionConfig],\n          },\n          collectionConfig,\n        )\n      }).rejects.toThrow(InvalidConfiguration)\n    })\n\n    it('should not throw on default field: id', async () => {\n      const collectionConfig: CollectionConfig = {\n        ...defaultCollection,\n        admin: {\n          useAsTitle: 'id',\n        },\n      }\n      await expect(async () => {\n        await sanitizeCollection(\n          // @ts-expect-error\n          {\n            ...config,\n            collections: [collectionConfig],\n          },\n          collectionConfig,\n        )\n      }).not.toThrow()\n    })\n\n    it('should not throw on default field: email if auth is enabled', async () => {\n      const collectionConfig: CollectionConfig = {\n        ...defaultCollection,\n        auth: true,\n        admin: {\n          useAsTitle: 'email',\n        },\n      }\n      await expect(async () => {\n        await sanitizeCollection(\n          // @ts-expect-error\n          {\n            ...config,\n            collections: [collectionConfig],\n          },\n          collectionConfig,\n        )\n      }).not.toThrow()\n    })\n    it('should throw on default field: email if auth is not enabled', async () => {\n      const collectionConfig: CollectionConfig = {\n        ...defaultCollection,\n        admin: {\n          useAsTitle: 'email',\n        },\n      }\n      await expect(async () => {\n        await sanitizeCollection(\n          // @ts-expect-error\n          {\n            ...config,\n            collections: [collectionConfig],\n          },\n          collectionConfig,\n        )\n      }).rejects.toThrow(InvalidConfiguration)\n    })\n  })\n})\n"],"names":["InvalidConfiguration","sanitizeCollection","describe","config","collections","globals","defaultCollection","slug","fields","name","type","it","collectionConfig","admin","useAsTitle","expect","rejects","toThrow","not","tabs","label","auth"],"mappings":"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"}