{"version":3,"sources":["../../../src/collections/endpoints/duplicate.ts"],"sourcesContent":["import { getTranslation } from '@payloadcms/translations'\nimport { status as httpStatus } from 'http-status'\n\nimport type { PayloadHandler } from '../../config/types.js'\n\nimport { getRequestCollectionWithID } from '../../utilities/getRequestEntity.js'\nimport { headersWithCors } from '../../utilities/headersWithCors.js'\nimport { isNumber } from '../../utilities/isNumber.js'\nimport { sanitizePopulateParam } from '../../utilities/sanitizePopulateParam.js'\nimport { sanitizeSelectParam } from '../../utilities/sanitizeSelectParam.js'\nimport { duplicateOperation } from '../operations/duplicate.js'\n\nexport const duplicateHandler: PayloadHandler = async (req) => {\n  const { id, collection } = getRequestCollectionWithID(req)\n  const { searchParams } = req\n  const depth = searchParams.get('depth')\n  // draft defaults to true, unless explicitly set requested as false to prevent the newly duplicated document from being published\n  const draft = searchParams.get('draft') !== 'false'\n\n  const doc = await duplicateOperation({\n    id,\n    collection,\n    data: req.data,\n    depth: isNumber(depth) ? Number(depth) : undefined,\n    draft,\n    populate: sanitizePopulateParam(req.query.populate),\n    req,\n    select: sanitizeSelectParam(req.query.select),\n  })\n\n  const message = req.t('general:successfullyDuplicated', {\n    label: getTranslation(collection.config.labels.singular, req.i18n),\n  })\n\n  return Response.json(\n    {\n      doc,\n      message,\n    },\n    {\n      headers: headersWithCors({\n        headers: new Headers(),\n        req,\n      }),\n      status: httpStatus.OK,\n    },\n  )\n}\n"],"names":["getTranslation","status","httpStatus","getRequestCollectionWithID","headersWithCors","isNumber","sanitizePopulateParam","sanitizeSelectParam","duplicateOperation","duplicateHandler","req","id","collection","searchParams","depth","get","draft","doc","data","Number","undefined","populate","query","select","message","t","label","config","labels","singular","i18n","Response","json","headers","Headers","OK"],"mappings":"AAAA,SAASA,cAAc,QAAQ,2BAA0B;AACzD,SAASC,UAAUC,UAAU,QAAQ,cAAa;AAIlD,SAASC,0BAA0B,QAAQ,sCAAqC;AAChF,SAASC,eAAe,QAAQ,qCAAoC;AACpE,SAASC,QAAQ,QAAQ,8BAA6B;AACtD,SAASC,qBAAqB,QAAQ,2CAA0C;AAChF,SAASC,mBAAmB,QAAQ,yCAAwC;AAC5E,SAASC,kBAAkB,QAAQ,6BAA4B;AAE/D,OAAO,MAAMC,mBAAmC,OAAOC;IACrD,MAAM,EAAEC,EAAE,EAAEC,UAAU,EAAE,GAAGT,2BAA2BO;IACtD,MAAM,EAAEG,YAAY,EAAE,GAAGH;IACzB,MAAMI,QAAQD,aAAaE,GAAG,CAAC;IAC/B,iIAAiI;IACjI,MAAMC,QAAQH,aAAaE,GAAG,CAAC,aAAa;IAE5C,MAAME,MAAM,MAAMT,mBAAmB;QACnCG;QACAC;QACAM,MAAMR,IAAIQ,IAAI;QACdJ,OAAOT,SAASS,SAASK,OAAOL,SAASM;QACzCJ;QACAK,UAAUf,sBAAsBI,IAAIY,KAAK,CAACD,QAAQ;QAClDX;QACAa,QAAQhB,oBAAoBG,IAAIY,KAAK,CAACC,MAAM;IAC9C;IAEA,MAAMC,UAAUd,IAAIe,CAAC,CAAC,kCAAkC;QACtDC,OAAO1B,eAAeY,WAAWe,MAAM,CAACC,MAAM,CAACC,QAAQ,EAAEnB,IAAIoB,IAAI;IACnE;IAEA,OAAOC,SAASC,IAAI,CAClB;QACEf;QACAO;IACF,GACA;QACES,SAAS7B,gBAAgB;YACvB6B,SAAS,IAAIC;YACbxB;QACF;QACAT,QAAQC,WAAWiC,EAAE;IACvB;AAEJ,EAAC"}