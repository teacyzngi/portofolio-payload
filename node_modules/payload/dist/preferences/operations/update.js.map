{"version":3,"sources":["../../../src/preferences/operations/update.ts"],"sourcesContent":["import type { Where } from '../../types/index.js'\nimport type { PreferenceUpdateRequest } from '../types.js'\n\nimport { UnauthorizedError } from '../../errors/UnauthorizedError.js'\nimport { preferencesCollectionSlug } from '../config.js'\n\nexport async function update(args: PreferenceUpdateRequest) {\n  const {\n    key,\n    req: { payload },\n    req,\n    user,\n    value,\n  } = args\n\n  if (!user) {\n    throw new UnauthorizedError(req.t)\n  }\n\n  const where: Where = {\n    and: [\n      { key: { equals: key } },\n      { 'user.value': { equals: user.id } },\n      { 'user.relationTo': { equals: user.collection } },\n    ],\n  }\n\n  const preference = {\n    key,\n    user: {\n      relationTo: user.collection,\n      value: user.id,\n    },\n    value,\n  }\n\n  return await payload.db.upsert({\n    collection: preferencesCollectionSlug,\n    data: preference,\n    req,\n    where,\n  })\n}\n"],"names":["UnauthorizedError","preferencesCollectionSlug","update","args","key","req","payload","user","value","t","where","and","equals","id","collection","preference","relationTo","db","upsert","data"],"mappings":"AAGA,SAASA,iBAAiB,QAAQ,oCAAmC;AACrE,SAASC,yBAAyB,QAAQ,eAAc;AAExD,OAAO,eAAeC,OAAOC,IAA6B;IACxD,MAAM,EACJC,GAAG,EACHC,KAAK,EAAEC,OAAO,EAAE,EAChBD,GAAG,EACHE,IAAI,EACJC,KAAK,EACN,GAAGL;IAEJ,IAAI,CAACI,MAAM;QACT,MAAM,IAAIP,kBAAkBK,IAAII,CAAC;IACnC;IAEA,MAAMC,QAAe;QACnBC,KAAK;YACH;gBAAEP,KAAK;oBAAEQ,QAAQR;gBAAI;YAAE;YACvB;gBAAE,cAAc;oBAAEQ,QAAQL,KAAKM,EAAE;gBAAC;YAAE;YACpC;gBAAE,mBAAmB;oBAAED,QAAQL,KAAKO,UAAU;gBAAC;YAAE;SAClD;IACH;IAEA,MAAMC,aAAa;QACjBX;QACAG,MAAM;YACJS,YAAYT,KAAKO,UAAU;YAC3BN,OAAOD,KAAKM,EAAE;QAChB;QACAL;IACF;IAEA,OAAO,MAAMF,QAAQW,EAAE,CAACC,MAAM,CAAC;QAC7BJ,YAAYb;QACZkB,MAAMJ;QACNV;QACAK;IACF;AACF"}