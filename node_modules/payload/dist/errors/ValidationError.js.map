{"version":3,"sources":["../../src/errors/ValidationError.ts"],"sourcesContent":["import type { TFunction } from '@payloadcms/translations'\n\nimport { en } from '@payloadcms/translations/languages/en'\nimport { status as httpStatus } from 'http-status'\n\nimport type { LabelFunction, StaticLabel } from '../config/types.js'\nimport type { PayloadRequest } from '../types/index.js'\n\nimport { APIError } from './APIError.js'\n\n// This gets dynamically reassigned during compilation\nexport let ValidationErrorName = 'ValidationError'\n\nexport type ValidationFieldError = {\n  label?: LabelFunction | StaticLabel\n  // The error message to display for this field\n  message: string\n  path: string\n}\n\nexport class ValidationError extends APIError<{\n  collection?: string\n  errors: ValidationFieldError[]\n  global?: string\n}> {\n  constructor(\n    results: {\n      collection?: string\n      errors: ValidationFieldError[]\n      global?: string\n      id?: number | string\n      /**\n       *  req needs to be passed through (if you have one) in order to resolve label functions that may be part of the errors array\n       */\n      req?: Partial<PayloadRequest>\n    },\n    t?: TFunction,\n  ) {\n    const message = t\n      ? t('error:followingFieldsInvalid', { count: results.errors.length })\n      : results.errors.length === 1\n        ? en.translations.error.followingFieldsInvalid_one\n        : en.translations.error.followingFieldsInvalid_other\n\n    const req = results.req\n    // delete to avoid logging the whole req\n    delete results['req']\n\n    super(\n      `${message} ${results.errors\n        .map((f) => {\n          if (f.label) {\n            if (typeof f.label === 'function') {\n              if (!req || !req.i18n || !req.t) {\n                return f.path\n              }\n\n              return f.label({ i18n: req.i18n, t: req.t })\n            }\n\n            if (typeof f.label === 'object') {\n              if (req?.i18n?.language) {\n                return f.label[req.i18n.language]\n              }\n\n              return f.label[Object.keys(f.label)[0]!]\n            }\n\n            return f.label\n          }\n\n          return f.path\n        })\n        .join(', ')}`,\n      httpStatus.BAD_REQUEST,\n      results,\n    )\n\n    ValidationErrorName = this.constructor.name\n  }\n}\n"],"names":["en","status","httpStatus","APIError","ValidationErrorName","ValidationError","constructor","results","t","message","count","errors","length","translations","error","followingFieldsInvalid_one","followingFieldsInvalid_other","req","map","f","label","i18n","path","language","Object","keys","join","BAD_REQUEST","name"],"mappings":"AAEA,SAASA,EAAE,QAAQ,wCAAuC;AAC1D,SAASC,UAAUC,UAAU,QAAQ,cAAa;AAKlD,SAASC,QAAQ,QAAQ,gBAAe;AAExC,sDAAsD;AACtD,OAAO,IAAIC,sBAAsB,kBAAiB;AASlD,OAAO,MAAMC,wBAAwBF;IAKnCG,YACEC,OASC,EACDC,CAAa,CACb;QACA,MAAMC,UAAUD,IACZA,EAAE,gCAAgC;YAAEE,OAAOH,QAAQI,MAAM,CAACC,MAAM;QAAC,KACjEL,QAAQI,MAAM,CAACC,MAAM,KAAK,IACxBZ,GAAGa,YAAY,CAACC,KAAK,CAACC,0BAA0B,GAChDf,GAAGa,YAAY,CAACC,KAAK,CAACE,4BAA4B;QAExD,MAAMC,MAAMV,QAAQU,GAAG;QACvB,wCAAwC;QACxC,OAAOV,OAAO,CAAC,MAAM;QAErB,KAAK,CACH,GAAGE,QAAQ,CAAC,EAAEF,QAAQI,MAAM,CACzBO,GAAG,CAAC,CAACC;YACJ,IAAIA,EAAEC,KAAK,EAAE;gBACX,IAAI,OAAOD,EAAEC,KAAK,KAAK,YAAY;oBACjC,IAAI,CAACH,OAAO,CAACA,IAAII,IAAI,IAAI,CAACJ,IAAIT,CAAC,EAAE;wBAC/B,OAAOW,EAAEG,IAAI;oBACf;oBAEA,OAAOH,EAAEC,KAAK,CAAC;wBAAEC,MAAMJ,IAAII,IAAI;wBAAEb,GAAGS,IAAIT,CAAC;oBAAC;gBAC5C;gBAEA,IAAI,OAAOW,EAAEC,KAAK,KAAK,UAAU;oBAC/B,IAAIH,KAAKI,MAAME,UAAU;wBACvB,OAAOJ,EAAEC,KAAK,CAACH,IAAII,IAAI,CAACE,QAAQ,CAAC;oBACnC;oBAEA,OAAOJ,EAAEC,KAAK,CAACI,OAAOC,IAAI,CAACN,EAAEC,KAAK,CAAC,CAAC,EAAE,CAAE;gBAC1C;gBAEA,OAAOD,EAAEC,KAAK;YAChB;YAEA,OAAOD,EAAEG,IAAI;QACf,GACCI,IAAI,CAAC,OAAO,EACfxB,WAAWyB,WAAW,EACtBpB;QAGFH,sBAAsB,IAAI,CAACE,WAAW,CAACsB,IAAI;IAC7C;AACF"}