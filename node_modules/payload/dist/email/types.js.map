{"version":3,"sources":["../../src/email/types.ts"],"sourcesContent":["import type { SendMailOptions as NodemailerSendMailOptions } from 'nodemailer'\n\nimport type { Payload } from '../types/index.js'\n\ntype Prettify<T> = {\n  [K in keyof T]: T[K]\n} & NonNullable<unknown>\n\n/**\n * Options for sending an email. Allows access to the PayloadRequest object\n */\nexport type SendEmailOptions = Prettify<NodemailerSendMailOptions>\n\n/**\n * Email adapter after it has been initialized. This is used internally by Payload.\n */\nexport type InitializedEmailAdapter<TSendEmailResponse = unknown> = ReturnType<\n  EmailAdapter<TSendEmailResponse>\n>\n\n/**\n * Email adapter interface. Allows a generic type for the response of the sendEmail method.\n *\n * This is the interface to use if you are creating a new email adapter.\n */\n\nexport type EmailAdapter<TSendEmailResponse = unknown> = ({ payload }: { payload: Payload }) => {\n  defaultFromAddress: string\n  defaultFromName: string\n  name: string\n  sendEmail: (message: SendEmailOptions) => Promise<TSendEmailResponse>\n}\n"],"names":[],"mappings":"AAoBA;;;;CAIC,GAED,WAKC"}